
TiltSensorF3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005f80  08005f80  00015f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d0  080061d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080061d0  080061d0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061d0  080061d0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080061d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000080  08006254  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08006254  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cee  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e60  00000000  00000000  00035d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000cd6c  00000000  00000000  00038bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00045968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e40  00000000  00000000  00046870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c1f6  00000000  00000000  000476b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e10  00000000  00000000  000638a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a52c6  00000000  00000000  0007a6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011f97c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cbc  00000000  00000000  0011f9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f68 	.word	0x08005f68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08005f68 	.word	0x08005f68

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <CalcullateTilts>:
float KGyro = 0.998, KAcc;
float AccXFlPrev, AccYFlPrev, AccZFlPrev;
float TiltX, TiltY, TiltXPrev, TiltYPrev;
_Bool Starting = 1;

void CalcullateTilts(void) {
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	ed2d 8b08 	vpush	{d8-d11}

	float RotX = GyroXfl * TICK_PERIOD;
 8000b96:	4bc0      	ldr	r3, [pc, #768]	; (8000e98 <CalcullateTilts+0x308>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	f7ff fc79 	bl	8000490 <__aeabi_f2d>
 8000b9e:	a3b8      	add	r3, pc, #736	; (adr r3, 8000e80 <CalcullateTilts+0x2f0>)
 8000ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba4:	f7ff fccc 	bl	8000540 <__aeabi_dmul>
 8000ba8:	f7ff ffa2 	bl	8000af0 <__aeabi_d2f>
 8000bac:	4605      	mov	r5, r0
	float RotY = GyroYfl * TICK_PERIOD;
 8000bae:	4bbb      	ldr	r3, [pc, #748]	; (8000e9c <CalcullateTilts+0x30c>)
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	f7ff fc6d 	bl	8000490 <__aeabi_f2d>
 8000bb6:	a3b2      	add	r3, pc, #712	; (adr r3, 8000e80 <CalcullateTilts+0x2f0>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fcc0 	bl	8000540 <__aeabi_dmul>
 8000bc0:	f7ff ff96 	bl	8000af0 <__aeabi_d2f>
 8000bc4:	4606      	mov	r6, r0
	float RotZ = GyroZfl * TICK_PERIOD;
 8000bc6:	4bb6      	ldr	r3, [pc, #728]	; (8000ea0 <CalcullateTilts+0x310>)
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f7ff fc61 	bl	8000490 <__aeabi_f2d>
 8000bce:	a3ac      	add	r3, pc, #688	; (adr r3, 8000e80 <CalcullateTilts+0x2f0>)
 8000bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd4:	f7ff fcb4 	bl	8000540 <__aeabi_dmul>
 8000bd8:	f7ff ff8a 	bl	8000af0 <__aeabi_d2f>
 8000bdc:	4604      	mov	r4, r0

	float Alf = RotX * 8.75 / 57296, Bt = RotY * 8.75 / 57296, Gm = RotZ * 8.75
 8000bde:	4628      	mov	r0, r5
 8000be0:	f7ff fc56 	bl	8000490 <__aeabi_f2d>
 8000be4:	2200      	movs	r2, #0
 8000be6:	4baf      	ldr	r3, [pc, #700]	; (8000ea4 <CalcullateTilts+0x314>)
 8000be8:	f7ff fcaa 	bl	8000540 <__aeabi_dmul>
 8000bec:	a3a6      	add	r3, pc, #664	; (adr r3, 8000e88 <CalcullateTilts+0x2f8>)
 8000bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf2:	f7ff fdcf 	bl	8000794 <__aeabi_ddiv>
 8000bf6:	f7ff ff7b 	bl	8000af0 <__aeabi_d2f>
 8000bfa:	4605      	mov	r5, r0
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f7ff fc47 	bl	8000490 <__aeabi_f2d>
 8000c02:	2200      	movs	r2, #0
 8000c04:	4ba7      	ldr	r3, [pc, #668]	; (8000ea4 <CalcullateTilts+0x314>)
 8000c06:	f7ff fc9b 	bl	8000540 <__aeabi_dmul>
 8000c0a:	a39f      	add	r3, pc, #636	; (adr r3, 8000e88 <CalcullateTilts+0x2f8>)
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	f7ff fdc0 	bl	8000794 <__aeabi_ddiv>
 8000c14:	f7ff ff6c 	bl	8000af0 <__aeabi_d2f>
 8000c18:	4606      	mov	r6, r0
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff fc38 	bl	8000490 <__aeabi_f2d>
 8000c20:	2200      	movs	r2, #0
 8000c22:	4ba0      	ldr	r3, [pc, #640]	; (8000ea4 <CalcullateTilts+0x314>)
 8000c24:	f7ff fc8c 	bl	8000540 <__aeabi_dmul>
			/ 57296;
 8000c28:	a397      	add	r3, pc, #604	; (adr r3, 8000e88 <CalcullateTilts+0x2f8>)
 8000c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2e:	f7ff fdb1 	bl	8000794 <__aeabi_ddiv>
	float Alf = RotX * 8.75 / 57296, Bt = RotY * 8.75 / 57296, Gm = RotZ * 8.75
 8000c32:	f7ff ff5d 	bl	8000af0 <__aeabi_d2f>
 8000c36:	4604      	mov	r4, r0
	float SinBt = sin(Bt);
 8000c38:	4630      	mov	r0, r6
 8000c3a:	f7ff fc29 	bl	8000490 <__aeabi_f2d>
 8000c3e:	ec41 0b18 	vmov	d8, r0, r1
 8000c42:	ec41 0b10 	vmov	d0, r0, r1
 8000c46:	f004 f84f 	bl	8004ce8 <sin>
 8000c4a:	ec51 0b10 	vmov	r0, r1, d0
 8000c4e:	f7ff ff4f 	bl	8000af0 <__aeabi_d2f>
 8000c52:	ee0a 0a10 	vmov	s20, r0
	float CosBt = cos(Bt);
 8000c56:	eeb0 0a48 	vmov.f32	s0, s16
 8000c5a:	eef0 0a68 	vmov.f32	s1, s17
 8000c5e:	f003 ffe7 	bl	8004c30 <cos>
 8000c62:	ec51 0b10 	vmov	r0, r1, d0
 8000c66:	f7ff ff43 	bl	8000af0 <__aeabi_d2f>
 8000c6a:	ee08 0a90 	vmov	s17, r0
	float SinAlf = sin(Alf);
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f7ff fc0e 	bl	8000490 <__aeabi_f2d>
 8000c74:	ec41 0b19 	vmov	d9, r0, r1
 8000c78:	ec41 0b10 	vmov	d0, r0, r1
 8000c7c:	f004 f834 	bl	8004ce8 <sin>
 8000c80:	ec51 0b10 	vmov	r0, r1, d0
 8000c84:	f7ff ff34 	bl	8000af0 <__aeabi_d2f>
 8000c88:	ee0a 0a90 	vmov	s21, r0
	float CosAlf = cos(Alf);
 8000c8c:	eeb0 0a49 	vmov.f32	s0, s18
 8000c90:	eef0 0a69 	vmov.f32	s1, s19
 8000c94:	f003 ffcc 	bl	8004c30 <cos>
 8000c98:	ec51 0b10 	vmov	r0, r1, d0
 8000c9c:	f7ff ff28 	bl	8000af0 <__aeabi_d2f>
 8000ca0:	ee09 0a10 	vmov	s18, r0
	float SinGm = sin(Gm);
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f7ff fbf3 	bl	8000490 <__aeabi_f2d>
 8000caa:	ec41 0b1b 	vmov	d11, r0, r1
 8000cae:	ec41 0b10 	vmov	d0, r0, r1
 8000cb2:	f004 f819 	bl	8004ce8 <sin>
 8000cb6:	ec51 0b10 	vmov	r0, r1, d0
 8000cba:	f7ff ff19 	bl	8000af0 <__aeabi_d2f>
 8000cbe:	ee09 0a90 	vmov	s19, r0
	float CosGm = cos(Gm);
 8000cc2:	eeb0 0a4b 	vmov.f32	s0, s22
 8000cc6:	eef0 0a6b 	vmov.f32	s1, s23
 8000cca:	f003 ffb1 	bl	8004c30 <cos>
 8000cce:	ec51 0b10 	vmov	r0, r1, d0
 8000cd2:	f7ff ff0d 	bl	8000af0 <__aeabi_d2f>

	KAcc = 1 - KGyro;
 8000cd6:	4b74      	ldr	r3, [pc, #464]	; (8000ea8 <CalcullateTilts+0x318>)
 8000cd8:	edd3 6a00 	vldr	s13, [r3]
 8000cdc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ce0:	ee36 6a66 	vsub.f32	s12, s12, s13
 8000ce4:	4b71      	ldr	r3, [pc, #452]	; (8000eac <CalcullateTilts+0x31c>)
 8000ce6:	ed83 6a00 	vstr	s12, [r3]

	if (!Starting) {
 8000cea:	4b71      	ldr	r3, [pc, #452]	; (8000eb0 <CalcullateTilts+0x320>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 8139 	bne.w	8000f66 <CalcullateTilts+0x3d6>
 8000cf4:	ee05 0a90 	vmov	s11, r0

		XNew = (AccXFlPrev * CosBt * CosGm - AccYFlPrev * CosBt * SinGm
 8000cf8:	4b6e      	ldr	r3, [pc, #440]	; (8000eb4 <CalcullateTilts+0x324>)
 8000cfa:	ed93 7a00 	vldr	s14, [r3]
 8000cfe:	ee27 8a28 	vmul.f32	s16, s14, s17
 8000d02:	ee28 8a25 	vmul.f32	s16, s16, s11
 8000d06:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <CalcullateTilts+0x328>)
 8000d08:	ed93 5a00 	vldr	s10, [r3]
 8000d0c:	ee65 7a28 	vmul.f32	s15, s10, s17
 8000d10:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8000d14:	ee38 8a67 	vsub.f32	s16, s16, s15
				+ AccZFlPrev * SinBt) * KGyro + KAcc * AccXfl;
 8000d18:	4b68      	ldr	r3, [pc, #416]	; (8000ebc <CalcullateTilts+0x32c>)
 8000d1a:	edd3 4a00 	vldr	s9, [r3]
 8000d1e:	ee64 7a8a 	vmul.f32	s15, s9, s20
 8000d22:	ee38 8a27 	vadd.f32	s16, s16, s15
 8000d26:	ee26 8a88 	vmul.f32	s16, s13, s16
 8000d2a:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <CalcullateTilts+0x330>)
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d34:	ee38 8a27 	vadd.f32	s16, s16, s15
		XNew = (AccXFlPrev * CosBt * CosGm - AccYFlPrev * CosBt * SinGm
 8000d38:	4b62      	ldr	r3, [pc, #392]	; (8000ec4 <CalcullateTilts+0x334>)
 8000d3a:	ed83 8a00 	vstr	s16, [r3]
		YNew = (AccXFlPrev * SinAlf * SinBt * CosGm
 8000d3e:	ee67 3a2a 	vmul.f32	s7, s14, s21
 8000d42:	ee63 7a8a 	vmul.f32	s15, s7, s20
 8000d46:	ee67 7aa5 	vmul.f32	s15, s15, s11
				+ AccXFlPrev * CosAlf * SinGm
 8000d4a:	ee27 4a09 	vmul.f32	s8, s14, s18
 8000d4e:	ee24 4a29 	vmul.f32	s8, s8, s19
 8000d52:	ee77 7a84 	vadd.f32	s15, s15, s8
				+ AccYFlPrev * SinAlf * SinBt * SinGm
 8000d56:	ee25 4a2a 	vmul.f32	s8, s10, s21
 8000d5a:	ee24 3a0a 	vmul.f32	s6, s8, s20
 8000d5e:	ee23 3a29 	vmul.f32	s6, s6, s19
 8000d62:	ee77 7a83 	vadd.f32	s15, s15, s6
				+ AccYFlPrev * CosAlf * CosGm - AccZFlPrev * SinAlf * CosBt)
 8000d66:	ee25 5a09 	vmul.f32	s10, s10, s18
 8000d6a:	ee25 3a25 	vmul.f32	s6, s10, s11
 8000d6e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8000d72:	ee64 aaaa 	vmul.f32	s21, s9, s21
 8000d76:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8000d7a:	ee77 7aea 	vsub.f32	s15, s15, s21
				* KGyro + KAcc * AccYfl;
 8000d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d82:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <CalcullateTilts+0x338>)
 8000d84:	ed93 3a00 	vldr	s6, [r3]
 8000d88:	ee26 3a03 	vmul.f32	s6, s12, s6
 8000d8c:	ee77 7a83 	vadd.f32	s15, s15, s6
		YNew = (AccXFlPrev * SinAlf * SinBt * CosGm
 8000d90:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <CalcullateTilts+0x33c>)
 8000d92:	edc3 7a00 	vstr	s15, [r3]
		ZNew = (-AccXFlPrev * CosAlf * SinBt * CosGm
 8000d96:	ee27 7a49 	vnmul.f32	s14, s14, s18
 8000d9a:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8000d9e:	ee27 7a25 	vmul.f32	s14, s14, s11
				+ AccXFlPrev * SinAlf * SinGm
 8000da2:	ee63 3aa9 	vmul.f32	s7, s7, s19
 8000da6:	ee37 7a23 	vadd.f32	s14, s14, s7
				+ AccYFlPrev * CosAlf * SinBt * SinGm
 8000daa:	ee25 5a0a 	vmul.f32	s10, s10, s20
 8000dae:	ee65 9a29 	vmul.f32	s19, s10, s19
 8000db2:	ee37 7a29 	vadd.f32	s14, s14, s19
				+ AccYFlPrev * SinAlf * CosGm + AccZFlPrev * CosAlf * CosBt)
 8000db6:	ee64 5a25 	vmul.f32	s11, s8, s11
 8000dba:	ee37 7a25 	vadd.f32	s14, s14, s11
 8000dbe:	ee24 9a89 	vmul.f32	s18, s9, s18
 8000dc2:	ee69 8a28 	vmul.f32	s17, s18, s17
 8000dc6:	ee37 7a28 	vadd.f32	s14, s14, s17
				* KGyro + KAcc * AccZfl;
 8000dca:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000dce:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <CalcullateTilts+0x340>)
 8000dd0:	edd3 6a00 	vldr	s13, [r3]
 8000dd4:	ee26 6a26 	vmul.f32	s12, s12, s13
 8000dd8:	ee37 7a06 	vadd.f32	s14, s14, s12
		ZNew = (-AccXFlPrev * CosAlf * SinBt * CosGm
 8000ddc:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <CalcullateTilts+0x344>)
 8000dde:	ed83 7a00 	vstr	s14, [r3]

		if ((YNew == 0) && (ZNew == 0))
 8000de2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dea:	d109      	bne.n	8000e00 <CalcullateTilts+0x270>
 8000dec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	d104      	bne.n	8000e00 <CalcullateTilts+0x270>
			TiltX = TiltXPrev;
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <CalcullateTilts+0x348>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b38      	ldr	r3, [pc, #224]	; (8000edc <CalcullateTilts+0x34c>)
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e026      	b.n	8000e4e <CalcullateTilts+0x2be>
		else
			TiltX = atan(XNew / (sqrt(YNew * YNew + ZNew * ZNew))) * 57.296;
 8000e00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e04:	ee27 7a07 	vmul.f32	s14, s14, s14
 8000e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e0c:	ee17 0a90 	vmov	r0, s15
 8000e10:	f7ff fb3e 	bl	8000490 <__aeabi_f2d>
 8000e14:	ec41 0b10 	vmov	d0, r0, r1
 8000e18:	f003 ffba 	bl	8004d90 <sqrt>
 8000e1c:	ec55 4b10 	vmov	r4, r5, d0
 8000e20:	ee18 0a10 	vmov	r0, s16
 8000e24:	f7ff fb34 	bl	8000490 <__aeabi_f2d>
 8000e28:	4622      	mov	r2, r4
 8000e2a:	462b      	mov	r3, r5
 8000e2c:	f7ff fcb2 	bl	8000794 <__aeabi_ddiv>
 8000e30:	ec41 0b10 	vmov	d0, r0, r1
 8000e34:	f003 fd5c 	bl	80048f0 <atan>
 8000e38:	ec51 0b10 	vmov	r0, r1, d0
 8000e3c:	a314      	add	r3, pc, #80	; (adr r3, 8000e90 <CalcullateTilts+0x300>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f7ff fb7d 	bl	8000540 <__aeabi_dmul>
 8000e46:	f7ff fe53 	bl	8000af0 <__aeabi_d2f>
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <CalcullateTilts+0x34c>)
 8000e4c:	6018      	str	r0, [r3, #0]
		TiltXPrev = TiltX;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <CalcullateTilts+0x34c>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <CalcullateTilts+0x348>)
 8000e54:	601a      	str	r2, [r3, #0]

		if ((XNew == 0) && (ZNew == 0))
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <CalcullateTilts+0x334>)
 8000e58:	ed93 8a00 	vldr	s16, [r3]
 8000e5c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8000e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e64:	d140      	bne.n	8000ee8 <CalcullateTilts+0x358>
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <CalcullateTilts+0x344>)
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e74:	d138      	bne.n	8000ee8 <CalcullateTilts+0x358>
			TiltY = TiltYPrev;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <CalcullateTilts+0x350>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <CalcullateTilts+0x354>)
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e05f      	b.n	8000f40 <CalcullateTilts+0x3b0>
 8000e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e84:	3f70624d 	.word	0x3f70624d
 8000e88:	00000000 	.word	0x00000000
 8000e8c:	40ebfa00 	.word	0x40ebfa00
 8000e90:	53f7ced9 	.word	0x53f7ced9
 8000e94:	404ca5e3 	.word	0x404ca5e3
 8000e98:	200002c4 	.word	0x200002c4
 8000e9c:	200003d8 	.word	0x200003d8
 8000ea0:	20000420 	.word	0x20000420
 8000ea4:	40218000 	.word	0x40218000
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	200000c4 	.word	0x200000c4
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	200000a4 	.word	0x200000a4
 8000eb8:	200000c0 	.word	0x200000c0
 8000ebc:	200000b4 	.word	0x200000b4
 8000ec0:	200000e4 	.word	0x200000e4
 8000ec4:	2000009c 	.word	0x2000009c
 8000ec8:	200000d8 	.word	0x200000d8
 8000ecc:	200000bc 	.word	0x200000bc
 8000ed0:	2000011c 	.word	0x2000011c
 8000ed4:	200000a0 	.word	0x200000a0
 8000ed8:	200000b0 	.word	0x200000b0
 8000edc:	200000a8 	.word	0x200000a8
 8000ee0:	200000ac 	.word	0x200000ac
 8000ee4:	200000b8 	.word	0x200000b8
		else
			TiltY = atan(YNew / (sqrt(XNew * XNew + ZNew * ZNew))) * 57.296;
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <CalcullateTilts+0x400>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f7ff fad0 	bl	8000490 <__aeabi_f2d>
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	460d      	mov	r5, r1
 8000ef4:	ee28 8a08 	vmul.f32	s16, s16, s16
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <CalcullateTilts+0x404>)
 8000efa:	edd3 7a00 	vldr	s15, [r3]
 8000efe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f02:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f06:	ee17 0a90 	vmov	r0, s15
 8000f0a:	f7ff fac1 	bl	8000490 <__aeabi_f2d>
 8000f0e:	ec41 0b10 	vmov	d0, r0, r1
 8000f12:	f003 ff3d 	bl	8004d90 <sqrt>
 8000f16:	ec53 2b10 	vmov	r2, r3, d0
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	f7ff fc39 	bl	8000794 <__aeabi_ddiv>
 8000f22:	ec41 0b10 	vmov	d0, r0, r1
 8000f26:	f003 fce3 	bl	80048f0 <atan>
 8000f2a:	ec51 0b10 	vmov	r0, r1, d0
 8000f2e:	a316      	add	r3, pc, #88	; (adr r3, 8000f88 <CalcullateTilts+0x3f8>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fb04 	bl	8000540 <__aeabi_dmul>
 8000f38:	f7ff fdda 	bl	8000af0 <__aeabi_d2f>
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <CalcullateTilts+0x408>)
 8000f3e:	6018      	str	r0, [r3, #0]
		TiltYPrev = TiltY;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <CalcullateTilts+0x408>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <CalcullateTilts+0x40c>)
 8000f46:	601a      	str	r2, [r3, #0]

		AccXFlPrev = XNew;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <CalcullateTilts+0x410>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <CalcullateTilts+0x414>)
 8000f4e:	601a      	str	r2, [r3, #0]
		AccYFlPrev = YNew;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <CalcullateTilts+0x400>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <CalcullateTilts+0x418>)
 8000f56:	601a      	str	r2, [r3, #0]
		AccZFlPrev = ZNew;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <CalcullateTilts+0x404>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <CalcullateTilts+0x41c>)
 8000f5e:	601a      	str	r2, [r3, #0]





}
 8000f60:	ecbd 8b08 	vpop	{d8-d11}
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
		AccXFlPrev = AccXfl;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <CalcullateTilts+0x420>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <CalcullateTilts+0x414>)
 8000f6c:	601a      	str	r2, [r3, #0]
		AccYFlPrev = AccYfl;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <CalcullateTilts+0x424>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <CalcullateTilts+0x418>)
 8000f74:	601a      	str	r2, [r3, #0]
		AccZFlPrev = AccZfl;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <CalcullateTilts+0x428>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <CalcullateTilts+0x41c>)
 8000f7c:	601a      	str	r2, [r3, #0]
		Starting=0;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <CalcullateTilts+0x42c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
}
 8000f84:	e7ec      	b.n	8000f60 <CalcullateTilts+0x3d0>
 8000f86:	bf00      	nop
 8000f88:	53f7ced9 	.word	0x53f7ced9
 8000f8c:	404ca5e3 	.word	0x404ca5e3
 8000f90:	200000bc 	.word	0x200000bc
 8000f94:	200000a0 	.word	0x200000a0
 8000f98:	200000b8 	.word	0x200000b8
 8000f9c:	200000ac 	.word	0x200000ac
 8000fa0:	2000009c 	.word	0x2000009c
 8000fa4:	200000a4 	.word	0x200000a4
 8000fa8:	200000c0 	.word	0x200000c0
 8000fac:	200000b4 	.word	0x200000b4
 8000fb0:	200000e4 	.word	0x200000e4
 8000fb4:	200000d8 	.word	0x200000d8
 8000fb8:	2000011c 	.word	0x2000011c
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fc4:	4905      	ldr	r1, [pc, #20]	; (8000fdc <__NVIC_SystemReset+0x1c>)
 8000fc6:	68ca      	ldr	r2, [r1, #12]
 8000fc8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_SystemReset+0x20>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60cb      	str	r3, [r1, #12]
 8000fd2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fd6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000fd8:	e7fd      	b.n	8000fd6 <__NVIC_SystemReset+0x16>
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00
 8000fe0:	05fa0004 	.word	0x05fa0004

08000fe4 <CANFilters>:
void TrmCAN(CAN_HandleTypeDef *hcan);
void ProcessCANReceivedPacket(CAN_HandleTypeDef *hcan);

uint8_t j;

void CANFilters(CAN_HandleTypeDef *hcan) {
 8000fe4:	b530      	push	{r4, r5, lr}
 8000fe6:	b08b      	sub	sp, #44	; 0x2c
 8000fe8:	4604      	mov	r4, r0
	CAN_FilterTypeDef canFilterConfig;

	canFilterConfig.FilterBank = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	9305      	str	r3, [sp, #20]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000fee:	2501      	movs	r5, #1
 8000ff0:	9506      	str	r5, [sp, #24]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ff2:	9507      	str	r5, [sp, #28]
	canFilterConfig.FilterIdHigh = (ThisAddr + 0x100) << 5;
 8000ff4:	4a10      	ldr	r2, [pc, #64]	; (8001038 <CANFilters+0x54>)
 8000ff6:	8812      	ldrh	r2, [r2, #0]
 8000ff8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000ffc:	0152      	lsls	r2, r2, #5
 8000ffe:	9200      	str	r2, [sp, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 8001000:	9301      	str	r3, [sp, #4]
	canFilterConfig.FilterMaskIdHigh = 0x0000;
 8001002:	9302      	str	r3, [sp, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 8001004:	9303      	str	r3, [sp, #12]
	canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001006:	9304      	str	r3, [sp, #16]
	canFilterConfig.FilterActivation = ENABLE;
 8001008:	9508      	str	r5, [sp, #32]
	canFilterConfig.SlaveStartFilterBank = 14;
 800100a:	230e      	movs	r3, #14
 800100c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 800100e:	4669      	mov	r1, sp
 8001010:	f001 f89c 	bl	800214c <HAL_CAN_ConfigFilter>

	canFilterConfig.FilterBank = 1;
 8001014:	9505      	str	r5, [sp, #20]
	canFilterConfig.FilterIdHigh = (SET_ADDR_CAN) << 5;
 8001016:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 800101a:	9300      	str	r3, [sp, #0]
	HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 800101c:	4669      	mov	r1, sp
 800101e:	4620      	mov	r0, r4
 8001020:	f001 f894 	bl	800214c <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(hcan);
 8001024:	4620      	mov	r0, r4
 8001026:	f001 f910 	bl	800224a <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800102a:	2102      	movs	r1, #2
 800102c:	4620      	mov	r0, r4
 800102e:	f001 fa69 	bl	8002504 <HAL_CAN_ActivateNotification>

}
 8001032:	b00b      	add	sp, #44	; 0x2c
 8001034:	bd30      	pop	{r4, r5, pc}
 8001036:	bf00      	nop
 8001038:	200001f8 	.word	0x200001f8

0800103c <TrmCAN>:

void TrmCAN(CAN_HandleTypeDef *hcan) {
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	4605      	mov	r5, r0
	uint32_t N;
	CAN_TxHeaderTypeDef msgHeader;
	uint8_t msgData[8];

	N = HAL_CAN_GetTxMailboxesFreeLevel(hcan);
 8001042:	f001 f9a6 	bl	8002392 <HAL_CAN_GetTxMailboxesFreeLevel>
	if (N > 1) {
 8001046:	2801      	cmp	r0, #1
 8001048:	d801      	bhi.n	800104e <TrmCAN+0x12>

		asm("Nop");

	}

}
 800104a:	b00a      	add	sp, #40	; 0x28
 800104c:	bd70      	pop	{r4, r5, r6, pc}
		msgHeader.StdId = ThisAddr;
 800104e:	4e23      	ldr	r6, [pc, #140]	; (80010dc <TrmCAN+0xa0>)
 8001050:	8833      	ldrh	r3, [r6, #0]
 8001052:	9304      	str	r3, [sp, #16]
		msgHeader.DLC = 8;
 8001054:	2308      	movs	r3, #8
 8001056:	9308      	str	r3, [sp, #32]
		msgHeader.TransmitGlobalTime = DISABLE;
 8001058:	2400      	movs	r4, #0
 800105a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
		msgHeader.RTR = CAN_RTR_DATA;
 800105e:	9407      	str	r4, [sp, #28]
		msgHeader.IDE = CAN_ID_STD;
 8001060:	9406      	str	r4, [sp, #24]
		uint32_t mailBoxNum = 0;
 8001062:	9401      	str	r4, [sp, #4]
		*(float*) msgData = TiltX;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <TrmCAN+0xa4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	9302      	str	r3, [sp, #8]
		*(float*) &msgData[4] = TiltY;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <TrmCAN+0xa8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	9303      	str	r3, [sp, #12]
		HAL_CAN_AddTxMessage(hcan, &msgHeader, msgData, &mailBoxNum);
 8001070:	ab01      	add	r3, sp, #4
 8001072:	aa02      	add	r2, sp, #8
 8001074:	a904      	add	r1, sp, #16
 8001076:	4628      	mov	r0, r5
 8001078:	f001 f915 	bl	80022a6 <HAL_CAN_AddTxMessage>
		N = HAL_CAN_GetTxMailboxesFreeLevel(hcan);
 800107c:	4628      	mov	r0, r5
 800107e:	f001 f988 	bl	8002392 <HAL_CAN_GetTxMailboxesFreeLevel>
		msgHeader.StdId = ThisAddr + 1;
 8001082:	8833      	ldrh	r3, [r6, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	9304      	str	r3, [sp, #16]
		for (uint8_t i = 0; i < 8; i++) {
 8001088:	4623      	mov	r3, r4
 800108a:	e009      	b.n	80010a0 <TrmCAN+0x64>
			msgData[i] = j++;
 800108c:	4916      	ldr	r1, [pc, #88]	; (80010e8 <TrmCAN+0xac>)
 800108e:	780a      	ldrb	r2, [r1, #0]
 8001090:	1c54      	adds	r4, r2, #1
 8001092:	700c      	strb	r4, [r1, #0]
 8001094:	a90a      	add	r1, sp, #40	; 0x28
 8001096:	4419      	add	r1, r3
 8001098:	f801 2c20 	strb.w	r2, [r1, #-32]
		for (uint8_t i = 0; i < 8; i++) {
 800109c:	3301      	adds	r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d9f3      	bls.n	800108c <TrmCAN+0x50>
		*(float*) msgData = GyroYfl;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <TrmCAN+0xb0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	9302      	str	r3, [sp, #8]
		*(uint16_t*) &msgData[4] = (uint16_t)(KGyro*1000);
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <TrmCAN+0xb4>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010f4 <TrmCAN+0xb8>
 80010b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010bc:	ee17 3a90 	vmov	r3, s15
 80010c0:	f8ad 300c 	strh.w	r3, [sp, #12]
		HAL_CAN_AddTxMessage(hcan, &msgHeader, msgData, &mailBoxNum);
 80010c4:	ab01      	add	r3, sp, #4
 80010c6:	aa02      	add	r2, sp, #8
 80010c8:	a904      	add	r1, sp, #16
 80010ca:	4628      	mov	r0, r5
 80010cc:	f001 f8eb 	bl	80022a6 <HAL_CAN_AddTxMessage>
		N = HAL_CAN_GetTxMailboxesFreeLevel(hcan);
 80010d0:	4628      	mov	r0, r5
 80010d2:	f001 f95e 	bl	8002392 <HAL_CAN_GetTxMailboxesFreeLevel>
		asm("Nop");
 80010d6:	bf00      	nop
}
 80010d8:	e7b7      	b.n	800104a <TrmCAN+0xe>
 80010da:	bf00      	nop
 80010dc:	200001f8 	.word	0x200001f8
 80010e0:	200000a8 	.word	0x200000a8
 80010e4:	200000b8 	.word	0x200000b8
 80010e8:	200000c8 	.word	0x200000c8
 80010ec:	200003d8 	.word	0x200003d8
 80010f0:	20000000 	.word	0x20000000
 80010f4:	447a0000 	.word	0x447a0000

080010f8 <ProcessCANReceivedPacket>:

void ProcessCANReceivedPacket(CAN_HandleTypeDef *hcan) {
 80010f8:	b500      	push	{lr}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
	CAN_RxHeaderTypeDef msgHeader;
	uint8_t msgData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &msgHeader, msgData);
 80010fc:	ab01      	add	r3, sp, #4
 80010fe:	aa03      	add	r2, sp, #12
 8001100:	2100      	movs	r1, #0
 8001102:	f001 f95f 	bl	80023c4 <HAL_CAN_GetRxMessage>

	if (msgHeader.StdId == SET_ADDR_CAN) {
 8001106:	9b03      	ldr	r3, [sp, #12]
 8001108:	2bfe      	cmp	r3, #254	; 0xfe
 800110a:	d007      	beq.n	800111c <ProcessCANReceivedPacket+0x24>
			NVIC_SystemReset();
			break;
		}

	} else {
		switch (msgData[0]) {
 800110c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d038      	beq.n	8001186 <ProcessCANReceivedPacket+0x8e>
			break;

		}
	}

	asm("Nop");
 8001114:	bf00      	nop

}
 8001116:	b00b      	add	sp, #44	; 0x2c
 8001118:	f85d fb04 	ldr.w	pc, [sp], #4
		switch (msgData[7]) {
 800111c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d022      	beq.n	800116a <ProcessCANReceivedPacket+0x72>
 8001124:	2b04      	cmp	r3, #4
 8001126:	d1f5      	bne.n	8001114 <ProcessCANReceivedPacket+0x1c>
			FlashReadAll();
 8001128:	f000 f840 	bl	80011ac <FlashReadAll>
			KGyro = (float)((uint16_t)((msgData[1] << 8) + msgData[0]));
 800112c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001130:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001134:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001138:	b29b      	uxth	r3, r3
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7a67 	vcvt.f32.u32	s15, s15
			KGyro=KGyro/1000;
 8001142:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001194 <ProcessCANReceivedPacket+0x9c>
 8001146:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <ProcessCANReceivedPacket+0xa0>)
 800114c:	ed83 7a00 	vstr	s14, [r3]
			KAcc=1-KGyro;
 8001150:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001154:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <ProcessCANReceivedPacket+0xa4>)
 800115a:	edc3 7a00 	vstr	s15, [r3]
			FlashWriteAll();
 800115e:	f000 f871 	bl	8001244 <FlashWriteAll>
			FlashReadAll();
 8001162:	f000 f823 	bl	80011ac <FlashReadAll>
			NVIC_SystemReset();
 8001166:	f7ff ff2b 	bl	8000fc0 <__NVIC_SystemReset>
			FlashReadAll();
 800116a:	f000 f81f 	bl	80011ac <FlashReadAll>
			ThisAddr = (msgData[1] << 8) + msgData[0];
 800116e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001172:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001176:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <ProcessCANReceivedPacket+0xa8>)
 800117c:	8013      	strh	r3, [r2, #0]
			FlashWriteAll();
 800117e:	f000 f861 	bl	8001244 <FlashWriteAll>
			NVIC_SystemReset();
 8001182:	f7ff ff1d 	bl	8000fc0 <__NVIC_SystemReset>
			Calibrate = 1;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <ProcessCANReceivedPacket+0xac>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
			LedStateMachine = 4;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <ProcessCANReceivedPacket+0xb0>)
 800118e:	2204      	movs	r2, #4
 8001190:	701a      	strb	r2, [r3, #0]
			break;
 8001192:	e7bf      	b.n	8001114 <ProcessCANReceivedPacket+0x1c>
 8001194:	447a0000 	.word	0x447a0000
 8001198:	20000000 	.word	0x20000000
 800119c:	200000c4 	.word	0x200000c4
 80011a0:	200001f8 	.word	0x200001f8
 80011a4:	20000124 	.word	0x20000124
 80011a8:	200000ca 	.word	0x200000ca

080011ac <FlashReadAll>:
void FlashReadAll(void);
void FlashWriteAll(void);

void FlashReadAll(void)
{
	AccXZero=*(__IO int32_t*)(START_ADDR_USER_PAGE + FLASH_ADDR_AccXZero);
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <FlashReadAll+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <FlashReadAll+0x58>)
 80011b2:	801a      	strh	r2, [r3, #0]
	AccYZero=*(__IO int32_t*)(START_ADDR_USER_PAGE + FLASH_ADDR_AccYZero);
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <FlashReadAll+0x5c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <FlashReadAll+0x60>)
 80011ba:	801a      	strh	r2, [r3, #0]
	AccZZero=*(__IO int32_t*)(START_ADDR_USER_PAGE + FLASH_ADDR_AccZZero);
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <FlashReadAll+0x64>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <FlashReadAll+0x68>)
 80011c2:	801a      	strh	r2, [r3, #0]
	GyroXZero=*(__IO int32_t*)(START_ADDR_USER_PAGE + FLASH_ADDR_GyroXZero);
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <FlashReadAll+0x6c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <FlashReadAll+0x70>)
 80011ca:	801a      	strh	r2, [r3, #0]
	GyroYZero=*(__IO int32_t*)(START_ADDR_USER_PAGE + FLASH_ADDR_GyroYZero);
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <FlashReadAll+0x74>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <FlashReadAll+0x78>)
 80011d2:	801a      	strh	r2, [r3, #0]
	GyroZZero=*(__IO int32_t*)(START_ADDR_USER_PAGE + FLASH_ADDR_GyroZZero);
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <FlashReadAll+0x7c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <FlashReadAll+0x80>)
 80011da:	801a      	strh	r2, [r3, #0]
	ThisAddr=*(__IO uint32_t*)(START_ADDR_USER_PAGE+FLASH_ADDR_ThisAddr);
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <FlashReadAll+0x84>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <FlashReadAll+0x88>)
 80011e2:	801a      	strh	r2, [r3, #0]
	KGyro=*(__IO float*)(START_ADDR_USER_PAGE+FLASH_ADDR_KGyro);
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <FlashReadAll+0x8c>)
 80011e6:	ed93 7a00 	vldr	s14, [r3]
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <FlashReadAll+0x90>)
 80011ec:	ed83 7a00 	vstr	s14, [r3]

	KAcc=1-KGyro;
 80011f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80011f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <FlashReadAll+0x94>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]


}
 80011fe:	4770      	bx	lr
 8001200:	08007800 	.word	0x08007800
 8001204:	200002c8 	.word	0x200002c8
 8001208:	08007804 	.word	0x08007804
 800120c:	20000110 	.word	0x20000110
 8001210:	08007808 	.word	0x08007808
 8001214:	20000204 	.word	0x20000204
 8001218:	0800780c 	.word	0x0800780c
 800121c:	2000025c 	.word	0x2000025c
 8001220:	08007810 	.word	0x08007810
 8001224:	20000128 	.word	0x20000128
 8001228:	08007814 	.word	0x08007814
 800122c:	20000126 	.word	0x20000126
 8001230:	08007818 	.word	0x08007818
 8001234:	200001f8 	.word	0x200001f8
 8001238:	0800781c 	.word	0x0800781c
 800123c:	20000000 	.word	0x20000000
 8001240:	200000c4 	.word	0x200000c4

08001244 <FlashWriteAll>:


void FlashWriteAll(void)
{
 8001244:	b510      	push	{r4, lr}
 8001246:	b084      	sub	sp, #16
FLASH_EraseInitTypeDef EraseInitStruct;
uint32_t PageError = 0x00;
 8001248:	2400      	movs	r4, #0
 800124a:	9400      	str	r4, [sp, #0]
HAL_StatusTypeDef    flash_ok = HAL_ERROR;


    HAL_FLASH_Unlock();
 800124c:	f001 fc28 	bl	8002aa0 <HAL_FLASH_Unlock>

    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001250:	9401      	str	r4, [sp, #4]
    EraseInitStruct.PageAddress = START_ADDR_USER_PAGE ;
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <FlashWriteAll+0xd8>)
 8001254:	9302      	str	r3, [sp, #8]
    EraseInitStruct.NbPages     = 0x01;
 8001256:	2401      	movs	r4, #1
 8001258:	9403      	str	r4, [sp, #12]

    HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800125a:	4669      	mov	r1, sp
 800125c:	a801      	add	r0, sp, #4
 800125e:	f001 fce5 	bl	8002c2c <HAL_FLASHEx_Erase>
HAL_StatusTypeDef    flash_ok = HAL_ERROR;
 8001262:	4620      	mov	r0, r4


    while(flash_ok != HAL_OK)
 8001264:	b140      	cbz	r0, 8001278 <FlashWriteAll+0x34>
          flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_ADDR_USER_PAGE + FLASH_ADDR_AccXZero, (uint64_t)AccXZero);
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <FlashWriteAll+0xdc>)
 8001268:	f9b3 2000 	ldrsh.w	r2, [r3]
 800126c:	17d3      	asrs	r3, r2, #31
 800126e:	492b      	ldr	r1, [pc, #172]	; (800131c <FlashWriteAll+0xd8>)
 8001270:	2002      	movs	r0, #2
 8001272:	f001 fc69 	bl	8002b48 <HAL_FLASH_Program>
 8001276:	e7f5      	b.n	8001264 <FlashWriteAll+0x20>

    flash_ok = HAL_ERROR;
 8001278:	2001      	movs	r0, #1
    while(flash_ok != HAL_OK)
 800127a:	b140      	cbz	r0, 800128e <FlashWriteAll+0x4a>
        flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_ADDR_USER_PAGE + FLASH_ADDR_AccYZero, (uint64_t)AccYZero);
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <FlashWriteAll+0xe0>)
 800127e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001282:	17d3      	asrs	r3, r2, #31
 8001284:	4928      	ldr	r1, [pc, #160]	; (8001328 <FlashWriteAll+0xe4>)
 8001286:	2002      	movs	r0, #2
 8001288:	f001 fc5e 	bl	8002b48 <HAL_FLASH_Program>
 800128c:	e7f5      	b.n	800127a <FlashWriteAll+0x36>

    flash_ok = HAL_ERROR;
 800128e:	2001      	movs	r0, #1
    while(flash_ok != HAL_OK)
 8001290:	b140      	cbz	r0, 80012a4 <FlashWriteAll+0x60>
        flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_ADDR_USER_PAGE + FLASH_ADDR_AccZZero, (uint64_t)AccZZero);
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <FlashWriteAll+0xe8>)
 8001294:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001298:	17d3      	asrs	r3, r2, #31
 800129a:	4925      	ldr	r1, [pc, #148]	; (8001330 <FlashWriteAll+0xec>)
 800129c:	2002      	movs	r0, #2
 800129e:	f001 fc53 	bl	8002b48 <HAL_FLASH_Program>
 80012a2:	e7f5      	b.n	8001290 <FlashWriteAll+0x4c>

    flash_ok = HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
    while(flash_ok != HAL_OK)
 80012a6:	b140      	cbz	r0, 80012ba <FlashWriteAll+0x76>
        flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_ADDR_USER_PAGE + FLASH_ADDR_GyroXZero, (uint64_t)GyroXZero);
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <FlashWriteAll+0xf0>)
 80012aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012ae:	17d3      	asrs	r3, r2, #31
 80012b0:	4921      	ldr	r1, [pc, #132]	; (8001338 <FlashWriteAll+0xf4>)
 80012b2:	2002      	movs	r0, #2
 80012b4:	f001 fc48 	bl	8002b48 <HAL_FLASH_Program>
 80012b8:	e7f5      	b.n	80012a6 <FlashWriteAll+0x62>

    flash_ok = HAL_ERROR;
 80012ba:	2001      	movs	r0, #1
    while(flash_ok != HAL_OK)
 80012bc:	b140      	cbz	r0, 80012d0 <FlashWriteAll+0x8c>
        flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_ADDR_USER_PAGE + FLASH_ADDR_GyroYZero, (uint64_t)GyroYZero);
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <FlashWriteAll+0xf8>)
 80012c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012c4:	17d3      	asrs	r3, r2, #31
 80012c6:	491e      	ldr	r1, [pc, #120]	; (8001340 <FlashWriteAll+0xfc>)
 80012c8:	2002      	movs	r0, #2
 80012ca:	f001 fc3d 	bl	8002b48 <HAL_FLASH_Program>
 80012ce:	e7f5      	b.n	80012bc <FlashWriteAll+0x78>

    flash_ok = HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
 80012d2:	e007      	b.n	80012e4 <FlashWriteAll+0xa0>
    while(flash_ok != HAL_OK)
        flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_ADDR_USER_PAGE + FLASH_ADDR_GyroZZero, (uint64_t)GyroZZero);
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <FlashWriteAll+0x100>)
 80012d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012da:	17d3      	asrs	r3, r2, #31
 80012dc:	491a      	ldr	r1, [pc, #104]	; (8001348 <FlashWriteAll+0x104>)
 80012de:	2002      	movs	r0, #2
 80012e0:	f001 fc32 	bl	8002b48 <HAL_FLASH_Program>
    while(flash_ok != HAL_OK)
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d1f5      	bne.n	80012d4 <FlashWriteAll+0x90>

    flash_ok = HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e006      	b.n	80012fa <FlashWriteAll+0xb6>
    while(flash_ok != HAL_OK)
        flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_ADDR_USER_PAGE + FLASH_ADDR_ThisAddr, (uint64_t)ThisAddr);
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <FlashWriteAll+0x108>)
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	2300      	movs	r3, #0
 80012f2:	4917      	ldr	r1, [pc, #92]	; (8001350 <FlashWriteAll+0x10c>)
 80012f4:	2002      	movs	r0, #2
 80012f6:	f001 fc27 	bl	8002b48 <HAL_FLASH_Program>
    while(flash_ok != HAL_OK)
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d1f6      	bne.n	80012ec <FlashWriteAll+0xa8>

    flash_ok = HAL_ERROR;
 80012fe:	2001      	movs	r0, #1
 8001300:	e006      	b.n	8001310 <FlashWriteAll+0xcc>
    while(flash_ok != HAL_OK)
        flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_ADDR_USER_PAGE + FLASH_ADDR_KGyro, (uint64_t)(*((uint32_t *)&KGyro)));
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <FlashWriteAll+0x110>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	4913      	ldr	r1, [pc, #76]	; (8001358 <FlashWriteAll+0x114>)
 800130a:	2002      	movs	r0, #2
 800130c:	f001 fc1c 	bl	8002b48 <HAL_FLASH_Program>
    while(flash_ok != HAL_OK)
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f6      	bne.n	8001302 <FlashWriteAll+0xbe>

    HAL_FLASH_Lock();
 8001314:	f001 fbde 	bl	8002ad4 <HAL_FLASH_Lock>


}
 8001318:	b004      	add	sp, #16
 800131a:	bd10      	pop	{r4, pc}
 800131c:	08007800 	.word	0x08007800
 8001320:	200002c8 	.word	0x200002c8
 8001324:	20000110 	.word	0x20000110
 8001328:	08007804 	.word	0x08007804
 800132c:	20000204 	.word	0x20000204
 8001330:	08007808 	.word	0x08007808
 8001334:	2000025c 	.word	0x2000025c
 8001338:	0800780c 	.word	0x0800780c
 800133c:	20000128 	.word	0x20000128
 8001340:	08007810 	.word	0x08007810
 8001344:	20000126 	.word	0x20000126
 8001348:	08007814 	.word	0x08007814
 800134c:	200001f8 	.word	0x200001f8
 8001350:	08007818 	.word	0x08007818
 8001354:	20000000 	.word	0x20000000
 8001358:	0800781c 	.word	0x0800781c

0800135c <Led>:
uint16_t CntLed;
uint8_t LedStateMachine,CntFlashes;


void Led(void)
{
 800135c:	b508      	push	{r3, lr}

	  switch (LedStateMachine)
 800135e:	4b5a      	ldr	r3, [pc, #360]	; (80014c8 <Led+0x16c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	2b08      	cmp	r3, #8
 8001366:	f200 80ab 	bhi.w	80014c0 <Led+0x164>
 800136a:	e8df f003 	tbb	[pc, r3]
 800136e:	1205      	.short	0x1205
 8001370:	59453526 	.word	0x59453526
 8001374:	8477      	.short	0x8477
 8001376:	99          	.byte	0x99
 8001377:	00          	.byte	0x00
	  {
	  case 1:
		  HAL_GPIO_WritePin(GreenLed, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137e:	4853      	ldr	r0, [pc, #332]	; (80014cc <Led+0x170>)
 8001380:	f001 fd6a 	bl	8002e58 <HAL_GPIO_WritePin>
		  CntLed=0;
 8001384:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <Led+0x174>)
 8001386:	2200      	movs	r2, #0
 8001388:	801a      	strh	r2, [r3, #0]
		  LedStateMachine=2;
 800138a:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <Led+0x16c>)
 800138c:	2202      	movs	r2, #2
 800138e:	701a      	strb	r2, [r3, #0]
		  LedStateMachine=1;
		  break;

	  }

}
 8001390:	bd08      	pop	{r3, pc}
		  CntLed++;
 8001392:	4a4f      	ldr	r2, [pc, #316]	; (80014d0 <Led+0x174>)
 8001394:	8813      	ldrh	r3, [r2, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	8013      	strh	r3, [r2, #0]
		  if (CntLed>50)
 800139c:	2b32      	cmp	r3, #50	; 0x32
 800139e:	d9f7      	bls.n	8001390 <Led+0x34>
		  HAL_GPIO_WritePin(GreenLed, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a6:	4849      	ldr	r0, [pc, #292]	; (80014cc <Led+0x170>)
 80013a8:	f001 fd56 	bl	8002e58 <HAL_GPIO_WritePin>
		  CntLed=0;
 80013ac:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <Led+0x174>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	801a      	strh	r2, [r3, #0]
		  LedStateMachine=3;
 80013b2:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <Led+0x16c>)
 80013b4:	2203      	movs	r2, #3
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e7ea      	b.n	8001390 <Led+0x34>
		  CntLed++;
 80013ba:	4a45      	ldr	r2, [pc, #276]	; (80014d0 <Led+0x174>)
 80013bc:	8813      	ldrh	r3, [r2, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	8013      	strh	r3, [r2, #0]
		  if (CntLed>2000)
 80013c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013c8:	d9e2      	bls.n	8001390 <Led+0x34>
		  CntLed=0;
 80013ca:	4613      	mov	r3, r2
 80013cc:	2200      	movs	r2, #0
 80013ce:	801a      	strh	r2, [r3, #0]
		  LedStateMachine=1;
 80013d0:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <Led+0x16c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e7db      	b.n	8001390 <Led+0x34>
		  HAL_GPIO_WritePin(GreenLed, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013de:	483b      	ldr	r0, [pc, #236]	; (80014cc <Led+0x170>)
 80013e0:	f001 fd3a 	bl	8002e58 <HAL_GPIO_WritePin>
		  CntLed=0;
 80013e4:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <Led+0x174>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	801a      	strh	r2, [r3, #0]
		  CntFlashes=2;
 80013ea:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <Led+0x178>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	701a      	strb	r2, [r3, #0]
		  LedStateMachine=5;
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <Led+0x16c>)
 80013f2:	2205      	movs	r2, #5
 80013f4:	701a      	strb	r2, [r3, #0]
		  break;
 80013f6:	e7cb      	b.n	8001390 <Led+0x34>
		  CntLed++;
 80013f8:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <Led+0x174>)
 80013fa:	8813      	ldrh	r3, [r2, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	8013      	strh	r3, [r2, #0]
		  if (CntLed>50)
 8001402:	2b32      	cmp	r3, #50	; 0x32
 8001404:	d9c4      	bls.n	8001390 <Led+0x34>
		  HAL_GPIO_WritePin(GreenLed, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140c:	482f      	ldr	r0, [pc, #188]	; (80014cc <Led+0x170>)
 800140e:	f001 fd23 	bl	8002e58 <HAL_GPIO_WritePin>
		  CntLed=0;
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <Led+0x174>)
 8001414:	2200      	movs	r2, #0
 8001416:	801a      	strh	r2, [r3, #0]
		  LedStateMachine=6;
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <Led+0x16c>)
 800141a:	2206      	movs	r2, #6
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	e7b7      	b.n	8001390 <Led+0x34>
		  CntLed++;
 8001420:	4a2b      	ldr	r2, [pc, #172]	; (80014d0 <Led+0x174>)
 8001422:	8813      	ldrh	r3, [r2, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	8013      	strh	r3, [r2, #0]
		  if (CntLed>200)
 800142a:	2bc8      	cmp	r3, #200	; 0xc8
 800142c:	d9b0      	bls.n	8001390 <Led+0x34>
		  HAL_GPIO_WritePin(GreenLed, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001434:	4825      	ldr	r0, [pc, #148]	; (80014cc <Led+0x170>)
 8001436:	f001 fd0f 	bl	8002e58 <HAL_GPIO_WritePin>
		  CntLed=0;
 800143a:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <Led+0x174>)
 800143c:	2200      	movs	r2, #0
 800143e:	801a      	strh	r2, [r3, #0]
		  CntFlashes--;
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <Led+0x178>)
 8001442:	7813      	ldrb	r3, [r2, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	7013      	strb	r3, [r2, #0]
		  if (!CntFlashes)
 800144a:	b91b      	cbnz	r3, 8001454 <Led+0xf8>
		  LedStateMachine=4;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <Led+0x16c>)
 800144e:	2204      	movs	r2, #4
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e79d      	b.n	8001390 <Led+0x34>
		  LedStateMachine=1;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <Led+0x16c>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e799      	b.n	8001390 <Led+0x34>
		  HAL_GPIO_WritePin(GreenLed, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001462:	481a      	ldr	r0, [pc, #104]	; (80014cc <Led+0x170>)
 8001464:	f001 fcf8 	bl	8002e58 <HAL_GPIO_WritePin>
		  CntLed=0;
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <Led+0x174>)
 800146a:	2200      	movs	r2, #0
 800146c:	801a      	strh	r2, [r3, #0]
		  LedStateMachine=8;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <Led+0x16c>)
 8001470:	2208      	movs	r2, #8
 8001472:	701a      	strb	r2, [r3, #0]
		  break;
 8001474:	e78c      	b.n	8001390 <Led+0x34>
		  CntLed++;
 8001476:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <Led+0x174>)
 8001478:	8813      	ldrh	r3, [r2, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b29b      	uxth	r3, r3
 800147e:	8013      	strh	r3, [r2, #0]
		  if (CntLed>1000)
 8001480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001484:	d984      	bls.n	8001390 <Led+0x34>
		  HAL_GPIO_WritePin(GreenLed, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <Led+0x170>)
 800148e:	f001 fce3 	bl	8002e58 <HAL_GPIO_WritePin>
		  CntLed=0;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <Led+0x174>)
 8001494:	2200      	movs	r2, #0
 8001496:	801a      	strh	r2, [r3, #0]
		  LedStateMachine=9;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <Led+0x16c>)
 800149a:	2209      	movs	r2, #9
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e777      	b.n	8001390 <Led+0x34>
		  CntLed++;
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <Led+0x174>)
 80014a2:	8813      	ldrh	r3, [r2, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	8013      	strh	r3, [r2, #0]
		  if (CntLed>1000)
 80014aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ae:	f67f af6f 	bls.w	8001390 <Led+0x34>
		  CntLed=0;
 80014b2:	4613      	mov	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	801a      	strh	r2, [r3, #0]
		  LedStateMachine=1;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <Led+0x16c>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e767      	b.n	8001390 <Led+0x34>
		  LedStateMachine=1;
 80014c0:	4b01      	ldr	r3, [pc, #4]	; (80014c8 <Led+0x16c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	e763      	b.n	8001390 <Led+0x34>
 80014c8:	200000ca 	.word	0x200000ca
 80014cc:	48000800 	.word	0x48000800
 80014d0:	200000cc 	.word	0x200000cc
 80014d4:	200000cb 	.word	0x200000cb

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	2400      	movs	r4, #0
 80014de:	9405      	str	r4, [sp, #20]
 80014e0:	9406      	str	r4, [sp, #24]
 80014e2:	9407      	str	r4, [sp, #28]
 80014e4:	9408      	str	r4, [sp, #32]
 80014e6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <MX_GPIO_Init+0xc4>)
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80014f8:	9201      	str	r2, [sp, #4]
 80014fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800150a:	9202      	str	r2, [sp, #8]
 800150c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800151c:	9203      	str	r2, [sp, #12]
 800151e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001526:	615a      	str	r2, [r3, #20]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152e:	9304      	str	r3, [sp, #16]
 8001530:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_RESET);
 8001532:	4f1b      	ldr	r7, [pc, #108]	; (80015a0 <MX_GPIO_Init+0xc8>)
 8001534:	4622      	mov	r2, r4
 8001536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153a:	4638      	mov	r0, r7
 800153c:	f001 fc8c 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500CS_GPIO_Port, MPU6500CS_Pin, GPIO_PIN_SET);
 8001540:	4e18      	ldr	r6, [pc, #96]	; (80015a4 <MX_GPIO_Init+0xcc>)
 8001542:	2201      	movs	r2, #1
 8001544:	4611      	mov	r1, r2
 8001546:	4630      	mov	r0, r6
 8001548:	f001 fc86 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAB_STBY_GPIO_Port, CAB_STBY_Pin, GPIO_PIN_RESET);
 800154c:	4622      	mov	r2, r4
 800154e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001556:	f001 fc7f 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GreenLed_Pin */
  GPIO_InitStruct.Pin = GreenLed_Pin;
 800155a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800155e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2501      	movs	r5, #1
 8001562:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GreenLed_GPIO_Port, &GPIO_InitStruct);
 8001568:	a905      	add	r1, sp, #20
 800156a:	4638      	mov	r0, r7
 800156c:	f001 fbb0 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500CS_Pin */
  GPIO_InitStruct.Pin = MPU6500CS_Pin;
 8001570:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MPU6500CS_GPIO_Port, &GPIO_InitStruct);
 8001578:	a905      	add	r1, sp, #20
 800157a:	4630      	mov	r0, r6
 800157c:	f001 fba8 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAB_STBY_Pin */
  GPIO_InitStruct.Pin = CAB_STBY_Pin;
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(CAB_STBY_GPIO_Port, &GPIO_InitStruct);
 800158c:	a905      	add	r1, sp, #20
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f001 fb9d 	bl	8002cd0 <HAL_GPIO_Init>

}
 8001596:	b00b      	add	sp, #44	; 0x2c
 8001598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000800 	.word	0x48000800
 80015a4:	48000400 	.word	0x48000400

080015a8 <MX_DMA_Init>:
{
 80015a8:	b500      	push	{lr}
 80015aa:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_DMA_Init+0x40>)
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	4611      	mov	r1, r2
 80015c4:	200c      	movs	r0, #12
 80015c6:	f001 f8f3 	bl	80027b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015ca:	200c      	movs	r0, #12
 80015cc:	f001 f924 	bl	8002818 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	4611      	mov	r1, r2
 80015d4:	200d      	movs	r0, #13
 80015d6:	f001 f8eb 	bl	80027b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015da:	200d      	movs	r0, #13
 80015dc:	f001 f91c 	bl	8002818 <HAL_NVIC_EnableIRQ>
}
 80015e0:	b003      	add	sp, #12
 80015e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <WriteRegisterMPU6500>:

	MPU6500Initialized = 1;
}


void WriteRegisterMPU6500(uint8_t Addr, uint8_t Data) {
 80015ec:	b570      	push	{r4, r5, r6, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	4605      	mov	r5, r0
 80015f2:	460c      	mov	r4, r1
	uint8_t TrmBytes[2];

	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_RESET);
 80015f4:	4e0b      	ldr	r6, [pc, #44]	; (8001624 <WriteRegisterMPU6500+0x38>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	2101      	movs	r1, #1
 80015fa:	4630      	mov	r0, r6
 80015fc:	f001 fc2c 	bl	8002e58 <HAL_GPIO_WritePin>
	TrmBytes[0] = Addr;
 8001600:	f88d 5004 	strb.w	r5, [sp, #4]
	TrmBytes[1] = Data;
 8001604:	f88d 4005 	strb.w	r4, [sp, #5]
	HAL_SPI_Transmit(&hspi1, TrmBytes, 2, 1000);
 8001608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160c:	2202      	movs	r2, #2
 800160e:	a901      	add	r1, sp, #4
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <WriteRegisterMPU6500+0x3c>)
 8001612:	f002 fa3e 	bl	8003a92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	4611      	mov	r1, r2
 800161a:	4630      	mov	r0, r6
 800161c:	f001 fc1c 	bl	8002e58 <HAL_GPIO_WritePin>
}
 8001620:	b002      	add	sp, #8
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	48000400 	.word	0x48000400
 8001628:	200002cc 	.word	0x200002cc

0800162c <ReadRegisterMPU6500>:

uint8_t ReadRegisterMPU6500(uint8_t Addr) {
 800162c:	b530      	push	{r4, r5, lr}
 800162e:	b083      	sub	sp, #12
 8001630:	4604      	mov	r4, r0
	uint8_t TrmByte, RecByte;

	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_RESET);
 8001632:	4d12      	ldr	r5, [pc, #72]	; (800167c <ReadRegisterMPU6500+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	2101      	movs	r1, #1
 8001638:	4628      	mov	r0, r5
 800163a:	f001 fc0d 	bl	8002e58 <HAL_GPIO_WritePin>
	TrmByte = Addr;
	TrmByte |= 0x80;
 800163e:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8001642:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &TrmByte, 1, 1000);
 8001646:	4c0e      	ldr	r4, [pc, #56]	; (8001680 <ReadRegisterMPU6500+0x54>)
 8001648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164c:	2201      	movs	r2, #1
 800164e:	f10d 0107 	add.w	r1, sp, #7
 8001652:	4620      	mov	r0, r4
 8001654:	f002 fa1d 	bl	8003a92 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &RecByte, 1, 1000);
 8001658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165c:	2201      	movs	r2, #1
 800165e:	f10d 0106 	add.w	r1, sp, #6
 8001662:	4620      	mov	r0, r4
 8001664:	f002 fc80 	bl	8003f68 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	4611      	mov	r1, r2
 800166c:	4628      	mov	r0, r5
 800166e:	f001 fbf3 	bl	8002e58 <HAL_GPIO_WritePin>

	return RecByte;
}
 8001672:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001676:	b003      	add	sp, #12
 8001678:	bd30      	pop	{r4, r5, pc}
 800167a:	bf00      	nop
 800167c:	48000400 	.word	0x48000400
 8001680:	200002cc 	.word	0x200002cc

08001684 <InitMPU6500>:
void InitMPU6500(void) {
 8001684:	b508      	push	{r3, lr}
	Ch = ReadRegisterMPU6500(117);
 8001686:	2075      	movs	r0, #117	; 0x75
 8001688:	f7ff ffd0 	bl	800162c <ReadRegisterMPU6500>
	asm("Nop");
 800168c:	bf00      	nop
	WriteRegisterMPU6500(PWR_MGMT_1, 0x80);
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	206b      	movs	r0, #107	; 0x6b
 8001692:	f7ff ffab 	bl	80015ec <WriteRegisterMPU6500>
	HAL_Delay(110);
 8001696:	206e      	movs	r0, #110	; 0x6e
 8001698:	f000 fc9e 	bl	8001fd8 <HAL_Delay>
	WriteRegisterMPU6500(SIGNAL_PATH_RESET, 0x07);
 800169c:	2107      	movs	r1, #7
 800169e:	2068      	movs	r0, #104	; 0x68
 80016a0:	f7ff ffa4 	bl	80015ec <WriteRegisterMPU6500>
	HAL_Delay(110);
 80016a4:	206e      	movs	r0, #110	; 0x6e
 80016a6:	f000 fc97 	bl	8001fd8 <HAL_Delay>
	WriteRegisterMPU6500(USER_CTRL, 0x10);
 80016aa:	2110      	movs	r1, #16
 80016ac:	206a      	movs	r0, #106	; 0x6a
 80016ae:	f7ff ff9d 	bl	80015ec <WriteRegisterMPU6500>
	HAL_Delay(110);
 80016b2:	206e      	movs	r0, #110	; 0x6e
 80016b4:	f000 fc90 	bl	8001fd8 <HAL_Delay>
	WriteRegisterMPU6500(ACCEL_CONFIG, 0x0);
 80016b8:	2100      	movs	r1, #0
 80016ba:	201c      	movs	r0, #28
 80016bc:	f7ff ff96 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(ACCEL_CONFIG_2, 0x0);
 80016c0:	2100      	movs	r1, #0
 80016c2:	201d      	movs	r0, #29
 80016c4:	f7ff ff92 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(GYRO_CONFIG, 0x0);
 80016c8:	2100      	movs	r1, #0
 80016ca:	201b      	movs	r0, #27
 80016cc:	f7ff ff8e 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(PWR_MGMT_1, 0x0);
 80016d0:	2100      	movs	r1, #0
 80016d2:	206b      	movs	r0, #107	; 0x6b
 80016d4:	f7ff ff8a 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(PWR_MGMT_2, 0x0);
 80016d8:	2100      	movs	r1, #0
 80016da:	206c      	movs	r0, #108	; 0x6c
 80016dc:	f7ff ff86 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(FIFO_EN, 0x0);
 80016e0:	2100      	movs	r1, #0
 80016e2:	2023      	movs	r0, #35	; 0x23
 80016e4:	f7ff ff82 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(CONFIG, 0x0);
 80016e8:	2100      	movs	r1, #0
 80016ea:	201a      	movs	r0, #26
 80016ec:	f7ff ff7e 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(INT_PIN_CFG, 0x30);
 80016f0:	2130      	movs	r1, #48	; 0x30
 80016f2:	2037      	movs	r0, #55	; 0x37
 80016f4:	f7ff ff7a 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(INT_ENABLE, 0x1);
 80016f8:	2101      	movs	r1, #1
 80016fa:	2038      	movs	r0, #56	; 0x38
 80016fc:	f7ff ff76 	bl	80015ec <WriteRegisterMPU6500>
	WriteRegisterMPU6500(SMPLRT_DIV, 0x0);
 8001700:	2100      	movs	r1, #0
 8001702:	2019      	movs	r0, #25
 8001704:	f7ff ff72 	bl	80015ec <WriteRegisterMPU6500>
	MPU6500Initialized = 1;
 8001708:	4b01      	ldr	r3, [pc, #4]	; (8001710 <InitMPU6500+0x8c>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bd08      	pop	{r3, pc}
 8001710:	20000206 	.word	0x20000206

08001714 <Calibrating>:



}

void Calibrating(void) {
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!Calibrate)
 8001716:	4b40      	ldr	r3, [pc, #256]	; (8001818 <Calibrating+0x104>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b1eb      	cbz	r3, 8001758 <Calibrating+0x44>
		return;

	switch (CalibratingStateMachine) {
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <Calibrating+0x108>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d01a      	beq.n	800175a <Calibrating+0x46>
 8001724:	2b02      	cmp	r3, #2
 8001726:	d023      	beq.n	8001770 <Calibrating+0x5c>
 8001728:	b11b      	cbz	r3, 8001732 <Calibrating+0x1e>
            FlashWriteAll();
		}
		break;

	default:
		CalibratingStateMachine = 0;
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <Calibrating+0x108>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
		break;
 8001730:	e012      	b.n	8001758 <Calibrating+0x44>
		CalibrateCnt = 250;
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <Calibrating+0x10c>)
 8001734:	22fa      	movs	r2, #250	; 0xfa
 8001736:	801a      	strh	r2, [r3, #0]
		SummAccX = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <Calibrating+0x110>)
 800173c:	6013      	str	r3, [r2, #0]
		SummAccY = 0;
 800173e:	4a3a      	ldr	r2, [pc, #232]	; (8001828 <Calibrating+0x114>)
 8001740:	6013      	str	r3, [r2, #0]
		SummAccZ = 0;
 8001742:	4a3a      	ldr	r2, [pc, #232]	; (800182c <Calibrating+0x118>)
 8001744:	6013      	str	r3, [r2, #0]
		SummGyroX = 0;
 8001746:	4a3a      	ldr	r2, [pc, #232]	; (8001830 <Calibrating+0x11c>)
 8001748:	6013      	str	r3, [r2, #0]
		SummGyroY = 0;
 800174a:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <Calibrating+0x120>)
 800174c:	6013      	str	r3, [r2, #0]
		SummGyroZ = 0;
 800174e:	4a3a      	ldr	r2, [pc, #232]	; (8001838 <Calibrating+0x124>)
 8001750:	6013      	str	r3, [r2, #0]
		CalibratingStateMachine = 1;
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <Calibrating+0x108>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
	}
}
 8001758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CalibrateCnt--;
 800175a:	4a31      	ldr	r2, [pc, #196]	; (8001820 <Calibrating+0x10c>)
 800175c:	8813      	ldrh	r3, [r2, #0]
 800175e:	3b01      	subs	r3, #1
 8001760:	b21b      	sxth	r3, r3
 8001762:	8013      	strh	r3, [r2, #0]
		if (!CalibrateCnt)
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f7      	bne.n	8001758 <Calibrating+0x44>
			CalibratingStateMachine = 2;
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <Calibrating+0x108>)
 800176a:	2202      	movs	r2, #2
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	e7f3      	b.n	8001758 <Calibrating+0x44>
		SummAccX = SummAccX + AccX;
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <Calibrating+0x128>)
 8001772:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <Calibrating+0x110>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4415      	add	r5, r2
 800177c:	601d      	str	r5, [r3, #0]
		SummAccY = SummAccY + AccY;
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <Calibrating+0x12c>)
 8001780:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <Calibrating+0x114>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4416      	add	r6, r2
 800178a:	601e      	str	r6, [r3, #0]
		SummAccZ = SummAccZ + AccZ;
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <Calibrating+0x130>)
 800178e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <Calibrating+0x118>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	440a      	add	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
		SummGyroX = SummGyroX + GyroX;
 800179a:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <Calibrating+0x134>)
 800179c:	f9b3 4000 	ldrsh.w	r4, [r3]
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <Calibrating+0x11c>)
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	440c      	add	r4, r1
 80017a6:	601c      	str	r4, [r3, #0]
		SummGyroY = SummGyroY + GyroY;
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <Calibrating+0x138>)
 80017aa:	f9b3 7000 	ldrsh.w	r7, [r3]
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <Calibrating+0x120>)
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	440f      	add	r7, r1
 80017b4:	601f      	str	r7, [r3, #0]
		SummGyroZ = SummGyroZ + GyroZ;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <Calibrating+0x13c>)
 80017b8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <Calibrating+0x124>)
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	4401      	add	r1, r0
 80017c2:	6019      	str	r1, [r3, #0]
		CalibrateCnt++;
 80017c4:	4816      	ldr	r0, [pc, #88]	; (8001820 <Calibrating+0x10c>)
 80017c6:	8803      	ldrh	r3, [r0, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	8003      	strh	r3, [r0, #0]
		if (CalibrateCnt >= 64) {
 80017ce:	2b3f      	cmp	r3, #63	; 0x3f
 80017d0:	ddc2      	ble.n	8001758 <Calibrating+0x44>
			AccXZero = (int16_t) (SummAccX >> 6);
 80017d2:	f345 158f 	sbfx	r5, r5, #6, #16
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <Calibrating+0x140>)
 80017d8:	801d      	strh	r5, [r3, #0]
			AccYZero = (int16_t) (SummAccY >> 6);
 80017da:	f346 168f 	sbfx	r6, r6, #6, #16
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <Calibrating+0x144>)
 80017e0:	801e      	strh	r6, [r3, #0]
			AccZZero = -16384 + (int16_t) (SummAccZ >> 6);
 80017e2:	f3c2 128f 	ubfx	r2, r2, #6, #16
 80017e6:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <Calibrating+0x148>)
 80017ec:	801a      	strh	r2, [r3, #0]
			GyroXZero = (int16_t) (SummGyroX >> 6);
 80017ee:	f344 148f 	sbfx	r4, r4, #6, #16
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <Calibrating+0x14c>)
 80017f4:	801c      	strh	r4, [r3, #0]
			GyroYZero = (int16_t) (SummGyroY >> 6);
 80017f6:	f347 178f 	sbfx	r7, r7, #6, #16
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <Calibrating+0x150>)
 80017fc:	801f      	strh	r7, [r3, #0]
			GyroZZero = (int16_t) (SummGyroZ >> 6);
 80017fe:	f341 118f 	sbfx	r1, r1, #6, #16
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <Calibrating+0x154>)
 8001804:	8019      	strh	r1, [r3, #0]
			CalibratingStateMachine = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <Calibrating+0x108>)
 800180a:	7013      	strb	r3, [r2, #0]
			Calibrate = 0;
 800180c:	4a02      	ldr	r2, [pc, #8]	; (8001818 <Calibrating+0x104>)
 800180e:	7013      	strb	r3, [r2, #0]
            FlashWriteAll();
 8001810:	f7ff fd18 	bl	8001244 <FlashWriteAll>
 8001814:	e7a0      	b.n	8001758 <Calibrating+0x44>
 8001816:	bf00      	nop
 8001818:	20000124 	.word	0x20000124
 800181c:	200001fc 	.word	0x200001fc
 8001820:	200000d4 	.word	0x200000d4
 8001824:	20000114 	.word	0x20000114
 8001828:	20000118 	.word	0x20000118
 800182c:	20000428 	.word	0x20000428
 8001830:	20000120 	.word	0x20000120
 8001834:	200000d0 	.word	0x200000d0
 8001838:	20000208 	.word	0x20000208
 800183c:	2000025e 	.word	0x2000025e
 8001840:	200000dc 	.word	0x200000dc
 8001844:	200001fa 	.word	0x200001fa
 8001848:	200000e0 	.word	0x200000e0
 800184c:	20000258 	.word	0x20000258
 8001850:	20000424 	.word	0x20000424
 8001854:	200002c8 	.word	0x200002c8
 8001858:	20000110 	.word	0x20000110
 800185c:	20000204 	.word	0x20000204
 8001860:	2000025c 	.word	0x2000025c
 8001864:	20000128 	.word	0x20000128
 8001868:	20000126 	.word	0x20000126

0800186c <ProcessDataMPU6500>:
void ProcessDataMPU6500(void) {
 800186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	AccX = (((int16_t) SPI1ReceiveArray[1]) << 8)
 8001870:	4b42      	ldr	r3, [pc, #264]	; (800197c <ProcessDataMPU6500+0x110>)
 8001872:	7859      	ldrb	r1, [r3, #1]
			+ (int16_t) SPI1ReceiveArray[2];
 8001874:	789a      	ldrb	r2, [r3, #2]
 8001876:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	AccX = (((int16_t) SPI1ReceiveArray[1]) << 8)
 800187a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80019c8 <ProcessDataMPU6500+0x15c>
 800187e:	f8a9 2000 	strh.w	r2, [r9]
	AccY = (((int16_t) SPI1ReceiveArray[3]) << 8)
 8001882:	78d9      	ldrb	r1, [r3, #3]
			+ (int16_t) SPI1ReceiveArray[4];
 8001884:	791a      	ldrb	r2, [r3, #4]
 8001886:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	AccY = (((int16_t) SPI1ReceiveArray[3]) << 8)
 800188a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80019cc <ProcessDataMPU6500+0x160>
 800188e:	f8a8 2000 	strh.w	r2, [r8]
	AccZ = (((int16_t) SPI1ReceiveArray[5]) << 8)
 8001892:	7959      	ldrb	r1, [r3, #5]
			+ (int16_t) SPI1ReceiveArray[6];
 8001894:	799a      	ldrb	r2, [r3, #6]
 8001896:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	AccZ = (((int16_t) SPI1ReceiveArray[5]) << 8)
 800189a:	4f39      	ldr	r7, [pc, #228]	; (8001980 <ProcessDataMPU6500+0x114>)
 800189c:	803a      	strh	r2, [r7, #0]
	Temperature = (((int16_t) SPI1ReceiveArray[7]) << 8)
 800189e:	79d9      	ldrb	r1, [r3, #7]
			+ (int16_t) SPI1ReceiveArray[8];
 80018a0:	7a1a      	ldrb	r2, [r3, #8]
 80018a2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	Temperature = (((int16_t) SPI1ReceiveArray[7]) << 8)
 80018a6:	4937      	ldr	r1, [pc, #220]	; (8001984 <ProcessDataMPU6500+0x118>)
 80018a8:	800a      	strh	r2, [r1, #0]
	GyroX = (((int16_t) SPI1ReceiveArray[9]) << 8)
 80018aa:	7a59      	ldrb	r1, [r3, #9]
			+ (int16_t) SPI1ReceiveArray[10];
 80018ac:	7a9a      	ldrb	r2, [r3, #10]
 80018ae:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	GyroX = (((int16_t) SPI1ReceiveArray[9]) << 8)
 80018b2:	4e35      	ldr	r6, [pc, #212]	; (8001988 <ProcessDataMPU6500+0x11c>)
 80018b4:	8032      	strh	r2, [r6, #0]
	GyroY = (((int16_t) SPI1ReceiveArray[11]) << 8)
 80018b6:	7ad9      	ldrb	r1, [r3, #11]
			+ (int16_t) SPI1ReceiveArray[12];
 80018b8:	7b1a      	ldrb	r2, [r3, #12]
 80018ba:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	GyroY = (((int16_t) SPI1ReceiveArray[11]) << 8)
 80018be:	4d33      	ldr	r5, [pc, #204]	; (800198c <ProcessDataMPU6500+0x120>)
 80018c0:	802a      	strh	r2, [r5, #0]
	GyroZ = (((int16_t) SPI1ReceiveArray[13]) << 8)
 80018c2:	7b5a      	ldrb	r2, [r3, #13]
			+ (int16_t) SPI1ReceiveArray[14];
 80018c4:	7b9b      	ldrb	r3, [r3, #14]
 80018c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	GyroZ = (((int16_t) SPI1ReceiveArray[13]) << 8)
 80018ca:	4c31      	ldr	r4, [pc, #196]	; (8001990 <ProcessDataMPU6500+0x124>)
 80018cc:	8023      	strh	r3, [r4, #0]
	Calibrating();
 80018ce:	f7ff ff21 	bl	8001714 <Calibrating>
	AccXfl = AccXZero - AccX;//меняем знак оси, чтобы он соответствовал матрице поворота
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <ProcessDataMPU6500+0x128>)
 80018d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d8:	f9b9 2000 	ldrsh.w	r2, [r9]
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <ProcessDataMPU6500+0x12c>)
 80018e8:	edc3 7a00 	vstr	s15, [r3]
	AccYfl = AccYZero - AccY;//меняем знак оси, чтобы он соответствовал матрице поворота
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <ProcessDataMPU6500+0x130>)
 80018ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f2:	f9b8 2000 	ldrsh.w	r2, [r8]
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <ProcessDataMPU6500+0x134>)
 8001902:	edc3 7a00 	vstr	s15, [r3]
	AccZfl = AccZ - AccZZero;
 8001906:	f9b7 3000 	ldrsh.w	r3, [r7]
 800190a:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <ProcessDataMPU6500+0x138>)
 800190c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <ProcessDataMPU6500+0x13c>)
 800191c:	edc3 7a00 	vstr	s15, [r3]
	GyroXfl = GyroX - GyroXZero;
 8001920:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <ProcessDataMPU6500+0x140>)
 8001926:	f9b2 2000 	ldrsh.w	r2, [r2]
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <ProcessDataMPU6500+0x144>)
 8001936:	edc3 7a00 	vstr	s15, [r3]
	GyroYfl = GyroY - GyroYZero;
 800193a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <ProcessDataMPU6500+0x148>)
 8001940:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <ProcessDataMPU6500+0x14c>)
 8001950:	edc3 7a00 	vstr	s15, [r3]
	GyroZfl = GyroZ - GyroZZero;
 8001954:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <ProcessDataMPU6500+0x150>)
 800195a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <ProcessDataMPU6500+0x154>)
 800196a:	edc3 7a00 	vstr	s15, [r3]
	  CalcullateTilts();
 800196e:	f7ff f90f 	bl	8000b90 <CalcullateTilts>
	  TrmCAN(&hcan);
 8001972:	4814      	ldr	r0, [pc, #80]	; (80019c4 <ProcessDataMPU6500+0x158>)
 8001974:	f7ff fb62 	bl	800103c <TrmCAN>
}
 8001978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800197c:	20000330 	.word	0x20000330
 8001980:	200001fa 	.word	0x200001fa
 8001984:	200000de 	.word	0x200000de
 8001988:	200000e0 	.word	0x200000e0
 800198c:	20000258 	.word	0x20000258
 8001990:	20000424 	.word	0x20000424
 8001994:	200002c8 	.word	0x200002c8
 8001998:	200000e4 	.word	0x200000e4
 800199c:	20000110 	.word	0x20000110
 80019a0:	200000d8 	.word	0x200000d8
 80019a4:	20000204 	.word	0x20000204
 80019a8:	2000011c 	.word	0x2000011c
 80019ac:	2000025c 	.word	0x2000025c
 80019b0:	200002c4 	.word	0x200002c4
 80019b4:	20000128 	.word	0x20000128
 80019b8:	200003d8 	.word	0x200003d8
 80019bc:	20000126 	.word	0x20000126
 80019c0:	20000420 	.word	0x20000420
 80019c4:	200000e8 	.word	0x200000e8
 80019c8:	2000025e 	.word	0x2000025e
 80019cc:	200000dc 	.word	0x200000dc

080019d0 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019d0:	b508      	push	{r3, lr}



	ProcessCANReceivedPacket(hcan);
 80019d2:	f7ff fb91 	bl	80010f8 <ProcessCANReceivedPacket>


}
 80019d6:	bd08      	pop	{r3, pc}

080019d8 <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80019d8:	b508      	push	{r3, lr}
  if(hspi == &hspi1)
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80019dc:	4283      	cmp	r3, r0
 80019de:	d000      	beq.n	80019e2 <HAL_SPI_TxRxCpltCallback+0xa>
  {
    	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_SET);
    	MPU9250PacketReady=1;
  }
}
 80019e0:	bd08      	pop	{r3, pc}
    	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	4611      	mov	r1, r2
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <HAL_SPI_TxRxCpltCallback+0x20>)
 80019e8:	f001 fa36 	bl	8002e58 <HAL_GPIO_WritePin>
    	MPU9250PacketReady=1;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_SPI_TxRxCpltCallback+0x24>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
}
 80019f2:	e7f5      	b.n	80019e0 <HAL_SPI_TxRxCpltCallback+0x8>
 80019f4:	200002cc 	.word	0x200002cc
 80019f8:	48000400 	.word	0x48000400
 80019fc:	20000207 	.word	0x20000207

08001a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a00:	b510      	push	{r4, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */
	uint8_t TrmByte;


	  if (htim->Instance == TIM6) {
 8001a06:	6802      	ldr	r2, [r0, #0]
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d005      	beq.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x1a>


	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001a0e:	6822      	ldr	r2, [r4, #0]
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d022      	beq.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a16:	b002      	add	sp, #8
 8001a18:	bd10      	pop	{r4, pc}
		  Led();
 8001a1a:	f7ff fc9f 	bl	800135c <Led>
		if (CntSPI > 3) {
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	dd05      	ble.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x34>
			CntSPI = 0;
 8001a28:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
			if (MPU6500Initialized) {
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b923      	cbnz	r3, 8001a3e <HAL_TIM_PeriodElapsedCallback+0x3e>
		CntSPI++;
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a36:	8813      	ldrh	r3, [r2, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	8013      	strh	r3, [r2, #0]
 8001a3c:	e7e7      	b.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0xe>
				TrmByte |= 0x80;
 8001a3e:	23bb      	movs	r3, #187	; 0xbb
 8001a40:	f88d 3007 	strb.w	r3, [sp, #7]
				HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_RESET);
 8001a44:	2101      	movs	r1, #1
 8001a46:	480b      	ldr	r0, [pc, #44]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001a48:	f001 fa06 	bl	8002e58 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive_DMA(&hspi1, &TrmByte, SPI1ReceiveArray, 16);
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001a50:	f10d 0107 	add.w	r1, sp, #7
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a56:	f002 fb59 	bl	800410c <HAL_SPI_TransmitReceive_DMA>
 8001a5a:	e7eb      	b.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8001a5c:	f000 faaa 	bl	8001fb4 <HAL_IncTick>
}
 8001a60:	e7d9      	b.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x16>
 8001a62:	bf00      	nop
 8001a64:	40001000 	.word	0x40001000
 8001a68:	40001400 	.word	0x40001400
 8001a6c:	2000025a 	.word	0x2000025a
 8001a70:	20000206 	.word	0x20000206
 8001a74:	48000400 	.word	0x48000400
 8001a78:	20000330 	.word	0x20000330
 8001a7c:	200002cc 	.word	0x200002cc

08001a80 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <Error_Handler+0x2>

08001a84 <MX_TIM6_Init>:
{
 8001a84:	b500      	push	{lr}
 8001a86:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 8001a90:	4813      	ldr	r0, [pc, #76]	; (8001ae0 <MX_TIM6_Init+0x5c>)
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <MX_TIM6_Init+0x60>)
 8001a94:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 9;
 8001a96:	2209      	movs	r2, #9
 8001a98:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 7200;
 8001a9c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001aa0:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001aa6:	f002 feb1 	bl	800480c <HAL_TIM_Base_Init>
 8001aaa:	b9a0      	cbnz	r0, 8001ad6 <MX_TIM6_Init+0x52>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ab2:	a901      	add	r1, sp, #4
 8001ab4:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <MX_TIM6_Init+0x5c>)
 8001ab6:	f002 fed9 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	b970      	cbnz	r0, 8001ada <MX_TIM6_Init+0x56>
	htim6.Instance->DIER |= TIM_DIER_UIE;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_TIM6_Init+0x5c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	60da      	str	r2, [r3, #12]
	htim6.Instance->CR1 |= TIM_CR1_CEN;
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
}
 8001ad0:	b005      	add	sp, #20
 8001ad2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ad6:	f7ff ffd3 	bl	8001a80 <Error_Handler>
    Error_Handler();
 8001ada:	f7ff ffd1 	bl	8001a80 <Error_Handler>
 8001ade:	bf00      	nop
 8001ae0:	2000020c 	.word	0x2000020c
 8001ae4:	40001000 	.word	0x40001000

08001ae8 <MX_CAN_Init>:
{
 8001ae8:	b508      	push	{r3, lr}
  hcan.Instance = CAN;
 8001aea:	480f      	ldr	r0, [pc, #60]	; (8001b28 <MX_CAN_Init+0x40>)
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_CAN_Init+0x44>)
 8001aee:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 5;
 8001af0:	2305      	movs	r3, #5
 8001af2:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001af8:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001afa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001afe:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001b00:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001b04:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b06:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	7642      	strb	r2, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b0c:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001b0e:	76c2      	strb	r2, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b10:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b12:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b14:	f000 fa74 	bl	8002000 <HAL_CAN_Init>
 8001b18:	b918      	cbnz	r0, 8001b22 <MX_CAN_Init+0x3a>
  CANFilters(&hcan);
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_CAN_Init+0x40>)
 8001b1c:	f7ff fa62 	bl	8000fe4 <CANFilters>
}
 8001b20:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b22:	f7ff ffad 	bl	8001a80 <Error_Handler>
 8001b26:	bf00      	nop
 8001b28:	200000e8 	.word	0x200000e8
 8001b2c:	40006400 	.word	0x40006400

08001b30 <MX_SPI1_Init>:
{
 8001b30:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001b32:	4810      	ldr	r0, [pc, #64]	; (8001b74 <MX_SPI1_Init+0x44>)
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_SPI1_Init+0x48>)
 8001b36:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b38:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b3c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b46:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b48:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b52:	2238      	movs	r2, #56	; 0x38
 8001b54:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b56:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b58:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b5a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b60:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b62:	2308      	movs	r3, #8
 8001b64:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b66:	f001 ff25 	bl	80039b4 <HAL_SPI_Init>
 8001b6a:	b900      	cbnz	r0, 8001b6e <MX_SPI1_Init+0x3e>
}
 8001b6c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b6e:	f7ff ff87 	bl	8001a80 <Error_Handler>
 8001b72:	bf00      	nop
 8001b74:	200002cc 	.word	0x200002cc
 8001b78:	40013000 	.word	0x40013000

08001b7c <SystemClock_Config>:
{
 8001b7c:	b500      	push	{lr}
 8001b7e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b80:	2300      	movs	r3, #0
 8001b82:	9309      	str	r3, [sp, #36]	; 0x24
 8001b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b86:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	9303      	str	r3, [sp, #12]
 8001b8e:	9304      	str	r3, [sp, #16]
 8001b90:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b92:	2101      	movs	r1, #1
 8001b94:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b9a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b9c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b9e:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ba6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001baa:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	a806      	add	r0, sp, #24
 8001bae:	f001 f959 	bl	8002e64 <HAL_RCC_OscConfig>
 8001bb2:	b980      	cbnz	r0, 8001bd6 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb8:	2102      	movs	r1, #2
 8001bba:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bc8:	a801      	add	r0, sp, #4
 8001bca:	f001 fc9d 	bl	8003508 <HAL_RCC_ClockConfig>
 8001bce:	b920      	cbnz	r0, 8001bda <SystemClock_Config+0x5e>
}
 8001bd0:	b011      	add	sp, #68	; 0x44
 8001bd2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001bd6:	f7ff ff53 	bl	8001a80 <Error_Handler>
    Error_Handler();
 8001bda:	f7ff ff51 	bl	8001a80 <Error_Handler>
	...

08001be0 <main>:
{
 8001be0:	b508      	push	{r3, lr}
  HAL_Init();
 8001be2:	f000 f9d5 	bl	8001f90 <HAL_Init>
  FlashReadAll();
 8001be6:	f7ff fae1 	bl	80011ac <FlashReadAll>
  LedStateMachine=7;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <main+0x44>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	701a      	strb	r2, [r3, #0]
  SystemClock_Config();
 8001bf0:	f7ff ffc4 	bl	8001b7c <SystemClock_Config>
  MX_GPIO_Init();
 8001bf4:	f7ff fc70 	bl	80014d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bf8:	f7ff fcd6 	bl	80015a8 <MX_DMA_Init>
  MX_TIM6_Init();
 8001bfc:	f7ff ff42 	bl	8001a84 <MX_TIM6_Init>
  MX_CAN_Init();
 8001c00:	f7ff ff72 	bl	8001ae8 <MX_CAN_Init>
  MX_SPI1_Init();
 8001c04:	f7ff ff94 	bl	8001b30 <MX_SPI1_Init>
  InitMPU6500();
 8001c08:	f7ff fd3c 	bl	8001684 <InitMPU6500>
 8001c0c:	e004      	b.n	8001c18 <main+0x38>
		  MPU9250PacketReady=0;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <main+0x48>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
		  ProcessDataMPU6500();
 8001c14:	f7ff fe2a 	bl	800186c <ProcessDataMPU6500>
	  if (MPU9250PacketReady)
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <main+0x48>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0fb      	beq.n	8001c18 <main+0x38>
 8001c20:	e7f5      	b.n	8001c0e <main+0x2e>
 8001c22:	bf00      	nop
 8001c24:	200000ca 	.word	0x200000ca
 8001c28:	20000207 	.word	0x20000207

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_MspInit+0x2c>)
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	619a      	str	r2, [r3, #24]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	f002 0201 	and.w	r2, r2, #1
 8001c3e:	9200      	str	r2, [sp, #0]
 8001c40:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c48:	61da      	str	r2, [r3, #28]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c54:	b002      	add	sp, #8
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	2300      	movs	r3, #0
 8001c62:	9303      	str	r3, [sp, #12]
 8001c64:	9304      	str	r3, [sp, #16]
 8001c66:	9305      	str	r3, [sp, #20]
 8001c68:	9306      	str	r3, [sp, #24]
 8001c6a:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN)
 8001c6c:	6802      	ldr	r2, [r0, #0]
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_CAN_MspInit+0x98>)
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001c74:	b008      	add	sp, #32
 8001c76:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c78:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001c82:	61da      	str	r2, [r3, #28]
 8001c84:	69da      	ldr	r2, [r3, #28]
 8001c86:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001c8a:	9201      	str	r2, [sp, #4]
 8001c8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c94:	615a      	str	r2, [r3, #20]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ca0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2400      	movs	r4, #0
 8001cac:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001cb2:	2309      	movs	r3, #9
 8001cb4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	a903      	add	r1, sp, #12
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f001 f808 	bl	8002cd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	2013      	movs	r0, #19
 8001cc6:	f000 fd73 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8001cca:	2013      	movs	r0, #19
 8001ccc:	f000 fda4 	bl	8002818 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	2014      	movs	r0, #20
 8001cd6:	f000 fd6b 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001cda:	2014      	movs	r0, #20
 8001cdc:	f000 fd9c 	bl	8002818 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	2015      	movs	r0, #21
 8001ce6:	f000 fd63 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001cea:	2015      	movs	r0, #21
 8001cec:	f000 fd94 	bl	8002818 <HAL_NVIC_EnableIRQ>
}
 8001cf0:	e7c0      	b.n	8001c74 <HAL_CAN_MspInit+0x18>
 8001cf2:	bf00      	nop
 8001cf4:	40006400 	.word	0x40006400

08001cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf8:	b530      	push	{r4, r5, lr}
 8001cfa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9304      	str	r3, [sp, #16]
 8001d02:	9305      	str	r3, [sp, #20]
 8001d04:	9306      	str	r3, [sp, #24]
 8001d06:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001d08:	6802      	ldr	r2, [r0, #0]
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_SPI_MspInit+0xcc>)
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d10:	b009      	add	sp, #36	; 0x24
 8001d12:	bd30      	pop	{r4, r5, pc}
 8001d14:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d16:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d28:	9201      	str	r2, [sp, #4]
 8001d2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d3e:	23e0      	movs	r3, #224	; 0xe0
 8001d40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2500      	movs	r5, #0
 8001d48:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d4e:	2305      	movs	r3, #5
 8001d50:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	a903      	add	r1, sp, #12
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f000 ffba 	bl	8002cd0 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001d5c:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <HAL_SPI_MspInit+0xd0>)
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_SPI_MspInit+0xd4>)
 8001d60:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d62:	6045      	str	r5, [r0, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d64:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6a:	6105      	str	r5, [r0, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6c:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001d6e:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d70:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d72:	f000 fd87 	bl	8002884 <HAL_DMA_Init>
 8001d76:	b9f0      	cbnz	r0, 8001db6 <HAL_SPI_MspInit+0xbe>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_SPI_MspInit+0xd0>)
 8001d7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d7c:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <HAL_SPI_MspInit+0xd8>)
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_SPI_MspInit+0xdc>)
 8001d82:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d84:	2310      	movs	r3, #16
 8001d86:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	60c2      	str	r2, [r0, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d90:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d92:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d94:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d96:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d98:	f000 fd74 	bl	8002884 <HAL_DMA_Init>
 8001d9c:	b970      	cbnz	r0, 8001dbc <HAL_SPI_MspInit+0xc4>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_SPI_MspInit+0xd8>)
 8001da0:	6563      	str	r3, [r4, #84]	; 0x54
 8001da2:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	4611      	mov	r1, r2
 8001da8:	2023      	movs	r0, #35	; 0x23
 8001daa:	f000 fd01 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001dae:	2023      	movs	r0, #35	; 0x23
 8001db0:	f000 fd32 	bl	8002818 <HAL_NVIC_EnableIRQ>
}
 8001db4:	e7ac      	b.n	8001d10 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8001db6:	f7ff fe63 	bl	8001a80 <Error_Handler>
 8001dba:	e7dd      	b.n	8001d78 <HAL_SPI_MspInit+0x80>
      Error_Handler();
 8001dbc:	f7ff fe60 	bl	8001a80 <Error_Handler>
 8001dc0:	e7ed      	b.n	8001d9e <HAL_SPI_MspInit+0xa6>
 8001dc2:	bf00      	nop
 8001dc4:	40013000 	.word	0x40013000
 8001dc8:	20000394 	.word	0x20000394
 8001dcc:	4002001c 	.word	0x4002001c
 8001dd0:	200003dc 	.word	0x200003dc
 8001dd4:	40020030 	.word	0x40020030

08001dd8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8001dd8:	6802      	ldr	r2, [r0, #0]
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_TIM_Base_MspInit+0x3c>)
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d000      	beq.n	8001de2 <HAL_TIM_Base_MspInit+0xa>
 8001de0:	4770      	bx	lr
{
 8001de2:	b500      	push	{lr}
 8001de4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001de6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001dea:	69da      	ldr	r2, [r3, #28]
 8001dec:	f042 0210 	orr.w	r2, r2, #16
 8001df0:	61da      	str	r2, [r3, #28]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4611      	mov	r1, r2
 8001e00:	2036      	movs	r0, #54	; 0x36
 8001e02:	f000 fcd5 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001e06:	2036      	movs	r0, #54	; 0x36
 8001e08:	f000 fd06 	bl	8002818 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e0c:	b003      	add	sp, #12
 8001e0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e12:	bf00      	nop
 8001e14:	40001000 	.word	0x40001000

08001e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b500      	push	{lr}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, TickPriority ,0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2037      	movs	r0, #55	; 0x37
 8001e22:	f000 fcc5 	bl	80027b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001e26:	2037      	movs	r0, #55	; 0x37
 8001e28:	f000 fcf6 	bl	8002818 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_InitTick+0x6c>)
 8001e2e:	69da      	ldr	r2, [r3, #28]
 8001e30:	f042 0220 	orr.w	r2, r2, #32
 8001e34:	61da      	str	r2, [r3, #28]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e40:	a902      	add	r1, sp, #8
 8001e42:	a803      	add	r0, sp, #12
 8001e44:	f001 fc50 	bl	80036e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e48:	f001 fc38 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 8001e4c:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <HAL_InitTick+0x70>)
 8001e50:	fba0 2303 	umull	r2, r3, r0, r3
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <HAL_InitTick+0x74>)
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_InitTick+0x78>)
 8001e5c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001e5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e62:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001e64:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001e6c:	f002 fcce 	bl	800480c <HAL_TIM_Base_Init>
 8001e70:	b118      	cbz	r0, 8001e7a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 8001e72:	2001      	movs	r0, #1
}
 8001e74:	b009      	add	sp, #36	; 0x24
 8001e76:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim7);
 8001e7a:	4804      	ldr	r0, [pc, #16]	; (8001e8c <HAL_InitTick+0x74>)
 8001e7c:	f002 fb72 	bl	8004564 <HAL_TIM_Base_Start_IT>
 8001e80:	e7f8      	b.n	8001e74 <HAL_InitTick+0x5c>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	431bde83 	.word	0x431bde83
 8001e8c:	2000042c 	.word	0x2000042c
 8001e90:	40001400 	.word	0x40001400

08001e94 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <NMI_Handler>

08001e96 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler>

08001e98 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler>

08001e9a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <BusFault_Handler>

08001e9c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <UsageFault_Handler>

08001e9e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea0:	4770      	bx	lr

08001ea2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	4770      	bx	lr
	...

08001ea8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ea8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001eaa:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <DMA1_Channel2_IRQHandler+0xc>)
 8001eac:	f000 fd71 	bl	8002992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001eb0:	bd08      	pop	{r3, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000394 	.word	0x20000394

08001eb8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001eb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001eba:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA1_Channel3_IRQHandler+0xc>)
 8001ebc:	f000 fd69 	bl	8002992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */


  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ec0:	bd08      	pop	{r3, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200003dc 	.word	0x200003dc

08001ec8 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001ec8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001eca:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <CAN_TX_IRQHandler+0xc>)
 8001ecc:	f000 fb38 	bl	8002540 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8001ed0:	bd08      	pop	{r3, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200000e8 	.word	0x200000e8

08001ed8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001eda:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <CAN_RX0_IRQHandler+0xc>)
 8001edc:	f000 fb30 	bl	8002540 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001ee0:	bd08      	pop	{r3, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200000e8 	.word	0x200000e8

08001ee8 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001ee8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001eea:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <CAN_RX1_IRQHandler+0xc>)
 8001eec:	f000 fb28 	bl	8002540 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001ef0:	bd08      	pop	{r3, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200000e8 	.word	0x200000e8

08001ef8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001efa:	4802      	ldr	r0, [pc, #8]	; (8001f04 <SPI1_IRQHandler+0xc>)
 8001efc:	f002 fa96 	bl	800442c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f00:	bd08      	pop	{r3, pc}
 8001f02:	bf00      	nop
 8001f04:	200002cc 	.word	0x200002cc

08001f08 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001f08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <TIM6_DAC1_IRQHandler+0xc>)
 8001f0c:	f002 fb68 	bl	80045e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001f10:	bd08      	pop	{r3, pc}
 8001f12:	bf00      	nop
 8001f14:	2000020c 	.word	0x2000020c

08001f18 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001f18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f1a:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM7_DAC2_IRQHandler+0xc>)
 8001f1c:	f002 fb60 	bl	80045e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001f20:	bd08      	pop	{r3, pc}
 8001f22:	bf00      	nop
 8001f24:	2000042c 	.word	0x2000042c

08001f28 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <SystemInit+0x10>)
 8001f2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f42:	490e      	ldr	r1, [pc, #56]	; (8001f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <LoopForever+0xe>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f58:	4c0b      	ldr	r4, [pc, #44]	; (8001f88 <LoopForever+0x16>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f66:	f7ff ffdf 	bl	8001f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f003 ffd9 	bl	8005f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f6e:	f7ff fe37 	bl	8001be0 <main>

08001f72 <LoopForever>:

LoopForever:
    b LoopForever
 8001f72:	e7fe      	b.n	8001f72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f74:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f7c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001f80:	080061d8 	.word	0x080061d8
  ldr r2, =_sbss
 8001f84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f88:	200004a0 	.word	0x200004a0

08001f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC1_2_IRQHandler>
	...

08001f90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_Init+0x20>)
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f000 fbf5 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff ff38 	bl	8001e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa8:	f7ff fe40 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001fac:	2000      	movs	r0, #0
 8001fae:	bd08      	pop	{r3, pc}
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_IncTick+0x10>)
 8001fb6:	6811      	ldr	r1, [r2, #0]
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_IncTick+0x14>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	440b      	add	r3, r1
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000478 	.word	0x20000478
 8001fc8:	2000000c 	.word	0x2000000c

08001fcc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <HAL_GetTick+0x8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000478 	.word	0x20000478

08001fd8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b538      	push	{r3, r4, r5, lr}
 8001fda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff fff6 	bl	8001fcc <HAL_GetTick>
 8001fe0:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001fe6:	d002      	beq.n	8001fee <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <HAL_Delay+0x24>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fee:	f7ff ffed 	bl	8001fcc <HAL_GetTick>
 8001ff2:	1b40      	subs	r0, r0, r5
 8001ff4:	42a0      	cmp	r0, r4
 8001ff6:	d3fa      	bcc.n	8001fee <HAL_Delay+0x16>
  {
  }
}
 8001ff8:	bd38      	pop	{r3, r4, r5, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000000c 	.word	0x2000000c

08002000 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002000:	2800      	cmp	r0, #0
 8002002:	f000 80a1 	beq.w	8002148 <HAL_CAN_Init+0x148>
{
 8002006:	b538      	push	{r3, r4, r5, lr}
 8002008:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800200a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800200e:	b1d3      	cbz	r3, 8002046 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002010:	6822      	ldr	r2, [r4, #0]
 8002012:	6813      	ldr	r3, [r2, #0]
 8002014:	f023 0302 	bic.w	r3, r3, #2
 8002018:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201a:	f7ff ffd7 	bl	8001fcc <HAL_GetTick>
 800201e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	f012 0f02 	tst.w	r2, #2
 8002028:	d010      	beq.n	800204c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800202a:	f7ff ffcf 	bl	8001fcc <HAL_GetTick>
 800202e:	1b40      	subs	r0, r0, r5
 8002030:	280a      	cmp	r0, #10
 8002032:	d9f5      	bls.n	8002020 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203a:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800203c:	2305      	movs	r3, #5
 800203e:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8002042:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002044:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8002046:	f7ff fe09 	bl	8001c5c <HAL_CAN_MspInit>
 800204a:	e7e1      	b.n	8002010 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002054:	f7ff ffba 	bl	8001fcc <HAL_GetTick>
 8002058:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	f012 0f01 	tst.w	r2, #1
 8002062:	d10d      	bne.n	8002080 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002064:	f7ff ffb2 	bl	8001fcc <HAL_GetTick>
 8002068:	1b40      	subs	r0, r0, r5
 800206a:	280a      	cmp	r0, #10
 800206c:	d9f5      	bls.n	800205a <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800206e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002074:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002076:	2305      	movs	r3, #5
 8002078:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
 800207e:	e7e1      	b.n	8002044 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002080:	7e22      	ldrb	r2, [r4, #24]
 8002082:	2a01      	cmp	r2, #1
 8002084:	d03d      	beq.n	8002102 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800208e:	7e63      	ldrb	r3, [r4, #25]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d03b      	beq.n	800210c <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800209c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800209e:	7ea3      	ldrb	r3, [r4, #26]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d039      	beq.n	8002118 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020a4:	6822      	ldr	r2, [r4, #0]
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	f023 0320 	bic.w	r3, r3, #32
 80020ac:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020ae:	7ee3      	ldrb	r3, [r4, #27]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d037      	beq.n	8002124 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	6813      	ldr	r3, [r2, #0]
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020be:	7f23      	ldrb	r3, [r4, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d035      	beq.n	8002130 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020c4:	6822      	ldr	r2, [r4, #0]
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	f023 0308 	bic.w	r3, r3, #8
 80020cc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020ce:	7f63      	ldrb	r3, [r4, #29]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d033      	beq.n	800213c <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020d4:	6822      	ldr	r2, [r4, #0]
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f023 0304 	bic.w	r3, r3, #4
 80020dc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020de:	68a3      	ldr	r3, [r4, #8]
 80020e0:	68e2      	ldr	r2, [r4, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	6922      	ldr	r2, [r4, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	6962      	ldr	r2, [r4, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	6862      	ldr	r2, [r4, #4]
 80020ee:	3a01      	subs	r2, #1
 80020f0:	6821      	ldr	r1, [r4, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020f6:	2000      	movs	r0, #0
 80020f8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002100:	e7a0      	b.n	8002044 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e7c0      	b.n	800208e <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e7c2      	b.n	800209e <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	6813      	ldr	r3, [r2, #0]
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e7c4      	b.n	80020ae <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	6813      	ldr	r3, [r2, #0]
 8002128:	f023 0310 	bic.w	r3, r3, #16
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e7c6      	b.n	80020be <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002130:	6822      	ldr	r2, [r4, #0]
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e7c8      	b.n	80020ce <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800213c:	6822      	ldr	r2, [r4, #0]
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e7ca      	b.n	80020de <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8002148:	2001      	movs	r0, #1
}
 800214a:	4770      	bx	lr

0800214c <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800214c:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800214e:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002152:	3b01      	subs	r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d905      	bls.n	8002166 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800215a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002162:	2001      	movs	r0, #1
  }
}
 8002164:	4770      	bx	lr
{
 8002166:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002168:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002174:	694b      	ldr	r3, [r1, #20]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2001      	movs	r0, #1
 800217c:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002180:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8002184:	43dc      	mvns	r4, r3
 8002186:	ea20 0003 	bic.w	r0, r0, r3
 800218a:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800218e:	69c8      	ldr	r0, [r1, #28]
 8002190:	b9a8      	cbnz	r0, 80021be <HAL_CAN_ConfigFilter+0x72>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002192:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8002196:	4020      	ands	r0, r4
 8002198:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800219c:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800219e:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021a0:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021a2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021a6:	3048      	adds	r0, #72	; 0x48
 80021a8:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021ac:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021ae:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021b0:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021b2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021b6:	3048      	adds	r0, #72	; 0x48
 80021b8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80021bc:	6045      	str	r5, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021be:	69c8      	ldr	r0, [r1, #28]
 80021c0:	2801      	cmp	r0, #1
 80021c2:	d019      	beq.n	80021f8 <HAL_CAN_ConfigFilter+0xac>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021c4:	6988      	ldr	r0, [r1, #24]
 80021c6:	bb70      	cbnz	r0, 8002226 <HAL_CAN_ConfigFilter+0xda>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80021cc:	4020      	ands	r0, r4
 80021ce:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021d2:	6908      	ldr	r0, [r1, #16]
 80021d4:	bb68      	cbnz	r0, 8002232 <HAL_CAN_ConfigFilter+0xe6>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021d6:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 80021da:	4004      	ands	r4, r0
 80021dc:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021e0:	6a09      	ldr	r1, [r1, #32]
 80021e2:	2901      	cmp	r1, #1
 80021e4:	d02b      	beq.n	800223e <HAL_CAN_ConfigFilter+0xf2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021e6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 80021f2:	2000      	movs	r0, #0
}
 80021f4:	bc70      	pop	{r4, r5, r6}
 80021f6:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80021f8:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 80021fc:	4318      	orrs	r0, r3
 80021fe:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002202:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002204:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002206:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002208:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800220c:	3048      	adds	r0, #72	; 0x48
 800220e:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002212:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002214:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002216:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002218:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800221c:	3048      	adds	r0, #72	; 0x48
 800221e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002222:	6045      	str	r5, [r0, #4]
 8002224:	e7ce      	b.n	80021c4 <HAL_CAN_ConfigFilter+0x78>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002226:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800222a:	4318      	orrs	r0, r3
 800222c:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8002230:	e7cf      	b.n	80021d2 <HAL_CAN_ConfigFilter+0x86>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002232:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8002236:	4318      	orrs	r0, r3
 8002238:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 800223c:	e7d0      	b.n	80021e0 <HAL_CAN_ConfigFilter+0x94>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800223e:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8002242:	430b      	orrs	r3, r1
 8002244:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8002248:	e7cd      	b.n	80021e6 <HAL_CAN_ConfigFilter+0x9a>

0800224a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800224a:	b570      	push	{r4, r5, r6, lr}
 800224c:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800224e:	f890 5020 	ldrb.w	r5, [r0, #32]
 8002252:	b2ed      	uxtb	r5, r5
 8002254:	2d01      	cmp	r5, #1
 8002256:	d006      	beq.n	8002266 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002258:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800225a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800225e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002260:	2501      	movs	r5, #1
  }
}
 8002262:	4628      	mov	r0, r5
 8002264:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002266:	2302      	movs	r3, #2
 8002268:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800226c:	6802      	ldr	r2, [r0, #0]
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002276:	f7ff fea9 	bl	8001fcc <HAL_GetTick>
 800227a:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f013 0f01 	tst.w	r3, #1
 8002284:	d00c      	beq.n	80022a0 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002286:	f7ff fea1 	bl	8001fcc <HAL_GetTick>
 800228a:	1b83      	subs	r3, r0, r6
 800228c:	2b0a      	cmp	r3, #10
 800228e:	d9f5      	bls.n	800227c <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002296:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002298:	2305      	movs	r3, #5
 800229a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800229e:	e7e0      	b.n	8002262 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022a0:	2500      	movs	r5, #0
 80022a2:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 80022a4:	e7dd      	b.n	8002262 <HAL_CAN_Start+0x18>

080022a6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80022a6:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a8:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022ac:	6805      	ldr	r5, [r0, #0]
 80022ae:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022b0:	3c01      	subs	r4, #1
 80022b2:	b2e4      	uxtb	r4, r4
 80022b4:	2c01      	cmp	r4, #1
 80022b6:	d865      	bhi.n	8002384 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022b8:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 80022bc:	d05c      	beq.n	8002378 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022be:	f3c5 6401 	ubfx	r4, r5, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80022c2:	2c02      	cmp	r4, #2
 80022c4:	d905      	bls.n	80022d2 <HAL_CAN_AddTxMessage+0x2c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80022c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022cc:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80022ce:	2001      	movs	r0, #1
 80022d0:	e05d      	b.n	800238e <HAL_CAN_AddTxMessage+0xe8>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022d2:	2501      	movs	r5, #1
 80022d4:	40a5      	lsls	r5, r4
 80022d6:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022d8:	688b      	ldr	r3, [r1, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d139      	bne.n	8002352 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022de:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 80022e0:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022e2:	6805      	ldr	r5, [r0, #0]
 80022e4:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 80022e8:	f104 0318 	add.w	r3, r4, #24
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	50ee      	str	r6, [r5, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022f0:	6803      	ldr	r3, [r0, #0]
 80022f2:	690d      	ldr	r5, [r1, #16]
 80022f4:	f104 0618 	add.w	r6, r4, #24
 80022f8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80022fc:	605d      	str	r5, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022fe:	7d0b      	ldrb	r3, [r1, #20]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d031      	beq.n	8002368 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002304:	79d1      	ldrb	r1, [r2, #7]
 8002306:	7993      	ldrb	r3, [r2, #6]
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800230e:	7951      	ldrb	r1, [r2, #5]
 8002310:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002314:	7915      	ldrb	r5, [r2, #4]
 8002316:	6801      	ldr	r1, [r0, #0]
 8002318:	432b      	orrs	r3, r5
 800231a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800231e:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002322:	78d1      	ldrb	r1, [r2, #3]
 8002324:	7893      	ldrb	r3, [r2, #2]
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800232c:	7851      	ldrb	r1, [r2, #1]
 800232e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002332:	7811      	ldrb	r1, [r2, #0]
 8002334:	6802      	ldr	r2, [r0, #0]
 8002336:	430b      	orrs	r3, r1
 8002338:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800233c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002340:	6802      	ldr	r2, [r0, #0]
 8002342:	3418      	adds	r4, #24
 8002344:	0124      	lsls	r4, r4, #4
 8002346:	5913      	ldr	r3, [r2, r4]
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	5113      	str	r3, [r2, r4]

      /* Return function status */
      return HAL_OK;
 800234e:	2000      	movs	r0, #0
 8002350:	e01d      	b.n	800238e <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002352:	684d      	ldr	r5, [r1, #4]
 8002354:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
                                                           pHeader->RTR);
 8002358:	68cd      	ldr	r5, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800235a:	6806      	ldr	r6, [r0, #0]
                                                           pHeader->IDE |
 800235c:	432b      	orrs	r3, r5
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800235e:	f104 0518 	add.w	r5, r4, #24
 8002362:	012d      	lsls	r5, r5, #4
 8002364:	5173      	str	r3, [r6, r5]
 8002366:	e7c3      	b.n	80022f0 <HAL_CAN_AddTxMessage+0x4a>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002374:	6059      	str	r1, [r3, #4]
 8002376:	e7c5      	b.n	8002304 <HAL_CAN_AddTxMessage+0x5e>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002378:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800237a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237e:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8002380:	2001      	movs	r0, #1
 8002382:	e004      	b.n	800238e <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002384:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800238c:	2001      	movs	r0, #1
  }
}
 800238e:	bc70      	pop	{r4, r5, r6}
 8002390:	4770      	bx	lr

08002392 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002392:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002396:	3b01      	subs	r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d901      	bls.n	80023a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 800239e:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 80023a0:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80023a2:	6803      	ldr	r3, [r0, #0]
 80023a4:	6898      	ldr	r0, [r3, #8]
 80023a6:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 80023aa:	d000      	beq.n	80023ae <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>
      freelevel++;
 80023ac:	2001      	movs	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 80023b4:	d000      	beq.n	80023b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 80023b6:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80023be:	d0ef      	beq.n	80023a0 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 80023c0:	3001      	adds	r0, #1
 80023c2:	4770      	bx	lr

080023c4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023c4:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c6:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ca:	3c01      	subs	r4, #1
 80023cc:	b2e4      	uxtb	r4, r4
 80023ce:	2c01      	cmp	r4, #1
 80023d0:	f200 8091 	bhi.w	80024f6 <HAL_CAN_GetRxMessage+0x132>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023d4:	b951      	cbnz	r1, 80023ec <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023d6:	6804      	ldr	r4, [r0, #0]
 80023d8:	68e4      	ldr	r4, [r4, #12]
 80023da:	f014 0f03 	tst.w	r4, #3
 80023de:	d110      	bne.n	8002402 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e6:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
 80023ea:	e089      	b.n	8002500 <HAL_CAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023ec:	6804      	ldr	r4, [r0, #0]
 80023ee:	6924      	ldr	r4, [r4, #16]
 80023f0:	f014 0f03 	tst.w	r4, #3
 80023f4:	d105      	bne.n	8002402 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023fc:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
 8002400:	e07e      	b.n	8002500 <HAL_CAN_GetRxMessage+0x13c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002402:	6805      	ldr	r5, [r0, #0]
 8002404:	f101 041b 	add.w	r4, r1, #27
 8002408:	0124      	lsls	r4, r4, #4
 800240a:	592c      	ldr	r4, [r5, r4]
 800240c:	f004 0404 	and.w	r4, r4, #4
 8002410:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002412:	2c00      	cmp	r4, #0
 8002414:	d161      	bne.n	80024da <HAL_CAN_GetRxMessage+0x116>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002416:	6805      	ldr	r5, [r0, #0]
 8002418:	f101 041b 	add.w	r4, r1, #27
 800241c:	0124      	lsls	r4, r4, #4
 800241e:	592c      	ldr	r4, [r5, r4]
 8002420:	0d64      	lsrs	r4, r4, #21
 8002422:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002424:	6805      	ldr	r5, [r0, #0]
 8002426:	f101 041b 	add.w	r4, r1, #27
 800242a:	0124      	lsls	r4, r4, #4
 800242c:	592d      	ldr	r5, [r5, r4]
 800242e:	f005 0502 	and.w	r5, r5, #2
 8002432:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002434:	6805      	ldr	r5, [r0, #0]
 8002436:	4425      	add	r5, r4
 8002438:	686d      	ldr	r5, [r5, #4]
 800243a:	f005 050f 	and.w	r5, r5, #15
 800243e:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002440:	6805      	ldr	r5, [r0, #0]
 8002442:	4425      	add	r5, r4
 8002444:	686d      	ldr	r5, [r5, #4]
 8002446:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800244a:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800244c:	6805      	ldr	r5, [r0, #0]
 800244e:	442c      	add	r4, r5
 8002450:	6864      	ldr	r4, [r4, #4]
 8002452:	0c24      	lsrs	r4, r4, #16
 8002454:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002456:	6802      	ldr	r2, [r0, #0]
 8002458:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800245c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002460:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002462:	6802      	ldr	r2, [r0, #0]
 8002464:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002468:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800246c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002470:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002472:	6802      	ldr	r2, [r0, #0]
 8002474:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002478:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800247c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002480:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002482:	6802      	ldr	r2, [r0, #0]
 8002484:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002488:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800248c:	0e12      	lsrs	r2, r2, #24
 800248e:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002490:	6802      	ldr	r2, [r0, #0]
 8002492:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002496:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800249a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800249c:	6802      	ldr	r2, [r0, #0]
 800249e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024a2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80024a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024aa:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024ac:	6802      	ldr	r2, [r0, #0]
 80024ae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024b2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80024b6:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80024ba:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024bc:	6802      	ldr	r2, [r0, #0]
 80024be:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024c2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80024c6:	0e12      	lsrs	r2, r2, #24
 80024c8:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024ca:	b971      	cbnz	r1, 80024ea <HAL_CAN_GetRxMessage+0x126>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024cc:	6802      	ldr	r2, [r0, #0]
 80024ce:	68d3      	ldr	r3, [r2, #12]
 80024d0:	f043 0320 	orr.w	r3, r3, #32
 80024d4:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80024d6:	2000      	movs	r0, #0
 80024d8:	e012      	b.n	8002500 <HAL_CAN_GetRxMessage+0x13c>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80024da:	6805      	ldr	r5, [r0, #0]
 80024dc:	f101 041b 	add.w	r4, r1, #27
 80024e0:	0124      	lsls	r4, r4, #4
 80024e2:	592c      	ldr	r4, [r5, r4]
 80024e4:	08e4      	lsrs	r4, r4, #3
 80024e6:	6054      	str	r4, [r2, #4]
 80024e8:	e79c      	b.n	8002424 <HAL_CAN_GetRxMessage+0x60>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024ea:	6802      	ldr	r2, [r0, #0]
 80024ec:	6913      	ldr	r3, [r2, #16]
 80024ee:	f043 0320 	orr.w	r3, r3, #32
 80024f2:	6113      	str	r3, [r2, #16]
 80024f4:	e7ef      	b.n	80024d6 <HAL_CAN_GetRxMessage+0x112>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80024fe:	2001      	movs	r0, #1
  }
}
 8002500:	bc30      	pop	{r4, r5}
 8002502:	4770      	bx	lr

08002504 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002504:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002508:	3b01      	subs	r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d905      	bls.n	800251c <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002510:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002516:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
  }
}
 800251a:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800251c:	6802      	ldr	r2, [r0, #0]
 800251e:	6953      	ldr	r3, [r2, #20]
 8002520:	4319      	orrs	r1, r3
 8002522:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8002524:	2000      	movs	r0, #0
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002528:	4770      	bx	lr

0800252a <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800252a:	4770      	bx	lr

0800252c <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800252c:	4770      	bx	lr

0800252e <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002530:	4770      	bx	lr

08002532 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002532:	4770      	bx	lr

08002534 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002534:	4770      	bx	lr

08002536 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002536:	4770      	bx	lr

08002538 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002538:	4770      	bx	lr

0800253a <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800253c:	4770      	bx	lr

0800253e <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800253e:	4770      	bx	lr

08002540 <HAL_CAN_IRQHandler>:
{
 8002540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002544:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002546:	6803      	ldr	r3, [r0, #0]
 8002548:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800254a:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800254e:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002550:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002554:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002558:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800255c:	f014 0601 	ands.w	r6, r4, #1
 8002560:	d03b      	beq.n	80025da <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002562:	f017 0601 	ands.w	r6, r7, #1
 8002566:	d016      	beq.n	8002596 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002568:	2201      	movs	r2, #1
 800256a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800256c:	f017 0f02 	tst.w	r7, #2
 8002570:	d108      	bne.n	8002584 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002572:	f017 0f04 	tst.w	r7, #4
 8002576:	d10c      	bne.n	8002592 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002578:	f017 0608 	ands.w	r6, r7, #8
 800257c:	d006      	beq.n	800258c <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800257e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8002582:	e008      	b.n	8002596 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002584:	f7ff ffd0 	bl	8002528 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002588:	2600      	movs	r6, #0
 800258a:	e004      	b.n	8002596 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800258c:	f7ff ffcf 	bl	800252e <HAL_CAN_TxMailbox0AbortCallback>
 8002590:	e001      	b.n	8002596 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002592:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002596:	f417 7f80 	tst.w	r7, #256	; 0x100
 800259a:	d00d      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025a4:	f417 7f00 	tst.w	r7, #512	; 0x200
 80025a8:	f040 8086 	bne.w	80026b8 <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025ac:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80025b0:	f000 8086 	beq.w	80026c0 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025b4:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025b8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80025bc:	d00d      	beq.n	80025da <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025be:	682b      	ldr	r3, [r5, #0]
 80025c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025c4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025c6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80025ca:	f040 8083 	bne.w	80026d4 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025ce:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80025d2:	f000 8083 	beq.w	80026dc <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025d6:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025da:	f014 0f08 	tst.w	r4, #8
 80025de:	d007      	beq.n	80025f0 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025e0:	f01b 0f10 	tst.w	fp, #16
 80025e4:	d004      	beq.n	80025f0 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025e6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025ea:	682b      	ldr	r3, [r5, #0]
 80025ec:	2210      	movs	r2, #16
 80025ee:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025f0:	f014 0f04 	tst.w	r4, #4
 80025f4:	d002      	beq.n	80025fc <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025f6:	f01b 0f08 	tst.w	fp, #8
 80025fa:	d179      	bne.n	80026f0 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025fc:	f014 0f02 	tst.w	r4, #2
 8002600:	d004      	beq.n	800260c <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002602:	682b      	ldr	r3, [r5, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f013 0f03 	tst.w	r3, #3
 800260a:	d178      	bne.n	80026fe <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800260c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8002610:	d007      	beq.n	8002622 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002612:	f01a 0f10 	tst.w	sl, #16
 8002616:	d004      	beq.n	8002622 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002618:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	2210      	movs	r2, #16
 8002620:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002622:	f014 0f20 	tst.w	r4, #32
 8002626:	d002      	beq.n	800262e <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002628:	f01a 0f08 	tst.w	sl, #8
 800262c:	d16b      	bne.n	8002706 <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800262e:	f014 0f10 	tst.w	r4, #16
 8002632:	d004      	beq.n	800263e <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f013 0f03 	tst.w	r3, #3
 800263c:	d16a      	bne.n	8002714 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800263e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8002642:	d002      	beq.n	800264a <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002644:	f018 0f10 	tst.w	r8, #16
 8002648:	d168      	bne.n	800271c <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800264a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800264e:	d002      	beq.n	8002656 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002650:	f018 0f08 	tst.w	r8, #8
 8002654:	d169      	bne.n	800272a <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002656:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800265a:	d07a      	beq.n	8002752 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800265c:	f018 0f04 	tst.w	r8, #4
 8002660:	d074      	beq.n	800274c <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002662:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002666:	d004      	beq.n	8002672 <HAL_CAN_IRQHandler+0x132>
 8002668:	f019 0f01 	tst.w	r9, #1
 800266c:	d001      	beq.n	8002672 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 800266e:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002672:	f414 7f00 	tst.w	r4, #512	; 0x200
 8002676:	d004      	beq.n	8002682 <HAL_CAN_IRQHandler+0x142>
 8002678:	f019 0f02 	tst.w	r9, #2
 800267c:	d001      	beq.n	8002682 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 800267e:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002682:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8002686:	d004      	beq.n	8002692 <HAL_CAN_IRQHandler+0x152>
 8002688:	f019 0f04 	tst.w	r9, #4
 800268c:	d001      	beq.n	8002692 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 800268e:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002692:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8002696:	d059      	beq.n	800274c <HAL_CAN_IRQHandler+0x20c>
 8002698:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 800269c:	d056      	beq.n	800274c <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 800269e:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80026a2:	d065      	beq.n	8002770 <HAL_CAN_IRQHandler+0x230>
 80026a4:	d858      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x218>
 80026a6:	f1b9 0f20 	cmp.w	r9, #32
 80026aa:	d05e      	beq.n	800276a <HAL_CAN_IRQHandler+0x22a>
 80026ac:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80026b0:	d142      	bne.n	8002738 <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026b2:	f046 0620 	orr.w	r6, r6, #32
            break;
 80026b6:	e044      	b.n	8002742 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026b8:	4628      	mov	r0, r5
 80026ba:	f7ff ff36 	bl	800252a <HAL_CAN_TxMailbox1CompleteCallback>
 80026be:	e77b      	b.n	80025b8 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026c0:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80026c4:	d002      	beq.n	80026cc <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026c6:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80026ca:	e775      	b.n	80025b8 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026cc:	4628      	mov	r0, r5
 80026ce:	f7ff ff2f 	bl	8002530 <HAL_CAN_TxMailbox1AbortCallback>
 80026d2:	e771      	b.n	80025b8 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7ff ff29 	bl	800252c <HAL_CAN_TxMailbox2CompleteCallback>
 80026da:	e77e      	b.n	80025da <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026dc:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 80026e0:	d002      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026e2:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80026e6:	e778      	b.n	80025da <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026e8:	4628      	mov	r0, r5
 80026ea:	f7ff ff22 	bl	8002532 <HAL_CAN_TxMailbox2AbortCallback>
 80026ee:	e774      	b.n	80025da <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	2208      	movs	r2, #8
 80026f4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026f6:	4628      	mov	r0, r5
 80026f8:	f7ff ff1c 	bl	8002534 <HAL_CAN_RxFifo0FullCallback>
 80026fc:	e77e      	b.n	80025fc <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026fe:	4628      	mov	r0, r5
 8002700:	f7ff f966 	bl	80019d0 <HAL_CAN_RxFifo0MsgPendingCallback>
 8002704:	e782      	b.n	800260c <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002706:	682b      	ldr	r3, [r5, #0]
 8002708:	2208      	movs	r2, #8
 800270a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800270c:	4628      	mov	r0, r5
 800270e:	f7ff ff13 	bl	8002538 <HAL_CAN_RxFifo1FullCallback>
 8002712:	e78c      	b.n	800262e <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002714:	4628      	mov	r0, r5
 8002716:	f7ff ff0e 	bl	8002536 <HAL_CAN_RxFifo1MsgPendingCallback>
 800271a:	e790      	b.n	800263e <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	2210      	movs	r2, #16
 8002720:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8002722:	4628      	mov	r0, r5
 8002724:	f7ff ff09 	bl	800253a <HAL_CAN_SleepCallback>
 8002728:	e78f      	b.n	800264a <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800272a:	682b      	ldr	r3, [r5, #0]
 800272c:	2208      	movs	r2, #8
 800272e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002730:	4628      	mov	r0, r5
 8002732:	f7ff ff03 	bl	800253c <HAL_CAN_WakeUpFromRxMsgCallback>
 8002736:	e78e      	b.n	8002656 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8002738:	f1b9 0f10 	cmp.w	r9, #16
 800273c:	d101      	bne.n	8002742 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 800273e:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002742:	682a      	ldr	r2, [r5, #0]
 8002744:	6993      	ldr	r3, [r2, #24]
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	2204      	movs	r2, #4
 8002750:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002752:	b99e      	cbnz	r6, 800277c <HAL_CAN_IRQHandler+0x23c>
}
 8002754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8002758:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 800275c:	d00b      	beq.n	8002776 <HAL_CAN_IRQHandler+0x236>
 800275e:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8002762:	d1ee      	bne.n	8002742 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002764:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8002768:	e7eb      	b.n	8002742 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 800276a:	f046 0610 	orr.w	r6, r6, #16
            break;
 800276e:	e7e8      	b.n	8002742 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8002770:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8002774:	e7e5      	b.n	8002742 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8002776:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 800277a:	e7e2      	b.n	8002742 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 800277c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800277e:	431e      	orrs	r6, r3
 8002780:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002782:	4628      	mov	r0, r5
 8002784:	f7ff fedb 	bl	800253e <HAL_CAN_ErrorCallback>
}
 8002788:	e7e4      	b.n	8002754 <HAL_CAN_IRQHandler+0x214>
	...

0800278c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800278e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002790:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	0200      	lsls	r0, r0, #8
 800279a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80027a8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_NVIC_SetPriority+0x60>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ba:	f1c3 0407 	rsb	r4, r3, #7
 80027be:	2c04      	cmp	r4, #4
 80027c0:	bf28      	it	cs
 80027c2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c4:	1d1d      	adds	r5, r3, #4
 80027c6:	2d06      	cmp	r5, #6
 80027c8:	d918      	bls.n	80027fc <HAL_NVIC_SetPriority+0x4c>
 80027ca:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 35ff 	mov.w	r5, #4294967295
 80027d0:	fa05 f404 	lsl.w	r4, r5, r4
 80027d4:	ea21 0104 	bic.w	r1, r1, r4
 80027d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027da:	fa05 f303 	lsl.w	r3, r5, r3
 80027de:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80027e4:	2800      	cmp	r0, #0
 80027e6:	db0b      	blt.n	8002800 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	0109      	lsls	r1, r1, #4
 80027ea:	b2c9      	uxtb	r1, r1
 80027ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80027f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80027f4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80027f8:	bc30      	pop	{r4, r5}
 80027fa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fc:	2300      	movs	r3, #0
 80027fe:	e7e5      	b.n	80027cc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	f000 000f 	and.w	r0, r0, #15
 8002804:	0109      	lsls	r1, r1, #4
 8002806:	b2c9      	uxtb	r1, r1
 8002808:	4b02      	ldr	r3, [pc, #8]	; (8002814 <HAL_NVIC_SetPriority+0x64>)
 800280a:	5419      	strb	r1, [r3, r0]
 800280c:	e7f4      	b.n	80027f8 <HAL_NVIC_SetPriority+0x48>
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00
 8002814:	e000ed14 	.word	0xe000ed14

08002818 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002818:	2800      	cmp	r0, #0
 800281a:	db07      	blt.n	800282c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281c:	f000 021f 	and.w	r2, r0, #31
 8002820:	0940      	lsrs	r0, r0, #5
 8002822:	2301      	movs	r3, #1
 8002824:	4093      	lsls	r3, r2
 8002826:	4a02      	ldr	r2, [pc, #8]	; (8002830 <HAL_NVIC_EnableIRQ+0x18>)
 8002828:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100

08002834 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002834:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002836:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002838:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800283a:	2401      	movs	r4, #1
 800283c:	40b4      	lsls	r4, r6
 800283e:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002840:	6804      	ldr	r4, [r0, #0]
 8002842:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002844:	6843      	ldr	r3, [r0, #4]
 8002846:	2b10      	cmp	r3, #16
 8002848:	d005      	beq.n	8002856 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800284a:	6803      	ldr	r3, [r0, #0]
 800284c:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800284e:	6803      	ldr	r3, [r0, #0]
 8002850:	60da      	str	r2, [r3, #12]
  }
}
 8002852:	bc70      	pop	{r4, r5, r6}
 8002854:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002856:	6803      	ldr	r3, [r0, #0]
 8002858:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800285a:	6803      	ldr	r3, [r0, #0]
 800285c:	60d9      	str	r1, [r3, #12]
 800285e:	e7f8      	b.n	8002852 <DMA_SetConfig+0x1e>

08002860 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002860:	6802      	ldr	r2, [r0, #0]
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <DMA_CalcBaseAndBitshift+0x18>)
 8002864:	4413      	add	r3, r2
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <DMA_CalcBaseAndBitshift+0x1c>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002872:	4b03      	ldr	r3, [pc, #12]	; (8002880 <DMA_CalcBaseAndBitshift+0x20>)
 8002874:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8002876:	4770      	bx	lr
 8002878:	bffdfff8 	.word	0xbffdfff8
 800287c:	cccccccd 	.word	0xcccccccd
 8002880:	40020000 	.word	0x40020000

08002884 <HAL_DMA_Init>:
  if(NULL == hdma)
 8002884:	b320      	cbz	r0, 80028d0 <HAL_DMA_Init+0x4c>
{ 
 8002886:	b510      	push	{r4, lr}
 8002888:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800288a:	2302      	movs	r3, #2
 800288c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002890:	6801      	ldr	r1, [r0, #0]
 8002892:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002894:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002898:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800289c:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289e:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 80028a0:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a2:	68e0      	ldr	r0, [r4, #12]
 80028a4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028aa:	6960      	ldr	r0, [r4, #20]
 80028ac:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ae:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b2:	69e0      	ldr	r0, [r4, #28]
 80028b4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80028b6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80028b8:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff ffd0 	bl	8002860 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c0:	2000      	movs	r0, #0
 80028c2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80028ca:	f884 0020 	strb.w	r0, [r4, #32]
}  
 80028ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028d0:	2001      	movs	r0, #1
}  
 80028d2:	4770      	bx	lr

080028d4 <HAL_DMA_Start_IT>:
{
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80028d8:	f890 0020 	ldrb.w	r0, [r0, #32]
 80028dc:	2801      	cmp	r0, #1
 80028de:	d031      	beq.n	8002944 <HAL_DMA_Start_IT+0x70>
 80028e0:	2001      	movs	r0, #1
 80028e2:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80028e6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 80028ea:	2801      	cmp	r0, #1
 80028ec:	d004      	beq.n	80028f8 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 80028ee:	2300      	movs	r3, #0
 80028f0:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 80028f4:	2002      	movs	r0, #2
} 
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 80028f8:	2002      	movs	r0, #2
 80028fa:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fe:	2000      	movs	r0, #0
 8002900:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002902:	6825      	ldr	r5, [r4, #0]
 8002904:	6828      	ldr	r0, [r5, #0]
 8002906:	f020 0001 	bic.w	r0, r0, #1
 800290a:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800290c:	4620      	mov	r0, r4
 800290e:	f7ff ff91 	bl	8002834 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8002912:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002914:	b15b      	cbz	r3, 800292e <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	6813      	ldr	r3, [r2, #0]
 800291a:	f043 030e 	orr.w	r3, r3, #14
 800291e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800292a:	2000      	movs	r0, #0
 800292c:	e7e3      	b.n	80028f6 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	6813      	ldr	r3, [r2, #0]
 8002932:	f043 030a 	orr.w	r3, r3, #10
 8002936:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002938:	6822      	ldr	r2, [r4, #0]
 800293a:	6813      	ldr	r3, [r2, #0]
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e7ed      	b.n	8002920 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002944:	2002      	movs	r0, #2
 8002946:	e7d6      	b.n	80028f6 <HAL_DMA_Start_IT+0x22>

08002948 <HAL_DMA_Abort_IT>:
{  
 8002948:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800294a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800294e:	2b02      	cmp	r3, #2
 8002950:	d003      	beq.n	800295a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002952:	2304      	movs	r3, #4
 8002954:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002956:	2001      	movs	r0, #1
}
 8002958:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800295a:	6802      	ldr	r2, [r0, #0]
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	f023 030e 	bic.w	r3, r3, #14
 8002962:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002964:	6802      	ldr	r2, [r0, #0]
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800296e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002970:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002972:	2201      	movs	r2, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800297a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800297e:	2300      	movs	r3, #0
 8002980:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002984:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002986:	b113      	cbz	r3, 800298e <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8002988:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2000      	movs	r0, #0
 800298c:	e7e4      	b.n	8002958 <HAL_DMA_Abort_IT+0x10>
 800298e:	2000      	movs	r0, #0
 8002990:	e7e2      	b.n	8002958 <HAL_DMA_Abort_IT+0x10>

08002992 <HAL_DMA_IRQHandler>:
{
 8002992:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002994:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002996:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002998:	6804      	ldr	r4, [r0, #0]
 800299a:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800299c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800299e:	2304      	movs	r3, #4
 80029a0:	408b      	lsls	r3, r1
 80029a2:	4213      	tst	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_DMA_IRQHandler+0x3c>
 80029a6:	f015 0f04 	tst.w	r5, #4
 80029aa:	d010      	beq.n	80029ce <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f013 0f20 	tst.w	r3, #32
 80029b2:	d103      	bne.n	80029bc <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	f023 0304 	bic.w	r3, r3, #4
 80029ba:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80029c0:	2304      	movs	r3, #4
 80029c2:	408b      	lsls	r3, r1
 80029c4:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80029c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80029c8:	b103      	cbz	r3, 80029cc <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 80029ca:	4798      	blx	r3
}  
 80029cc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029ce:	2302      	movs	r3, #2
 80029d0:	408b      	lsls	r3, r1
 80029d2:	4213      	tst	r3, r2
 80029d4:	d01a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x7a>
 80029d6:	f015 0f02 	tst.w	r5, #2
 80029da:	d017      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	f013 0f20 	tst.w	r3, #32
 80029e2:	d106      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	f023 030a 	bic.w	r3, r3, #10
 80029ea:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029f2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80029f6:	2302      	movs	r3, #2
 80029f8:	408b      	lsls	r3, r1
 80029fa:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80029fc:	2300      	movs	r3, #0
 80029fe:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002a02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0e1      	beq.n	80029cc <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8002a08:	4798      	blx	r3
 8002a0a:	e7df      	b.n	80029cc <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	fa03 f101 	lsl.w	r1, r3, r1
 8002a12:	4211      	tst	r1, r2
 8002a14:	d0da      	beq.n	80029cc <HAL_DMA_IRQHandler+0x3a>
 8002a16:	f015 0f08 	tst.w	r5, #8
 8002a1a:	d0d7      	beq.n	80029cc <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	f023 030e 	bic.w	r3, r3, #14
 8002a22:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a24:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002a26:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002a28:	2301      	movs	r3, #1
 8002a2a:	fa03 f202 	lsl.w	r2, r3, r2
 8002a2e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a30:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002a32:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8002a36:	2300      	movs	r3, #0
 8002a38:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002a3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0c4      	beq.n	80029cc <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8002a42:	4798      	blx	r3
}  
 8002a44:	e7c2      	b.n	80029cc <HAL_DMA_IRQHandler+0x3a>
	...

08002a48 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <FLASH_Program_HalfWord+0x14>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002a4e:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <FLASH_Program_HalfWord+0x18>)
 8002a50:	6913      	ldr	r3, [r2, #16]
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002a58:	8001      	strh	r1, [r0, #0]
}
 8002a5a:	4770      	bx	lr
 8002a5c:	20000480 	.word	0x20000480
 8002a60:	40022000 	.word	0x40022000

08002a64 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <FLASH_SetErrorCode+0x34>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f013 0310 	ands.w	r3, r3, #16
 8002a6c:	d005      	beq.n	8002a7a <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <FLASH_SetErrorCode+0x38>)
 8002a70:	69d3      	ldr	r3, [r2, #28]
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002a78:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <FLASH_SetErrorCode+0x34>)
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	f012 0f04 	tst.w	r2, #4
 8002a82:	d006      	beq.n	8002a92 <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002a84:	4905      	ldr	r1, [pc, #20]	; (8002a9c <FLASH_SetErrorCode+0x38>)
 8002a86:	69ca      	ldr	r2, [r1, #28]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002a92:	4a01      	ldr	r2, [pc, #4]	; (8002a98 <FLASH_SetErrorCode+0x34>)
 8002a94:	60d3      	str	r3, [r2, #12]
}  
 8002a96:	4770      	bx	lr
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	20000480 	.word	0x20000480

08002aa0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_FLASH_Unlock+0x2c>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_FLASH_Unlock+0x2c>)
 8002aac:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_FLASH_Unlock+0x30>)
 8002aae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ab0:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002ab4:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002abc:	d103      	bne.n	8002ac6 <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8002abe:	2000      	movs	r0, #0
 8002ac0:	4770      	bx	lr
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	4770      	bx	lr
      status = HAL_ERROR;
 8002ac6:	2001      	movs	r0, #1
}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	45670123 	.word	0x45670123

08002ad4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <HAL_FLASH_Lock+0x10>)
 8002ad6:	6913      	ldr	r3, [r2, #16]
 8002ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002adc:	6113      	str	r3, [r2, #16]
}
 8002ade:	2000      	movs	r0, #0
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40022000 	.word	0x40022000

08002ae8 <FLASH_WaitForLastOperation>:
{
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7ff fa6e 	bl	8001fcc <HAL_GetTick>
 8002af0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <FLASH_WaitForLastOperation+0x5c>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f013 0f01 	tst.w	r3, #1
 8002afa:	d00a      	beq.n	8002b12 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8002afc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002b00:	d0f7      	beq.n	8002af2 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002b02:	b124      	cbz	r4, 8002b0e <FLASH_WaitForLastOperation+0x26>
 8002b04:	f7ff fa62 	bl	8001fcc <HAL_GetTick>
 8002b08:	1b40      	subs	r0, r0, r5
 8002b0a:	42a0      	cmp	r0, r4
 8002b0c:	d9f1      	bls.n	8002af2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8002b0e:	2003      	movs	r0, #3
 8002b10:	e012      	b.n	8002b38 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <FLASH_WaitForLastOperation+0x5c>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f013 0f20 	tst.w	r3, #32
 8002b1a:	d002      	beq.n	8002b22 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <FLASH_WaitForLastOperation+0x5c>)
 8002b1e:	2220      	movs	r2, #32
 8002b20:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <FLASH_WaitForLastOperation+0x5c>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f013 0f10 	tst.w	r3, #16
 8002b2a:	d106      	bne.n	8002b3a <FLASH_WaitForLastOperation+0x52>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <FLASH_WaitForLastOperation+0x5c>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002b30:	f013 0f04 	tst.w	r3, #4
 8002b34:	d101      	bne.n	8002b3a <FLASH_WaitForLastOperation+0x52>
  return HAL_OK;
 8002b36:	2000      	movs	r0, #0
}
 8002b38:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8002b3a:	f7ff ff93 	bl	8002a64 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e7fa      	b.n	8002b38 <FLASH_WaitForLastOperation+0x50>
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000

08002b48 <HAL_FLASH_Program>:
{
 8002b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b4c:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8002b4e:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_FLASH_Program+0x94>)
 8002b50:	7e1b      	ldrb	r3, [r3, #24]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d040      	beq.n	8002bd8 <HAL_FLASH_Program+0x90>
 8002b56:	4604      	mov	r4, r0
 8002b58:	460f      	mov	r7, r1
 8002b5a:	4690      	mov	r8, r2
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <HAL_FLASH_Program+0x94>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b66:	f7ff ffbf 	bl	8002ae8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	bb70      	cbnz	r0, 8002bcc <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b6e:	2c01      	cmp	r4, #1
 8002b70:	d029      	beq.n	8002bc6 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b72:	2c02      	cmp	r4, #2
 8002b74:	d024      	beq.n	8002bc0 <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8002b76:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8002b7a:	461c      	mov	r4, r3
 8002b7c:	454c      	cmp	r4, r9
 8002b7e:	d225      	bcs.n	8002bcc <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002b80:	0121      	lsls	r1, r4, #4
 8002b82:	f1c1 0220 	rsb	r2, r1, #32
 8002b86:	f1a1 0320 	sub.w	r3, r1, #32
 8002b8a:	fa28 f101 	lsr.w	r1, r8, r1
 8002b8e:	fa06 f202 	lsl.w	r2, r6, r2
 8002b92:	4311      	orrs	r1, r2
 8002b94:	fa26 f303 	lsr.w	r3, r6, r3
 8002b98:	4319      	orrs	r1, r3
 8002b9a:	b289      	uxth	r1, r1
 8002b9c:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8002ba0:	f7ff ff52 	bl	8002a48 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002ba4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ba8:	f7ff ff9e 	bl	8002ae8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_FLASH_Program+0x98>)
 8002bae:	691d      	ldr	r5, [r3, #16]
 8002bb0:	f025 0501 	bic.w	r5, r5, #1
 8002bb4:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b940      	cbnz	r0, 8002bcc <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 8002bba:	3401      	adds	r4, #1
 8002bbc:	b2e4      	uxtb	r4, r4
 8002bbe:	e7dd      	b.n	8002b7c <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8002bc0:	f04f 0902 	mov.w	r9, #2
 8002bc4:	e7d9      	b.n	8002b7a <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8002bc6:	f04f 0901 	mov.w	r9, #1
 8002bca:	e7d6      	b.n	8002b7a <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8002bcc:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <HAL_FLASH_Program+0x94>)
 8002bce:	2100      	movs	r1, #0
 8002bd0:	7611      	strb	r1, [r2, #24]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e7fa      	b.n	8002bd2 <HAL_FLASH_Program+0x8a>
 8002bdc:	20000480 	.word	0x20000480
 8002be0:	40022000 	.word	0x40022000

08002be4 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <FLASH_MassErase+0x1c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <FLASH_MassErase+0x20>)
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	f042 0204 	orr.w	r2, r2, #4
 8002bf2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfa:	611a      	str	r2, [r3, #16]
}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000480 	.word	0x20000480
 8002c04:	40022000 	.word	0x40022000

08002c08 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <FLASH_PageErase+0x1c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <FLASH_PageErase+0x20>)
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	f042 0202 	orr.w	r2, r2, #2
 8002c16:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c18:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c20:	611a      	str	r2, [r3, #16]
}
 8002c22:	4770      	bx	lr
 8002c24:	20000480 	.word	0x20000480
 8002c28:	40022000 	.word	0x40022000

08002c2c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8002c2c:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_FLASHEx_Erase+0x9c>)
 8002c2e:	7e1b      	ldrb	r3, [r3, #24]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d045      	beq.n	8002cc0 <HAL_FLASHEx_Erase+0x94>
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	4605      	mov	r5, r0
 8002c38:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <HAL_FLASHEx_Erase+0x9c>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002c40:	6803      	ldr	r3, [r0, #0]
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d020      	beq.n	8002c88 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002c46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c4a:	f7ff ff4d 	bl	8002ae8 <FLASH_WaitForLastOperation>
 8002c4e:	bb88      	cbnz	r0, 8002cb4 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8002c56:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c58:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002c5a:	68aa      	ldr	r2, [r5, #8]
 8002c5c:	686b      	ldr	r3, [r5, #4]
 8002c5e:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	d927      	bls.n	8002cb6 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff ffce 	bl	8002c08 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c70:	f7ff ff3a 	bl	8002ae8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002c74:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <HAL_FLASHEx_Erase+0xa0>)
 8002c76:	6913      	ldr	r3, [r2, #16]
 8002c78:	f023 0302 	bic.w	r3, r3, #2
 8002c7c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8002c7e:	4601      	mov	r1, r0
 8002c80:	b9b0      	cbnz	r0, 8002cb0 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8002c82:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002c86:	e7e8      	b.n	8002c5a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002c88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c8c:	f7ff ff2c 	bl	8002ae8 <FLASH_WaitForLastOperation>
 8002c90:	b108      	cbz	r0, 8002c96 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c92:	2101      	movs	r1, #1
 8002c94:	e00f      	b.n	8002cb6 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8002c96:	f7ff ffa5 	bl	8002be4 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c9e:	f7ff ff23 	bl	8002ae8 <FLASH_WaitForLastOperation>
 8002ca2:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ca4:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_FLASHEx_Erase+0xa0>)
 8002ca6:	6913      	ldr	r3, [r2, #16]
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6113      	str	r3, [r2, #16]
 8002cae:	e002      	b.n	8002cb6 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8002cb0:	6034      	str	r4, [r6, #0]
            break;
 8002cb2:	e000      	b.n	8002cb6 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cb4:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <HAL_FLASHEx_Erase+0x9c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8002cc0:	2102      	movs	r1, #2
}
 8002cc2:	4608      	mov	r0, r1
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000480 	.word	0x20000480
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002cd4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd6:	e036      	b.n	8002d46 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cd8:	2403      	movs	r4, #3
 8002cda:	e000      	b.n	8002cde <HAL_GPIO_Init+0xe>
 8002cdc:	2400      	movs	r4, #0
 8002cde:	40b4      	lsls	r4, r6
 8002ce0:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ce2:	3502      	adds	r5, #2
 8002ce4:	4e58      	ldr	r6, [pc, #352]	; (8002e48 <HAL_GPIO_Init+0x178>)
 8002ce6:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cea:	4c58      	ldr	r4, [pc, #352]	; (8002e4c <HAL_GPIO_Init+0x17c>)
 8002cec:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002cee:	43d4      	mvns	r4, r2
 8002cf0:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf4:	684f      	ldr	r7, [r1, #4]
 8002cf6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002cfa:	d001      	beq.n	8002d00 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002cfc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8002d00:	4d52      	ldr	r5, [pc, #328]	; (8002e4c <HAL_GPIO_Init+0x17c>)
 8002d02:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002d04:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002d06:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d0a:	684f      	ldr	r7, [r1, #4]
 8002d0c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002d10:	d001      	beq.n	8002d16 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8002d12:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8002d16:	4d4d      	ldr	r5, [pc, #308]	; (8002e4c <HAL_GPIO_Init+0x17c>)
 8002d18:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002d1c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d20:	684f      	ldr	r7, [r1, #4]
 8002d22:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002d26:	d001      	beq.n	8002d2c <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8002d28:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8002d2c:	4d47      	ldr	r5, [pc, #284]	; (8002e4c <HAL_GPIO_Init+0x17c>)
 8002d2e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8002d30:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002d32:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d34:	684e      	ldr	r6, [r1, #4]
 8002d36:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002d3a:	d001      	beq.n	8002d40 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8002d3c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8002d40:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <HAL_GPIO_Init+0x17c>)
 8002d42:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8002d44:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d46:	680a      	ldr	r2, [r1, #0]
 8002d48:	fa32 f403 	lsrs.w	r4, r2, r3
 8002d4c:	d07a      	beq.n	8002e44 <HAL_GPIO_Init+0x174>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d4e:	2401      	movs	r4, #1
 8002d50:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8002d52:	4022      	ands	r2, r4
 8002d54:	d0f6      	beq.n	8002d44 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d56:	684d      	ldr	r5, [r1, #4]
 8002d58:	1e6e      	subs	r6, r5, #1
 8002d5a:	2e01      	cmp	r6, #1
 8002d5c:	d903      	bls.n	8002d66 <HAL_GPIO_Init+0x96>
 8002d5e:	2d11      	cmp	r5, #17
 8002d60:	d001      	beq.n	8002d66 <HAL_GPIO_Init+0x96>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d62:	2d12      	cmp	r5, #18
 8002d64:	d112      	bne.n	8002d8c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8002d66:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d68:	005f      	lsls	r7, r3, #1
 8002d6a:	2503      	movs	r5, #3
 8002d6c:	40bd      	lsls	r5, r7
 8002d6e:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d72:	68cd      	ldr	r5, [r1, #12]
 8002d74:	40bd      	lsls	r5, r7
 8002d76:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002d78:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d7a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d80:	684d      	ldr	r5, [r1, #4]
 8002d82:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8002d86:	409c      	lsls	r4, r3
 8002d88:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002d8a:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002d8c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d8e:	005e      	lsls	r6, r3, #1
 8002d90:	2503      	movs	r5, #3
 8002d92:	40b5      	lsls	r5, r6
 8002d94:	43ec      	mvns	r4, r5
 8002d96:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d9a:	688d      	ldr	r5, [r1, #8]
 8002d9c:	40b5      	lsls	r5, r6
 8002d9e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002da0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da2:	684d      	ldr	r5, [r1, #4]
 8002da4:	2d02      	cmp	r5, #2
 8002da6:	d001      	beq.n	8002dac <HAL_GPIO_Init+0xdc>
 8002da8:	2d12      	cmp	r5, #18
 8002daa:	d113      	bne.n	8002dd4 <HAL_GPIO_Init+0x104>
        temp = GPIOx->AFR[position >> 3u];
 8002dac:	08df      	lsrs	r7, r3, #3
 8002dae:	3708      	adds	r7, #8
 8002db0:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002db4:	f003 0507 	and.w	r5, r3, #7
 8002db8:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002dbc:	250f      	movs	r5, #15
 8002dbe:	fa05 f50c 	lsl.w	r5, r5, ip
 8002dc2:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dc6:	690d      	ldr	r5, [r1, #16]
 8002dc8:	fa05 f50c 	lsl.w	r5, r5, ip
 8002dcc:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002dd0:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8002dd4:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dd6:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dd8:	684c      	ldr	r4, [r1, #4]
 8002dda:	f004 0403 	and.w	r4, r4, #3
 8002dde:	40b4      	lsls	r4, r6
 8002de0:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002de2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de4:	684c      	ldr	r4, [r1, #4]
 8002de6:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002dea:	d0ab      	beq.n	8002d44 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dec:	4c18      	ldr	r4, [pc, #96]	; (8002e50 <HAL_GPIO_Init+0x180>)
 8002dee:	69a5      	ldr	r5, [r4, #24]
 8002df0:	f045 0501 	orr.w	r5, r5, #1
 8002df4:	61a5      	str	r5, [r4, #24]
 8002df6:	69a4      	ldr	r4, [r4, #24]
 8002df8:	f004 0401 	and.w	r4, r4, #1
 8002dfc:	9401      	str	r4, [sp, #4]
 8002dfe:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e00:	089d      	lsrs	r5, r3, #2
 8002e02:	1cae      	adds	r6, r5, #2
 8002e04:	4c10      	ldr	r4, [pc, #64]	; (8002e48 <HAL_GPIO_Init+0x178>)
 8002e06:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e0a:	f003 0403 	and.w	r4, r3, #3
 8002e0e:	00a6      	lsls	r6, r4, #2
 8002e10:	240f      	movs	r4, #15
 8002e12:	40b4      	lsls	r4, r6
 8002e14:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e18:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002e1c:	f43f af5e 	beq.w	8002cdc <HAL_GPIO_Init+0xc>
 8002e20:	4c0c      	ldr	r4, [pc, #48]	; (8002e54 <HAL_GPIO_Init+0x184>)
 8002e22:	42a0      	cmp	r0, r4
 8002e24:	d00a      	beq.n	8002e3c <HAL_GPIO_Init+0x16c>
 8002e26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e2a:	42a0      	cmp	r0, r4
 8002e2c:	d008      	beq.n	8002e40 <HAL_GPIO_Init+0x170>
 8002e2e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e32:	42a0      	cmp	r0, r4
 8002e34:	f43f af50 	beq.w	8002cd8 <HAL_GPIO_Init+0x8>
 8002e38:	2405      	movs	r4, #5
 8002e3a:	e750      	b.n	8002cde <HAL_GPIO_Init+0xe>
 8002e3c:	2401      	movs	r4, #1
 8002e3e:	e74e      	b.n	8002cde <HAL_GPIO_Init+0xe>
 8002e40:	2402      	movs	r4, #2
 8002e42:	e74c      	b.n	8002cde <HAL_GPIO_Init+0xe>
  }
}
 8002e44:	b003      	add	sp, #12
 8002e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	40010400 	.word	0x40010400
 8002e50:	40021000 	.word	0x40021000
 8002e54:	48000400 	.word	0x48000400

08002e58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e58:	b10a      	cbz	r2, 8002e5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e5a:	6181      	str	r1, [r0, #24]
 8002e5c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	2800      	cmp	r0, #0
 8002e66:	f000 8301 	beq.w	800346c <HAL_RCC_OscConfig+0x608>
{
 8002e6a:	b570      	push	{r4, r5, r6, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e70:	6803      	ldr	r3, [r0, #0]
 8002e72:	f013 0f01 	tst.w	r3, #1
 8002e76:	d03b      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e78:	4bb5      	ldr	r3, [pc, #724]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d01e      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e84:	4bb2      	ldr	r3, [pc, #712]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d013      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	6863      	ldr	r3, [r4, #4]
 8002e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e96:	d068      	beq.n	8002f6a <HAL_RCC_OscConfig+0x106>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f040 8092 	bne.w	8002fc2 <HAL_RCC_OscConfig+0x15e>
 8002e9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ea2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e05d      	b.n	8002f74 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb8:	4ba5      	ldr	r3, [pc, #660]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002ec0:	d0e6      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eca:	4ba1      	ldr	r3, [pc, #644]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2201      	movs	r2, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	420b      	tst	r3, r1
 8002ee6:	d003      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x8c>
 8002ee8:	6863      	ldr	r3, [r4, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 82c0 	beq.w	8003470 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	f013 0f02 	tst.w	r3, #2
 8002ef6:	f000 80c5 	beq.w	8003084 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002efa:	4b95      	ldr	r3, [pc, #596]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f013 0f0c 	tst.w	r3, #12
 8002f02:	f000 809c 	beq.w	800303e <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f06:	4b92      	ldr	r3, [pc, #584]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	f000 808f 	beq.w	8003032 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f14:	6923      	ldr	r3, [r4, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80f2 	beq.w	8003100 <HAL_RCC_OscConfig+0x29c>
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7ff f84b 	bl	8001fcc <HAL_GetTick>
 8002f36:	4605      	mov	r5, r0
 8002f38:	2302      	movs	r3, #2
 8002f3a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3e:	4b84      	ldr	r3, [pc, #528]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	2302      	movs	r3, #2
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2201      	movs	r2, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	420b      	tst	r3, r1
 8002f58:	f040 80c3 	bne.w	80030e2 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7ff f836 	bl	8001fcc <HAL_GetTick>
 8002f60:	1b40      	subs	r0, r0, r5
 8002f62:	2802      	cmp	r0, #2
 8002f64:	d9e8      	bls.n	8002f38 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
 8002f68:	e28b      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6a:	4a79      	ldr	r2, [pc, #484]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f6c:	6813      	ldr	r3, [r2, #0]
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f74:	4a76      	ldr	r2, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f78:	f023 030f 	bic.w	r3, r3, #15
 8002f7c:	68a1      	ldr	r1, [r4, #8]
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d036      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002f88:	f7ff f820 	bl	8001fcc <HAL_GetTick>
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f92:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2201      	movs	r2, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	420b      	tst	r3, r1
 8002fb2:	d19d      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff f80a 	bl	8001fcc <HAL_GetTick>
 8002fb8:	1b40      	subs	r0, r0, r5
 8002fba:	2864      	cmp	r0, #100	; 0x64
 8002fbc:	d9e7      	bls.n	8002f8e <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	e25f      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCC_OscConfig+0x178>
 8002fc8:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e7cb      	b.n	8002f74 <HAL_RCC_OscConfig+0x110>
 8002fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fe0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e7be      	b.n	8002f74 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002ff6:	f7fe ffe9 	bl	8001fcc <HAL_GetTick>
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003000:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003004:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2201      	movs	r2, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	420b      	tst	r3, r1
 8003020:	f43f af66 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe ffd2 	bl	8001fcc <HAL_GetTick>
 8003028:	1b40      	subs	r0, r0, r5
 800302a:	2864      	cmp	r0, #100	; 0x64
 800302c:	d9e6      	bls.n	8002ffc <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 800302e:	2003      	movs	r0, #3
 8003030:	e227      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800303a:	f47f af6b 	bne.w	8002f14 <HAL_RCC_OscConfig+0xb0>
 800303e:	2302      	movs	r3, #2
 8003040:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003044:	4b42      	ldr	r3, [pc, #264]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	2302      	movs	r3, #2
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2201      	movs	r2, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	420b      	tst	r3, r1
 800305e:	d003      	beq.n	8003068 <HAL_RCC_OscConfig+0x204>
 8003060:	6923      	ldr	r3, [r4, #16]
 8003062:	4293      	cmp	r3, r2
 8003064:	f040 8206 	bne.w	8003474 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4839      	ldr	r0, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 800306a:	6803      	ldr	r3, [r0, #0]
 800306c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003070:	6961      	ldr	r1, [r4, #20]
 8003072:	22f8      	movs	r2, #248	; 0xf8
 8003074:	fa92 f2a2 	rbit	r2, r2
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	4313      	orrs	r3, r2
 8003082:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	f013 0f08 	tst.w	r3, #8
 800308a:	f000 808d 	beq.w	80031a8 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308e:	69a3      	ldr	r3, [r4, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d061      	beq.n	8003158 <HAL_RCC_OscConfig+0x2f4>
 8003094:	2101      	movs	r1, #1
 8003096:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309a:	fab2 f282 	clz	r2, r2
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x2f0>)
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fe ff91 	bl	8001fcc <HAL_GetTick>
 80030aa:	4605      	mov	r5, r0
 80030ac:	2302      	movs	r3, #2
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	fa93 f2a3 	rbit	r2, r3
 80030b6:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	4a25      	ldr	r2, [pc, #148]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 80030bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2201      	movs	r2, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	420b      	tst	r3, r1
 80030d2:	d169      	bne.n	80031a8 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d4:	f7fe ff7a 	bl	8001fcc <HAL_GetTick>
 80030d8:	1b40      	subs	r0, r0, r5
 80030da:	2802      	cmp	r0, #2
 80030dc:	d9e6      	bls.n	80030ac <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 80030de:	2003      	movs	r0, #3
 80030e0:	e1cf      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e2:	481b      	ldr	r0, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 80030e4:	6803      	ldr	r3, [r0, #0]
 80030e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80030ea:	6961      	ldr	r1, [r4, #20]
 80030ec:	22f8      	movs	r2, #248	; 0xf8
 80030ee:	fa92 f2a2 	rbit	r2, r2
 80030f2:	fab2 f282 	clz	r2, r2
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	4313      	orrs	r3, r2
 80030fc:	6003      	str	r3, [r0, #0]
 80030fe:	e7c1      	b.n	8003084 <HAL_RCC_OscConfig+0x220>
 8003100:	2301      	movs	r3, #1
 8003102:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800310e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003118:	f7fe ff58 	bl	8001fcc <HAL_GetTick>
 800311c:	4605      	mov	r5, r0
 800311e:	2302      	movs	r3, #2
 8003120:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	2302      	movs	r3, #2
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2201      	movs	r2, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	420b      	tst	r3, r1
 800313e:	d0a1      	beq.n	8003084 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003140:	f7fe ff44 	bl	8001fcc <HAL_GetTick>
 8003144:	1b40      	subs	r0, r0, r5
 8003146:	2802      	cmp	r0, #2
 8003148:	d9e9      	bls.n	800311e <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 800314a:	2003      	movs	r0, #3
 800314c:	e199      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	10908120 	.word	0x10908120
 8003158:	2201      	movs	r2, #1
 800315a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315e:	fab2 f282 	clz	r2, r2
 8003162:	4bb7      	ldr	r3, [pc, #732]	; (8003440 <HAL_RCC_OscConfig+0x5dc>)
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316c:	f7fe ff2e 	bl	8001fcc <HAL_GetTick>
 8003170:	4605      	mov	r5, r0
 8003172:	2302      	movs	r3, #2
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003180:	4ab0      	ldr	r2, [pc, #704]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003182:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2201      	movs	r2, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	420b      	tst	r3, r1
 8003198:	d006      	beq.n	80031a8 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319a:	f7fe ff17 	bl	8001fcc <HAL_GetTick>
 800319e:	1b40      	subs	r0, r0, r5
 80031a0:	2802      	cmp	r0, #2
 80031a2:	d9e6      	bls.n	8003172 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80031a4:	2003      	movs	r0, #3
 80031a6:	e16c      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	f013 0f04 	tst.w	r3, #4
 80031ae:	f000 80a9 	beq.w	8003304 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b2:	4ba4      	ldr	r3, [pc, #656]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80031ba:	d10b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4ba1      	ldr	r3, [pc, #644]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031c4:	61da      	str	r2, [r3, #28]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031d0:	2501      	movs	r5, #1
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x372>
    FlagStatus       pwrclkchanged = RESET;
 80031d4:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	4b9c      	ldr	r3, [pc, #624]	; (8003448 <HAL_RCC_OscConfig+0x5e4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80031de:	d010      	beq.n	8003202 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	68e3      	ldr	r3, [r4, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d021      	beq.n	800322a <HAL_RCC_OscConfig+0x3c6>
 80031e6:	bb63      	cbnz	r3, 8003242 <HAL_RCC_OscConfig+0x3de>
 80031e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80031f0:	6a1a      	ldr	r2, [r3, #32]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	621a      	str	r2, [r3, #32]
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	f022 0204 	bic.w	r2, r2, #4
 80031fe:	621a      	str	r2, [r3, #32]
 8003200:	e018      	b.n	8003234 <HAL_RCC_OscConfig+0x3d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003202:	4a91      	ldr	r2, [pc, #580]	; (8003448 <HAL_RCC_OscConfig+0x5e4>)
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800320c:	f7fe fede 	bl	8001fcc <HAL_GetTick>
 8003210:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_OscConfig+0x5e4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f413 7f80 	tst.w	r3, #256	; 0x100
 800321a:	d1e1      	bne.n	80031e0 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fe fed6 	bl	8001fcc <HAL_GetTick>
 8003220:	1b80      	subs	r0, r0, r6
 8003222:	2864      	cmp	r0, #100	; 0x64
 8003224:	d9f5      	bls.n	8003212 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8003226:	2003      	movs	r0, #3
 8003228:	e12b      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322a:	4a86      	ldr	r2, [pc, #536]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 800322c:	6a13      	ldr	r3, [r2, #32]
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003234:	68e3      	ldr	r3, [r4, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7fe fec7 	bl	8001fcc <HAL_GetTick>
 800323e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003242:	2b05      	cmp	r3, #5
 8003244:	d009      	beq.n	800325a <HAL_RCC_OscConfig+0x3f6>
 8003246:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	621a      	str	r2, [r3, #32]
 8003250:	6a1a      	ldr	r2, [r3, #32]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	621a      	str	r2, [r3, #32]
 8003258:	e7ec      	b.n	8003234 <HAL_RCC_OscConfig+0x3d0>
 800325a:	4b7a      	ldr	r3, [pc, #488]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	f042 0204 	orr.w	r2, r2, #4
 8003262:	621a      	str	r2, [r3, #32]
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	621a      	str	r2, [r3, #32]
 800326c:	e7e2      	b.n	8003234 <HAL_RCC_OscConfig+0x3d0>
 800326e:	2302      	movs	r3, #2
 8003270:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003274:	4b73      	ldr	r3, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003276:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003278:	2302      	movs	r3, #2
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2201      	movs	r2, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	4219      	tst	r1, r3
 800328e:	d138      	bne.n	8003302 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003290:	f7fe fe9c 	bl	8001fcc <HAL_GetTick>
 8003294:	1b80      	subs	r0, r0, r6
 8003296:	f241 3388 	movw	r3, #5000	; 0x1388
 800329a:	4298      	cmp	r0, r3
 800329c:	f200 80ec 	bhi.w	8003478 <HAL_RCC_OscConfig+0x614>
 80032a0:	2302      	movs	r3, #2
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0df      	beq.n	800326e <HAL_RCC_OscConfig+0x40a>
 80032ae:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80032b0:	6a19      	ldr	r1, [r3, #32]
 80032b2:	e7e1      	b.n	8003278 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fe fe8a 	bl	8001fcc <HAL_GetTick>
 80032b8:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ba:	e018      	b.n	80032ee <HAL_RCC_OscConfig+0x48a>
 80032bc:	2302      	movs	r3, #2
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	4b60      	ldr	r3, [pc, #384]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80032c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032c6:	2302      	movs	r3, #2
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2201      	movs	r2, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	4219      	tst	r1, r3
 80032dc:	d011      	beq.n	8003302 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe fe75 	bl	8001fcc <HAL_GetTick>
 80032e2:	1b80      	subs	r0, r0, r6
 80032e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80032e8:	4298      	cmp	r0, r3
 80032ea:	f200 80c7 	bhi.w	800347c <HAL_RCC_OscConfig+0x618>
 80032ee:	2302      	movs	r3, #2
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0df      	beq.n	80032bc <HAL_RCC_OscConfig+0x458>
 80032fc:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80032fe:	6a19      	ldr	r1, [r3, #32]
 8003300:	e7e1      	b.n	80032c6 <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003302:	bbb5      	cbnz	r5, 8003372 <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003304:	69e3      	ldr	r3, [r4, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80ba 	beq.w	8003480 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800330c:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 800330e:	6852      	ldr	r2, [r2, #4]
 8003310:	f002 020c 	and.w	r2, r2, #12
 8003314:	2a08      	cmp	r2, #8
 8003316:	f000 8099 	beq.w	800344c <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800331a:	2b02      	cmp	r3, #2
 800331c:	d02f      	beq.n	800337e <HAL_RCC_OscConfig+0x51a>
 800331e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003322:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800332e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fe48 	bl	8001fcc <HAL_GetTick>
 800333c:	4604      	mov	r4, r0
 800333e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003342:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2201      	movs	r2, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	4219      	tst	r1, r3
 8003362:	d06b      	beq.n	800343c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fe32 	bl	8001fcc <HAL_GetTick>
 8003368:	1b00      	subs	r0, r0, r4
 800336a:	2802      	cmp	r0, #2
 800336c:	d9e7      	bls.n	800333e <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 800336e:	2003      	movs	r0, #3
 8003370:	e087      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003374:	69d3      	ldr	r3, [r2, #28]
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	61d3      	str	r3, [r2, #28]
 800337c:	e7c2      	b.n	8003304 <HAL_RCC_OscConfig+0x4a0>
 800337e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003382:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800338e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003398:	f7fe fe18 	bl	8001fcc <HAL_GetTick>
 800339c:	4605      	mov	r5, r0
 800339e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	4219      	tst	r1, r3
 80033c2:	d006      	beq.n	80033d2 <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fe02 	bl	8001fcc <HAL_GetTick>
 80033c8:	1b40      	subs	r0, r0, r5
 80033ca:	2802      	cmp	r0, #2
 80033cc:	d9e7      	bls.n	800339e <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 80033ce:	2003      	movs	r0, #3
 80033d0:	e057      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d2:	491c      	ldr	r1, [pc, #112]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80033d4:	684b      	ldr	r3, [r1, #4]
 80033d6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80033da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033dc:	6a20      	ldr	r0, [r4, #32]
 80033de:	4302      	orrs	r2, r0
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
 80033e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033fe:	f7fe fde5 	bl	8001fcc <HAL_GetTick>
 8003402:	4604      	mov	r4, r0
 8003404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003408:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2201      	movs	r2, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	4219      	tst	r1, r3
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342a:	f7fe fdcf 	bl	8001fcc <HAL_GetTick>
 800342e:	1b00      	subs	r0, r0, r4
 8003430:	2802      	cmp	r0, #2
 8003432:	d9e7      	bls.n	8003404 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8003434:	2003      	movs	r0, #3
 8003436:	e024      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003438:	2000      	movs	r0, #0
 800343a:	e022      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 800343c:	2000      	movs	r0, #0
 800343e:	e020      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 8003440:	10908120 	.word	0x10908120
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344c:	2b01      	cmp	r3, #1
 800344e:	d01a      	beq.n	8003486 <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x630>)
 8003452:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003454:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003458:	6a22      	ldr	r2, [r4, #32]
 800345a:	4291      	cmp	r1, r2
 800345c:	d115      	bne.n	800348a <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800345e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003462:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003464:	4293      	cmp	r3, r2
 8003466:	d112      	bne.n	800348e <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8003468:	2000      	movs	r0, #0
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 800346c:	2001      	movs	r0, #1
}
 800346e:	4770      	bx	lr
        return HAL_ERROR;
 8003470:	2001      	movs	r0, #1
 8003472:	e006      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8003474:	2001      	movs	r0, #1
 8003476:	e004      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8003478:	2003      	movs	r0, #3
 800347a:	e002      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 800347c:	2003      	movs	r0, #3
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8003480:	2000      	movs	r0, #0
}
 8003482:	b002      	add	sp, #8
 8003484:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003486:	2001      	movs	r0, #1
 8003488:	e7fb      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
 800348c:	e7f9      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 800348e:	2001      	movs	r0, #1
 8003490:	e7f7      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800349a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800349c:	f003 020c 	and.w	r2, r3, #12
 80034a0:	2a08      	cmp	r2, #8
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034a4:	4814      	ldr	r0, [pc, #80]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034a6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034a8:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80034ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034b0:	fa92 f2a2 	rbit	r2, r2
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	fa21 f202 	lsr.w	r2, r1, r2
 80034bc:	490f      	ldr	r1, [pc, #60]	; (80034fc <HAL_RCC_GetSysClockFreq+0x64>)
 80034be:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034c0:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80034c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034c4:	f002 020f 	and.w	r2, r2, #15
 80034c8:	210f      	movs	r1, #15
 80034ca:	fa91 f1a1 	rbit	r1, r1
 80034ce:	fab1 f181 	clz	r1, r1
 80034d2:	40ca      	lsrs	r2, r1
 80034d4:	490a      	ldr	r1, [pc, #40]	; (8003500 <HAL_RCC_GetSysClockFreq+0x68>)
 80034d6:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x60>)
 80034e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e4:	fb00 f003 	mul.w	r0, r0, r3
 80034e8:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_GetSysClockFreq+0x6c>)
 80034ec:	fb03 f000 	mul.w	r0, r3, r0
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	007a1200 	.word	0x007a1200
 80034fc:	08005f98 	.word	0x08005f98
 8003500:	08005fa8 	.word	0x08005fa8
 8003504:	003d0900 	.word	0x003d0900

08003508 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003508:	2800      	cmp	r0, #0
 800350a:	f000 80be 	beq.w	800368a <HAL_RCC_ClockConfig+0x182>
{
 800350e:	b570      	push	{r4, r5, r6, lr}
 8003510:	460d      	mov	r5, r1
 8003512:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_RCC_ClockConfig+0x194>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	428b      	cmp	r3, r1
 800351e:	d20b      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003520:	4a5e      	ldr	r2, [pc, #376]	; (800369c <HAL_RCC_ClockConfig+0x194>)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	f023 0307 	bic.w	r3, r3, #7
 8003528:	430b      	orrs	r3, r1
 800352a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	428b      	cmp	r3, r1
 8003534:	f040 80ab 	bne.w	800368e <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f013 0f02 	tst.w	r3, #2
 800353e:	d006      	beq.n	800354e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4a57      	ldr	r2, [pc, #348]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003542:	6853      	ldr	r3, [r2, #4]
 8003544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003548:	68a1      	ldr	r1, [r4, #8]
 800354a:	430b      	orrs	r3, r1
 800354c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	f013 0f01 	tst.w	r3, #1
 8003554:	d05a      	beq.n	800360c <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d02d      	beq.n	80035b8 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355c:	2b02      	cmp	r3, #2
 800355e:	d040      	beq.n	80035e2 <HAL_RCC_ClockConfig+0xda>
 8003560:	2202      	movs	r2, #2
 8003562:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003566:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003568:	6810      	ldr	r0, [r2, #0]
 800356a:	2202      	movs	r2, #2
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	fab2 f282 	clz	r2, r2
 8003574:	f002 021f 	and.w	r2, r2, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	4210      	tst	r0, r2
 8003580:	f000 8087 	beq.w	8003692 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003584:	4946      	ldr	r1, [pc, #280]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003586:	684a      	ldr	r2, [r1, #4]
 8003588:	f022 0203 	bic.w	r2, r2, #3
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003590:	f7fe fd1c 	bl	8001fcc <HAL_GetTick>
 8003594:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b42      	ldr	r3, [pc, #264]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	6862      	ldr	r2, [r4, #4]
 80035a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035a4:	d032      	beq.n	800360c <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a6:	f7fe fd11 	bl	8001fcc <HAL_GetTick>
 80035aa:	1b80      	subs	r0, r0, r6
 80035ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80035b0:	4298      	cmp	r0, r3
 80035b2:	d9f0      	bls.n	8003596 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80035b4:	2003      	movs	r0, #3
 80035b6:	e067      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
 80035b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035bc:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c0:	4a37      	ldr	r2, [pc, #220]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 80035c2:	6810      	ldr	r0, [r2, #0]
 80035c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035c8:	fa92 f2a2 	rbit	r2, r2
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	f002 021f 	and.w	r2, r2, #31
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f202 	lsl.w	r2, r1, r2
 80035da:	4202      	tst	r2, r0
 80035dc:	d1d2      	bne.n	8003584 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 80035de:	2001      	movs	r0, #1
 80035e0:	e052      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
 80035e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4a2d      	ldr	r2, [pc, #180]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 80035ec:	6810      	ldr	r0, [r2, #0]
 80035ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f2:	fa92 f2a2 	rbit	r2, r2
 80035f6:	fab2 f282 	clz	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4210      	tst	r0, r2
 8003606:	d1bd      	bne.n	8003584 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8003608:	2001      	movs	r0, #1
 800360a:	e03d      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_RCC_ClockConfig+0x194>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	42ab      	cmp	r3, r5
 8003616:	d90a      	bls.n	800362e <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x194>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	f023 0307 	bic.w	r3, r3, #7
 8003620:	432b      	orrs	r3, r5
 8003622:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	42ab      	cmp	r3, r5
 800362c:	d133      	bne.n	8003696 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f013 0f04 	tst.w	r3, #4
 8003634:	d006      	beq.n	8003644 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003636:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003638:	6853      	ldr	r3, [r2, #4]
 800363a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800363e:	68e1      	ldr	r1, [r4, #12]
 8003640:	430b      	orrs	r3, r1
 8003642:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f013 0f08 	tst.w	r3, #8
 800364a:	d007      	beq.n	800365c <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 800364e:	6853      	ldr	r3, [r2, #4]
 8003650:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003654:	6921      	ldr	r1, [r4, #16]
 8003656:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800365a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800365c:	f7ff ff1c 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	22f0      	movs	r2, #240	; 0xf0
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	fab2 f282 	clz	r2, r2
 8003672:	40d3      	lsrs	r3, r2
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_RCC_ClockConfig+0x19c>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	40d8      	lsrs	r0, r3
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x1a0>)
 800367c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1a4>)
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	f7fe fbc9 	bl	8001e18 <HAL_InitTick>
  return HAL_OK;
 8003686:	2000      	movs	r0, #0
}
 8003688:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
}
 800368c:	4770      	bx	lr
      return HAL_ERROR;
 800368e:	2001      	movs	r0, #1
 8003690:	e7fa      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8003692:	2001      	movs	r0, #1
 8003694:	e7f8      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8003696:	2001      	movs	r0, #1
 8003698:	e7f6      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
 800369a:	bf00      	nop
 800369c:	40022000 	.word	0x40022000
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08005f80 	.word	0x08005f80
 80036a8:	20000008 	.word	0x20000008
 80036ac:	20000010 	.word	0x20000010

080036b0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80036b0:	4b01      	ldr	r3, [pc, #4]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000008 	.word	0x20000008

080036bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036be:	f7ff fff7 	bl	80036b0 <HAL_RCC_GetHCLKFreq>
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036ce:	fa92 f2a2 	rbit	r2, r2
 80036d2:	fab2 f282 	clz	r2, r2
 80036d6:	40d3      	lsrs	r3, r2
 80036d8:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036da:	5cd3      	ldrb	r3, [r2, r3]
}    
 80036dc:	40d8      	lsrs	r0, r3
 80036de:	bd08      	pop	{r3, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08005f90 	.word	0x08005f90

080036e8 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036e8:	230f      	movs	r3, #15
 80036ea:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_GetClockConfig+0x34>)
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	f002 0203 	and.w	r2, r2, #3
 80036f4:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80036fc:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003704:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800370e:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_GetClockConfig+0x38>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	600b      	str	r3, [r1, #0]
}
 800371a:	4770      	bx	lr
 800371c:	40021000 	.word	0x40021000
 8003720:	40022000 	.word	0x40022000

08003724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	4605      	mov	r5, r0
 800372c:	4688      	mov	r8, r1
 800372e:	4617      	mov	r7, r2
 8003730:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003732:	f7fe fc4b 	bl	8001fcc <HAL_GetTick>
 8003736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003738:	1a1b      	subs	r3, r3, r0
 800373a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800373e:	f7fe fc45 	bl	8001fcc <HAL_GetTick>
 8003742:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003744:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800374c:	fb09 f303 	mul.w	r3, r9, r3
 8003750:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	689c      	ldr	r4, [r3, #8]
 8003756:	ea38 0304 	bics.w	r3, r8, r4
 800375a:	bf0c      	ite	eq
 800375c:	2401      	moveq	r4, #1
 800375e:	2400      	movne	r4, #0
 8003760:	42bc      	cmp	r4, r7
 8003762:	d040      	beq.n	80037e6 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003764:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003768:	d0f3      	beq.n	8003752 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800376a:	f7fe fc2f 	bl	8001fcc <HAL_GetTick>
 800376e:	eba0 000a 	sub.w	r0, r0, sl
 8003772:	4548      	cmp	r0, r9
 8003774:	d20a      	bcs.n	800378c <SPI_WaitFlagStateUntilTimeout+0x68>
 8003776:	f1b9 0f00 	cmp.w	r9, #0
 800377a:	d007      	beq.n	800378c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800377c:	9a01      	ldr	r2, [sp, #4]
 800377e:	b102      	cbz	r2, 8003782 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8003780:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003782:	9b01      	ldr	r3, [sp, #4]
 8003784:	3b01      	subs	r3, #1
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	4691      	mov	r9, r2
 800378a:	e7e2      	b.n	8003752 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800378c:	682a      	ldr	r2, [r5, #0]
 800378e:	6853      	ldr	r3, [r2, #4]
 8003790:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003794:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003796:	686b      	ldr	r3, [r5, #4]
 8003798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379c:	d00b      	beq.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800379e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a4:	d014      	beq.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80037ac:	2300      	movs	r3, #0
 80037ae:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80037b2:	2003      	movs	r0, #3
 80037b4:	e018      	b.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b6:	68ab      	ldr	r3, [r5, #8]
 80037b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037bc:	d002      	beq.n	80037c4 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c2:	d1ec      	bne.n	800379e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80037c4:	682a      	ldr	r2, [r5, #0]
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e7e6      	b.n	800379e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80037d0:	682a      	ldr	r2, [r5, #0]
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	682a      	ldr	r2, [r5, #0]
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e7df      	b.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 80037e6:	2000      	movs	r0, #0
}
 80037e8:	b002      	add	sp, #8
 80037ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ee:	bf00      	nop
 80037f0:	20000008 	.word	0x20000008

080037f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	4607      	mov	r7, r0
 80037fc:	460d      	mov	r5, r1
 80037fe:	4616      	mov	r6, r2
 8003800:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003802:	f7fe fbe3 	bl	8001fcc <HAL_GetTick>
 8003806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003808:	1a1b      	subs	r3, r3, r0
 800380a:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 800380e:	f7fe fbdd 	bl	8001fcc <HAL_GetTick>
 8003812:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003814:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <SPI_WaitFifoStateUntilTimeout+0xd8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800381c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003820:	0d1b      	lsrs	r3, r3, #20
 8003822:	fb09 f303 	mul.w	r3, r9, r3
 8003826:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003828:	e002      	b.n	8003830 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800382a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800382e:	d10b      	bne.n	8003848 <SPI_WaitFifoStateUntilTimeout+0x54>
  while ((hspi->Instance->SR & Fifo) != State)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689c      	ldr	r4, [r3, #8]
 8003834:	402c      	ands	r4, r5
 8003836:	42b4      	cmp	r4, r6
 8003838:	d044      	beq.n	80038c4 <SPI_WaitFifoStateUntilTimeout+0xd0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800383a:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800383e:	d1f4      	bne.n	800382a <SPI_WaitFifoStateUntilTimeout+0x36>
 8003840:	2e00      	cmp	r6, #0
 8003842:	d1f2      	bne.n	800382a <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003844:	7b1b      	ldrb	r3, [r3, #12]
 8003846:	e7f0      	b.n	800382a <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003848:	f7fe fbc0 	bl	8001fcc <HAL_GetTick>
 800384c:	eba0 000a 	sub.w	r0, r0, sl
 8003850:	4548      	cmp	r0, r9
 8003852:	d20a      	bcs.n	800386a <SPI_WaitFifoStateUntilTimeout+0x76>
 8003854:	f1b9 0f00 	cmp.w	r9, #0
 8003858:	d007      	beq.n	800386a <SPI_WaitFifoStateUntilTimeout+0x76>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800385a:	9a01      	ldr	r2, [sp, #4]
 800385c:	b102      	cbz	r2, 8003860 <SPI_WaitFifoStateUntilTimeout+0x6c>
 800385e:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8003860:	9b01      	ldr	r3, [sp, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	4691      	mov	r9, r2
 8003868:	e7e2      	b.n	8003830 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	6853      	ldr	r3, [r2, #4]
 800386e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003872:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800387a:	d00b      	beq.n	8003894 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003882:	d014      	beq.n	80038ae <SPI_WaitFifoStateUntilTimeout+0xba>
        hspi->State = HAL_SPI_STATE_READY;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800388a:	2300      	movs	r3, #0
 800388c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003890:	2003      	movs	r0, #3
 8003892:	e018      	b.n	80038c6 <SPI_WaitFifoStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389a:	d002      	beq.n	80038a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d1ec      	bne.n	800387c <SPI_WaitFifoStateUntilTimeout+0x88>
          __HAL_SPI_DISABLE(hspi);
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e7e6      	b.n	800387c <SPI_WaitFifoStateUntilTimeout+0x88>
          SPI_RESET_CRC(hspi);
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e7df      	b.n	8003884 <SPI_WaitFifoStateUntilTimeout+0x90>
    }
  }

  return HAL_OK;
 80038c4:	2000      	movs	r0, #0
}
 80038c6:	b002      	add	sp, #8
 80038c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038cc:	20000008 	.word	0x20000008

080038d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	4604      	mov	r4, r0
 80038d6:	460d      	mov	r5, r1
 80038d8:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038da:	9200      	str	r2, [sp, #0]
 80038dc:	460b      	mov	r3, r1
 80038de:	2200      	movs	r2, #0
 80038e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80038e4:	f7ff ff86 	bl	80037f4 <SPI_WaitFifoStateUntilTimeout>
 80038e8:	b9b0      	cbnz	r0, 8003918 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038ea:	9600      	str	r6, [sp, #0]
 80038ec:	462b      	mov	r3, r5
 80038ee:	2200      	movs	r2, #0
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff ff16 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 80038f8:	b9a8      	cbnz	r0, 8003926 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038fa:	9600      	str	r6, [sp, #0]
 80038fc:	462b      	mov	r3, r5
 80038fe:	2200      	movs	r2, #0
 8003900:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003904:	4620      	mov	r0, r4
 8003906:	f7ff ff75 	bl	80037f4 <SPI_WaitFifoStateUntilTimeout>
 800390a:	b150      	cbz	r0, 8003922 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003914:	2003      	movs	r0, #3
 8003916:	e004      	b.n	8003922 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003918:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800391a:	f043 0320 	orr.w	r3, r3, #32
 800391e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003920:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003922:	b002      	add	sp, #8
 8003924:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003926:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003928:	f043 0320 	orr.w	r3, r3, #32
 800392c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800392e:	2003      	movs	r0, #3
 8003930:	e7f7      	b.n	8003922 <SPI_EndRxTxTransaction+0x52>

08003932 <SPI_EndRxTransaction>:
{
 8003932:	b570      	push	{r4, r5, r6, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	4604      	mov	r4, r0
 8003938:	460d      	mov	r5, r1
 800393a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800393c:	6843      	ldr	r3, [r0, #4]
 800393e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003942:	d00d      	beq.n	8003960 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003944:	9600      	str	r6, [sp, #0]
 8003946:	462b      	mov	r3, r5
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff fee9 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 8003952:	b990      	cbnz	r0, 800397a <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395a:	d014      	beq.n	8003986 <SPI_EndRxTransaction+0x54>
}
 800395c:	b002      	add	sp, #8
 800395e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003960:	6883      	ldr	r3, [r0, #8]
 8003962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003966:	d002      	beq.n	800396e <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396c:	d1ea      	bne.n	8003944 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	6813      	ldr	r3, [r2, #0]
 8003972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e7e4      	b.n	8003944 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800397c:	f043 0320 	orr.w	r3, r3, #32
 8003980:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003982:	2003      	movs	r0, #3
 8003984:	e7ea      	b.n	800395c <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003986:	68a3      	ldr	r3, [r4, #8]
 8003988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398c:	d002      	beq.n	8003994 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003992:	d1e3      	bne.n	800395c <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003994:	9600      	str	r6, [sp, #0]
 8003996:	462b      	mov	r3, r5
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800399e:	4620      	mov	r0, r4
 80039a0:	f7ff ff28 	bl	80037f4 <SPI_WaitFifoStateUntilTimeout>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d0d9      	beq.n	800395c <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039aa:	f043 0320 	orr.w	r3, r3, #32
 80039ae:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80039b0:	2003      	movs	r0, #3
 80039b2:	e7d3      	b.n	800395c <SPI_EndRxTransaction+0x2a>

080039b4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d06a      	beq.n	8003a8e <HAL_SPI_Init+0xda>
{
 80039b8:	b510      	push	{r4, lr}
 80039ba:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80039be:	b933      	cbnz	r3, 80039ce <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039c0:	6843      	ldr	r3, [r0, #4]
 80039c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c6:	d005      	beq.n	80039d4 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61c3      	str	r3, [r0, #28]
 80039cc:	e002      	b.n	80039d4 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ce:	2300      	movs	r3, #0
 80039d0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039d2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80039d8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d04d      	beq.n	8003a7c <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 80039e0:	2302      	movs	r3, #2
 80039e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80039e6:	6822      	ldr	r2, [r4, #0]
 80039e8:	6813      	ldr	r3, [r2, #0]
 80039ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ee:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f0:	68e3      	ldr	r3, [r4, #12]
 80039f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039f6:	d947      	bls.n	8003a88 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039f8:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039fe:	d004      	beq.n	8003a0a <HAL_SPI_Init+0x56>
 8003a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a04:	d001      	beq.n	8003a0a <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003a10:	68a1      	ldr	r1, [r4, #8]
 8003a12:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6921      	ldr	r1, [r4, #16]
 8003a1a:	f001 0102 	and.w	r1, r1, #2
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	6961      	ldr	r1, [r4, #20]
 8003a22:	f001 0101 	and.w	r1, r1, #1
 8003a26:	430b      	orrs	r3, r1
 8003a28:	69a1      	ldr	r1, [r4, #24]
 8003a2a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	69e1      	ldr	r1, [r4, #28]
 8003a32:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003a36:	430b      	orrs	r3, r1
 8003a38:	6a21      	ldr	r1, [r4, #32]
 8003a3a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a42:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a4c:	8b63      	ldrh	r3, [r4, #26]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a54:	f001 0110 	and.w	r1, r1, #16
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a5c:	f001 0108 	and.w	r1, r1, #8
 8003a60:	430b      	orrs	r3, r1
 8003a62:	68e1      	ldr	r1, [r4, #12]
 8003a64:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6821      	ldr	r1, [r4, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a70:	2000      	movs	r0, #0
 8003a72:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003a7a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003a7c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003a80:	4620      	mov	r0, r4
 8003a82:	f7fe f939 	bl	8001cf8 <HAL_SPI_MspInit>
 8003a86:	e7ab      	b.n	80039e0 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a8c:	e7b5      	b.n	80039fa <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1
}
 8003a90:	4770      	bx	lr

08003a92 <HAL_SPI_Transmit>:
{
 8003a92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a96:	b083      	sub	sp, #12
 8003a98:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003a9a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f000 80f1 	beq.w	8003c86 <HAL_SPI_Transmit+0x1f4>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4688      	mov	r8, r1
 8003aa8:	4691      	mov	r9, r2
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003ab0:	f7fe fa8c 	bl	8001fcc <HAL_GetTick>
 8003ab4:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab6:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003aba:	b2f6      	uxtb	r6, r6
 8003abc:	2e01      	cmp	r6, #1
 8003abe:	f040 80cf 	bne.w	8003c60 <HAL_SPI_Transmit+0x1ce>
  if ((pData == NULL) || (Size == 0U))
 8003ac2:	f1b8 0f00 	cmp.w	r8, #0
 8003ac6:	f000 80cc 	beq.w	8003c62 <HAL_SPI_Transmit+0x1d0>
 8003aca:	f1b9 0f00 	cmp.w	r9, #0
 8003ace:	f000 80c8 	beq.w	8003c62 <HAL_SPI_Transmit+0x1d0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003adc:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ae0:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ae4:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ae8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003aea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003aee:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003af2:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003af4:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af6:	68a3      	ldr	r3, [r4, #8]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afc:	d01e      	beq.n	8003b3c <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b06:	d103      	bne.n	8003b10 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b10:	68e3      	ldr	r3, [r4, #12]
 8003b12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b16:	d93d      	bls.n	8003b94 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b18:	6863      	ldr	r3, [r4, #4]
 8003b1a:	b113      	cbz	r3, 8003b22 <HAL_SPI_Transmit+0x90>
 8003b1c:	f1b9 0f01 	cmp.w	r9, #1
 8003b20:	d123      	bne.n	8003b6a <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	8812      	ldrh	r2, [r2, #0]
 8003b28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003b30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003b3a:	e016      	b.n	8003b6a <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003b3c:	6822      	ldr	r2, [r4, #0]
 8003b3e:	6813      	ldr	r3, [r2, #0]
 8003b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b44:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003b46:	6822      	ldr	r2, [r4, #0]
 8003b48:	6813      	ldr	r3, [r2, #0]
 8003b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e7d5      	b.n	8003afe <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b52:	f7fe fa3b 	bl	8001fcc <HAL_GetTick>
 8003b56:	1bc0      	subs	r0, r0, r7
 8003b58:	42a8      	cmp	r0, r5
 8003b5a:	d303      	bcc.n	8003b64 <HAL_SPI_Transmit+0xd2>
 8003b5c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b60:	f040 8089 	bne.w	8003c76 <HAL_SPI_Transmit+0x1e4>
 8003b64:	2d00      	cmp	r5, #0
 8003b66:	f000 8088 	beq.w	8003c7a <HAL_SPI_Transmit+0x1e8>
    while (hspi->TxXferCount > 0U)
 8003b6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d061      	beq.n	8003c36 <HAL_SPI_Transmit+0x1a4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	f012 0f02 	tst.w	r2, #2
 8003b7a:	d0ea      	beq.n	8003b52 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b7e:	8812      	ldrh	r2, [r2, #0]
 8003b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b84:	3302      	adds	r3, #2
 8003b86:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003b88:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	b292      	uxth	r2, r2
 8003b90:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8003b92:	e7ea      	b.n	8003b6a <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	b113      	cbz	r3, 8003b9e <HAL_SPI_Transmit+0x10c>
 8003b98:	f1b9 0f01 	cmp.w	r9, #1
 8003b9c:	d133      	bne.n	8003c06 <HAL_SPI_Transmit+0x174>
      if (hspi->TxXferCount > 1U)
 8003b9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d90c      	bls.n	8003bc0 <HAL_SPI_Transmit+0x12e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	8812      	ldrh	r2, [r2, #0]
 8003bac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b02      	subs	r3, #2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bbe:	e022      	b.n	8003c06 <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	7812      	ldrb	r2, [r2, #0]
 8003bc6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003bc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bca:	3301      	adds	r3, #1
 8003bcc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003bce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bd8:	e015      	b.n	8003c06 <HAL_SPI_Transmit+0x174>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003be0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003be2:	3301      	adds	r3, #1
 8003be4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003be6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bf0:	e009      	b.n	8003c06 <HAL_SPI_Transmit+0x174>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf2:	f7fe f9eb 	bl	8001fcc <HAL_GetTick>
 8003bf6:	1bc0      	subs	r0, r0, r7
 8003bf8:	42a8      	cmp	r0, r5
 8003bfa:	d302      	bcc.n	8003c02 <HAL_SPI_Transmit+0x170>
 8003bfc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c00:	d13d      	bne.n	8003c7e <HAL_SPI_Transmit+0x1ec>
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	d03d      	beq.n	8003c82 <HAL_SPI_Transmit+0x1f0>
    while (hspi->TxXferCount > 0U)
 8003c06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	b1a3      	cbz	r3, 8003c36 <HAL_SPI_Transmit+0x1a4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	6893      	ldr	r3, [r2, #8]
 8003c10:	f013 0f02 	tst.w	r3, #2
 8003c14:	d0ed      	beq.n	8003bf2 <HAL_SPI_Transmit+0x160>
        if (hspi->TxXferCount > 1U)
 8003c16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d9dd      	bls.n	8003bda <HAL_SPI_Transmit+0x148>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c26:	3302      	adds	r3, #2
 8003c28:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b02      	subs	r3, #2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c34:	e7e7      	b.n	8003c06 <HAL_SPI_Transmit+0x174>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c36:	463a      	mov	r2, r7
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f7ff fe48 	bl	80038d0 <SPI_EndRxTxTransaction>
 8003c40:	b108      	cbz	r0, 8003c46 <HAL_SPI_Transmit+0x1b4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c42:	2320      	movs	r3, #32
 8003c44:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c46:	68a3      	ldr	r3, [r4, #8]
 8003c48:	b933      	cbnz	r3, 8003c58 <HAL_SPI_Transmit+0x1c6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	9201      	str	r2, [sp, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c5a:	b913      	cbnz	r3, 8003c62 <HAL_SPI_Transmit+0x1d0>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c5c:	2600      	movs	r6, #0
 8003c5e:	e000      	b.n	8003c62 <HAL_SPI_Transmit+0x1d0>
    errorcode = HAL_BUSY;
 8003c60:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003c6e:	4630      	mov	r0, r6
 8003c70:	b003      	add	sp, #12
 8003c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003c76:	2603      	movs	r6, #3
 8003c78:	e7f3      	b.n	8003c62 <HAL_SPI_Transmit+0x1d0>
 8003c7a:	2603      	movs	r6, #3
 8003c7c:	e7f1      	b.n	8003c62 <HAL_SPI_Transmit+0x1d0>
          errorcode = HAL_TIMEOUT;
 8003c7e:	2603      	movs	r6, #3
 8003c80:	e7ef      	b.n	8003c62 <HAL_SPI_Transmit+0x1d0>
 8003c82:	2603      	movs	r6, #3
 8003c84:	e7ed      	b.n	8003c62 <HAL_SPI_Transmit+0x1d0>
  __HAL_LOCK(hspi);
 8003c86:	2602      	movs	r6, #2
 8003c88:	e7f1      	b.n	8003c6e <HAL_SPI_Transmit+0x1dc>

08003c8a <HAL_SPI_TransmitReceive>:
{
 8003c8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8e:	461f      	mov	r7, r3
 8003c90:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003c92:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	f000 8164 	beq.w	8003f64 <HAL_SPI_TransmitReceive+0x2da>
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	4688      	mov	r8, r1
 8003ca0:	4691      	mov	r9, r2
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003ca8:	f7fe f990 	bl	8001fcc <HAL_GetTick>
 8003cac:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003cae:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003cb2:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003cb4:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x46>
 8003cba:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003cbe:	f040 8138 	bne.w	8003f32 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cc2:	68a2      	ldr	r2, [r4, #8]
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	f040 813d 	bne.w	8003f44 <HAL_SPI_TransmitReceive+0x2ba>
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	f040 813c 	bne.w	8003f48 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cd0:	f1b8 0f00 	cmp.w	r8, #0
 8003cd4:	f000 813a 	beq.w	8003f4c <HAL_SPI_TransmitReceive+0x2c2>
 8003cd8:	f1b9 0f00 	cmp.w	r9, #0
 8003cdc:	f000 8138 	beq.w	8003f50 <HAL_SPI_TransmitReceive+0x2c6>
 8003ce0:	2f00      	cmp	r7, #0
 8003ce2:	f000 8137 	beq.w	8003f54 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ce6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d002      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cf0:	2305      	movs	r3, #5
 8003cf2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cfa:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003cfe:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d02:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d06:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d0a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d0c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003d0e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d10:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d12:	68e3      	ldr	r3, [r4, #12]
 8003d14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d18:	d801      	bhi.n	8003d1e <HAL_SPI_TransmitReceive+0x94>
 8003d1a:	2f01      	cmp	r7, #1
 8003d1c:	d923      	bls.n	8003d66 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	6853      	ldr	r3, [r2, #4]
 8003d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d26:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d30:	d103      	bne.n	8003d3a <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d38:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d3a:	68e3      	ldr	r3, [r4, #12]
 8003d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d40:	d958      	bls.n	8003df4 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	b10b      	cbz	r3, 8003d4a <HAL_SPI_TransmitReceive+0xc0>
 8003d46:	2f01      	cmp	r7, #1
 8003d48:	d10b      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d54:	3302      	adds	r3, #2
 8003d56:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003d58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003d62:	2701      	movs	r7, #1
 8003d64:	e025      	b.n	8003db2 <HAL_SPI_TransmitReceive+0x128>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	6853      	ldr	r3, [r2, #4]
 8003d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d6e:	6053      	str	r3, [r2, #4]
 8003d70:	e7da      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	f012 0f01 	tst.w	r2, #1
 8003d7a:	d011      	beq.n	8003da0 <HAL_SPI_TransmitReceive+0x116>
 8003d7c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003d80:	b292      	uxth	r2, r2
 8003d82:	b16a      	cbz	r2, 8003da0 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003d90:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003d9e:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003da0:	f7fe f914 	bl	8001fcc <HAL_GetTick>
 8003da4:	1b83      	subs	r3, r0, r6
 8003da6:	42ab      	cmp	r3, r5
 8003da8:	d303      	bcc.n	8003db2 <HAL_SPI_TransmitReceive+0x128>
 8003daa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dae:	f040 80d3 	bne.w	8003f58 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	b92b      	cbnz	r3, 8003dc4 <HAL_SPI_TransmitReceive+0x13a>
 8003db8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80ad 	beq.w	8003f1e <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	f012 0f02 	tst.w	r2, #2
 8003dcc:	d0d1      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0xe8>
 8003dce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	d0cd      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0xe8>
 8003dd6:	2f00      	cmp	r7, #0
 8003dd8:	d0cb      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ddc:	8812      	ldrh	r2, [r2, #0]
 8003dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003de2:	3302      	adds	r3, #2
 8003de4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003de6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003df0:	2700      	movs	r7, #0
 8003df2:	e7be      	b.n	8003d72 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df4:	6863      	ldr	r3, [r4, #4]
 8003df6:	b10b      	cbz	r3, 8003dfc <HAL_SPI_TransmitReceive+0x172>
 8003df8:	2f01      	cmp	r7, #1
 8003dfa:	d10f      	bne.n	8003e1c <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8003dfc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d90d      	bls.n	8003e20 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	8812      	ldrh	r2, [r2, #0]
 8003e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e0e:	3302      	adds	r3, #2
 8003e10:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b02      	subs	r3, #2
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003e1c:	2701      	movs	r7, #1
 8003e1e:	e049      	b.n	8003eb4 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	7812      	ldrb	r2, [r2, #0]
 8003e26:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e38:	e7f0      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003e3a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	2a01      	cmp	r2, #1
 8003e40:	d90c      	bls.n	8003e5c <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e44:	8812      	ldrh	r2, [r2, #0]
 8003e46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b02      	subs	r3, #2
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003e58:	2700      	movs	r7, #0
 8003e5a:	e03d      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e5e:	7812      	ldrb	r2, [r2, #0]
 8003e60:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003e62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e64:	3301      	adds	r3, #1
 8003e66:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003e68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003e72:	2700      	movs	r7, #0
 8003e74:	e030      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	6853      	ldr	r3, [r2, #4]
 8003e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e7e:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003e80:	2701      	movs	r7, #1
 8003e82:	e00d      	b.n	8003ea0 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e86:	7b1b      	ldrb	r3, [r3, #12]
 8003e88:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003e90:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003e9e:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ea0:	f7fe f894 	bl	8001fcc <HAL_GetTick>
 8003ea4:	1b80      	subs	r0, r0, r6
 8003ea6:	42a8      	cmp	r0, r5
 8003ea8:	d302      	bcc.n	8003eb0 <HAL_SPI_TransmitReceive+0x226>
 8003eaa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003eae:	d155      	bne.n	8003f5c <HAL_SPI_TransmitReceive+0x2d2>
 8003eb0:	2d00      	cmp	r5, #0
 8003eb2:	d055      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	b923      	cbnz	r3, 8003ec4 <HAL_SPI_TransmitReceive+0x23a>
 8003eba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d02c      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	f012 0f02 	tst.w	r2, #2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x24e>
 8003ece:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ed0:	b292      	uxth	r2, r2
 8003ed2:	b10a      	cbz	r2, 8003ed8 <HAL_SPI_TransmitReceive+0x24e>
 8003ed4:	2f00      	cmp	r7, #0
 8003ed6:	d1b0      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	f012 0f01 	tst.w	r2, #1
 8003ee0:	d0de      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x216>
 8003ee2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	2a00      	cmp	r2, #0
 8003eea:	d0d9      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8003eec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	2a01      	cmp	r2, #1
 8003ef4:	d9c6      	bls.n	8003e84 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003efa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003efe:	3302      	adds	r3, #2
 8003f00:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f02:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b02      	subs	r3, #2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d9ad      	bls.n	8003e76 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003f1a:	2701      	movs	r7, #1
 8003f1c:	e7c0      	b.n	8003ea0 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1e:	4632      	mov	r2, r6
 8003f20:	4629      	mov	r1, r5
 8003f22:	4620      	mov	r0, r4
 8003f24:	f7ff fcd4 	bl	80038d0 <SPI_EndRxTxTransaction>
 8003f28:	b120      	cbz	r0, 8003f34 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003f2e:	2001      	movs	r0, #1
 8003f30:	e000      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003f32:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003f44:	2002      	movs	r0, #2
 8003f46:	e7f5      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
 8003f48:	2002      	movs	r0, #2
 8003f4a:	e7f3      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	e7f1      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
 8003f50:	2001      	movs	r0, #1
 8003f52:	e7ef      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
 8003f54:	2001      	movs	r0, #1
 8003f56:	e7ed      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003f58:	2003      	movs	r0, #3
 8003f5a:	e7eb      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	e7e9      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
 8003f60:	2003      	movs	r0, #3
 8003f62:	e7e7      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8003f64:	2002      	movs	r0, #2
 8003f66:	e7eb      	b.n	8003f40 <HAL_SPI_TransmitReceive+0x2b6>

08003f68 <HAL_SPI_Receive>:
{
 8003f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4688      	mov	r8, r1
 8003f72:	4691      	mov	r9, r2
 8003f74:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f76:	6843      	ldr	r3, [r0, #4]
 8003f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7c:	d043      	beq.n	8004006 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 8003f7e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	f000 80bf 	beq.w	8004106 <HAL_SPI_Receive+0x19e>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003f8e:	f7fe f81d 	bl	8001fcc <HAL_GetTick>
 8003f92:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f94:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003f98:	b2f6      	uxtb	r6, r6
 8003f9a:	2e01      	cmp	r6, #1
 8003f9c:	f040 80a0 	bne.w	80040e0 <HAL_SPI_Receive+0x178>
  if ((pData == NULL) || (Size == 0U))
 8003fa0:	f1b8 0f00 	cmp.w	r8, #0
 8003fa4:	f000 809d 	beq.w	80040e2 <HAL_SPI_Receive+0x17a>
 8003fa8:	f1b9 0f00 	cmp.w	r9, #0
 8003fac:	f000 8099 	beq.w	80040e2 <HAL_SPI_Receive+0x17a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fba:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fbe:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fc2:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fc6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003fc8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003fca:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003fcc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fce:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fd0:	68e3      	ldr	r3, [r4, #12]
 8003fd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fd6:	d923      	bls.n	8004020 <HAL_SPI_Receive+0xb8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fd8:	6822      	ldr	r2, [r4, #0]
 8003fda:	6853      	ldr	r3, [r2, #4]
 8003fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe0:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe2:	68a3      	ldr	r3, [r4, #8]
 8003fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe8:	d020      	beq.n	800402c <HAL_SPI_Receive+0xc4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ff2:	d103      	bne.n	8003ffc <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ffa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ffc:	68e3      	ldr	r3, [r4, #12]
 8003ffe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004002:	d928      	bls.n	8004056 <HAL_SPI_Receive+0xee>
 8004004:	e049      	b.n	800409a <HAL_SPI_Receive+0x132>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004006:	6883      	ldr	r3, [r0, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1b8      	bne.n	8003f7e <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800400c:	2304      	movs	r3, #4
 800400e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004012:	9500      	str	r5, [sp, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	460a      	mov	r2, r1
 8004018:	f7ff fe37 	bl	8003c8a <HAL_SPI_TransmitReceive>
 800401c:	4606      	mov	r6, r0
 800401e:	e066      	b.n	80040ee <HAL_SPI_Receive+0x186>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	6853      	ldr	r3, [r2, #4]
 8004024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004028:	6053      	str	r3, [r2, #4]
 800402a:	e7da      	b.n	8003fe2 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 800402c:	6822      	ldr	r2, [r4, #0]
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004034:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e7d3      	b.n	8003fea <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004042:	f7fd ffc3 	bl	8001fcc <HAL_GetTick>
 8004046:	1bc0      	subs	r0, r0, r7
 8004048:	42a8      	cmp	r0, r5
 800404a:	d302      	bcc.n	8004052 <HAL_SPI_Receive+0xea>
 800404c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004050:	d151      	bne.n	80040f6 <HAL_SPI_Receive+0x18e>
 8004052:	2d00      	cmp	r5, #0
 8004054:	d051      	beq.n	80040fa <HAL_SPI_Receive+0x192>
    while (hspi->RxXferCount > 0U)
 8004056:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d033      	beq.n	80040c8 <HAL_SPI_Receive+0x160>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	f012 0f01 	tst.w	r2, #1
 8004068:	d0eb      	beq.n	8004042 <HAL_SPI_Receive+0xda>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800406a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800406c:	7b1b      	ldrb	r3, [r3, #12]
 800406e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004072:	3301      	adds	r3, #1
 8004074:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004076:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29b      	uxth	r3, r3
 8004080:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004084:	e7e7      	b.n	8004056 <HAL_SPI_Receive+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004086:	f7fd ffa1 	bl	8001fcc <HAL_GetTick>
 800408a:	1bc0      	subs	r0, r0, r7
 800408c:	42a8      	cmp	r0, r5
 800408e:	d302      	bcc.n	8004096 <HAL_SPI_Receive+0x12e>
 8004090:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004094:	d133      	bne.n	80040fe <HAL_SPI_Receive+0x196>
 8004096:	2d00      	cmp	r5, #0
 8004098:	d033      	beq.n	8004102 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 800409a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800409e:	b29b      	uxth	r3, r3
 80040a0:	b193      	cbz	r3, 80040c8 <HAL_SPI_Receive+0x160>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	f012 0f01 	tst.w	r2, #1
 80040aa:	d0ec      	beq.n	8004086 <HAL_SPI_Receive+0x11e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040b4:	3302      	adds	r3, #2
 80040b6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80040b8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80040bc:	b292      	uxth	r2, r2
 80040be:	3a01      	subs	r2, #1
 80040c0:	b292      	uxth	r2, r2
 80040c2:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 80040c6:	e7e8      	b.n	800409a <HAL_SPI_Receive+0x132>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c8:	463a      	mov	r2, r7
 80040ca:	4629      	mov	r1, r5
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7ff fc30 	bl	8003932 <SPI_EndRxTransaction>
 80040d2:	b108      	cbz	r0, 80040d8 <HAL_SPI_Receive+0x170>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d4:	2320      	movs	r3, #32
 80040d6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80040da:	b913      	cbnz	r3, 80040e2 <HAL_SPI_Receive+0x17a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040dc:	2600      	movs	r6, #0
 80040de:	e000      	b.n	80040e2 <HAL_SPI_Receive+0x17a>
    errorcode = HAL_BUSY;
 80040e0:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040e8:	2300      	movs	r3, #0
 80040ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80040ee:	4630      	mov	r0, r6
 80040f0:	b003      	add	sp, #12
 80040f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80040f6:	2603      	movs	r6, #3
 80040f8:	e7f3      	b.n	80040e2 <HAL_SPI_Receive+0x17a>
 80040fa:	2603      	movs	r6, #3
 80040fc:	e7f1      	b.n	80040e2 <HAL_SPI_Receive+0x17a>
          errorcode = HAL_TIMEOUT;
 80040fe:	2603      	movs	r6, #3
 8004100:	e7ef      	b.n	80040e2 <HAL_SPI_Receive+0x17a>
 8004102:	2603      	movs	r6, #3
 8004104:	e7ed      	b.n	80040e2 <HAL_SPI_Receive+0x17a>
  __HAL_LOCK(hspi);
 8004106:	2602      	movs	r6, #2
 8004108:	e7f1      	b.n	80040ee <HAL_SPI_Receive+0x186>
	...

0800410c <HAL_SPI_TransmitReceive_DMA>:
{
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004110:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8004114:	2801      	cmp	r0, #1
 8004116:	f000 80f7 	beq.w	8004308 <HAL_SPI_TransmitReceive_DMA+0x1fc>
 800411a:	2001      	movs	r0, #1
 800411c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8004120:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004124:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8004126:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004128:	2801      	cmp	r0, #1
 800412a:	d00a      	beq.n	8004142 <HAL_SPI_TransmitReceive_DMA+0x36>
 800412c:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8004130:	f040 80db 	bne.w	80042ea <HAL_SPI_TransmitReceive_DMA+0x1de>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004134:	68a5      	ldr	r5, [r4, #8]
 8004136:	2d00      	cmp	r5, #0
 8004138:	f040 80dc 	bne.w	80042f4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800413c:	2804      	cmp	r0, #4
 800413e:	f040 80db 	bne.w	80042f8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004142:	2900      	cmp	r1, #0
 8004144:	f000 80da 	beq.w	80042fc <HAL_SPI_TransmitReceive_DMA+0x1f0>
 8004148:	2a00      	cmp	r2, #0
 800414a:	f000 80d9 	beq.w	8004300 <HAL_SPI_TransmitReceive_DMA+0x1f4>
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80d8 	beq.w	8004304 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004154:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004158:	b2c0      	uxtb	r0, r0
 800415a:	2804      	cmp	r0, #4
 800415c:	d002      	beq.n	8004164 <HAL_SPI_TransmitReceive_DMA+0x58>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800415e:	2005      	movs	r0, #5
 8004160:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004164:	2000      	movs	r0, #0
 8004166:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004168:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800416a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800416c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800416e:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004170:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004174:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004178:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800417a:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	6853      	ldr	r3, [r2, #4]
 8004180:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8004184:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004186:	68e3      	ldr	r3, [r4, #12]
 8004188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800418c:	d928      	bls.n	80041e0 <HAL_SPI_TransmitReceive_DMA+0xd4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	6853      	ldr	r3, [r2, #4]
 8004192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004196:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004198:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d069      	beq.n	8004276 <HAL_SPI_TransmitReceive_DMA+0x16a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80041a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041a4:	4a59      	ldr	r2, [pc, #356]	; (800430c <HAL_SPI_TransmitReceive_DMA+0x200>)
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80041a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041aa:	4a59      	ldr	r2, [pc, #356]	; (8004310 <HAL_SPI_TransmitReceive_DMA+0x204>)
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80041ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041b0:	4a58      	ldr	r2, [pc, #352]	; (8004314 <HAL_SPI_TransmitReceive_DMA+0x208>)
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 80041b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041b6:	2200      	movs	r2, #0
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80041ba:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 80041bc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041c4:	310c      	adds	r1, #12
 80041c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041c8:	f7fe fb84 	bl	80028d4 <HAL_DMA_Start_IT>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d059      	beq.n	8004284 <HAL_SPI_TransmitReceive_DMA+0x178>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80041d2:	f043 0310 	orr.w	r3, r3, #16
 80041d6:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80041d8:	2001      	movs	r0, #1
 80041da:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 80041de:	e085      	b.n	80042ec <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	6853      	ldr	r3, [r2, #4]
 80041e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041e8:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f2:	d01a      	beq.n	800422a <HAL_SPI_TransmitReceive_DMA+0x11e>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d1cc      	bne.n	8004198 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	6853      	ldr	r3, [r2, #4]
 8004202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004206:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004208:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800420c:	f013 0f01 	tst.w	r3, #1
 8004210:	d124      	bne.n	800425c <HAL_SPI_TransmitReceive_DMA+0x150>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004212:	6822      	ldr	r2, [r4, #0]
 8004214:	6853      	ldr	r3, [r2, #4]
 8004216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421a:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800421c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004220:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004224:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004228:	e7b6      	b.n	8004198 <HAL_SPI_TransmitReceive_DMA+0x8c>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800422a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800422c:	f013 0f01 	tst.w	r3, #1
 8004230:	d109      	bne.n	8004246 <HAL_SPI_TransmitReceive_DMA+0x13a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	6853      	ldr	r3, [r2, #4]
 8004236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423a:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800423c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800423e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004242:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004244:	e7d6      	b.n	80041f4 <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004246:	6822      	ldr	r2, [r4, #0]
 8004248:	6853      	ldr	r3, [r2, #4]
 800424a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800424e:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004250:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004252:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004256:	3301      	adds	r3, #1
 8004258:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800425a:	e7cb      	b.n	80041f4 <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800425c:	6822      	ldr	r2, [r4, #0]
 800425e:	6853      	ldr	r3, [r2, #4]
 8004260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004264:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004266:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800426a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800426e:	3301      	adds	r3, #1
 8004270:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004274:	e790      	b.n	8004198 <HAL_SPI_TransmitReceive_DMA+0x8c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004278:	4a27      	ldr	r2, [pc, #156]	; (8004318 <HAL_SPI_TransmitReceive_DMA+0x20c>)
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800427c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800427e:	4a27      	ldr	r2, [pc, #156]	; (800431c <HAL_SPI_TransmitReceive_DMA+0x210>)
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
 8004282:	e794      	b.n	80041ae <HAL_SPI_TransmitReceive_DMA+0xa2>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004284:	6822      	ldr	r2, [r4, #0]
 8004286:	6853      	ldr	r3, [r2, #4]
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800428e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004290:	2300      	movs	r3, #0
 8004292:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004294:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004296:	6293      	str	r3, [r2, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004298:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800429a:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800429c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800429e:	6353      	str	r3, [r2, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042a0:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 80042a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	320c      	adds	r2, #12
 80042a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042ac:	f7fe fb12 	bl	80028d4 <HAL_DMA_Start_IT>
 80042b0:	b998      	cbnz	r0, 80042da <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80042ba:	d103      	bne.n	80042c4 <HAL_SPI_TransmitReceive_DMA+0x1b8>
    __HAL_SPI_ENABLE(hspi);
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c2:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	6853      	ldr	r3, [r2, #4]
 80042c8:	f043 0320 	orr.w	r3, r3, #32
 80042cc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	6853      	ldr	r3, [r2, #4]
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	6053      	str	r3, [r2, #4]
 80042d8:	e008      	b.n	80042ec <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80042dc:	f043 0310 	orr.w	r3, r3, #16
 80042e0:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80042e2:	2001      	movs	r0, #1
 80042e4:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 80042e8:	e000      	b.n	80042ec <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_BUSY;
 80042ea:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80042ec:	2300      	movs	r3, #0
 80042ee:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 80042f4:	2002      	movs	r0, #2
 80042f6:	e7f9      	b.n	80042ec <HAL_SPI_TransmitReceive_DMA+0x1e0>
 80042f8:	2002      	movs	r0, #2
 80042fa:	e7f7      	b.n	80042ec <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_ERROR;
 80042fc:	2001      	movs	r0, #1
 80042fe:	e7f5      	b.n	80042ec <HAL_SPI_TransmitReceive_DMA+0x1e0>
 8004300:	2001      	movs	r0, #1
 8004302:	e7f3      	b.n	80042ec <HAL_SPI_TransmitReceive_DMA+0x1e0>
 8004304:	2001      	movs	r0, #1
 8004306:	e7f1      	b.n	80042ec <HAL_SPI_TransmitReceive_DMA+0x1e0>
  __HAL_LOCK(hspi);
 8004308:	2002      	movs	r0, #2
 800430a:	e7f2      	b.n	80042f2 <HAL_SPI_TransmitReceive_DMA+0x1e6>
 800430c:	08004331 	.word	0x08004331
 8004310:	080043cf 	.word	0x080043cf
 8004314:	0800433d 	.word	0x0800433d
 8004318:	08004325 	.word	0x08004325
 800431c:	0800435f 	.word	0x0800435f

08004320 <HAL_SPI_RxCpltCallback>:
}
 8004320:	4770      	bx	lr

08004322 <HAL_SPI_RxHalfCpltCallback>:
}
 8004322:	4770      	bx	lr

08004324 <SPI_DMAHalfReceiveCplt>:
{
 8004324:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004326:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004328:	f7ff fffb 	bl	8004322 <HAL_SPI_RxHalfCpltCallback>
}
 800432c:	bd08      	pop	{r3, pc}

0800432e <HAL_SPI_TxRxHalfCpltCallback>:
}
 800432e:	4770      	bx	lr

08004330 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8004330:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004332:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004334:	f7ff fffb 	bl	800432e <HAL_SPI_TxRxHalfCpltCallback>
}
 8004338:	bd08      	pop	{r3, pc}

0800433a <HAL_SPI_ErrorCallback>:
}
 800433a:	4770      	bx	lr

0800433c <SPI_DMAError>:
{
 800433c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800433e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004340:	6802      	ldr	r2, [r0, #0]
 8004342:	6853      	ldr	r3, [r2, #4]
 8004344:	f023 0303 	bic.w	r3, r3, #3
 8004348:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800434a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800434c:	f043 0310 	orr.w	r3, r3, #16
 8004350:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004352:	2301      	movs	r3, #1
 8004354:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8004358:	f7ff ffef 	bl	800433a <HAL_SPI_ErrorCallback>
}
 800435c:	bd08      	pop	{r3, pc}

0800435e <SPI_DMAReceiveCplt>:
{
 800435e:	b538      	push	{r3, r4, r5, lr}
 8004360:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004362:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8004364:	f7fd fe32 	bl	8001fcc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f013 0f20 	tst.w	r3, #32
 8004370:	d11f      	bne.n	80043b2 <SPI_DMAReceiveCplt+0x54>
 8004372:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004374:	6821      	ldr	r1, [r4, #0]
 8004376:	684b      	ldr	r3, [r1, #4]
 8004378:	f023 0320 	bic.w	r3, r3, #32
 800437c:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800437e:	68a3      	ldr	r3, [r4, #8]
 8004380:	b91b      	cbnz	r3, 800438a <SPI_DMAReceiveCplt+0x2c>
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004388:	d017      	beq.n	80043ba <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800438a:	6821      	ldr	r1, [r4, #0]
 800438c:	684b      	ldr	r3, [r1, #4]
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004394:	2164      	movs	r1, #100	; 0x64
 8004396:	4620      	mov	r0, r4
 8004398:	f7ff facb 	bl	8003932 <SPI_EndRxTransaction>
 800439c:	b108      	cbz	r0, 80043a2 <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800439e:	2320      	movs	r3, #32
 80043a0:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043b0:	b94b      	cbnz	r3, 80043c6 <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff ffb4 	bl	8004320 <HAL_SPI_RxCpltCallback>
}
 80043b8:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043ba:	6821      	ldr	r1, [r4, #0]
 80043bc:	684b      	ldr	r3, [r1, #4]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	604b      	str	r3, [r1, #4]
 80043c4:	e7e6      	b.n	8004394 <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7ff ffb7 	bl	800433a <HAL_SPI_ErrorCallback>
      return;
 80043cc:	e7f4      	b.n	80043b8 <SPI_DMAReceiveCplt+0x5a>

080043ce <SPI_DMATransmitReceiveCplt>:
{
 80043ce:	b538      	push	{r3, r4, r5, lr}
 80043d0:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80043d4:	f7fd fdfa 	bl	8001fcc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f013 0f20 	tst.w	r3, #32
 80043e0:	d11c      	bne.n	800441c <SPI_DMATransmitReceiveCplt+0x4e>
 80043e2:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043e4:	6821      	ldr	r1, [r4, #0]
 80043e6:	684b      	ldr	r3, [r1, #4]
 80043e8:	f023 0320 	bic.w	r3, r3, #32
 80043ec:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043ee:	2164      	movs	r1, #100	; 0x64
 80043f0:	4620      	mov	r0, r4
 80043f2:	f7ff fa6d 	bl	80038d0 <SPI_EndRxTxTransaction>
 80043f6:	b118      	cbz	r0, 8004400 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043fa:	f043 0320 	orr.w	r3, r3, #32
 80043fe:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	6853      	ldr	r3, [r2, #4]
 8004404:	f023 0303 	bic.w	r3, r3, #3
 8004408:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800440e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004412:	2301      	movs	r3, #1
 8004414:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004418:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800441a:	b91b      	cbnz	r3, 8004424 <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 800441c:	4620      	mov	r0, r4
 800441e:	f7fd fadb 	bl	80019d8 <HAL_SPI_TxRxCpltCallback>
}
 8004422:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff ff88 	bl	800433a <HAL_SPI_ErrorCallback>
      return;
 800442a:	e7fa      	b.n	8004422 <SPI_DMATransmitReceiveCplt+0x54>

0800442c <HAL_SPI_IRQHandler>:
{
 800442c:	b530      	push	{r4, r5, lr}
 800442e:	b085      	sub	sp, #20
 8004430:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8004432:	6802      	ldr	r2, [r0, #0]
 8004434:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004436:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004438:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800443c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004440:	d105      	bne.n	800444e <HAL_SPI_IRQHandler+0x22>
 8004442:	f013 0f01 	tst.w	r3, #1
 8004446:	d002      	beq.n	800444e <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004448:	f011 0f40 	tst.w	r1, #64	; 0x40
 800444c:	d169      	bne.n	8004522 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800444e:	f013 0f02 	tst.w	r3, #2
 8004452:	d002      	beq.n	800445a <HAL_SPI_IRQHandler+0x2e>
 8004454:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004458:	d167      	bne.n	800452a <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800445a:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800445e:	f013 0f20 	tst.w	r3, #32
 8004462:	d103      	bne.n	800446c <HAL_SPI_IRQHandler+0x40>
 8004464:	b910      	cbnz	r0, 800446c <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004466:	f413 7f80 	tst.w	r3, #256	; 0x100
 800446a:	d061      	beq.n	8004530 <HAL_SPI_IRQHandler+0x104>
 800446c:	f011 0f20 	tst.w	r1, #32
 8004470:	d05e      	beq.n	8004530 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004472:	b178      	cbz	r0, 8004494 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004474:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004478:	b2c0      	uxtb	r0, r0
 800447a:	2803      	cmp	r0, #3
 800447c:	d05a      	beq.n	8004534 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800447e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004480:	f040 0004 	orr.w	r0, r0, #4
 8004484:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004486:	2000      	movs	r0, #0
 8004488:	9000      	str	r0, [sp, #0]
 800448a:	68d0      	ldr	r0, [r2, #12]
 800448c:	9000      	str	r0, [sp, #0]
 800448e:	6890      	ldr	r0, [r2, #8]
 8004490:	9000      	str	r0, [sp, #0]
 8004492:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004494:	b165      	cbz	r5, 80044b0 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004496:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004498:	f040 0001 	orr.w	r0, r0, #1
 800449c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800449e:	2000      	movs	r0, #0
 80044a0:	9002      	str	r0, [sp, #8]
 80044a2:	6890      	ldr	r0, [r2, #8]
 80044a4:	9002      	str	r0, [sp, #8]
 80044a6:	6810      	ldr	r0, [r2, #0]
 80044a8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80044ac:	6010      	str	r0, [r2, #0]
 80044ae:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044b4:	d009      	beq.n	80044ca <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044b8:	f043 0308 	orr.w	r3, r3, #8
 80044bc:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044be:	2300      	movs	r3, #0
 80044c0:	9303      	str	r3, [sp, #12]
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	9303      	str	r3, [sp, #12]
 80044c8:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d02f      	beq.n	8004530 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044d0:	6822      	ldr	r2, [r4, #0]
 80044d2:	6853      	ldr	r3, [r2, #4]
 80044d4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80044d8:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80044da:	2301      	movs	r3, #1
 80044dc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044e0:	f011 0f03 	tst.w	r1, #3
 80044e4:	d02e      	beq.n	8004544 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	6853      	ldr	r3, [r2, #4]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80044f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044f2:	b14b      	cbz	r3, 8004508 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <HAL_SPI_IRQHandler+0x120>)
 80044f6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044fa:	f7fe fa25 	bl	8002948 <HAL_DMA_Abort_IT>
 80044fe:	b118      	cbz	r0, 8004508 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004500:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004506:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004508:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800450a:	b18b      	cbz	r3, 8004530 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800450c:	4a0f      	ldr	r2, [pc, #60]	; (800454c <HAL_SPI_IRQHandler+0x120>)
 800450e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004510:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004512:	f7fe fa19 	bl	8002948 <HAL_DMA_Abort_IT>
 8004516:	b158      	cbz	r0, 8004530 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004518:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800451a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451e:	6623      	str	r3, [r4, #96]	; 0x60
 8004520:	e006      	b.n	8004530 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8004522:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004524:	4620      	mov	r0, r4
 8004526:	4798      	blx	r3
    return;
 8004528:	e002      	b.n	8004530 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800452a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800452c:	4620      	mov	r0, r4
 800452e:	4798      	blx	r3
}
 8004530:	b005      	add	sp, #20
 8004532:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004534:	2300      	movs	r3, #0
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	68d3      	ldr	r3, [r2, #12]
 800453a:	9301      	str	r3, [sp, #4]
 800453c:	6893      	ldr	r3, [r2, #8]
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	9b01      	ldr	r3, [sp, #4]
        return;
 8004542:	e7f5      	b.n	8004530 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8004544:	4620      	mov	r0, r4
 8004546:	f7ff fef8 	bl	800433a <HAL_SPI_ErrorCallback>
    return;
 800454a:	e7f1      	b.n	8004530 <HAL_SPI_IRQHandler+0x104>
 800454c:	08004551 	.word	0x08004551

08004550 <SPI_DMAAbortOnError>:
{
 8004550:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004552:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800455a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800455c:	f7ff feed 	bl	800433a <HAL_SPI_ErrorCallback>
}
 8004560:	bd08      	pop	{r3, pc}
	...

08004564 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004564:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d12a      	bne.n	80045c4 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456e:	2302      	movs	r3, #2
 8004570:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004574:	6802      	ldr	r2, [r0, #0]
 8004576:	68d3      	ldr	r3, [r2, #12]
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457e:	6803      	ldr	r3, [r0, #0]
 8004580:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <HAL_TIM_Base_Start_IT+0x6c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d010      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x44>
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d00d      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x44>
 800458c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x44>
 8004594:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8004598:	4293      	cmp	r3, r2
 800459a:	d005      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a4:	2000      	movs	r0, #0
 80045a6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	6899      	ldr	r1, [r3, #8]
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <HAL_TIM_Base_Start_IT+0x70>)
 80045ac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	2a06      	cmp	r2, #6
 80045b0:	d00a      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x64>
 80045b2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80045b6:	d009      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x68>
      __HAL_TIM_ENABLE(htim);
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80045c0:	2000      	movs	r0, #0
 80045c2:	4770      	bx	lr
    return HAL_ERROR;
 80045c4:	2001      	movs	r0, #1
 80045c6:	4770      	bx	lr
  return HAL_OK;
 80045c8:	2000      	movs	r0, #0
 80045ca:	4770      	bx	lr
 80045cc:	2000      	movs	r0, #0
}
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	00010007 	.word	0x00010007

080045d8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d8:	4770      	bx	lr

080045da <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_IRQHandler>:
{
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045e4:	6803      	ldr	r3, [r0, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	f012 0f02 	tst.w	r2, #2
 80045ec:	d011      	beq.n	8004612 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	f012 0f02 	tst.w	r2, #2
 80045f4:	d00d      	beq.n	8004612 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f6:	f06f 0202 	mvn.w	r2, #2
 80045fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fc:	2301      	movs	r3, #1
 80045fe:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004600:	6803      	ldr	r3, [r0, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f013 0f03 	tst.w	r3, #3
 8004608:	d079      	beq.n	80046fe <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800460a:	f7ff ffe6 	bl	80045da <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	2300      	movs	r3, #0
 8004610:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	f012 0f04 	tst.w	r2, #4
 800461a:	d012      	beq.n	8004642 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	f012 0f04 	tst.w	r2, #4
 8004622:	d00e      	beq.n	8004642 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004624:	f06f 0204 	mvn.w	r2, #4
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462a:	2302      	movs	r3, #2
 800462c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004636:	d068      	beq.n	800470a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004638:	4620      	mov	r0, r4
 800463a:	f7ff ffce 	bl	80045da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	2300      	movs	r3, #0
 8004640:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	f012 0f08 	tst.w	r2, #8
 800464a:	d012      	beq.n	8004672 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	f012 0f08 	tst.w	r2, #8
 8004652:	d00e      	beq.n	8004672 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004654:	f06f 0208 	mvn.w	r2, #8
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465a:	2304      	movs	r3, #4
 800465c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f013 0f03 	tst.w	r3, #3
 8004666:	d057      	beq.n	8004718 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004668:	4620      	mov	r0, r4
 800466a:	f7ff ffb6 	bl	80045da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	2300      	movs	r3, #0
 8004670:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	f012 0f10 	tst.w	r2, #16
 800467a:	d012      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	f012 0f10 	tst.w	r2, #16
 8004682:	d00e      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004684:	f06f 0210 	mvn.w	r2, #16
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800468a:	2308      	movs	r3, #8
 800468c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004696:	d046      	beq.n	8004726 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004698:	4620      	mov	r0, r4
 800469a:	f7ff ff9e 	bl	80045da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	2300      	movs	r3, #0
 80046a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	f012 0f01 	tst.w	r2, #1
 80046aa:	d003      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	f012 0f01 	tst.w	r2, #1
 80046b2:	d13f      	bne.n	8004734 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80046c4:	d13d      	bne.n	8004742 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	f412 7f80 	tst.w	r2, #256	; 0x100
 80046ce:	d003      	beq.n	80046d8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80046d6:	d13b      	bne.n	8004750 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046e8:	d139      	bne.n	800475e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	f012 0f20 	tst.w	r2, #32
 80046f2:	d003      	beq.n	80046fc <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	f012 0f20 	tst.w	r2, #32
 80046fa:	d137      	bne.n	800476c <HAL_TIM_IRQHandler+0x18c>
}
 80046fc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	f7ff ff6b 	bl	80045d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004702:	4620      	mov	r0, r4
 8004704:	f7ff ff6a 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
 8004708:	e781      	b.n	800460e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	4620      	mov	r0, r4
 800470c:	f7ff ff64 	bl	80045d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	4620      	mov	r0, r4
 8004712:	f7ff ff63 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
 8004716:	e792      	b.n	800463e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ff5d 	bl	80045d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff ff5c 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
 8004724:	e7a3      	b.n	800466e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	4620      	mov	r0, r4
 8004728:	f7ff ff56 	bl	80045d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	4620      	mov	r0, r4
 800472e:	f7ff ff55 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
 8004732:	e7b4      	b.n	800469e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004734:	f06f 0201 	mvn.w	r2, #1
 8004738:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800473a:	4620      	mov	r0, r4
 800473c:	f7fd f960 	bl	8001a00 <HAL_TIM_PeriodElapsedCallback>
 8004740:	e7b8      	b.n	80046b4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004742:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004746:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004748:	4620      	mov	r0, r4
 800474a:	f000 f8cc 	bl	80048e6 <HAL_TIMEx_BreakCallback>
 800474e:	e7ba      	b.n	80046c6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004750:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004754:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004756:	4620      	mov	r0, r4
 8004758:	f000 f8c6 	bl	80048e8 <HAL_TIMEx_Break2Callback>
 800475c:	e7bc      	b.n	80046d8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800475e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004762:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004764:	4620      	mov	r0, r4
 8004766:	f7ff ff3a 	bl	80045de <HAL_TIM_TriggerCallback>
 800476a:	e7be      	b.n	80046ea <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800476c:	f06f 0220 	mvn.w	r2, #32
 8004770:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004772:	4620      	mov	r0, r4
 8004774:	f000 f8b6 	bl	80048e4 <HAL_TIMEx_CommutCallback>
}
 8004778:	e7c0      	b.n	80046fc <HAL_TIM_IRQHandler+0x11c>
	...

0800477c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800477e:	4a22      	ldr	r2, [pc, #136]	; (8004808 <TIM_Base_SetConfig+0x8c>)
 8004780:	4290      	cmp	r0, r2
 8004782:	d006      	beq.n	8004792 <TIM_Base_SetConfig+0x16>
 8004784:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004788:	d003      	beq.n	8004792 <TIM_Base_SetConfig+0x16>
 800478a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800478e:	4290      	cmp	r0, r2
 8004790:	d103      	bne.n	800479a <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004796:	684a      	ldr	r2, [r1, #4]
 8004798:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <TIM_Base_SetConfig+0x8c>)
 800479c:	4290      	cmp	r0, r2
 800479e:	d012      	beq.n	80047c6 <TIM_Base_SetConfig+0x4a>
 80047a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80047a4:	d00f      	beq.n	80047c6 <TIM_Base_SetConfig+0x4a>
 80047a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80047aa:	4290      	cmp	r0, r2
 80047ac:	d00b      	beq.n	80047c6 <TIM_Base_SetConfig+0x4a>
 80047ae:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80047b2:	4290      	cmp	r0, r2
 80047b4:	d007      	beq.n	80047c6 <TIM_Base_SetConfig+0x4a>
 80047b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047ba:	4290      	cmp	r0, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_Base_SetConfig+0x4a>
 80047be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047c2:	4290      	cmp	r0, r2
 80047c4:	d103      	bne.n	80047ce <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ca:	68ca      	ldr	r2, [r1, #12]
 80047cc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d2:	694a      	ldr	r2, [r1, #20]
 80047d4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80047d6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d8:	688b      	ldr	r3, [r1, #8]
 80047da:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047dc:	680b      	ldr	r3, [r1, #0]
 80047de:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <TIM_Base_SetConfig+0x8c>)
 80047e2:	4298      	cmp	r0, r3
 80047e4:	d00b      	beq.n	80047fe <TIM_Base_SetConfig+0x82>
 80047e6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80047ea:	4298      	cmp	r0, r3
 80047ec:	d007      	beq.n	80047fe <TIM_Base_SetConfig+0x82>
 80047ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f2:	4298      	cmp	r0, r3
 80047f4:	d003      	beq.n	80047fe <TIM_Base_SetConfig+0x82>
 80047f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047fa:	4298      	cmp	r0, r3
 80047fc:	d101      	bne.n	8004802 <TIM_Base_SetConfig+0x86>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047fe:	690b      	ldr	r3, [r1, #16]
 8004800:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004802:	2301      	movs	r3, #1
 8004804:	6143      	str	r3, [r0, #20]
}
 8004806:	4770      	bx	lr
 8004808:	40012c00 	.word	0x40012c00

0800480c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800480c:	b360      	cbz	r0, 8004868 <HAL_TIM_Base_Init+0x5c>
{
 800480e:	b510      	push	{r4, lr}
 8004810:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004816:	b313      	cbz	r3, 800485e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	2302      	movs	r3, #2
 800481a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481e:	4621      	mov	r1, r4
 8004820:	f851 0b04 	ldr.w	r0, [r1], #4
 8004824:	f7ff ffaa 	bl	800477c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004828:	2301      	movs	r3, #1
 800482a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004832:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004836:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800483a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800483e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800484a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800484e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004852:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004856:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800485a:	2000      	movs	r0, #0
}
 800485c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800485e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004862:	f7fd fab9 	bl	8001dd8 <HAL_TIM_Base_MspInit>
 8004866:	e7d7      	b.n	8004818 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004868:	2001      	movs	r0, #1
}
 800486a:	4770      	bx	lr

0800486c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d033      	beq.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8004874:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004876:	2301      	movs	r3, #1
 8004878:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	2302      	movs	r3, #2
 800487e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004882:	6802      	ldr	r2, [r0, #0]
 8004884:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004886:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004888:	4c15      	ldr	r4, [pc, #84]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800488a:	42a2      	cmp	r2, r4
 800488c:	d021      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004892:	680c      	ldr	r4, [r1, #0]
 8004894:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004896:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004898:	6803      	ldr	r3, [r0, #0]
 800489a:	4a11      	ldr	r2, [pc, #68]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00a      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d007      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80048a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80048ae:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d104      	bne.n	80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ba:	688a      	ldr	r2, [r1, #8]
 80048bc:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048be:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c6:	2300      	movs	r3, #0
 80048c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80048cc:	4618      	mov	r0, r3
}
 80048ce:	bc30      	pop	{r4, r5}
 80048d0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048d6:	684c      	ldr	r4, [r1, #4]
 80048d8:	4323      	orrs	r3, r4
 80048da:	e7d8      	b.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80048dc:	2002      	movs	r0, #2
}
 80048de:	4770      	bx	lr
 80048e0:	40012c00 	.word	0x40012c00

080048e4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e4:	4770      	bx	lr

080048e6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048e8:	4770      	bx	lr
 80048ea:	0000      	movs	r0, r0
 80048ec:	0000      	movs	r0, r0
	...

080048f0 <atan>:
 80048f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	ec55 4b10 	vmov	r4, r5, d0
 80048f8:	4bc3      	ldr	r3, [pc, #780]	; (8004c08 <atan+0x318>)
 80048fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80048fe:	429e      	cmp	r6, r3
 8004900:	46ab      	mov	fp, r5
 8004902:	dd18      	ble.n	8004936 <atan+0x46>
 8004904:	4bc1      	ldr	r3, [pc, #772]	; (8004c0c <atan+0x31c>)
 8004906:	429e      	cmp	r6, r3
 8004908:	dc01      	bgt.n	800490e <atan+0x1e>
 800490a:	d109      	bne.n	8004920 <atan+0x30>
 800490c:	b144      	cbz	r4, 8004920 <atan+0x30>
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	4620      	mov	r0, r4
 8004914:	4629      	mov	r1, r5
 8004916:	f7fb fc5d 	bl	80001d4 <__adddf3>
 800491a:	4604      	mov	r4, r0
 800491c:	460d      	mov	r5, r1
 800491e:	e006      	b.n	800492e <atan+0x3e>
 8004920:	f1bb 0f00 	cmp.w	fp, #0
 8004924:	f300 8131 	bgt.w	8004b8a <atan+0x29a>
 8004928:	a59b      	add	r5, pc, #620	; (adr r5, 8004b98 <atan+0x2a8>)
 800492a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800492e:	ec45 4b10 	vmov	d0, r4, r5
 8004932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004936:	4bb6      	ldr	r3, [pc, #728]	; (8004c10 <atan+0x320>)
 8004938:	429e      	cmp	r6, r3
 800493a:	dc14      	bgt.n	8004966 <atan+0x76>
 800493c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004940:	429e      	cmp	r6, r3
 8004942:	dc0d      	bgt.n	8004960 <atan+0x70>
 8004944:	a396      	add	r3, pc, #600	; (adr r3, 8004ba0 <atan+0x2b0>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	ee10 0a10 	vmov	r0, s0
 800494e:	4629      	mov	r1, r5
 8004950:	f7fb fc40 	bl	80001d4 <__adddf3>
 8004954:	4baf      	ldr	r3, [pc, #700]	; (8004c14 <atan+0x324>)
 8004956:	2200      	movs	r2, #0
 8004958:	f7fc f882 	bl	8000a60 <__aeabi_dcmpgt>
 800495c:	2800      	cmp	r0, #0
 800495e:	d1e6      	bne.n	800492e <atan+0x3e>
 8004960:	f04f 3aff 	mov.w	sl, #4294967295
 8004964:	e02b      	b.n	80049be <atan+0xce>
 8004966:	f000 f9b3 	bl	8004cd0 <fabs>
 800496a:	4bab      	ldr	r3, [pc, #684]	; (8004c18 <atan+0x328>)
 800496c:	429e      	cmp	r6, r3
 800496e:	ec55 4b10 	vmov	r4, r5, d0
 8004972:	f300 80bf 	bgt.w	8004af4 <atan+0x204>
 8004976:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800497a:	429e      	cmp	r6, r3
 800497c:	f300 80a0 	bgt.w	8004ac0 <atan+0x1d0>
 8004980:	ee10 2a10 	vmov	r2, s0
 8004984:	ee10 0a10 	vmov	r0, s0
 8004988:	462b      	mov	r3, r5
 800498a:	4629      	mov	r1, r5
 800498c:	f7fb fc22 	bl	80001d4 <__adddf3>
 8004990:	4ba0      	ldr	r3, [pc, #640]	; (8004c14 <atan+0x324>)
 8004992:	2200      	movs	r2, #0
 8004994:	f7fb fc1c 	bl	80001d0 <__aeabi_dsub>
 8004998:	2200      	movs	r2, #0
 800499a:	4606      	mov	r6, r0
 800499c:	460f      	mov	r7, r1
 800499e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049a2:	4620      	mov	r0, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	f7fb fc15 	bl	80001d4 <__adddf3>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4630      	mov	r0, r6
 80049b0:	4639      	mov	r1, r7
 80049b2:	f7fb feef 	bl	8000794 <__aeabi_ddiv>
 80049b6:	f04f 0a00 	mov.w	sl, #0
 80049ba:	4604      	mov	r4, r0
 80049bc:	460d      	mov	r5, r1
 80049be:	4622      	mov	r2, r4
 80049c0:	462b      	mov	r3, r5
 80049c2:	4620      	mov	r0, r4
 80049c4:	4629      	mov	r1, r5
 80049c6:	f7fb fdbb 	bl	8000540 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4680      	mov	r8, r0
 80049d0:	4689      	mov	r9, r1
 80049d2:	f7fb fdb5 	bl	8000540 <__aeabi_dmul>
 80049d6:	a374      	add	r3, pc, #464	; (adr r3, 8004ba8 <atan+0x2b8>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	4606      	mov	r6, r0
 80049de:	460f      	mov	r7, r1
 80049e0:	f7fb fdae 	bl	8000540 <__aeabi_dmul>
 80049e4:	a372      	add	r3, pc, #456	; (adr r3, 8004bb0 <atan+0x2c0>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f7fb fbf3 	bl	80001d4 <__adddf3>
 80049ee:	4632      	mov	r2, r6
 80049f0:	463b      	mov	r3, r7
 80049f2:	f7fb fda5 	bl	8000540 <__aeabi_dmul>
 80049f6:	a370      	add	r3, pc, #448	; (adr r3, 8004bb8 <atan+0x2c8>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f7fb fbea 	bl	80001d4 <__adddf3>
 8004a00:	4632      	mov	r2, r6
 8004a02:	463b      	mov	r3, r7
 8004a04:	f7fb fd9c 	bl	8000540 <__aeabi_dmul>
 8004a08:	a36d      	add	r3, pc, #436	; (adr r3, 8004bc0 <atan+0x2d0>)
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f7fb fbe1 	bl	80001d4 <__adddf3>
 8004a12:	4632      	mov	r2, r6
 8004a14:	463b      	mov	r3, r7
 8004a16:	f7fb fd93 	bl	8000540 <__aeabi_dmul>
 8004a1a:	a36b      	add	r3, pc, #428	; (adr r3, 8004bc8 <atan+0x2d8>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f7fb fbd8 	bl	80001d4 <__adddf3>
 8004a24:	4632      	mov	r2, r6
 8004a26:	463b      	mov	r3, r7
 8004a28:	f7fb fd8a 	bl	8000540 <__aeabi_dmul>
 8004a2c:	a368      	add	r3, pc, #416	; (adr r3, 8004bd0 <atan+0x2e0>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fb fbcf 	bl	80001d4 <__adddf3>
 8004a36:	4642      	mov	r2, r8
 8004a38:	464b      	mov	r3, r9
 8004a3a:	f7fb fd81 	bl	8000540 <__aeabi_dmul>
 8004a3e:	a366      	add	r3, pc, #408	; (adr r3, 8004bd8 <atan+0x2e8>)
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	4680      	mov	r8, r0
 8004a46:	4689      	mov	r9, r1
 8004a48:	4630      	mov	r0, r6
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f7fb fd78 	bl	8000540 <__aeabi_dmul>
 8004a50:	a363      	add	r3, pc, #396	; (adr r3, 8004be0 <atan+0x2f0>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fbbb 	bl	80001d0 <__aeabi_dsub>
 8004a5a:	4632      	mov	r2, r6
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	f7fb fd6f 	bl	8000540 <__aeabi_dmul>
 8004a62:	a361      	add	r3, pc, #388	; (adr r3, 8004be8 <atan+0x2f8>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f7fb fbb2 	bl	80001d0 <__aeabi_dsub>
 8004a6c:	4632      	mov	r2, r6
 8004a6e:	463b      	mov	r3, r7
 8004a70:	f7fb fd66 	bl	8000540 <__aeabi_dmul>
 8004a74:	a35e      	add	r3, pc, #376	; (adr r3, 8004bf0 <atan+0x300>)
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	f7fb fba9 	bl	80001d0 <__aeabi_dsub>
 8004a7e:	4632      	mov	r2, r6
 8004a80:	463b      	mov	r3, r7
 8004a82:	f7fb fd5d 	bl	8000540 <__aeabi_dmul>
 8004a86:	a35c      	add	r3, pc, #368	; (adr r3, 8004bf8 <atan+0x308>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f7fb fba0 	bl	80001d0 <__aeabi_dsub>
 8004a90:	4632      	mov	r2, r6
 8004a92:	463b      	mov	r3, r7
 8004a94:	f7fb fd54 	bl	8000540 <__aeabi_dmul>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	f7fb fb98 	bl	80001d4 <__adddf3>
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	462b      	mov	r3, r5
 8004aa8:	f7fb fd4a 	bl	8000540 <__aeabi_dmul>
 8004aac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	d14b      	bne.n	8004b4e <atan+0x25e>
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f7fb fb89 	bl	80001d0 <__aeabi_dsub>
 8004abe:	e72c      	b.n	800491a <atan+0x2a>
 8004ac0:	ee10 0a10 	vmov	r0, s0
 8004ac4:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <atan+0x324>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f7fb fb81 	bl	80001d0 <__aeabi_dsub>
 8004ace:	4b51      	ldr	r3, [pc, #324]	; (8004c14 <atan+0x324>)
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	460f      	mov	r7, r1
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f7fb fb7b 	bl	80001d4 <__adddf3>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	4639      	mov	r1, r7
 8004ae6:	f7fb fe55 	bl	8000794 <__aeabi_ddiv>
 8004aea:	f04f 0a01 	mov.w	sl, #1
 8004aee:	4604      	mov	r4, r0
 8004af0:	460d      	mov	r5, r1
 8004af2:	e764      	b.n	80049be <atan+0xce>
 8004af4:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <atan+0x32c>)
 8004af6:	429e      	cmp	r6, r3
 8004af8:	da1d      	bge.n	8004b36 <atan+0x246>
 8004afa:	ee10 0a10 	vmov	r0, s0
 8004afe:	4b48      	ldr	r3, [pc, #288]	; (8004c20 <atan+0x330>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	4629      	mov	r1, r5
 8004b04:	f7fb fb64 	bl	80001d0 <__aeabi_dsub>
 8004b08:	4b45      	ldr	r3, [pc, #276]	; (8004c20 <atan+0x330>)
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	460f      	mov	r7, r1
 8004b0e:	2200      	movs	r2, #0
 8004b10:	4620      	mov	r0, r4
 8004b12:	4629      	mov	r1, r5
 8004b14:	f7fb fd14 	bl	8000540 <__aeabi_dmul>
 8004b18:	4b3e      	ldr	r3, [pc, #248]	; (8004c14 <atan+0x324>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f7fb fb5a 	bl	80001d4 <__adddf3>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4630      	mov	r0, r6
 8004b26:	4639      	mov	r1, r7
 8004b28:	f7fb fe34 	bl	8000794 <__aeabi_ddiv>
 8004b2c:	f04f 0a02 	mov.w	sl, #2
 8004b30:	4604      	mov	r4, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	e743      	b.n	80049be <atan+0xce>
 8004b36:	462b      	mov	r3, r5
 8004b38:	ee10 2a10 	vmov	r2, s0
 8004b3c:	4939      	ldr	r1, [pc, #228]	; (8004c24 <atan+0x334>)
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f7fb fe28 	bl	8000794 <__aeabi_ddiv>
 8004b44:	f04f 0a03 	mov.w	sl, #3
 8004b48:	4604      	mov	r4, r0
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	e737      	b.n	80049be <atan+0xce>
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <atan+0x338>)
 8004b50:	4e36      	ldr	r6, [pc, #216]	; (8004c2c <atan+0x33c>)
 8004b52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004b56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8004b5a:	e9da 2300 	ldrd	r2, r3, [sl]
 8004b5e:	f7fb fb37 	bl	80001d0 <__aeabi_dsub>
 8004b62:	4622      	mov	r2, r4
 8004b64:	462b      	mov	r3, r5
 8004b66:	f7fb fb33 	bl	80001d0 <__aeabi_dsub>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004b72:	f7fb fb2d 	bl	80001d0 <__aeabi_dsub>
 8004b76:	f1bb 0f00 	cmp.w	fp, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	460d      	mov	r5, r1
 8004b7e:	f6bf aed6 	bge.w	800492e <atan+0x3e>
 8004b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b86:	461d      	mov	r5, r3
 8004b88:	e6d1      	b.n	800492e <atan+0x3e>
 8004b8a:	a51d      	add	r5, pc, #116	; (adr r5, 8004c00 <atan+0x310>)
 8004b8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b90:	e6cd      	b.n	800492e <atan+0x3e>
 8004b92:	bf00      	nop
 8004b94:	f3af 8000 	nop.w
 8004b98:	54442d18 	.word	0x54442d18
 8004b9c:	bff921fb 	.word	0xbff921fb
 8004ba0:	8800759c 	.word	0x8800759c
 8004ba4:	7e37e43c 	.word	0x7e37e43c
 8004ba8:	e322da11 	.word	0xe322da11
 8004bac:	3f90ad3a 	.word	0x3f90ad3a
 8004bb0:	24760deb 	.word	0x24760deb
 8004bb4:	3fa97b4b 	.word	0x3fa97b4b
 8004bb8:	a0d03d51 	.word	0xa0d03d51
 8004bbc:	3fb10d66 	.word	0x3fb10d66
 8004bc0:	c54c206e 	.word	0xc54c206e
 8004bc4:	3fb745cd 	.word	0x3fb745cd
 8004bc8:	920083ff 	.word	0x920083ff
 8004bcc:	3fc24924 	.word	0x3fc24924
 8004bd0:	5555550d 	.word	0x5555550d
 8004bd4:	3fd55555 	.word	0x3fd55555
 8004bd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8004bdc:	bfa2b444 	.word	0xbfa2b444
 8004be0:	52defd9a 	.word	0x52defd9a
 8004be4:	3fadde2d 	.word	0x3fadde2d
 8004be8:	af749a6d 	.word	0xaf749a6d
 8004bec:	3fb3b0f2 	.word	0x3fb3b0f2
 8004bf0:	fe231671 	.word	0xfe231671
 8004bf4:	3fbc71c6 	.word	0x3fbc71c6
 8004bf8:	9998ebc4 	.word	0x9998ebc4
 8004bfc:	3fc99999 	.word	0x3fc99999
 8004c00:	54442d18 	.word	0x54442d18
 8004c04:	3ff921fb 	.word	0x3ff921fb
 8004c08:	440fffff 	.word	0x440fffff
 8004c0c:	7ff00000 	.word	0x7ff00000
 8004c10:	3fdbffff 	.word	0x3fdbffff
 8004c14:	3ff00000 	.word	0x3ff00000
 8004c18:	3ff2ffff 	.word	0x3ff2ffff
 8004c1c:	40038000 	.word	0x40038000
 8004c20:	3ff80000 	.word	0x3ff80000
 8004c24:	bff00000 	.word	0xbff00000
 8004c28:	08005fd8 	.word	0x08005fd8
 8004c2c:	08005fb8 	.word	0x08005fb8

08004c30 <cos>:
 8004c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c32:	ec53 2b10 	vmov	r2, r3, d0
 8004c36:	4824      	ldr	r0, [pc, #144]	; (8004cc8 <cos+0x98>)
 8004c38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c3c:	4281      	cmp	r1, r0
 8004c3e:	dc06      	bgt.n	8004c4e <cos+0x1e>
 8004c40:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8004cc0 <cos+0x90>
 8004c44:	f000 fb98 	bl	8005378 <__kernel_cos>
 8004c48:	ec51 0b10 	vmov	r0, r1, d0
 8004c4c:	e007      	b.n	8004c5e <cos+0x2e>
 8004c4e:	481f      	ldr	r0, [pc, #124]	; (8004ccc <cos+0x9c>)
 8004c50:	4281      	cmp	r1, r0
 8004c52:	dd09      	ble.n	8004c68 <cos+0x38>
 8004c54:	ee10 0a10 	vmov	r0, s0
 8004c58:	4619      	mov	r1, r3
 8004c5a:	f7fb fab9 	bl	80001d0 <__aeabi_dsub>
 8004c5e:	ec41 0b10 	vmov	d0, r0, r1
 8004c62:	b005      	add	sp, #20
 8004c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c68:	4668      	mov	r0, sp
 8004c6a:	f000 f8c5 	bl	8004df8 <__ieee754_rem_pio2>
 8004c6e:	f000 0003 	and.w	r0, r0, #3
 8004c72:	2801      	cmp	r0, #1
 8004c74:	d007      	beq.n	8004c86 <cos+0x56>
 8004c76:	2802      	cmp	r0, #2
 8004c78:	d012      	beq.n	8004ca0 <cos+0x70>
 8004c7a:	b9c0      	cbnz	r0, 8004cae <cos+0x7e>
 8004c7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c80:	ed9d 0b00 	vldr	d0, [sp]
 8004c84:	e7de      	b.n	8004c44 <cos+0x14>
 8004c86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c8a:	ed9d 0b00 	vldr	d0, [sp]
 8004c8e:	f000 ff7b 	bl	8005b88 <__kernel_sin>
 8004c92:	ec53 2b10 	vmov	r2, r3, d0
 8004c96:	ee10 0a10 	vmov	r0, s0
 8004c9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004c9e:	e7de      	b.n	8004c5e <cos+0x2e>
 8004ca0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ca4:	ed9d 0b00 	vldr	d0, [sp]
 8004ca8:	f000 fb66 	bl	8005378 <__kernel_cos>
 8004cac:	e7f1      	b.n	8004c92 <cos+0x62>
 8004cae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004cb2:	ed9d 0b00 	vldr	d0, [sp]
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f000 ff66 	bl	8005b88 <__kernel_sin>
 8004cbc:	e7c4      	b.n	8004c48 <cos+0x18>
 8004cbe:	bf00      	nop
	...
 8004cc8:	3fe921fb 	.word	0x3fe921fb
 8004ccc:	7fefffff 	.word	0x7fefffff

08004cd0 <fabs>:
 8004cd0:	ec51 0b10 	vmov	r0, r1, d0
 8004cd4:	ee10 2a10 	vmov	r2, s0
 8004cd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cdc:	ec43 2b10 	vmov	d0, r2, r3
 8004ce0:	4770      	bx	lr
 8004ce2:	0000      	movs	r0, r0
 8004ce4:	0000      	movs	r0, r0
	...

08004ce8 <sin>:
 8004ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cea:	ec53 2b10 	vmov	r2, r3, d0
 8004cee:	4826      	ldr	r0, [pc, #152]	; (8004d88 <sin+0xa0>)
 8004cf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cf4:	4281      	cmp	r1, r0
 8004cf6:	dc07      	bgt.n	8004d08 <sin+0x20>
 8004cf8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004d80 <sin+0x98>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f000 ff43 	bl	8005b88 <__kernel_sin>
 8004d02:	ec51 0b10 	vmov	r0, r1, d0
 8004d06:	e007      	b.n	8004d18 <sin+0x30>
 8004d08:	4820      	ldr	r0, [pc, #128]	; (8004d8c <sin+0xa4>)
 8004d0a:	4281      	cmp	r1, r0
 8004d0c:	dd09      	ble.n	8004d22 <sin+0x3a>
 8004d0e:	ee10 0a10 	vmov	r0, s0
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7fb fa5c 	bl	80001d0 <__aeabi_dsub>
 8004d18:	ec41 0b10 	vmov	d0, r0, r1
 8004d1c:	b005      	add	sp, #20
 8004d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d22:	4668      	mov	r0, sp
 8004d24:	f000 f868 	bl	8004df8 <__ieee754_rem_pio2>
 8004d28:	f000 0003 	and.w	r0, r0, #3
 8004d2c:	2801      	cmp	r0, #1
 8004d2e:	d008      	beq.n	8004d42 <sin+0x5a>
 8004d30:	2802      	cmp	r0, #2
 8004d32:	d00d      	beq.n	8004d50 <sin+0x68>
 8004d34:	b9d0      	cbnz	r0, 8004d6c <sin+0x84>
 8004d36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d3a:	ed9d 0b00 	vldr	d0, [sp]
 8004d3e:	2001      	movs	r0, #1
 8004d40:	e7dd      	b.n	8004cfe <sin+0x16>
 8004d42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d46:	ed9d 0b00 	vldr	d0, [sp]
 8004d4a:	f000 fb15 	bl	8005378 <__kernel_cos>
 8004d4e:	e7d8      	b.n	8004d02 <sin+0x1a>
 8004d50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d54:	ed9d 0b00 	vldr	d0, [sp]
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f000 ff15 	bl	8005b88 <__kernel_sin>
 8004d5e:	ec53 2b10 	vmov	r2, r3, d0
 8004d62:	ee10 0a10 	vmov	r0, s0
 8004d66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d6a:	e7d5      	b.n	8004d18 <sin+0x30>
 8004d6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d70:	ed9d 0b00 	vldr	d0, [sp]
 8004d74:	f000 fb00 	bl	8005378 <__kernel_cos>
 8004d78:	e7f1      	b.n	8004d5e <sin+0x76>
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w
	...
 8004d88:	3fe921fb 	.word	0x3fe921fb
 8004d8c:	7fefffff 	.word	0x7fefffff

08004d90 <sqrt>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	ed2d 8b02 	vpush	{d8}
 8004d96:	ec55 4b10 	vmov	r4, r5, d0
 8004d9a:	f000 fa37 	bl	800520c <__ieee754_sqrt>
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <sqrt+0x64>)
 8004da0:	eeb0 8a40 	vmov.f32	s16, s0
 8004da4:	eef0 8a60 	vmov.f32	s17, s1
 8004da8:	f993 3000 	ldrsb.w	r3, [r3]
 8004dac:	3301      	adds	r3, #1
 8004dae:	d019      	beq.n	8004de4 <sqrt+0x54>
 8004db0:	4622      	mov	r2, r4
 8004db2:	462b      	mov	r3, r5
 8004db4:	4620      	mov	r0, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	f7fb fe5c 	bl	8000a74 <__aeabi_dcmpun>
 8004dbc:	b990      	cbnz	r0, 8004de4 <sqrt+0x54>
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f7fb fe2d 	bl	8000a24 <__aeabi_dcmplt>
 8004dca:	b158      	cbz	r0, 8004de4 <sqrt+0x54>
 8004dcc:	f001 f8a2 	bl	8005f14 <__errno>
 8004dd0:	2321      	movs	r3, #33	; 0x21
 8004dd2:	6003      	str	r3, [r0, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f7fb fcda 	bl	8000794 <__aeabi_ddiv>
 8004de0:	ec41 0b18 	vmov	d8, r0, r1
 8004de4:	eeb0 0a48 	vmov.f32	s0, s16
 8004de8:	eef0 0a68 	vmov.f32	s1, s17
 8004dec:	ecbd 8b02 	vpop	{d8}
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
 8004df2:	bf00      	nop
 8004df4:	20000014 	.word	0x20000014

08004df8 <__ieee754_rem_pio2>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	ed2d 8b02 	vpush	{d8}
 8004e00:	ec55 4b10 	vmov	r4, r5, d0
 8004e04:	4bca      	ldr	r3, [pc, #808]	; (8005130 <__ieee754_rem_pio2+0x338>)
 8004e06:	b08b      	sub	sp, #44	; 0x2c
 8004e08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004e0c:	4598      	cmp	r8, r3
 8004e0e:	4682      	mov	sl, r0
 8004e10:	9502      	str	r5, [sp, #8]
 8004e12:	dc08      	bgt.n	8004e26 <__ieee754_rem_pio2+0x2e>
 8004e14:	2200      	movs	r2, #0
 8004e16:	2300      	movs	r3, #0
 8004e18:	ed80 0b00 	vstr	d0, [r0]
 8004e1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004e20:	f04f 0b00 	mov.w	fp, #0
 8004e24:	e028      	b.n	8004e78 <__ieee754_rem_pio2+0x80>
 8004e26:	4bc3      	ldr	r3, [pc, #780]	; (8005134 <__ieee754_rem_pio2+0x33c>)
 8004e28:	4598      	cmp	r8, r3
 8004e2a:	dc78      	bgt.n	8004f1e <__ieee754_rem_pio2+0x126>
 8004e2c:	9b02      	ldr	r3, [sp, #8]
 8004e2e:	4ec2      	ldr	r6, [pc, #776]	; (8005138 <__ieee754_rem_pio2+0x340>)
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	ee10 0a10 	vmov	r0, s0
 8004e36:	a3b0      	add	r3, pc, #704	; (adr r3, 80050f8 <__ieee754_rem_pio2+0x300>)
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	dd39      	ble.n	8004eb4 <__ieee754_rem_pio2+0xbc>
 8004e40:	f7fb f9c6 	bl	80001d0 <__aeabi_dsub>
 8004e44:	45b0      	cmp	r8, r6
 8004e46:	4604      	mov	r4, r0
 8004e48:	460d      	mov	r5, r1
 8004e4a:	d01b      	beq.n	8004e84 <__ieee754_rem_pio2+0x8c>
 8004e4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005100 <__ieee754_rem_pio2+0x308>)
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f7fb f9bd 	bl	80001d0 <__aeabi_dsub>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	e9ca 2300 	strd	r2, r3, [sl]
 8004e5e:	4620      	mov	r0, r4
 8004e60:	4629      	mov	r1, r5
 8004e62:	f7fb f9b5 	bl	80001d0 <__aeabi_dsub>
 8004e66:	a3a6      	add	r3, pc, #664	; (adr r3, 8005100 <__ieee754_rem_pio2+0x308>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f7fb f9b0 	bl	80001d0 <__aeabi_dsub>
 8004e70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e74:	f04f 0b01 	mov.w	fp, #1
 8004e78:	4658      	mov	r0, fp
 8004e7a:	b00b      	add	sp, #44	; 0x2c
 8004e7c:	ecbd 8b02 	vpop	{d8}
 8004e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e84:	a3a0      	add	r3, pc, #640	; (adr r3, 8005108 <__ieee754_rem_pio2+0x310>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f7fb f9a1 	bl	80001d0 <__aeabi_dsub>
 8004e8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8005110 <__ieee754_rem_pio2+0x318>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	4604      	mov	r4, r0
 8004e96:	460d      	mov	r5, r1
 8004e98:	f7fb f99a 	bl	80001d0 <__aeabi_dsub>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	e9ca 2300 	strd	r2, r3, [sl]
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f7fb f992 	bl	80001d0 <__aeabi_dsub>
 8004eac:	a398      	add	r3, pc, #608	; (adr r3, 8005110 <__ieee754_rem_pio2+0x318>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	e7db      	b.n	8004e6c <__ieee754_rem_pio2+0x74>
 8004eb4:	f7fb f98e 	bl	80001d4 <__adddf3>
 8004eb8:	45b0      	cmp	r8, r6
 8004eba:	4604      	mov	r4, r0
 8004ebc:	460d      	mov	r5, r1
 8004ebe:	d016      	beq.n	8004eee <__ieee754_rem_pio2+0xf6>
 8004ec0:	a38f      	add	r3, pc, #572	; (adr r3, 8005100 <__ieee754_rem_pio2+0x308>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb f985 	bl	80001d4 <__adddf3>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	e9ca 2300 	strd	r2, r3, [sl]
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb f97b 	bl	80001d0 <__aeabi_dsub>
 8004eda:	a389      	add	r3, pc, #548	; (adr r3, 8005100 <__ieee754_rem_pio2+0x308>)
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f7fb f978 	bl	80001d4 <__adddf3>
 8004ee4:	f04f 3bff 	mov.w	fp, #4294967295
 8004ee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004eec:	e7c4      	b.n	8004e78 <__ieee754_rem_pio2+0x80>
 8004eee:	a386      	add	r3, pc, #536	; (adr r3, 8005108 <__ieee754_rem_pio2+0x310>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb f96e 	bl	80001d4 <__adddf3>
 8004ef8:	a385      	add	r3, pc, #532	; (adr r3, 8005110 <__ieee754_rem_pio2+0x318>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	4604      	mov	r4, r0
 8004f00:	460d      	mov	r5, r1
 8004f02:	f7fb f967 	bl	80001d4 <__adddf3>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	e9ca 2300 	strd	r2, r3, [sl]
 8004f0e:	4620      	mov	r0, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	f7fb f95d 	bl	80001d0 <__aeabi_dsub>
 8004f16:	a37e      	add	r3, pc, #504	; (adr r3, 8005110 <__ieee754_rem_pio2+0x318>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	e7e0      	b.n	8004ee0 <__ieee754_rem_pio2+0xe8>
 8004f1e:	4b87      	ldr	r3, [pc, #540]	; (800513c <__ieee754_rem_pio2+0x344>)
 8004f20:	4598      	cmp	r8, r3
 8004f22:	f300 80d9 	bgt.w	80050d8 <__ieee754_rem_pio2+0x2e0>
 8004f26:	f7ff fed3 	bl	8004cd0 <fabs>
 8004f2a:	ec55 4b10 	vmov	r4, r5, d0
 8004f2e:	ee10 0a10 	vmov	r0, s0
 8004f32:	a379      	add	r3, pc, #484	; (adr r3, 8005118 <__ieee754_rem_pio2+0x320>)
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7fb fb01 	bl	8000540 <__aeabi_dmul>
 8004f3e:	4b80      	ldr	r3, [pc, #512]	; (8005140 <__ieee754_rem_pio2+0x348>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	f7fb f947 	bl	80001d4 <__adddf3>
 8004f46:	f7fb fdab 	bl	8000aa0 <__aeabi_d2iz>
 8004f4a:	4683      	mov	fp, r0
 8004f4c:	f7fb fa8e 	bl	800046c <__aeabi_i2d>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	ec43 2b18 	vmov	d8, r2, r3
 8004f58:	a367      	add	r3, pc, #412	; (adr r3, 80050f8 <__ieee754_rem_pio2+0x300>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb faef 	bl	8000540 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4620      	mov	r0, r4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	f7fb f931 	bl	80001d0 <__aeabi_dsub>
 8004f6e:	a364      	add	r3, pc, #400	; (adr r3, 8005100 <__ieee754_rem_pio2+0x308>)
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	4606      	mov	r6, r0
 8004f76:	460f      	mov	r7, r1
 8004f78:	ec51 0b18 	vmov	r0, r1, d8
 8004f7c:	f7fb fae0 	bl	8000540 <__aeabi_dmul>
 8004f80:	f1bb 0f1f 	cmp.w	fp, #31
 8004f84:	4604      	mov	r4, r0
 8004f86:	460d      	mov	r5, r1
 8004f88:	dc0d      	bgt.n	8004fa6 <__ieee754_rem_pio2+0x1ae>
 8004f8a:	4b6e      	ldr	r3, [pc, #440]	; (8005144 <__ieee754_rem_pio2+0x34c>)
 8004f8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f94:	4543      	cmp	r3, r8
 8004f96:	d006      	beq.n	8004fa6 <__ieee754_rem_pio2+0x1ae>
 8004f98:	4622      	mov	r2, r4
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb f916 	bl	80001d0 <__aeabi_dsub>
 8004fa4:	e00f      	b.n	8004fc6 <__ieee754_rem_pio2+0x1ce>
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	4622      	mov	r2, r4
 8004faa:	4630      	mov	r0, r6
 8004fac:	4639      	mov	r1, r7
 8004fae:	f7fb f90f 	bl	80001d0 <__aeabi_dsub>
 8004fb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004fb6:	9303      	str	r3, [sp, #12]
 8004fb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004fbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004fc0:	f1b8 0f10 	cmp.w	r8, #16
 8004fc4:	dc02      	bgt.n	8004fcc <__ieee754_rem_pio2+0x1d4>
 8004fc6:	e9ca 0100 	strd	r0, r1, [sl]
 8004fca:	e039      	b.n	8005040 <__ieee754_rem_pio2+0x248>
 8004fcc:	a34e      	add	r3, pc, #312	; (adr r3, 8005108 <__ieee754_rem_pio2+0x310>)
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	ec51 0b18 	vmov	r0, r1, d8
 8004fd6:	f7fb fab3 	bl	8000540 <__aeabi_dmul>
 8004fda:	4604      	mov	r4, r0
 8004fdc:	460d      	mov	r5, r1
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	f7fb f8f3 	bl	80001d0 <__aeabi_dsub>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4680      	mov	r8, r0
 8004ff0:	4689      	mov	r9, r1
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	4639      	mov	r1, r7
 8004ff6:	f7fb f8eb 	bl	80001d0 <__aeabi_dsub>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f7fb f8e7 	bl	80001d0 <__aeabi_dsub>
 8005002:	a343      	add	r3, pc, #268	; (adr r3, 8005110 <__ieee754_rem_pio2+0x318>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	4604      	mov	r4, r0
 800500a:	460d      	mov	r5, r1
 800500c:	ec51 0b18 	vmov	r0, r1, d8
 8005010:	f7fb fa96 	bl	8000540 <__aeabi_dmul>
 8005014:	4622      	mov	r2, r4
 8005016:	462b      	mov	r3, r5
 8005018:	f7fb f8da 	bl	80001d0 <__aeabi_dsub>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4604      	mov	r4, r0
 8005022:	460d      	mov	r5, r1
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	f7fb f8d2 	bl	80001d0 <__aeabi_dsub>
 800502c:	9a03      	ldr	r2, [sp, #12]
 800502e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b31      	cmp	r3, #49	; 0x31
 8005036:	dc24      	bgt.n	8005082 <__ieee754_rem_pio2+0x28a>
 8005038:	e9ca 0100 	strd	r0, r1, [sl]
 800503c:	4646      	mov	r6, r8
 800503e:	464f      	mov	r7, r9
 8005040:	e9da 8900 	ldrd	r8, r9, [sl]
 8005044:	4630      	mov	r0, r6
 8005046:	4642      	mov	r2, r8
 8005048:	464b      	mov	r3, r9
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb f8c0 	bl	80001d0 <__aeabi_dsub>
 8005050:	462b      	mov	r3, r5
 8005052:	4622      	mov	r2, r4
 8005054:	f7fb f8bc 	bl	80001d0 <__aeabi_dsub>
 8005058:	9b02      	ldr	r3, [sp, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005060:	f6bf af0a 	bge.w	8004e78 <__ieee754_rem_pio2+0x80>
 8005064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005068:	f8ca 3004 	str.w	r3, [sl, #4]
 800506c:	f8ca 8000 	str.w	r8, [sl]
 8005070:	f8ca 0008 	str.w	r0, [sl, #8]
 8005074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005078:	f8ca 300c 	str.w	r3, [sl, #12]
 800507c:	f1cb 0b00 	rsb	fp, fp, #0
 8005080:	e6fa      	b.n	8004e78 <__ieee754_rem_pio2+0x80>
 8005082:	a327      	add	r3, pc, #156	; (adr r3, 8005120 <__ieee754_rem_pio2+0x328>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	ec51 0b18 	vmov	r0, r1, d8
 800508c:	f7fb fa58 	bl	8000540 <__aeabi_dmul>
 8005090:	4604      	mov	r4, r0
 8005092:	460d      	mov	r5, r1
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4640      	mov	r0, r8
 800509a:	4649      	mov	r1, r9
 800509c:	f7fb f898 	bl	80001d0 <__aeabi_dsub>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4606      	mov	r6, r0
 80050a6:	460f      	mov	r7, r1
 80050a8:	4640      	mov	r0, r8
 80050aa:	4649      	mov	r1, r9
 80050ac:	f7fb f890 	bl	80001d0 <__aeabi_dsub>
 80050b0:	4622      	mov	r2, r4
 80050b2:	462b      	mov	r3, r5
 80050b4:	f7fb f88c 	bl	80001d0 <__aeabi_dsub>
 80050b8:	a31b      	add	r3, pc, #108	; (adr r3, 8005128 <__ieee754_rem_pio2+0x330>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	4604      	mov	r4, r0
 80050c0:	460d      	mov	r5, r1
 80050c2:	ec51 0b18 	vmov	r0, r1, d8
 80050c6:	f7fb fa3b 	bl	8000540 <__aeabi_dmul>
 80050ca:	4622      	mov	r2, r4
 80050cc:	462b      	mov	r3, r5
 80050ce:	f7fb f87f 	bl	80001d0 <__aeabi_dsub>
 80050d2:	4604      	mov	r4, r0
 80050d4:	460d      	mov	r5, r1
 80050d6:	e75f      	b.n	8004f98 <__ieee754_rem_pio2+0x1a0>
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <__ieee754_rem_pio2+0x350>)
 80050da:	4598      	cmp	r8, r3
 80050dc:	dd36      	ble.n	800514c <__ieee754_rem_pio2+0x354>
 80050de:	ee10 2a10 	vmov	r2, s0
 80050e2:	462b      	mov	r3, r5
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7fb f872 	bl	80001d0 <__aeabi_dsub>
 80050ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80050f0:	e9ca 0100 	strd	r0, r1, [sl]
 80050f4:	e694      	b.n	8004e20 <__ieee754_rem_pio2+0x28>
 80050f6:	bf00      	nop
 80050f8:	54400000 	.word	0x54400000
 80050fc:	3ff921fb 	.word	0x3ff921fb
 8005100:	1a626331 	.word	0x1a626331
 8005104:	3dd0b461 	.word	0x3dd0b461
 8005108:	1a600000 	.word	0x1a600000
 800510c:	3dd0b461 	.word	0x3dd0b461
 8005110:	2e037073 	.word	0x2e037073
 8005114:	3ba3198a 	.word	0x3ba3198a
 8005118:	6dc9c883 	.word	0x6dc9c883
 800511c:	3fe45f30 	.word	0x3fe45f30
 8005120:	2e000000 	.word	0x2e000000
 8005124:	3ba3198a 	.word	0x3ba3198a
 8005128:	252049c1 	.word	0x252049c1
 800512c:	397b839a 	.word	0x397b839a
 8005130:	3fe921fb 	.word	0x3fe921fb
 8005134:	4002d97b 	.word	0x4002d97b
 8005138:	3ff921fb 	.word	0x3ff921fb
 800513c:	413921fb 	.word	0x413921fb
 8005140:	3fe00000 	.word	0x3fe00000
 8005144:	08005ff8 	.word	0x08005ff8
 8005148:	7fefffff 	.word	0x7fefffff
 800514c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005150:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005154:	ee10 0a10 	vmov	r0, s0
 8005158:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800515c:	ee10 6a10 	vmov	r6, s0
 8005160:	460f      	mov	r7, r1
 8005162:	f7fb fc9d 	bl	8000aa0 <__aeabi_d2iz>
 8005166:	f7fb f981 	bl	800046c <__aeabi_i2d>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4630      	mov	r0, r6
 8005170:	4639      	mov	r1, r7
 8005172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005176:	f7fb f82b 	bl	80001d0 <__aeabi_dsub>
 800517a:	4b22      	ldr	r3, [pc, #136]	; (8005204 <__ieee754_rem_pio2+0x40c>)
 800517c:	2200      	movs	r2, #0
 800517e:	f7fb f9df 	bl	8000540 <__aeabi_dmul>
 8005182:	460f      	mov	r7, r1
 8005184:	4606      	mov	r6, r0
 8005186:	f7fb fc8b 	bl	8000aa0 <__aeabi_d2iz>
 800518a:	f7fb f96f 	bl	800046c <__aeabi_i2d>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4630      	mov	r0, r6
 8005194:	4639      	mov	r1, r7
 8005196:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800519a:	f7fb f819 	bl	80001d0 <__aeabi_dsub>
 800519e:	4b19      	ldr	r3, [pc, #100]	; (8005204 <__ieee754_rem_pio2+0x40c>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	f7fb f9cd 	bl	8000540 <__aeabi_dmul>
 80051a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80051aa:	ad04      	add	r5, sp, #16
 80051ac:	f04f 0803 	mov.w	r8, #3
 80051b0:	46a9      	mov	r9, r5
 80051b2:	2600      	movs	r6, #0
 80051b4:	2700      	movs	r7, #0
 80051b6:	4632      	mov	r2, r6
 80051b8:	463b      	mov	r3, r7
 80051ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80051be:	46c3      	mov	fp, r8
 80051c0:	3d08      	subs	r5, #8
 80051c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80051c6:	f7fb fc23 	bl	8000a10 <__aeabi_dcmpeq>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d1f3      	bne.n	80051b6 <__ieee754_rem_pio2+0x3be>
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <__ieee754_rem_pio2+0x410>)
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	2302      	movs	r3, #2
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4622      	mov	r2, r4
 80051d8:	465b      	mov	r3, fp
 80051da:	4651      	mov	r1, sl
 80051dc:	4648      	mov	r0, r9
 80051de:	f000 f993 	bl	8005508 <__kernel_rem_pio2>
 80051e2:	9b02      	ldr	r3, [sp, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	4683      	mov	fp, r0
 80051e8:	f6bf ae46 	bge.w	8004e78 <__ieee754_rem_pio2+0x80>
 80051ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 80051f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051f4:	f8ca 3004 	str.w	r3, [sl, #4]
 80051f8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80051fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005200:	e73a      	b.n	8005078 <__ieee754_rem_pio2+0x280>
 8005202:	bf00      	nop
 8005204:	41700000 	.word	0x41700000
 8005208:	08006078 	.word	0x08006078

0800520c <__ieee754_sqrt>:
 800520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005210:	ec55 4b10 	vmov	r4, r5, d0
 8005214:	4e56      	ldr	r6, [pc, #344]	; (8005370 <__ieee754_sqrt+0x164>)
 8005216:	43ae      	bics	r6, r5
 8005218:	ee10 0a10 	vmov	r0, s0
 800521c:	ee10 3a10 	vmov	r3, s0
 8005220:	4629      	mov	r1, r5
 8005222:	462a      	mov	r2, r5
 8005224:	d110      	bne.n	8005248 <__ieee754_sqrt+0x3c>
 8005226:	ee10 2a10 	vmov	r2, s0
 800522a:	462b      	mov	r3, r5
 800522c:	f7fb f988 	bl	8000540 <__aeabi_dmul>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fa ffcc 	bl	80001d4 <__adddf3>
 800523c:	4604      	mov	r4, r0
 800523e:	460d      	mov	r5, r1
 8005240:	ec45 4b10 	vmov	d0, r4, r5
 8005244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005248:	2d00      	cmp	r5, #0
 800524a:	dc10      	bgt.n	800526e <__ieee754_sqrt+0x62>
 800524c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005250:	4330      	orrs	r0, r6
 8005252:	d0f5      	beq.n	8005240 <__ieee754_sqrt+0x34>
 8005254:	b15d      	cbz	r5, 800526e <__ieee754_sqrt+0x62>
 8005256:	ee10 2a10 	vmov	r2, s0
 800525a:	462b      	mov	r3, r5
 800525c:	ee10 0a10 	vmov	r0, s0
 8005260:	f7fa ffb6 	bl	80001d0 <__aeabi_dsub>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	f7fb fa94 	bl	8000794 <__aeabi_ddiv>
 800526c:	e7e6      	b.n	800523c <__ieee754_sqrt+0x30>
 800526e:	1509      	asrs	r1, r1, #20
 8005270:	d076      	beq.n	8005360 <__ieee754_sqrt+0x154>
 8005272:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005276:	07ce      	lsls	r6, r1, #31
 8005278:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800527c:	bf5e      	ittt	pl
 800527e:	0fda      	lsrpl	r2, r3, #31
 8005280:	005b      	lslpl	r3, r3, #1
 8005282:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005286:	0fda      	lsrs	r2, r3, #31
 8005288:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800528c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005290:	2000      	movs	r0, #0
 8005292:	106d      	asrs	r5, r5, #1
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	f04f 0e16 	mov.w	lr, #22
 800529a:	4684      	mov	ip, r0
 800529c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052a0:	eb0c 0401 	add.w	r4, ip, r1
 80052a4:	4294      	cmp	r4, r2
 80052a6:	bfde      	ittt	le
 80052a8:	1b12      	suble	r2, r2, r4
 80052aa:	eb04 0c01 	addle.w	ip, r4, r1
 80052ae:	1840      	addle	r0, r0, r1
 80052b0:	0052      	lsls	r2, r2, #1
 80052b2:	f1be 0e01 	subs.w	lr, lr, #1
 80052b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80052ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80052be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052c2:	d1ed      	bne.n	80052a0 <__ieee754_sqrt+0x94>
 80052c4:	4671      	mov	r1, lr
 80052c6:	2720      	movs	r7, #32
 80052c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80052cc:	4562      	cmp	r2, ip
 80052ce:	eb04 060e 	add.w	r6, r4, lr
 80052d2:	dc02      	bgt.n	80052da <__ieee754_sqrt+0xce>
 80052d4:	d113      	bne.n	80052fe <__ieee754_sqrt+0xf2>
 80052d6:	429e      	cmp	r6, r3
 80052d8:	d811      	bhi.n	80052fe <__ieee754_sqrt+0xf2>
 80052da:	2e00      	cmp	r6, #0
 80052dc:	eb06 0e04 	add.w	lr, r6, r4
 80052e0:	da43      	bge.n	800536a <__ieee754_sqrt+0x15e>
 80052e2:	f1be 0f00 	cmp.w	lr, #0
 80052e6:	db40      	blt.n	800536a <__ieee754_sqrt+0x15e>
 80052e8:	f10c 0801 	add.w	r8, ip, #1
 80052ec:	eba2 020c 	sub.w	r2, r2, ip
 80052f0:	429e      	cmp	r6, r3
 80052f2:	bf88      	it	hi
 80052f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80052f8:	1b9b      	subs	r3, r3, r6
 80052fa:	4421      	add	r1, r4
 80052fc:	46c4      	mov	ip, r8
 80052fe:	0052      	lsls	r2, r2, #1
 8005300:	3f01      	subs	r7, #1
 8005302:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005306:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800530a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800530e:	d1dd      	bne.n	80052cc <__ieee754_sqrt+0xc0>
 8005310:	4313      	orrs	r3, r2
 8005312:	d006      	beq.n	8005322 <__ieee754_sqrt+0x116>
 8005314:	1c4c      	adds	r4, r1, #1
 8005316:	bf13      	iteet	ne
 8005318:	3101      	addne	r1, #1
 800531a:	3001      	addeq	r0, #1
 800531c:	4639      	moveq	r1, r7
 800531e:	f021 0101 	bicne.w	r1, r1, #1
 8005322:	1043      	asrs	r3, r0, #1
 8005324:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005328:	0849      	lsrs	r1, r1, #1
 800532a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800532e:	07c2      	lsls	r2, r0, #31
 8005330:	bf48      	it	mi
 8005332:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005336:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800533a:	460c      	mov	r4, r1
 800533c:	463d      	mov	r5, r7
 800533e:	e77f      	b.n	8005240 <__ieee754_sqrt+0x34>
 8005340:	0ada      	lsrs	r2, r3, #11
 8005342:	3815      	subs	r0, #21
 8005344:	055b      	lsls	r3, r3, #21
 8005346:	2a00      	cmp	r2, #0
 8005348:	d0fa      	beq.n	8005340 <__ieee754_sqrt+0x134>
 800534a:	02d7      	lsls	r7, r2, #11
 800534c:	d50a      	bpl.n	8005364 <__ieee754_sqrt+0x158>
 800534e:	f1c1 0420 	rsb	r4, r1, #32
 8005352:	fa23 f404 	lsr.w	r4, r3, r4
 8005356:	1e4d      	subs	r5, r1, #1
 8005358:	408b      	lsls	r3, r1
 800535a:	4322      	orrs	r2, r4
 800535c:	1b41      	subs	r1, r0, r5
 800535e:	e788      	b.n	8005272 <__ieee754_sqrt+0x66>
 8005360:	4608      	mov	r0, r1
 8005362:	e7f0      	b.n	8005346 <__ieee754_sqrt+0x13a>
 8005364:	0052      	lsls	r2, r2, #1
 8005366:	3101      	adds	r1, #1
 8005368:	e7ef      	b.n	800534a <__ieee754_sqrt+0x13e>
 800536a:	46e0      	mov	r8, ip
 800536c:	e7be      	b.n	80052ec <__ieee754_sqrt+0xe0>
 800536e:	bf00      	nop
 8005370:	7ff00000 	.word	0x7ff00000
 8005374:	00000000 	.word	0x00000000

08005378 <__kernel_cos>:
 8005378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	ec57 6b10 	vmov	r6, r7, d0
 8005380:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005384:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005388:	ed8d 1b00 	vstr	d1, [sp]
 800538c:	da07      	bge.n	800539e <__kernel_cos+0x26>
 800538e:	ee10 0a10 	vmov	r0, s0
 8005392:	4639      	mov	r1, r7
 8005394:	f7fb fb84 	bl	8000aa0 <__aeabi_d2iz>
 8005398:	2800      	cmp	r0, #0
 800539a:	f000 8088 	beq.w	80054ae <__kernel_cos+0x136>
 800539e:	4632      	mov	r2, r6
 80053a0:	463b      	mov	r3, r7
 80053a2:	4630      	mov	r0, r6
 80053a4:	4639      	mov	r1, r7
 80053a6:	f7fb f8cb 	bl	8000540 <__aeabi_dmul>
 80053aa:	4b51      	ldr	r3, [pc, #324]	; (80054f0 <__kernel_cos+0x178>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	460d      	mov	r5, r1
 80053b2:	f7fb f8c5 	bl	8000540 <__aeabi_dmul>
 80053b6:	a340      	add	r3, pc, #256	; (adr r3, 80054b8 <__kernel_cos+0x140>)
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	4682      	mov	sl, r0
 80053be:	468b      	mov	fp, r1
 80053c0:	4620      	mov	r0, r4
 80053c2:	4629      	mov	r1, r5
 80053c4:	f7fb f8bc 	bl	8000540 <__aeabi_dmul>
 80053c8:	a33d      	add	r3, pc, #244	; (adr r3, 80054c0 <__kernel_cos+0x148>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fa ff01 	bl	80001d4 <__adddf3>
 80053d2:	4622      	mov	r2, r4
 80053d4:	462b      	mov	r3, r5
 80053d6:	f7fb f8b3 	bl	8000540 <__aeabi_dmul>
 80053da:	a33b      	add	r3, pc, #236	; (adr r3, 80054c8 <__kernel_cos+0x150>)
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	f7fa fef6 	bl	80001d0 <__aeabi_dsub>
 80053e4:	4622      	mov	r2, r4
 80053e6:	462b      	mov	r3, r5
 80053e8:	f7fb f8aa 	bl	8000540 <__aeabi_dmul>
 80053ec:	a338      	add	r3, pc, #224	; (adr r3, 80054d0 <__kernel_cos+0x158>)
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f7fa feef 	bl	80001d4 <__adddf3>
 80053f6:	4622      	mov	r2, r4
 80053f8:	462b      	mov	r3, r5
 80053fa:	f7fb f8a1 	bl	8000540 <__aeabi_dmul>
 80053fe:	a336      	add	r3, pc, #216	; (adr r3, 80054d8 <__kernel_cos+0x160>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f7fa fee4 	bl	80001d0 <__aeabi_dsub>
 8005408:	4622      	mov	r2, r4
 800540a:	462b      	mov	r3, r5
 800540c:	f7fb f898 	bl	8000540 <__aeabi_dmul>
 8005410:	a333      	add	r3, pc, #204	; (adr r3, 80054e0 <__kernel_cos+0x168>)
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f7fa fedd 	bl	80001d4 <__adddf3>
 800541a:	4622      	mov	r2, r4
 800541c:	462b      	mov	r3, r5
 800541e:	f7fb f88f 	bl	8000540 <__aeabi_dmul>
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	f7fb f88b 	bl	8000540 <__aeabi_dmul>
 800542a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800542e:	4604      	mov	r4, r0
 8005430:	460d      	mov	r5, r1
 8005432:	4630      	mov	r0, r6
 8005434:	4639      	mov	r1, r7
 8005436:	f7fb f883 	bl	8000540 <__aeabi_dmul>
 800543a:	460b      	mov	r3, r1
 800543c:	4602      	mov	r2, r0
 800543e:	4629      	mov	r1, r5
 8005440:	4620      	mov	r0, r4
 8005442:	f7fa fec5 	bl	80001d0 <__aeabi_dsub>
 8005446:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <__kernel_cos+0x17c>)
 8005448:	4598      	cmp	r8, r3
 800544a:	4606      	mov	r6, r0
 800544c:	460f      	mov	r7, r1
 800544e:	dc10      	bgt.n	8005472 <__kernel_cos+0xfa>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4650      	mov	r0, sl
 8005456:	4659      	mov	r1, fp
 8005458:	f7fa feba 	bl	80001d0 <__aeabi_dsub>
 800545c:	460b      	mov	r3, r1
 800545e:	4926      	ldr	r1, [pc, #152]	; (80054f8 <__kernel_cos+0x180>)
 8005460:	4602      	mov	r2, r0
 8005462:	2000      	movs	r0, #0
 8005464:	f7fa feb4 	bl	80001d0 <__aeabi_dsub>
 8005468:	ec41 0b10 	vmov	d0, r0, r1
 800546c:	b003      	add	sp, #12
 800546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005472:	4b22      	ldr	r3, [pc, #136]	; (80054fc <__kernel_cos+0x184>)
 8005474:	4920      	ldr	r1, [pc, #128]	; (80054f8 <__kernel_cos+0x180>)
 8005476:	4598      	cmp	r8, r3
 8005478:	bfcc      	ite	gt
 800547a:	4d21      	ldrgt	r5, [pc, #132]	; (8005500 <__kernel_cos+0x188>)
 800547c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005480:	2400      	movs	r4, #0
 8005482:	4622      	mov	r2, r4
 8005484:	462b      	mov	r3, r5
 8005486:	2000      	movs	r0, #0
 8005488:	f7fa fea2 	bl	80001d0 <__aeabi_dsub>
 800548c:	4622      	mov	r2, r4
 800548e:	4680      	mov	r8, r0
 8005490:	4689      	mov	r9, r1
 8005492:	462b      	mov	r3, r5
 8005494:	4650      	mov	r0, sl
 8005496:	4659      	mov	r1, fp
 8005498:	f7fa fe9a 	bl	80001d0 <__aeabi_dsub>
 800549c:	4632      	mov	r2, r6
 800549e:	463b      	mov	r3, r7
 80054a0:	f7fa fe96 	bl	80001d0 <__aeabi_dsub>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4640      	mov	r0, r8
 80054aa:	4649      	mov	r1, r9
 80054ac:	e7da      	b.n	8005464 <__kernel_cos+0xec>
 80054ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80054e8 <__kernel_cos+0x170>
 80054b2:	e7db      	b.n	800546c <__kernel_cos+0xf4>
 80054b4:	f3af 8000 	nop.w
 80054b8:	be8838d4 	.word	0xbe8838d4
 80054bc:	bda8fae9 	.word	0xbda8fae9
 80054c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80054c4:	3e21ee9e 	.word	0x3e21ee9e
 80054c8:	809c52ad 	.word	0x809c52ad
 80054cc:	3e927e4f 	.word	0x3e927e4f
 80054d0:	19cb1590 	.word	0x19cb1590
 80054d4:	3efa01a0 	.word	0x3efa01a0
 80054d8:	16c15177 	.word	0x16c15177
 80054dc:	3f56c16c 	.word	0x3f56c16c
 80054e0:	5555554c 	.word	0x5555554c
 80054e4:	3fa55555 	.word	0x3fa55555
 80054e8:	00000000 	.word	0x00000000
 80054ec:	3ff00000 	.word	0x3ff00000
 80054f0:	3fe00000 	.word	0x3fe00000
 80054f4:	3fd33332 	.word	0x3fd33332
 80054f8:	3ff00000 	.word	0x3ff00000
 80054fc:	3fe90000 	.word	0x3fe90000
 8005500:	3fd20000 	.word	0x3fd20000
 8005504:	00000000 	.word	0x00000000

08005508 <__kernel_rem_pio2>:
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	ed2d 8b02 	vpush	{d8}
 8005510:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005514:	f112 0f14 	cmn.w	r2, #20
 8005518:	9308      	str	r3, [sp, #32]
 800551a:	9101      	str	r1, [sp, #4]
 800551c:	4bc6      	ldr	r3, [pc, #792]	; (8005838 <__kernel_rem_pio2+0x330>)
 800551e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005520:	9009      	str	r0, [sp, #36]	; 0x24
 8005522:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	f103 33ff 	add.w	r3, r3, #4294967295
 800552e:	bfa8      	it	ge
 8005530:	1ed4      	subge	r4, r2, #3
 8005532:	9306      	str	r3, [sp, #24]
 8005534:	bfb2      	itee	lt
 8005536:	2400      	movlt	r4, #0
 8005538:	2318      	movge	r3, #24
 800553a:	fb94 f4f3 	sdivge	r4, r4, r3
 800553e:	f06f 0317 	mvn.w	r3, #23
 8005542:	fb04 3303 	mla	r3, r4, r3, r3
 8005546:	eb03 0a02 	add.w	sl, r3, r2
 800554a:	9b04      	ldr	r3, [sp, #16]
 800554c:	9a06      	ldr	r2, [sp, #24]
 800554e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005828 <__kernel_rem_pio2+0x320>
 8005552:	eb03 0802 	add.w	r8, r3, r2
 8005556:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005558:	1aa7      	subs	r7, r4, r2
 800555a:	ae20      	add	r6, sp, #128	; 0x80
 800555c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005560:	2500      	movs	r5, #0
 8005562:	4545      	cmp	r5, r8
 8005564:	dd18      	ble.n	8005598 <__kernel_rem_pio2+0x90>
 8005566:	9b08      	ldr	r3, [sp, #32]
 8005568:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800556c:	aa20      	add	r2, sp, #128	; 0x80
 800556e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005828 <__kernel_rem_pio2+0x320>
 8005572:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005576:	f1c3 0301 	rsb	r3, r3, #1
 800557a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800557e:	9307      	str	r3, [sp, #28]
 8005580:	9b07      	ldr	r3, [sp, #28]
 8005582:	9a04      	ldr	r2, [sp, #16]
 8005584:	4443      	add	r3, r8
 8005586:	429a      	cmp	r2, r3
 8005588:	db2f      	blt.n	80055ea <__kernel_rem_pio2+0xe2>
 800558a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800558e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005592:	462f      	mov	r7, r5
 8005594:	2600      	movs	r6, #0
 8005596:	e01b      	b.n	80055d0 <__kernel_rem_pio2+0xc8>
 8005598:	42ef      	cmn	r7, r5
 800559a:	d407      	bmi.n	80055ac <__kernel_rem_pio2+0xa4>
 800559c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80055a0:	f7fa ff64 	bl	800046c <__aeabi_i2d>
 80055a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80055a8:	3501      	adds	r5, #1
 80055aa:	e7da      	b.n	8005562 <__kernel_rem_pio2+0x5a>
 80055ac:	ec51 0b18 	vmov	r0, r1, d8
 80055b0:	e7f8      	b.n	80055a4 <__kernel_rem_pio2+0x9c>
 80055b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80055ba:	f7fa ffc1 	bl	8000540 <__aeabi_dmul>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c6:	f7fa fe05 	bl	80001d4 <__adddf3>
 80055ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ce:	3601      	adds	r6, #1
 80055d0:	9b06      	ldr	r3, [sp, #24]
 80055d2:	429e      	cmp	r6, r3
 80055d4:	f1a7 0708 	sub.w	r7, r7, #8
 80055d8:	ddeb      	ble.n	80055b2 <__kernel_rem_pio2+0xaa>
 80055da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055de:	3508      	adds	r5, #8
 80055e0:	ecab 7b02 	vstmia	fp!, {d7}
 80055e4:	f108 0801 	add.w	r8, r8, #1
 80055e8:	e7ca      	b.n	8005580 <__kernel_rem_pio2+0x78>
 80055ea:	9b04      	ldr	r3, [sp, #16]
 80055ec:	aa0c      	add	r2, sp, #48	; 0x30
 80055ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80055f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80055f4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80055f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80055fa:	9c04      	ldr	r4, [sp, #16]
 80055fc:	930a      	str	r3, [sp, #40]	; 0x28
 80055fe:	ab98      	add	r3, sp, #608	; 0x260
 8005600:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005604:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005608:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800560c:	f8cd b008 	str.w	fp, [sp, #8]
 8005610:	4625      	mov	r5, r4
 8005612:	2d00      	cmp	r5, #0
 8005614:	dc78      	bgt.n	8005708 <__kernel_rem_pio2+0x200>
 8005616:	ec47 6b10 	vmov	d0, r6, r7
 800561a:	4650      	mov	r0, sl
 800561c:	f000 fbf4 	bl	8005e08 <scalbn>
 8005620:	ec57 6b10 	vmov	r6, r7, d0
 8005624:	2200      	movs	r2, #0
 8005626:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800562a:	ee10 0a10 	vmov	r0, s0
 800562e:	4639      	mov	r1, r7
 8005630:	f7fa ff86 	bl	8000540 <__aeabi_dmul>
 8005634:	ec41 0b10 	vmov	d0, r0, r1
 8005638:	f000 fb66 	bl	8005d08 <floor>
 800563c:	4b7f      	ldr	r3, [pc, #508]	; (800583c <__kernel_rem_pio2+0x334>)
 800563e:	ec51 0b10 	vmov	r0, r1, d0
 8005642:	2200      	movs	r2, #0
 8005644:	f7fa ff7c 	bl	8000540 <__aeabi_dmul>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4630      	mov	r0, r6
 800564e:	4639      	mov	r1, r7
 8005650:	f7fa fdbe 	bl	80001d0 <__aeabi_dsub>
 8005654:	460f      	mov	r7, r1
 8005656:	4606      	mov	r6, r0
 8005658:	f7fb fa22 	bl	8000aa0 <__aeabi_d2iz>
 800565c:	9007      	str	r0, [sp, #28]
 800565e:	f7fa ff05 	bl	800046c <__aeabi_i2d>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4630      	mov	r0, r6
 8005668:	4639      	mov	r1, r7
 800566a:	f7fa fdb1 	bl	80001d0 <__aeabi_dsub>
 800566e:	f1ba 0f00 	cmp.w	sl, #0
 8005672:	4606      	mov	r6, r0
 8005674:	460f      	mov	r7, r1
 8005676:	dd70      	ble.n	800575a <__kernel_rem_pio2+0x252>
 8005678:	1e62      	subs	r2, r4, #1
 800567a:	ab0c      	add	r3, sp, #48	; 0x30
 800567c:	9d07      	ldr	r5, [sp, #28]
 800567e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005682:	f1ca 0118 	rsb	r1, sl, #24
 8005686:	fa40 f301 	asr.w	r3, r0, r1
 800568a:	441d      	add	r5, r3
 800568c:	408b      	lsls	r3, r1
 800568e:	1ac0      	subs	r0, r0, r3
 8005690:	ab0c      	add	r3, sp, #48	; 0x30
 8005692:	9507      	str	r5, [sp, #28]
 8005694:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005698:	f1ca 0317 	rsb	r3, sl, #23
 800569c:	fa40 f303 	asr.w	r3, r0, r3
 80056a0:	9302      	str	r3, [sp, #8]
 80056a2:	9b02      	ldr	r3, [sp, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dd66      	ble.n	8005776 <__kernel_rem_pio2+0x26e>
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	2200      	movs	r2, #0
 80056ac:	3301      	adds	r3, #1
 80056ae:	9307      	str	r3, [sp, #28]
 80056b0:	4615      	mov	r5, r2
 80056b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80056b6:	4294      	cmp	r4, r2
 80056b8:	f300 8099 	bgt.w	80057ee <__kernel_rem_pio2+0x2e6>
 80056bc:	f1ba 0f00 	cmp.w	sl, #0
 80056c0:	dd07      	ble.n	80056d2 <__kernel_rem_pio2+0x1ca>
 80056c2:	f1ba 0f01 	cmp.w	sl, #1
 80056c6:	f000 80a5 	beq.w	8005814 <__kernel_rem_pio2+0x30c>
 80056ca:	f1ba 0f02 	cmp.w	sl, #2
 80056ce:	f000 80c1 	beq.w	8005854 <__kernel_rem_pio2+0x34c>
 80056d2:	9b02      	ldr	r3, [sp, #8]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d14e      	bne.n	8005776 <__kernel_rem_pio2+0x26e>
 80056d8:	4632      	mov	r2, r6
 80056da:	463b      	mov	r3, r7
 80056dc:	4958      	ldr	r1, [pc, #352]	; (8005840 <__kernel_rem_pio2+0x338>)
 80056de:	2000      	movs	r0, #0
 80056e0:	f7fa fd76 	bl	80001d0 <__aeabi_dsub>
 80056e4:	4606      	mov	r6, r0
 80056e6:	460f      	mov	r7, r1
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	d044      	beq.n	8005776 <__kernel_rem_pio2+0x26e>
 80056ec:	4650      	mov	r0, sl
 80056ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005830 <__kernel_rem_pio2+0x328>
 80056f2:	f000 fb89 	bl	8005e08 <scalbn>
 80056f6:	4630      	mov	r0, r6
 80056f8:	4639      	mov	r1, r7
 80056fa:	ec53 2b10 	vmov	r2, r3, d0
 80056fe:	f7fa fd67 	bl	80001d0 <__aeabi_dsub>
 8005702:	4606      	mov	r6, r0
 8005704:	460f      	mov	r7, r1
 8005706:	e036      	b.n	8005776 <__kernel_rem_pio2+0x26e>
 8005708:	4b4e      	ldr	r3, [pc, #312]	; (8005844 <__kernel_rem_pio2+0x33c>)
 800570a:	2200      	movs	r2, #0
 800570c:	4630      	mov	r0, r6
 800570e:	4639      	mov	r1, r7
 8005710:	f7fa ff16 	bl	8000540 <__aeabi_dmul>
 8005714:	f7fb f9c4 	bl	8000aa0 <__aeabi_d2iz>
 8005718:	f7fa fea8 	bl	800046c <__aeabi_i2d>
 800571c:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <__kernel_rem_pio2+0x340>)
 800571e:	2200      	movs	r2, #0
 8005720:	4680      	mov	r8, r0
 8005722:	4689      	mov	r9, r1
 8005724:	f7fa ff0c 	bl	8000540 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa fd4e 	bl	80001d0 <__aeabi_dsub>
 8005734:	f7fb f9b4 	bl	8000aa0 <__aeabi_d2iz>
 8005738:	9b02      	ldr	r3, [sp, #8]
 800573a:	f843 0b04 	str.w	r0, [r3], #4
 800573e:	3d01      	subs	r5, #1
 8005740:	9302      	str	r3, [sp, #8]
 8005742:	ab70      	add	r3, sp, #448	; 0x1c0
 8005744:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	4640      	mov	r0, r8
 800574e:	4649      	mov	r1, r9
 8005750:	f7fa fd40 	bl	80001d4 <__adddf3>
 8005754:	4606      	mov	r6, r0
 8005756:	460f      	mov	r7, r1
 8005758:	e75b      	b.n	8005612 <__kernel_rem_pio2+0x10a>
 800575a:	d105      	bne.n	8005768 <__kernel_rem_pio2+0x260>
 800575c:	1e63      	subs	r3, r4, #1
 800575e:	aa0c      	add	r2, sp, #48	; 0x30
 8005760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005764:	15c3      	asrs	r3, r0, #23
 8005766:	e79b      	b.n	80056a0 <__kernel_rem_pio2+0x198>
 8005768:	4b38      	ldr	r3, [pc, #224]	; (800584c <__kernel_rem_pio2+0x344>)
 800576a:	2200      	movs	r2, #0
 800576c:	f7fb f96e 	bl	8000a4c <__aeabi_dcmpge>
 8005770:	2800      	cmp	r0, #0
 8005772:	d139      	bne.n	80057e8 <__kernel_rem_pio2+0x2e0>
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	2300      	movs	r3, #0
 800577a:	4630      	mov	r0, r6
 800577c:	4639      	mov	r1, r7
 800577e:	f7fb f947 	bl	8000a10 <__aeabi_dcmpeq>
 8005782:	2800      	cmp	r0, #0
 8005784:	f000 80b4 	beq.w	80058f0 <__kernel_rem_pio2+0x3e8>
 8005788:	f104 3bff 	add.w	fp, r4, #4294967295
 800578c:	465b      	mov	r3, fp
 800578e:	2200      	movs	r2, #0
 8005790:	9904      	ldr	r1, [sp, #16]
 8005792:	428b      	cmp	r3, r1
 8005794:	da65      	bge.n	8005862 <__kernel_rem_pio2+0x35a>
 8005796:	2a00      	cmp	r2, #0
 8005798:	d07b      	beq.n	8005892 <__kernel_rem_pio2+0x38a>
 800579a:	ab0c      	add	r3, sp, #48	; 0x30
 800579c:	f1aa 0a18 	sub.w	sl, sl, #24
 80057a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a0 	beq.w	80058ea <__kernel_rem_pio2+0x3e2>
 80057aa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005830 <__kernel_rem_pio2+0x328>
 80057ae:	4650      	mov	r0, sl
 80057b0:	f000 fb2a 	bl	8005e08 <scalbn>
 80057b4:	4f23      	ldr	r7, [pc, #140]	; (8005844 <__kernel_rem_pio2+0x33c>)
 80057b6:	ec55 4b10 	vmov	r4, r5, d0
 80057ba:	46d8      	mov	r8, fp
 80057bc:	2600      	movs	r6, #0
 80057be:	f1b8 0f00 	cmp.w	r8, #0
 80057c2:	f280 80cf 	bge.w	8005964 <__kernel_rem_pio2+0x45c>
 80057c6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005828 <__kernel_rem_pio2+0x320>
 80057ca:	465f      	mov	r7, fp
 80057cc:	f04f 0800 	mov.w	r8, #0
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	f2c0 80fd 	blt.w	80059d0 <__kernel_rem_pio2+0x4c8>
 80057d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80057d8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005850 <__kernel_rem_pio2+0x348>
 80057dc:	ec55 4b18 	vmov	r4, r5, d8
 80057e0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80057e4:	2600      	movs	r6, #0
 80057e6:	e0e5      	b.n	80059b4 <__kernel_rem_pio2+0x4ac>
 80057e8:	2302      	movs	r3, #2
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	e75c      	b.n	80056a8 <__kernel_rem_pio2+0x1a0>
 80057ee:	f8db 3000 	ldr.w	r3, [fp]
 80057f2:	b955      	cbnz	r5, 800580a <__kernel_rem_pio2+0x302>
 80057f4:	b123      	cbz	r3, 8005800 <__kernel_rem_pio2+0x2f8>
 80057f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80057fa:	f8cb 3000 	str.w	r3, [fp]
 80057fe:	2301      	movs	r3, #1
 8005800:	3201      	adds	r2, #1
 8005802:	f10b 0b04 	add.w	fp, fp, #4
 8005806:	461d      	mov	r5, r3
 8005808:	e755      	b.n	80056b6 <__kernel_rem_pio2+0x1ae>
 800580a:	1acb      	subs	r3, r1, r3
 800580c:	f8cb 3000 	str.w	r3, [fp]
 8005810:	462b      	mov	r3, r5
 8005812:	e7f5      	b.n	8005800 <__kernel_rem_pio2+0x2f8>
 8005814:	1e62      	subs	r2, r4, #1
 8005816:	ab0c      	add	r3, sp, #48	; 0x30
 8005818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005820:	a90c      	add	r1, sp, #48	; 0x30
 8005822:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005826:	e754      	b.n	80056d2 <__kernel_rem_pio2+0x1ca>
	...
 8005834:	3ff00000 	.word	0x3ff00000
 8005838:	080061c0 	.word	0x080061c0
 800583c:	40200000 	.word	0x40200000
 8005840:	3ff00000 	.word	0x3ff00000
 8005844:	3e700000 	.word	0x3e700000
 8005848:	41700000 	.word	0x41700000
 800584c:	3fe00000 	.word	0x3fe00000
 8005850:	08006180 	.word	0x08006180
 8005854:	1e62      	subs	r2, r4, #1
 8005856:	ab0c      	add	r3, sp, #48	; 0x30
 8005858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005860:	e7de      	b.n	8005820 <__kernel_rem_pio2+0x318>
 8005862:	a90c      	add	r1, sp, #48	; 0x30
 8005864:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005868:	3b01      	subs	r3, #1
 800586a:	430a      	orrs	r2, r1
 800586c:	e790      	b.n	8005790 <__kernel_rem_pio2+0x288>
 800586e:	3301      	adds	r3, #1
 8005870:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005874:	2900      	cmp	r1, #0
 8005876:	d0fa      	beq.n	800586e <__kernel_rem_pio2+0x366>
 8005878:	9a08      	ldr	r2, [sp, #32]
 800587a:	18e3      	adds	r3, r4, r3
 800587c:	18a6      	adds	r6, r4, r2
 800587e:	aa20      	add	r2, sp, #128	; 0x80
 8005880:	1c65      	adds	r5, r4, #1
 8005882:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	9b02      	ldr	r3, [sp, #8]
 800588a:	42ab      	cmp	r3, r5
 800588c:	da04      	bge.n	8005898 <__kernel_rem_pio2+0x390>
 800588e:	461c      	mov	r4, r3
 8005890:	e6b5      	b.n	80055fe <__kernel_rem_pio2+0xf6>
 8005892:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005894:	2301      	movs	r3, #1
 8005896:	e7eb      	b.n	8005870 <__kernel_rem_pio2+0x368>
 8005898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800589e:	f7fa fde5 	bl	800046c <__aeabi_i2d>
 80058a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80058a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a8:	46b3      	mov	fp, r6
 80058aa:	461c      	mov	r4, r3
 80058ac:	2700      	movs	r7, #0
 80058ae:	f04f 0800 	mov.w	r8, #0
 80058b2:	f04f 0900 	mov.w	r9, #0
 80058b6:	9b06      	ldr	r3, [sp, #24]
 80058b8:	429f      	cmp	r7, r3
 80058ba:	dd06      	ble.n	80058ca <__kernel_rem_pio2+0x3c2>
 80058bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80058be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80058c2:	e9c3 8900 	strd	r8, r9, [r3]
 80058c6:	3501      	adds	r5, #1
 80058c8:	e7de      	b.n	8005888 <__kernel_rem_pio2+0x380>
 80058ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80058ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80058d2:	f7fa fe35 	bl	8000540 <__aeabi_dmul>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f7fa fc79 	bl	80001d4 <__adddf3>
 80058e2:	3701      	adds	r7, #1
 80058e4:	4680      	mov	r8, r0
 80058e6:	4689      	mov	r9, r1
 80058e8:	e7e5      	b.n	80058b6 <__kernel_rem_pio2+0x3ae>
 80058ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058ee:	e754      	b.n	800579a <__kernel_rem_pio2+0x292>
 80058f0:	ec47 6b10 	vmov	d0, r6, r7
 80058f4:	f1ca 0000 	rsb	r0, sl, #0
 80058f8:	f000 fa86 	bl	8005e08 <scalbn>
 80058fc:	ec57 6b10 	vmov	r6, r7, d0
 8005900:	4b9f      	ldr	r3, [pc, #636]	; (8005b80 <__kernel_rem_pio2+0x678>)
 8005902:	ee10 0a10 	vmov	r0, s0
 8005906:	2200      	movs	r2, #0
 8005908:	4639      	mov	r1, r7
 800590a:	f7fb f89f 	bl	8000a4c <__aeabi_dcmpge>
 800590e:	b300      	cbz	r0, 8005952 <__kernel_rem_pio2+0x44a>
 8005910:	4b9c      	ldr	r3, [pc, #624]	; (8005b84 <__kernel_rem_pio2+0x67c>)
 8005912:	2200      	movs	r2, #0
 8005914:	4630      	mov	r0, r6
 8005916:	4639      	mov	r1, r7
 8005918:	f7fa fe12 	bl	8000540 <__aeabi_dmul>
 800591c:	f7fb f8c0 	bl	8000aa0 <__aeabi_d2iz>
 8005920:	4605      	mov	r5, r0
 8005922:	f7fa fda3 	bl	800046c <__aeabi_i2d>
 8005926:	4b96      	ldr	r3, [pc, #600]	; (8005b80 <__kernel_rem_pio2+0x678>)
 8005928:	2200      	movs	r2, #0
 800592a:	f7fa fe09 	bl	8000540 <__aeabi_dmul>
 800592e:	460b      	mov	r3, r1
 8005930:	4602      	mov	r2, r0
 8005932:	4639      	mov	r1, r7
 8005934:	4630      	mov	r0, r6
 8005936:	f7fa fc4b 	bl	80001d0 <__aeabi_dsub>
 800593a:	f7fb f8b1 	bl	8000aa0 <__aeabi_d2iz>
 800593e:	f104 0b01 	add.w	fp, r4, #1
 8005942:	ab0c      	add	r3, sp, #48	; 0x30
 8005944:	f10a 0a18 	add.w	sl, sl, #24
 8005948:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800594c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005950:	e72b      	b.n	80057aa <__kernel_rem_pio2+0x2a2>
 8005952:	4630      	mov	r0, r6
 8005954:	4639      	mov	r1, r7
 8005956:	f7fb f8a3 	bl	8000aa0 <__aeabi_d2iz>
 800595a:	ab0c      	add	r3, sp, #48	; 0x30
 800595c:	46a3      	mov	fp, r4
 800595e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005962:	e722      	b.n	80057aa <__kernel_rem_pio2+0x2a2>
 8005964:	ab70      	add	r3, sp, #448	; 0x1c0
 8005966:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800596a:	ab0c      	add	r3, sp, #48	; 0x30
 800596c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005970:	f7fa fd7c 	bl	800046c <__aeabi_i2d>
 8005974:	4622      	mov	r2, r4
 8005976:	462b      	mov	r3, r5
 8005978:	f7fa fde2 	bl	8000540 <__aeabi_dmul>
 800597c:	4632      	mov	r2, r6
 800597e:	e9c9 0100 	strd	r0, r1, [r9]
 8005982:	463b      	mov	r3, r7
 8005984:	4620      	mov	r0, r4
 8005986:	4629      	mov	r1, r5
 8005988:	f7fa fdda 	bl	8000540 <__aeabi_dmul>
 800598c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005990:	4604      	mov	r4, r0
 8005992:	460d      	mov	r5, r1
 8005994:	e713      	b.n	80057be <__kernel_rem_pio2+0x2b6>
 8005996:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800599a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800599e:	f7fa fdcf 	bl	8000540 <__aeabi_dmul>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4620      	mov	r0, r4
 80059a8:	4629      	mov	r1, r5
 80059aa:	f7fa fc13 	bl	80001d4 <__adddf3>
 80059ae:	3601      	adds	r6, #1
 80059b0:	4604      	mov	r4, r0
 80059b2:	460d      	mov	r5, r1
 80059b4:	9b04      	ldr	r3, [sp, #16]
 80059b6:	429e      	cmp	r6, r3
 80059b8:	dc01      	bgt.n	80059be <__kernel_rem_pio2+0x4b6>
 80059ba:	45b0      	cmp	r8, r6
 80059bc:	daeb      	bge.n	8005996 <__kernel_rem_pio2+0x48e>
 80059be:	ab48      	add	r3, sp, #288	; 0x120
 80059c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059c4:	e9c3 4500 	strd	r4, r5, [r3]
 80059c8:	3f01      	subs	r7, #1
 80059ca:	f108 0801 	add.w	r8, r8, #1
 80059ce:	e6ff      	b.n	80057d0 <__kernel_rem_pio2+0x2c8>
 80059d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	dc0b      	bgt.n	80059ee <__kernel_rem_pio2+0x4e6>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	dc6e      	bgt.n	8005ab8 <__kernel_rem_pio2+0x5b0>
 80059da:	d045      	beq.n	8005a68 <__kernel_rem_pio2+0x560>
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	f003 0007 	and.w	r0, r3, #7
 80059e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80059e6:	ecbd 8b02 	vpop	{d8}
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d1f3      	bne.n	80059dc <__kernel_rem_pio2+0x4d4>
 80059f4:	ab48      	add	r3, sp, #288	; 0x120
 80059f6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80059fa:	46d0      	mov	r8, sl
 80059fc:	46d9      	mov	r9, fp
 80059fe:	f1b9 0f00 	cmp.w	r9, #0
 8005a02:	f1a8 0808 	sub.w	r8, r8, #8
 8005a06:	dc64      	bgt.n	8005ad2 <__kernel_rem_pio2+0x5ca>
 8005a08:	465c      	mov	r4, fp
 8005a0a:	2c01      	cmp	r4, #1
 8005a0c:	f1aa 0a08 	sub.w	sl, sl, #8
 8005a10:	dc7e      	bgt.n	8005b10 <__kernel_rem_pio2+0x608>
 8005a12:	2000      	movs	r0, #0
 8005a14:	2100      	movs	r1, #0
 8005a16:	f1bb 0f01 	cmp.w	fp, #1
 8005a1a:	f300 8097 	bgt.w	8005b4c <__kernel_rem_pio2+0x644>
 8005a1e:	9b02      	ldr	r3, [sp, #8]
 8005a20:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8005a24:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f040 8099 	bne.w	8005b60 <__kernel_rem_pio2+0x658>
 8005a2e:	9b01      	ldr	r3, [sp, #4]
 8005a30:	e9c3 5600 	strd	r5, r6, [r3]
 8005a34:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005a38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005a3c:	e7ce      	b.n	80059dc <__kernel_rem_pio2+0x4d4>
 8005a3e:	ab48      	add	r3, sp, #288	; 0x120
 8005a40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fbc4 	bl	80001d4 <__adddf3>
 8005a4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a50:	f1bb 0f00 	cmp.w	fp, #0
 8005a54:	daf3      	bge.n	8005a3e <__kernel_rem_pio2+0x536>
 8005a56:	9b02      	ldr	r3, [sp, #8]
 8005a58:	b113      	cbz	r3, 8005a60 <__kernel_rem_pio2+0x558>
 8005a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a5e:	4619      	mov	r1, r3
 8005a60:	9b01      	ldr	r3, [sp, #4]
 8005a62:	e9c3 0100 	strd	r0, r1, [r3]
 8005a66:	e7b9      	b.n	80059dc <__kernel_rem_pio2+0x4d4>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	e7f0      	b.n	8005a50 <__kernel_rem_pio2+0x548>
 8005a6e:	ab48      	add	r3, sp, #288	; 0x120
 8005a70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f7fa fbac 	bl	80001d4 <__adddf3>
 8005a7c:	3c01      	subs	r4, #1
 8005a7e:	2c00      	cmp	r4, #0
 8005a80:	daf5      	bge.n	8005a6e <__kernel_rem_pio2+0x566>
 8005a82:	9b02      	ldr	r3, [sp, #8]
 8005a84:	b1e3      	cbz	r3, 8005ac0 <__kernel_rem_pio2+0x5b8>
 8005a86:	4602      	mov	r2, r0
 8005a88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a8c:	9c01      	ldr	r4, [sp, #4]
 8005a8e:	e9c4 2300 	strd	r2, r3, [r4]
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005a9a:	f7fa fb99 	bl	80001d0 <__aeabi_dsub>
 8005a9e:	ad4a      	add	r5, sp, #296	; 0x128
 8005aa0:	2401      	movs	r4, #1
 8005aa2:	45a3      	cmp	fp, r4
 8005aa4:	da0f      	bge.n	8005ac6 <__kernel_rem_pio2+0x5be>
 8005aa6:	9b02      	ldr	r3, [sp, #8]
 8005aa8:	b113      	cbz	r3, 8005ab0 <__kernel_rem_pio2+0x5a8>
 8005aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005aae:	4619      	mov	r1, r3
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005ab6:	e791      	b.n	80059dc <__kernel_rem_pio2+0x4d4>
 8005ab8:	465c      	mov	r4, fp
 8005aba:	2000      	movs	r0, #0
 8005abc:	2100      	movs	r1, #0
 8005abe:	e7de      	b.n	8005a7e <__kernel_rem_pio2+0x576>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	e7e2      	b.n	8005a8c <__kernel_rem_pio2+0x584>
 8005ac6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005aca:	f7fa fb83 	bl	80001d4 <__adddf3>
 8005ace:	3401      	adds	r4, #1
 8005ad0:	e7e7      	b.n	8005aa2 <__kernel_rem_pio2+0x59a>
 8005ad2:	e9d8 4500 	ldrd	r4, r5, [r8]
 8005ad6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8005ada:	4620      	mov	r0, r4
 8005adc:	4632      	mov	r2, r6
 8005ade:	463b      	mov	r3, r7
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fa fb77 	bl	80001d4 <__adddf3>
 8005ae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fa fb6d 	bl	80001d0 <__aeabi_dsub>
 8005af6:	4632      	mov	r2, r6
 8005af8:	463b      	mov	r3, r7
 8005afa:	f7fa fb6b 	bl	80001d4 <__adddf3>
 8005afe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005b02:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005b06:	ed88 7b00 	vstr	d7, [r8]
 8005b0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b0e:	e776      	b.n	80059fe <__kernel_rem_pio2+0x4f6>
 8005b10:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b14:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005b18:	4640      	mov	r0, r8
 8005b1a:	4632      	mov	r2, r6
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f7fa fb58 	bl	80001d4 <__adddf3>
 8005b24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	4649      	mov	r1, r9
 8005b30:	f7fa fb4e 	bl	80001d0 <__aeabi_dsub>
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	f7fa fb4c 	bl	80001d4 <__adddf3>
 8005b3c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005b40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b44:	ed8a 7b00 	vstr	d7, [sl]
 8005b48:	3c01      	subs	r4, #1
 8005b4a:	e75e      	b.n	8005a0a <__kernel_rem_pio2+0x502>
 8005b4c:	ab48      	add	r3, sp, #288	; 0x120
 8005b4e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fb3d 	bl	80001d4 <__adddf3>
 8005b5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b5e:	e75a      	b.n	8005a16 <__kernel_rem_pio2+0x50e>
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	9a01      	ldr	r2, [sp, #4]
 8005b64:	601d      	str	r5, [r3, #0]
 8005b66:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005b6a:	605c      	str	r4, [r3, #4]
 8005b6c:	609f      	str	r7, [r3, #8]
 8005b6e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005b72:	60d3      	str	r3, [r2, #12]
 8005b74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b78:	6110      	str	r0, [r2, #16]
 8005b7a:	6153      	str	r3, [r2, #20]
 8005b7c:	e72e      	b.n	80059dc <__kernel_rem_pio2+0x4d4>
 8005b7e:	bf00      	nop
 8005b80:	41700000 	.word	0x41700000
 8005b84:	3e700000 	.word	0x3e700000

08005b88 <__kernel_sin>:
 8005b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	ed2d 8b04 	vpush	{d8-d9}
 8005b90:	eeb0 8a41 	vmov.f32	s16, s2
 8005b94:	eef0 8a61 	vmov.f32	s17, s3
 8005b98:	ec55 4b10 	vmov	r4, r5, d0
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005ba2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005ba6:	9001      	str	r0, [sp, #4]
 8005ba8:	da06      	bge.n	8005bb8 <__kernel_sin+0x30>
 8005baa:	ee10 0a10 	vmov	r0, s0
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7fa ff76 	bl	8000aa0 <__aeabi_d2iz>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d051      	beq.n	8005c5c <__kernel_sin+0xd4>
 8005bb8:	4622      	mov	r2, r4
 8005bba:	462b      	mov	r3, r5
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	f7fa fcbe 	bl	8000540 <__aeabi_dmul>
 8005bc4:	4682      	mov	sl, r0
 8005bc6:	468b      	mov	fp, r1
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	f7fa fcb6 	bl	8000540 <__aeabi_dmul>
 8005bd4:	a341      	add	r3, pc, #260	; (adr r3, 8005cdc <__kernel_sin+0x154>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	4680      	mov	r8, r0
 8005bdc:	4689      	mov	r9, r1
 8005bde:	4650      	mov	r0, sl
 8005be0:	4659      	mov	r1, fp
 8005be2:	f7fa fcad 	bl	8000540 <__aeabi_dmul>
 8005be6:	a33f      	add	r3, pc, #252	; (adr r3, 8005ce4 <__kernel_sin+0x15c>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa faf0 	bl	80001d0 <__aeabi_dsub>
 8005bf0:	4652      	mov	r2, sl
 8005bf2:	465b      	mov	r3, fp
 8005bf4:	f7fa fca4 	bl	8000540 <__aeabi_dmul>
 8005bf8:	a33c      	add	r3, pc, #240	; (adr r3, 8005cec <__kernel_sin+0x164>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	f7fa fae9 	bl	80001d4 <__adddf3>
 8005c02:	4652      	mov	r2, sl
 8005c04:	465b      	mov	r3, fp
 8005c06:	f7fa fc9b 	bl	8000540 <__aeabi_dmul>
 8005c0a:	a33a      	add	r3, pc, #232	; (adr r3, 8005cf4 <__kernel_sin+0x16c>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f7fa fade 	bl	80001d0 <__aeabi_dsub>
 8005c14:	4652      	mov	r2, sl
 8005c16:	465b      	mov	r3, fp
 8005c18:	f7fa fc92 	bl	8000540 <__aeabi_dmul>
 8005c1c:	a337      	add	r3, pc, #220	; (adr r3, 8005cfc <__kernel_sin+0x174>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f7fa fad7 	bl	80001d4 <__adddf3>
 8005c26:	9b01      	ldr	r3, [sp, #4]
 8005c28:	4606      	mov	r6, r0
 8005c2a:	460f      	mov	r7, r1
 8005c2c:	b9eb      	cbnz	r3, 8005c6a <__kernel_sin+0xe2>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4650      	mov	r0, sl
 8005c34:	4659      	mov	r1, fp
 8005c36:	f7fa fc83 	bl	8000540 <__aeabi_dmul>
 8005c3a:	a325      	add	r3, pc, #148	; (adr r3, 8005cd0 <__kernel_sin+0x148>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa fac6 	bl	80001d0 <__aeabi_dsub>
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	f7fa fc7a 	bl	8000540 <__aeabi_dmul>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4620      	mov	r0, r4
 8005c52:	4629      	mov	r1, r5
 8005c54:	f7fa fabe 	bl	80001d4 <__adddf3>
 8005c58:	4604      	mov	r4, r0
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	ec45 4b10 	vmov	d0, r4, r5
 8005c60:	b003      	add	sp, #12
 8005c62:	ecbd 8b04 	vpop	{d8-d9}
 8005c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <__kernel_sin+0x150>)
 8005c6c:	ec51 0b18 	vmov	r0, r1, d8
 8005c70:	2200      	movs	r2, #0
 8005c72:	f7fa fc65 	bl	8000540 <__aeabi_dmul>
 8005c76:	4632      	mov	r2, r6
 8005c78:	ec41 0b19 	vmov	d9, r0, r1
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4649      	mov	r1, r9
 8005c82:	f7fa fc5d 	bl	8000540 <__aeabi_dmul>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	ec51 0b19 	vmov	r0, r1, d9
 8005c8e:	f7fa fa9f 	bl	80001d0 <__aeabi_dsub>
 8005c92:	4652      	mov	r2, sl
 8005c94:	465b      	mov	r3, fp
 8005c96:	f7fa fc53 	bl	8000540 <__aeabi_dmul>
 8005c9a:	ec53 2b18 	vmov	r2, r3, d8
 8005c9e:	f7fa fa97 	bl	80001d0 <__aeabi_dsub>
 8005ca2:	a30b      	add	r3, pc, #44	; (adr r3, 8005cd0 <__kernel_sin+0x148>)
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	4606      	mov	r6, r0
 8005caa:	460f      	mov	r7, r1
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa fc46 	bl	8000540 <__aeabi_dmul>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa fa8a 	bl	80001d4 <__adddf3>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7fa fa82 	bl	80001d0 <__aeabi_dsub>
 8005ccc:	e7c4      	b.n	8005c58 <__kernel_sin+0xd0>
 8005cce:	bf00      	nop
 8005cd0:	55555549 	.word	0x55555549
 8005cd4:	3fc55555 	.word	0x3fc55555
 8005cd8:	3fe00000 	.word	0x3fe00000
 8005cdc:	5acfd57c 	.word	0x5acfd57c
 8005ce0:	3de5d93a 	.word	0x3de5d93a
 8005ce4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ce8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005cec:	57b1fe7d 	.word	0x57b1fe7d
 8005cf0:	3ec71de3 	.word	0x3ec71de3
 8005cf4:	19c161d5 	.word	0x19c161d5
 8005cf8:	3f2a01a0 	.word	0x3f2a01a0
 8005cfc:	1110f8a6 	.word	0x1110f8a6
 8005d00:	3f811111 	.word	0x3f811111
 8005d04:	00000000 	.word	0x00000000

08005d08 <floor>:
 8005d08:	ec51 0b10 	vmov	r0, r1, d0
 8005d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005d14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005d18:	2e13      	cmp	r6, #19
 8005d1a:	ee10 5a10 	vmov	r5, s0
 8005d1e:	ee10 8a10 	vmov	r8, s0
 8005d22:	460c      	mov	r4, r1
 8005d24:	dc32      	bgt.n	8005d8c <floor+0x84>
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	da14      	bge.n	8005d54 <floor+0x4c>
 8005d2a:	a333      	add	r3, pc, #204	; (adr r3, 8005df8 <floor+0xf0>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f7fa fa50 	bl	80001d4 <__adddf3>
 8005d34:	2200      	movs	r2, #0
 8005d36:	2300      	movs	r3, #0
 8005d38:	f7fa fe92 	bl	8000a60 <__aeabi_dcmpgt>
 8005d3c:	b138      	cbz	r0, 8005d4e <floor+0x46>
 8005d3e:	2c00      	cmp	r4, #0
 8005d40:	da57      	bge.n	8005df2 <floor+0xea>
 8005d42:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005d46:	431d      	orrs	r5, r3
 8005d48:	d001      	beq.n	8005d4e <floor+0x46>
 8005d4a:	4c2d      	ldr	r4, [pc, #180]	; (8005e00 <floor+0xf8>)
 8005d4c:	2500      	movs	r5, #0
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	e025      	b.n	8005da0 <floor+0x98>
 8005d54:	4f2b      	ldr	r7, [pc, #172]	; (8005e04 <floor+0xfc>)
 8005d56:	4137      	asrs	r7, r6
 8005d58:	ea01 0307 	and.w	r3, r1, r7
 8005d5c:	4303      	orrs	r3, r0
 8005d5e:	d01f      	beq.n	8005da0 <floor+0x98>
 8005d60:	a325      	add	r3, pc, #148	; (adr r3, 8005df8 <floor+0xf0>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	f7fa fa35 	bl	80001d4 <__adddf3>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f7fa fe77 	bl	8000a60 <__aeabi_dcmpgt>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d0eb      	beq.n	8005d4e <floor+0x46>
 8005d76:	2c00      	cmp	r4, #0
 8005d78:	bfbe      	ittt	lt
 8005d7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005d7e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005d82:	19a4      	addlt	r4, r4, r6
 8005d84:	ea24 0407 	bic.w	r4, r4, r7
 8005d88:	2500      	movs	r5, #0
 8005d8a:	e7e0      	b.n	8005d4e <floor+0x46>
 8005d8c:	2e33      	cmp	r6, #51	; 0x33
 8005d8e:	dd0b      	ble.n	8005da8 <floor+0xa0>
 8005d90:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005d94:	d104      	bne.n	8005da0 <floor+0x98>
 8005d96:	ee10 2a10 	vmov	r2, s0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	f7fa fa1a 	bl	80001d4 <__adddf3>
 8005da0:	ec41 0b10 	vmov	d0, r0, r1
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295
 8005db0:	fa23 f707 	lsr.w	r7, r3, r7
 8005db4:	4207      	tst	r7, r0
 8005db6:	d0f3      	beq.n	8005da0 <floor+0x98>
 8005db8:	a30f      	add	r3, pc, #60	; (adr r3, 8005df8 <floor+0xf0>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f7fa fa09 	bl	80001d4 <__adddf3>
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f7fa fe4b 	bl	8000a60 <__aeabi_dcmpgt>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d0bf      	beq.n	8005d4e <floor+0x46>
 8005dce:	2c00      	cmp	r4, #0
 8005dd0:	da02      	bge.n	8005dd8 <floor+0xd0>
 8005dd2:	2e14      	cmp	r6, #20
 8005dd4:	d103      	bne.n	8005dde <floor+0xd6>
 8005dd6:	3401      	adds	r4, #1
 8005dd8:	ea25 0507 	bic.w	r5, r5, r7
 8005ddc:	e7b7      	b.n	8005d4e <floor+0x46>
 8005dde:	2301      	movs	r3, #1
 8005de0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005de4:	fa03 f606 	lsl.w	r6, r3, r6
 8005de8:	4435      	add	r5, r6
 8005dea:	4545      	cmp	r5, r8
 8005dec:	bf38      	it	cc
 8005dee:	18e4      	addcc	r4, r4, r3
 8005df0:	e7f2      	b.n	8005dd8 <floor+0xd0>
 8005df2:	2500      	movs	r5, #0
 8005df4:	462c      	mov	r4, r5
 8005df6:	e7aa      	b.n	8005d4e <floor+0x46>
 8005df8:	8800759c 	.word	0x8800759c
 8005dfc:	7e37e43c 	.word	0x7e37e43c
 8005e00:	bff00000 	.word	0xbff00000
 8005e04:	000fffff 	.word	0x000fffff

08005e08 <scalbn>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	ec55 4b10 	vmov	r4, r5, d0
 8005e0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005e12:	4606      	mov	r6, r0
 8005e14:	462b      	mov	r3, r5
 8005e16:	b99a      	cbnz	r2, 8005e40 <scalbn+0x38>
 8005e18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e1c:	4323      	orrs	r3, r4
 8005e1e:	d036      	beq.n	8005e8e <scalbn+0x86>
 8005e20:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <scalbn+0x100>)
 8005e22:	4629      	mov	r1, r5
 8005e24:	ee10 0a10 	vmov	r0, s0
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f7fa fb89 	bl	8000540 <__aeabi_dmul>
 8005e2e:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <scalbn+0x104>)
 8005e30:	429e      	cmp	r6, r3
 8005e32:	4604      	mov	r4, r0
 8005e34:	460d      	mov	r5, r1
 8005e36:	da10      	bge.n	8005e5a <scalbn+0x52>
 8005e38:	a32b      	add	r3, pc, #172	; (adr r3, 8005ee8 <scalbn+0xe0>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	e03a      	b.n	8005eb6 <scalbn+0xae>
 8005e40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005e44:	428a      	cmp	r2, r1
 8005e46:	d10c      	bne.n	8005e62 <scalbn+0x5a>
 8005e48:	ee10 2a10 	vmov	r2, s0
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f7fa f9c0 	bl	80001d4 <__adddf3>
 8005e54:	4604      	mov	r4, r0
 8005e56:	460d      	mov	r5, r1
 8005e58:	e019      	b.n	8005e8e <scalbn+0x86>
 8005e5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005e5e:	460b      	mov	r3, r1
 8005e60:	3a36      	subs	r2, #54	; 0x36
 8005e62:	4432      	add	r2, r6
 8005e64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005e68:	428a      	cmp	r2, r1
 8005e6a:	dd08      	ble.n	8005e7e <scalbn+0x76>
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	a120      	add	r1, pc, #128	; (adr r1, 8005ef0 <scalbn+0xe8>)
 8005e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e74:	da1c      	bge.n	8005eb0 <scalbn+0xa8>
 8005e76:	a120      	add	r1, pc, #128	; (adr r1, 8005ef8 <scalbn+0xf0>)
 8005e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e7c:	e018      	b.n	8005eb0 <scalbn+0xa8>
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	dd08      	ble.n	8005e94 <scalbn+0x8c>
 8005e82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e8e:	ec45 4b10 	vmov	d0, r4, r5
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005e98:	da19      	bge.n	8005ece <scalbn+0xc6>
 8005e9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e9e:	429e      	cmp	r6, r3
 8005ea0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005ea4:	dd0a      	ble.n	8005ebc <scalbn+0xb4>
 8005ea6:	a112      	add	r1, pc, #72	; (adr r1, 8005ef0 <scalbn+0xe8>)
 8005ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e2      	bne.n	8005e76 <scalbn+0x6e>
 8005eb0:	a30f      	add	r3, pc, #60	; (adr r3, 8005ef0 <scalbn+0xe8>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa fb43 	bl	8000540 <__aeabi_dmul>
 8005eba:	e7cb      	b.n	8005e54 <scalbn+0x4c>
 8005ebc:	a10a      	add	r1, pc, #40	; (adr r1, 8005ee8 <scalbn+0xe0>)
 8005ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0b8      	beq.n	8005e38 <scalbn+0x30>
 8005ec6:	a10e      	add	r1, pc, #56	; (adr r1, 8005f00 <scalbn+0xf8>)
 8005ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ecc:	e7b4      	b.n	8005e38 <scalbn+0x30>
 8005ece:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ed2:	3236      	adds	r2, #54	; 0x36
 8005ed4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ed8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005edc:	4620      	mov	r0, r4
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <scalbn+0x108>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	e7e8      	b.n	8005eb6 <scalbn+0xae>
 8005ee4:	f3af 8000 	nop.w
 8005ee8:	c2f8f359 	.word	0xc2f8f359
 8005eec:	01a56e1f 	.word	0x01a56e1f
 8005ef0:	8800759c 	.word	0x8800759c
 8005ef4:	7e37e43c 	.word	0x7e37e43c
 8005ef8:	8800759c 	.word	0x8800759c
 8005efc:	fe37e43c 	.word	0xfe37e43c
 8005f00:	c2f8f359 	.word	0xc2f8f359
 8005f04:	81a56e1f 	.word	0x81a56e1f
 8005f08:	43500000 	.word	0x43500000
 8005f0c:	ffff3cb0 	.word	0xffff3cb0
 8005f10:	3c900000 	.word	0x3c900000

08005f14 <__errno>:
 8005f14:	4b01      	ldr	r3, [pc, #4]	; (8005f1c <__errno+0x8>)
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000018 	.word	0x20000018

08005f20 <__libc_init_array>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	4d0d      	ldr	r5, [pc, #52]	; (8005f58 <__libc_init_array+0x38>)
 8005f24:	4c0d      	ldr	r4, [pc, #52]	; (8005f5c <__libc_init_array+0x3c>)
 8005f26:	1b64      	subs	r4, r4, r5
 8005f28:	10a4      	asrs	r4, r4, #2
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	42a6      	cmp	r6, r4
 8005f2e:	d109      	bne.n	8005f44 <__libc_init_array+0x24>
 8005f30:	4d0b      	ldr	r5, [pc, #44]	; (8005f60 <__libc_init_array+0x40>)
 8005f32:	4c0c      	ldr	r4, [pc, #48]	; (8005f64 <__libc_init_array+0x44>)
 8005f34:	f000 f818 	bl	8005f68 <_init>
 8005f38:	1b64      	subs	r4, r4, r5
 8005f3a:	10a4      	asrs	r4, r4, #2
 8005f3c:	2600      	movs	r6, #0
 8005f3e:	42a6      	cmp	r6, r4
 8005f40:	d105      	bne.n	8005f4e <__libc_init_array+0x2e>
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f48:	4798      	blx	r3
 8005f4a:	3601      	adds	r6, #1
 8005f4c:	e7ee      	b.n	8005f2c <__libc_init_array+0xc>
 8005f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f52:	4798      	blx	r3
 8005f54:	3601      	adds	r6, #1
 8005f56:	e7f2      	b.n	8005f3e <__libc_init_array+0x1e>
 8005f58:	080061d0 	.word	0x080061d0
 8005f5c:	080061d0 	.word	0x080061d0
 8005f60:	080061d0 	.word	0x080061d0
 8005f64:	080061d4 	.word	0x080061d4

08005f68 <_init>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr

08005f74 <_fini>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr
