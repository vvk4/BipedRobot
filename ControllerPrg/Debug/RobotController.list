
RobotController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b348  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800b4d8  0800b4d8  0001b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ec  0800b5ec  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f4  0800b5f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f4  0800b5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800b5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051b8  20000014  0800b610  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051cc  0800b610  000251cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e2a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049cb  00000000  00000000  00043e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00048840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  0004a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024716  00000000  00000000  0004ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfaa  00000000  00000000  0007019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4496  00000000  00000000  0008d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001715de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c90  00000000  00000000  00171634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b4c0 	.word	0x0800b4c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800b4c0 	.word	0x0800b4c0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SetBuzzerFRQ>:
#include "main.h"

void SetBuzzerFRQ(uint16_t Frq, uint16_t BuzzerTimer) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	80fb      	strh	r3, [r7, #6]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80bb      	strh	r3, [r7, #4]
	uint16_t Period;

	if (Frq > 54)
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	2b36      	cmp	r3, #54	; 0x36
 80004dc:	d905      	bls.n	80004ea <SetBuzzerFRQ+0x22>
		Period = 3600000 / Frq;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <SetBuzzerFRQ+0x60>)
 80004e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80004e6:	81fb      	strh	r3, [r7, #14]
 80004e8:	e002      	b.n	80004f0 <SetBuzzerFRQ+0x28>
	else
		Period = 0xffff;
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	81fb      	strh	r3, [r7, #14]

	htim4.Instance->ARR = Period;
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <SetBuzzerFRQ+0x64>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	89fa      	ldrh	r2, [r7, #14]
 80004f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (Frq)
 80004f8:	88fb      	ldrh	r3, [r7, #6]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d006      	beq.n	800050c <SetBuzzerFRQ+0x44>
		htim4.Instance->CCR4 = Period / 2;
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	085b      	lsrs	r3, r3, #1
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <SetBuzzerFRQ+0x64>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	641a      	str	r2, [r3, #64]	; 0x40
 800050a:	e003      	b.n	8000514 <SetBuzzerFRQ+0x4c>
	else
		htim4.Instance->CCR4 = 0;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <SetBuzzerFRQ+0x64>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	641a      	str	r2, [r3, #64]	; 0x40

	BuzzerCnt = BuzzerTimer;
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <SetBuzzerFRQ+0x68>)
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	8013      	strh	r3, [r2, #0]

}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	0036ee80 	.word	0x0036ee80
 800052c:	20004b8c 	.word	0x20004b8c
 8000530:	20004940 	.word	0x20004940

08000534 <BuzzerOff>:

void BuzzerOff(void) {
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = 0;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <BuzzerOff+0x18>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20004b8c 	.word	0x20004b8c

08000550 <CAN_Config>:
#include "main.h"



void CAN_Config(CAN_HandleTypeDef *phcan, uint8_t FIFO_Num)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
    /*Configure the filter to receive ID frames in the specified range*/
    CAN_FilterTypeDef CAN_FilterType;
    CAN_FilterType.FilterBank = 0;                        //Filter group [0,13]
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.SlaveStartFilterBank = 0;//14;             //Start from the filter group [0,27]
 8000560:	2300      	movs	r3, #0
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 8000564:	2320      	movs	r3, #32
 8000566:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterIdLow = 0x0000;                  //ID to be filtered low [0x0000,0xFFFF]
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	613b      	str	r3, [r7, #16]
    CAN_FilterType.FilterMaskIdLow = 0x0000;              //The lower 16 bits of the filter must not match
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
    CAN_FilterType.FilterFIFOAssignment = FIFO_Num;       //The filter is associated to (0=RX_FIFO0/1=RX_FIFO1)
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	61bb      	str	r3, [r7, #24]
    CAN_FilterType.FilterMode = CAN_FILTERMODE_IDLIST;    //Work in identifier mask bit mode
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
    CAN_FilterType.FilterScale = CAN_FILTERSCALE_32BIT;   //The filter bit width is a single 32 bits
 800057c:	2301      	movs	r3, #1
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
    CAN_FilterType.FilterActivation = ENABLE;             //Enable filter
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	4619      	mov	r1, r3
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f003 fb12 	bl	8003bb4 <HAL_CAN_ConfigFilter>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <CAN_Config+0x4a>
    {
        Error_Handler();
 8000596:	f001 fb4f 	bl	8001c38 <Error_Handler>
    }

    CAN_FilterType.FilterBank = 1;                        //Filter group [0,13]
 800059a:	2301      	movs	r3, #1
 800059c:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_HIP_L_ADDR)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 800059e:	2360      	movs	r3, #96	; 0x60
 80005a0:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_HIP_L_ADDR+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	4619      	mov	r1, r3
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f003 fb01 	bl	8003bb4 <HAL_CAN_ConfigFilter>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <CAN_Config+0x6c>
    {
        Error_Handler();
 80005b8:	f001 fb3e 	bl	8001c38 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 2;                        //Filter group [0,13]
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_LOWERLEG_L_ADDR)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 80005c0:	23a0      	movs	r3, #160	; 0xa0
 80005c2:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_LOWERLEG_L_ADDR+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 80005c4:	23c0      	movs	r3, #192	; 0xc0
 80005c6:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f003 faf0 	bl	8003bb4 <HAL_CAN_ConfigFilter>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <CAN_Config+0x8e>
    {
        Error_Handler();
 80005da:	f001 fb2d 	bl	8001c38 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 3;                        //Filter group [0,13]
 80005de:	2303      	movs	r3, #3
 80005e0:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_FOOT_L_ADDR)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 80005e2:	23e0      	movs	r3, #224	; 0xe0
 80005e4:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_FOOT_L_ADDR+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 80005e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ea:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f003 fade 	bl	8003bb4 <HAL_CAN_ConfigFilter>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <CAN_Config+0xb2>
    {
        Error_Handler();
 80005fe:	f001 fb1b 	bl	8001c38 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 4;                        //Filter group [0,13]
 8000602:	2304      	movs	r3, #4
 8000604:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_HIP_R_ADDR)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 8000606:	f44f 7390 	mov.w	r3, #288	; 0x120
 800060a:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_HIP_R_ADDR+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 800060c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000610:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f003 facb 	bl	8003bb4 <HAL_CAN_ConfigFilter>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <CAN_Config+0xd8>
    {
        Error_Handler();
 8000624:	f001 fb08 	bl	8001c38 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 5;                        //Filter group [0,13]
 8000628:	2305      	movs	r3, #5
 800062a:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_LOWERLEG_R_ADDR)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 800062c:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000630:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_LOWERLEG_R_ADDR+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 8000632:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000636:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f003 fab8 	bl	8003bb4 <HAL_CAN_ConfigFilter>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <CAN_Config+0xfe>
    {
        Error_Handler();
 800064a:	f001 faf5 	bl	8001c38 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 6;                        //Filter group [0,13]
 800064e:	2306      	movs	r3, #6
 8000650:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_FOOT_R_ADDR)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 8000652:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000656:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_FOOT_R_ADDR+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 8000658:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800065c:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f003 faa5 	bl	8003bb4 <HAL_CAN_ConfigFilter>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <CAN_Config+0x124>
    {
        Error_Handler();
 8000670:	f001 fae2 	bl	8001c38 <Error_Handler>

*/


    /*Open the interrupt service corresponding to the CAN channel*/
    if(FIFO_Num == 0)
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d109      	bne.n	800068e <CAN_Config+0x13e>
    {
        if(HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING ) != HAL_OK)
 800067a:	2102      	movs	r1, #2
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f003 fddf 	bl	8004240 <HAL_CAN_ActivateNotification>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00b      	beq.n	80006a0 <CAN_Config+0x150>
        {
            Error_Handler();
 8000688:	f001 fad6 	bl	8001c38 <Error_Handler>
 800068c:	e008      	b.n	80006a0 <CAN_Config+0x150>
        }
    }
    else
    {
        if(HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO1_MSG_PENDING ) != HAL_OK)
 800068e:	2110      	movs	r1, #16
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f003 fdd5 	bl	8004240 <HAL_CAN_ActivateNotification>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <CAN_Config+0x150>
        {
            Error_Handler();
 800069c:	f001 facc 	bl	8001c38 <Error_Handler>
        }
    }

    /*Start CAN communication*/
    if(HAL_CAN_Start(phcan) != HAL_OK)
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f003 fb67 	bl	8003d74 <HAL_CAN_Start>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <CAN_Config+0x160>
    {
        Error_Handler();
 80006ac:	f001 fac4 	bl	8001c38 <Error_Handler>
    }
}
 80006b0:	bf00      	nop
 80006b2:	3730      	adds	r7, #48	; 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Can_TxMessage>:



uint8_t Can_TxMessage(CAN_HandleTypeDef *phcan, uint8_t ide, uint32_t id, uint8_t len, uint8_t *pdata)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08c      	sub	sp, #48	; 0x30
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	461a      	mov	r2, r3
 80006c4:	460b      	mov	r3, r1
 80006c6:	72fb      	strb	r3, [r7, #11]
 80006c8:	4613      	mov	r3, r2
 80006ca:	72bb      	strb	r3, [r7, #10]
    uint32_t  TxMailbox;           //Get the email number that was sent
    CAN_TxHeaderTypeDef TxHeader;  //Send-header protocol information structure, used to fill parameters
    HAL_StatusTypeDef   HAL_RetVal; //CAN return value
    uint16_t i = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /*Fill and send header protocol*/
    if(ide == 0)
 80006d0:	7afb      	ldrb	r3, [r7, #11]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d104      	bne.n	80006e0 <Can_TxMessage+0x28>
    {
        TxHeader.IDE = CAN_ID_STD;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
        TxHeader.StdId = id;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	e003      	b.n	80006e8 <Can_TxMessage+0x30>
    }
    else
    {
        TxHeader.IDE = CAN_ID_EXT;
 80006e0:	2304      	movs	r3, #4
 80006e2:	61bb      	str	r3, [r7, #24]
        TxHeader.ExtId = id;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	617b      	str	r3, [r7, #20]
    }

    TxHeader.RTR = CAN_RTR_DATA,          //The frame type of the message data frame
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
    TxHeader.DLC = len,                   //The length of the frame 8
 80006ec:	7abb      	ldrb	r3, [r7, #10]
 80006ee:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE; //Do not capture time
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    /*Ask if CAN has a free mailbox*/
    while(HAL_CAN_GetTxMailboxesFreeLevel(phcan) == 0)
 80006f6:	e009      	b.n	800070c <Can_TxMessage+0x54>
    {
        i++;
 80006f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006fa:	3301      	adds	r3, #1
 80006fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(i > 0xfffe)//Timeout, sending failed
 80006fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000704:	4293      	cmp	r3, r2
 8000706:	d101      	bne.n	800070c <Can_TxMessage+0x54>
            return 1;
 8000708:	2301      	movs	r3, #1
 800070a:	e017      	b.n	800073c <Can_TxMessage+0x84>
    while(HAL_CAN_GetTxMailboxesFreeLevel(phcan) == 0)
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f003 fc50 	bl	8003fb2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0ef      	beq.n	80006f8 <Can_TxMessage+0x40>
    }


    /*Send frame*/
    HAL_RetVal = HAL_CAN_AddTxMessage(phcan, &TxHeader, pdata, &TxMailbox); //Send a frame of data
 8000718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071c:	f107 0110 	add.w	r1, r7, #16
 8000720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f003 fb6a 	bl	8003dfc <HAL_CAN_AddTxMessage>
 8000728:	4603      	mov	r3, r0
 800072a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    //printf("TxMailbox %d\r\n",TxMailbox);
    if(HAL_RetVal != HAL_OK)
 800072e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <Can_TxMessage+0x82>
        return 1;
 8000736:	2301      	movs	r3, #1
 8000738:	e000      	b.n	800073c <Can_TxMessage+0x84>
    return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3730      	adds	r7, #48	; 0x30
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <processCAN2Packet>:




void processCAN2Packet(CAN_HandleTypeDef *hcan)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    uint8_t Rxbuff[8];
    CAN_RxHeaderTypeDef RxHeader;
    HAL_StatusTypeDef   HAL_RetVal;


        HAL_RetVal = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Rxbuff); //Read a frame from channel 0 buffer
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	f107 0208 	add.w	r2, r7, #8
 8000754:	2100      	movs	r1, #0
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f003 fc60 	bl	800401c <HAL_CAN_GetRxMessage>
 800075c:	4603      	mov	r3, r0
 800075e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(HAL_RetVal == HAL_OK)
 8000762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000766:	2b00      	cmp	r3, #0
 8000768:	f040 80ba 	bne.w	80008e0 <processCAN2Packet+0x19c>
        {
        	switch (RxHeader.StdId)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3b01      	subs	r3, #1
 8000770:	2b0d      	cmp	r3, #13
 8000772:	f200 80b6 	bhi.w	80008e2 <processCAN2Packet+0x19e>
 8000776:	a201      	add	r2, pc, #4	; (adr r2, 800077c <processCAN2Packet+0x38>)
 8000778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077c:	080007b5 	.word	0x080007b5
 8000780:	080007cd 	.word	0x080007cd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007fd 	.word	0x080007fd
 800078c:	08000815 	.word	0x08000815
 8000790:	0800082d 	.word	0x0800082d
 8000794:	08000839 	.word	0x08000839
 8000798:	08000851 	.word	0x08000851
 800079c:	0800085d 	.word	0x0800085d
 80007a0:	08000875 	.word	0x08000875
 80007a4:	0800088d 	.word	0x0800088d
 80007a8:	080008a5 	.word	0x080008a5
 80007ac:	080008b1 	.word	0x080008b1
 80007b0:	080008c9 	.word	0x080008c9
        	{
        	case TILT_SENSOR_ADDR:
        		Tilt1X=*(float*)Rxbuff;
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a4c      	ldr	r2, [pc, #304]	; (80008ec <processCAN2Packet+0x1a8>)
 80007bc:	6013      	str	r3, [r2, #0]
        		Tilt1Y=*(float*)&Rxbuff[4];
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	3304      	adds	r3, #4
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a4a      	ldr	r2, [pc, #296]	; (80008f0 <processCAN2Packet+0x1ac>)
 80007c8:	6013      	str	r3, [r2, #0]
        		break;
 80007ca:	e08a      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case (TILT_SENSOR_ADDR+1):
				Gyro1=*(float*)Rxbuff;
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a48      	ldr	r2, [pc, #288]	; (80008f4 <processCAN2Packet+0x1b0>)
 80007d4:	6013      	str	r3, [r2, #0]
        		Gyro1Y=*(float*)&Rxbuff[4];
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	3304      	adds	r3, #4
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a46      	ldr	r2, [pc, #280]	; (80008f8 <processCAN2Packet+0x1b4>)
 80007e0:	6013      	str	r3, [r2, #0]
        		//KGyro1=*(uint16_t*)&Rxbuff[4];
        		break;
 80007e2:	e07e      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case TILT_SENSOR_HIP_L_ADDR:
        		Tilt2X=*(float*)Rxbuff;
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a44      	ldr	r2, [pc, #272]	; (80008fc <processCAN2Packet+0x1b8>)
 80007ec:	6013      	str	r3, [r2, #0]
        		Tilt2Y=*(float*)&Rxbuff[4];
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	3304      	adds	r3, #4
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a42      	ldr	r2, [pc, #264]	; (8000900 <processCAN2Packet+0x1bc>)
 80007f8:	6013      	str	r3, [r2, #0]
        		break;
 80007fa:	e072      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case (TILT_SENSOR_HIP_L_ADDR+1):
				Gyro2=*(float*)Rxbuff;
 80007fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a40      	ldr	r2, [pc, #256]	; (8000904 <processCAN2Packet+0x1c0>)
 8000804:	6013      	str	r3, [r2, #0]
    			Gyro2Y=*(float*)&Rxbuff[4];
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	3304      	adds	r3, #4
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a3e      	ldr	r2, [pc, #248]	; (8000908 <processCAN2Packet+0x1c4>)
 8000810:	6013      	str	r3, [r2, #0]
        		break;
 8000812:	e066      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case TILT_SENSOR_LOWERLEG_L_ADDR:
        		Tilt3X=*(float*)Rxbuff;
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a3c      	ldr	r2, [pc, #240]	; (800090c <processCAN2Packet+0x1c8>)
 800081c:	6013      	str	r3, [r2, #0]
        		Tilt3Y=*(float*)&Rxbuff[4];
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	3304      	adds	r3, #4
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a3a      	ldr	r2, [pc, #232]	; (8000910 <processCAN2Packet+0x1cc>)
 8000828:	6013      	str	r3, [r2, #0]
        		break;
 800082a:	e05a      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case (TILT_SENSOR_LOWERLEG_L_ADDR+1):
				Gyro3=*(float*)Rxbuff;
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a38      	ldr	r2, [pc, #224]	; (8000914 <processCAN2Packet+0x1d0>)
 8000834:	6013      	str	r3, [r2, #0]
        		break;
 8000836:	e054      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case TILT_SENSOR_FOOT_L_ADDR:
        		Tilt4X=*(float*)Rxbuff;
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a36      	ldr	r2, [pc, #216]	; (8000918 <processCAN2Packet+0x1d4>)
 8000840:	6013      	str	r3, [r2, #0]
        		Tilt4Y=*(float*)&Rxbuff[4];
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	3304      	adds	r3, #4
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a34      	ldr	r2, [pc, #208]	; (800091c <processCAN2Packet+0x1d8>)
 800084c:	6013      	str	r3, [r2, #0]
        		break;
 800084e:	e048      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case (TILT_SENSOR_FOOT_L_ADDR+1):
				Gyro4=*(float*)Rxbuff;
 8000850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a32      	ldr	r2, [pc, #200]	; (8000920 <processCAN2Packet+0x1dc>)
 8000858:	6013      	str	r3, [r2, #0]
        		break;
 800085a:	e042      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case TILT_SENSOR_HIP_R_ADDR:
        		Tilt5X=*(float*)Rxbuff;
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a30      	ldr	r2, [pc, #192]	; (8000924 <processCAN2Packet+0x1e0>)
 8000864:	6013      	str	r3, [r2, #0]
        		Tilt5Y=*(float*)&Rxbuff[4];
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	3304      	adds	r3, #4
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <processCAN2Packet+0x1e4>)
 8000870:	6013      	str	r3, [r2, #0]
        		break;
 8000872:	e036      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case (TILT_SENSOR_HIP_R_ADDR+1):
				Gyro5=*(float*)Rxbuff;
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a2c      	ldr	r2, [pc, #176]	; (800092c <processCAN2Packet+0x1e8>)
 800087c:	6013      	str	r3, [r2, #0]
    			Gyro5Y=*(float*)&Rxbuff[4];
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	3304      	adds	r3, #4
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <processCAN2Packet+0x1ec>)
 8000888:	6013      	str	r3, [r2, #0]
        		break;
 800088a:	e02a      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case TILT_SENSOR_LOWERLEG_R_ADDR:
        		Tilt6X=*(float*)Rxbuff;
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a28      	ldr	r2, [pc, #160]	; (8000934 <processCAN2Packet+0x1f0>)
 8000894:	6013      	str	r3, [r2, #0]
        		Tilt6Y=*(float*)&Rxbuff[4];
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	3304      	adds	r3, #4
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a26      	ldr	r2, [pc, #152]	; (8000938 <processCAN2Packet+0x1f4>)
 80008a0:	6013      	str	r3, [r2, #0]
        		break;
 80008a2:	e01e      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case (TILT_SENSOR_LOWERLEG_R_ADDR+1):
				Gyro6=*(float*)Rxbuff;
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a24      	ldr	r2, [pc, #144]	; (800093c <processCAN2Packet+0x1f8>)
 80008ac:	6013      	str	r3, [r2, #0]
        		break;
 80008ae:	e018      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case TILT_SENSOR_FOOT_R_ADDR:
        		Tilt7X=*(float*)Rxbuff;
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <processCAN2Packet+0x1fc>)
 80008b8:	6013      	str	r3, [r2, #0]
        		Tilt7Y=*(float*)&Rxbuff[4];
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	3304      	adds	r3, #4
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a20      	ldr	r2, [pc, #128]	; (8000944 <processCAN2Packet+0x200>)
 80008c4:	6013      	str	r3, [r2, #0]
        		break;
 80008c6:	e00c      	b.n	80008e2 <processCAN2Packet+0x19e>
        	case (TILT_SENSOR_FOOT_R_ADDR+1):
				Gyro7=*(float*)Rxbuff;
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a1e      	ldr	r2, [pc, #120]	; (8000948 <processCAN2Packet+0x204>)
 80008d0:	6013      	str	r3, [r2, #0]
        		KGyro1=*(uint16_t*)&Rxbuff[4];
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	3304      	adds	r3, #4
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <processCAN2Packet+0x208>)
 80008dc:	801a      	strh	r2, [r3, #0]
        		break;
 80008de:	e000      	b.n	80008e2 <processCAN2Packet+0x19e>
        	}
        }
 80008e0:	bf00      	nop
    }
 80008e2:	bf00      	nop
 80008e4:	3730      	adds	r7, #48	; 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20004f40 	.word	0x20004f40
 80008f0:	20004bd4 	.word	0x20004bd4
 80008f4:	20004ee0 	.word	0x20004ee0
 80008f8:	20004e20 	.word	0x20004e20
 80008fc:	20004e28 	.word	0x20004e28
 8000900:	20004e1c 	.word	0x20004e1c
 8000904:	20004db4 	.word	0x20004db4
 8000908:	20004fd4 	.word	0x20004fd4
 800090c:	20004be4 	.word	0x20004be4
 8000910:	20004e90 	.word	0x20004e90
 8000914:	20004eec 	.word	0x20004eec
 8000918:	20004bdc 	.word	0x20004bdc
 800091c:	20004ef0 	.word	0x20004ef0
 8000920:	20004e8c 	.word	0x20004e8c
 8000924:	20004ef4 	.word	0x20004ef4
 8000928:	20004c40 	.word	0x20004c40
 800092c:	20004e24 	.word	0x20004e24
 8000930:	20004be8 	.word	0x20004be8
 8000934:	20004b3c 	.word	0x20004b3c
 8000938:	20004c38 	.word	0x20004c38
 800093c:	20004ee4 	.word	0x20004ee4
 8000940:	20004bd8 	.word	0x20004bd8
 8000944:	20004ee8 	.word	0x20004ee8
 8000948:	20004fd0 	.word	0x20004fd0
 800094c:	20004c34 	.word	0x20004c34

08000950 <FlashWriteAll>:


uint8_t OptionsArray[SIZE_OF_OPTIONS_ARRAY];
uint16_t CntOptions;

void FlashWriteAll(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0x00;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
	uint8_t i;
	HAL_StatusTypeDef flash_ok;

	HAL_FLASH_Unlock();
 800095a:	f004 fbff 	bl	800515c <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Sector = 11;
 800096a:	230b      	movs	r3, #11
 800096c:	613b      	str	r3, [r7, #16]

	__HAL_FLASH_CLEAR_FLAG(
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <FlashWriteAll+0x88>)
 8000970:	22f3      	movs	r2, #243	; 0xf3
 8000972:	60da      	str	r2, [r3, #12]
			FLASH_SR_PGPERR | FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGAERR);

	flash_ok = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000974:	1d3a      	adds	r2, r7, #4
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f004 fd4f 	bl	8005420 <HAL_FLASHEx_Erase>
 8000982:	4603      	mov	r3, r0
 8000984:	77bb      	strb	r3, [r7, #30]

	for (i = 0; i < (SIZE_OF_OPTIONS_ARRAY / 4); i++) {
 8000986:	2300      	movs	r3, #0
 8000988:	77fb      	strb	r3, [r7, #31]
 800098a:	e01c      	b.n	80009c6 <FlashWriteAll+0x76>
		flash_ok = HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	77bb      	strb	r3, [r7, #30]
		while (flash_ok != HAL_OK)
 8000990:	e013      	b.n	80009ba <FlashWriteAll+0x6a>
			flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
			START_ADDR_USER_PAGE + i * 4,
 8000992:	7ffb      	ldrb	r3, [r7, #31]
 8000994:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000998:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800099c:	009b      	lsls	r3, r3, #2
			flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 800099e:	4619      	mov	r1, r3
					(uint64_t) *(uint32_t*) &OptionsArray[i * 4]);
 80009a0:	7ffb      	ldrb	r3, [r7, #31]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <FlashWriteAll+0x8c>)
 80009a6:	4413      	add	r3, r2
 80009a8:	681b      	ldr	r3, [r3, #0]
			flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80009aa:	461a      	mov	r2, r3
 80009ac:	f04f 0300 	mov.w	r3, #0
 80009b0:	2002      	movs	r0, #2
 80009b2:	f004 fb7f 	bl	80050b4 <HAL_FLASH_Program>
 80009b6:	4603      	mov	r3, r0
 80009b8:	77bb      	strb	r3, [r7, #30]
		while (flash_ok != HAL_OK)
 80009ba:	7fbb      	ldrb	r3, [r7, #30]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1e8      	bne.n	8000992 <FlashWriteAll+0x42>
	for (i = 0; i < (SIZE_OF_OPTIONS_ARRAY / 4); i++) {
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	3301      	adds	r3, #1
 80009c4:	77fb      	strb	r3, [r7, #31]
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	2b7c      	cmp	r3, #124	; 0x7c
 80009ca:	d9df      	bls.n	800098c <FlashWriteAll+0x3c>
	}

	HAL_FLASH_Lock();
 80009cc:	f004 fbe8 	bl	80051a0 <HAL_FLASH_Lock>

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023c00 	.word	0x40023c00
 80009dc:	20004944 	.word	0x20004944

080009e0 <FlashReadAll>:

void FlashReadAll(void) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < (SIZE_OF_OPTIONS_ARRAY / 4); i++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	e00f      	b.n	8000a0c <FlashReadAll+0x2c>
		*(uint32_t*) &OptionsArray[i * 4] =
				*(__IO uint32_t*) (START_ADDR_USER_PAGE + i * 4);
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80009f2:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4619      	mov	r1, r3
		*(uint32_t*) &OptionsArray[i * 4] =
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <FlashReadAll+0x40>)
 8000a00:	4413      	add	r3, r2
				*(__IO uint32_t*) (START_ADDR_USER_PAGE + i * 4);
 8000a02:	680a      	ldr	r2, [r1, #0]
		*(uint32_t*) &OptionsArray[i * 4] =
 8000a04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (SIZE_OF_OPTIONS_ARRAY / 4); i++) {
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	80fb      	strh	r3, [r7, #6]
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	2b7c      	cmp	r3, #124	; 0x7c
 8000a10:	d9ec      	bls.n	80009ec <FlashReadAll+0xc>
	}

//	ThisAddr=*(__IO uint32_t*)(START_ADDR_USER_PAGE+FLASH_ADDR_ThisAddr);
	//KGyro=*(__IO float*)(START_ADDR_USER_PAGE+FLASH_ADDR_KGyro);

}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20004944 	.word	0x20004944

08000a24 <OptionsArrayAddFloat>:

void OptionsArrayAddFloat(float Fl) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	ed87 0a01 	vstr	s0, [r7, #4]
	*(float*) &OptionsArray[CntOptions] = Fl;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <OptionsArrayAddFloat+0x30>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <OptionsArrayAddFloat+0x34>)
 8000a36:	4413      	add	r3, r2
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	601a      	str	r2, [r3, #0]
	CntOptions = CntOptions + sizeof(float);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <OptionsArrayAddFloat+0x30>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	3304      	adds	r3, #4
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <OptionsArrayAddFloat+0x30>)
 8000a46:	801a      	strh	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	20004b38 	.word	0x20004b38
 8000a58:	20004944 	.word	0x20004944

08000a5c <OptionsArrayGetFloat>:

float OptionsArrayGetFloat(void) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
	float Fl = *(float*) &OptionsArray[CntOptions];
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <OptionsArrayGetFloat+0x34>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <OptionsArrayGetFloat+0x38>)
 8000a6a:	4413      	add	r3, r2
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	607b      	str	r3, [r7, #4]
	CntOptions = CntOptions + sizeof(float);
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <OptionsArrayGetFloat+0x34>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	3304      	adds	r3, #4
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <OptionsArrayGetFloat+0x34>)
 8000a7a:	801a      	strh	r2, [r3, #0]
	return Fl;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	ee07 3a90 	vmov	s15, r3
}
 8000a82:	eeb0 0a67 	vmov.f32	s0, s15
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	20004b38 	.word	0x20004b38
 8000a94:	20004944 	.word	0x20004944

08000a98 <OptionsToArray>:

void OptionsToArray(void) {
 8000a98:	b598      	push	{r3, r4, r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	CntOptions = 4;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <OptionsToArray+0x60>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	801a      	strh	r2, [r3, #0]

	OptionsArray[0] = 0xff;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <OptionsToArray+0x64>)
 8000aa4:	22ff      	movs	r2, #255	; 0xff
 8000aa6:	701a      	strb	r2, [r3, #0]
	OptionsArray[1] = 0xff;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <OptionsToArray+0x64>)
 8000aaa:	22ff      	movs	r2, #255	; 0xff
 8000aac:	705a      	strb	r2, [r3, #1]

	OptionsArray[3] = TRM_OPTIONS_PACKET;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <OptionsToArray+0x64>)
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	70da      	strb	r2, [r3, #3]

	OptionsArrayAddFloat((float) 1234.5678);
 8000ab4:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000b00 <OptionsToArray+0x68>
 8000ab8:	f7ff ffb4 	bl	8000a24 <OptionsArrayAddFloat>
	OptionsArrayAddFloat((float) 5678.9);
 8000abc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000b04 <OptionsToArray+0x6c>
 8000ac0:	f7ff ffb0 	bl	8000a24 <OptionsArrayAddFloat>

	OptionsArray[2] = CntOptions - 3;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <OptionsToArray+0x60>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	3b03      	subs	r3, #3
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <OptionsToArray+0x64>)
 8000ad0:	709a      	strb	r2, [r3, #2]

	OptionsArray[CntOptions] = CalcCheckSumm(OptionsArray[2] + 1,
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <OptionsToArray+0x64>)
 8000ad4:	789b      	ldrb	r3, [r3, #2]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <OptionsToArray+0x60>)
 8000ade:	8812      	ldrh	r2, [r2, #0]
 8000ae0:	4614      	mov	r4, r2
 8000ae2:	4909      	ldr	r1, [pc, #36]	; (8000b08 <OptionsToArray+0x70>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 ffa1 	bl	8001a2c <CalcCheckSumm>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <OptionsToArray+0x64>)
 8000af0:	551a      	strb	r2, [r3, r4]
			&OptionsArray[2]);
}
 8000af2:	bf00      	nop
 8000af4:	bd98      	pop	{r3, r4, r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20004b38 	.word	0x20004b38
 8000afc:	20004944 	.word	0x20004944
 8000b00:	449a522b 	.word	0x449a522b
 8000b04:	45b17733 	.word	0x45b17733
 8000b08:	20004946 	.word	0x20004946

08000b0c <ArrayToOptions>:

void ArrayToOptions(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	float Tmp1, Tmp2;
	CntOptions = 4;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <ArrayToOptions+0x28>)
 8000b14:	2204      	movs	r2, #4
 8000b16:	801a      	strh	r2, [r3, #0]
	Tmp1 = OptionsArrayGetFloat();
 8000b18:	f7ff ffa0 	bl	8000a5c <OptionsArrayGetFloat>
 8000b1c:	ed87 0a01 	vstr	s0, [r7, #4]
	Tmp2 = OptionsArrayGetFloat();
 8000b20:	f7ff ff9c 	bl	8000a5c <OptionsArrayGetFloat>
 8000b24:	ed87 0a00 	vstr	s0, [r7]
	asm("Nop");
 8000b28:	bf00      	nop
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20004b38 	.word	0x20004b38

08000b38 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b3c:	f002 f9a0 	bl	8002e80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b40:	f000 f868 	bl	8000c14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b44:	f000 fec6 	bl	80018d4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b48:	f000 fe8e 	bl	8001868 <MX_DMA_Init>
	MX_TIM1_Init();
 8000b4c:	f000 f9c2 	bl	8000ed4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000b50:	f000 fab4 	bl	80010bc <MX_TIM2_Init>
	MX_TIM3_Init();
 8000b54:	f000 fb78 	bl	8001248 <MX_TIM3_Init>
	MX_TIM8_Init();
 8000b58:	f000 fccc 	bl	80014f4 <MX_TIM8_Init>
	MX_ADC1_Init();
 8000b5c:	f000 f8c4 	bl	8000ce8 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000b60:	f000 fe50 	bl	8001804 <MX_USART2_UART_Init>
	MX_TIM12_Init();
 8000b64:	f000 fdba 	bl	80016dc <MX_TIM12_Init>
	MX_CAN2_Init();
 8000b68:	f000 f97a 	bl	8000e60 <MX_CAN2_Init>
	MX_TIM4_Init();
 8000b6c:	f000 fc34 	bl	80013d8 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,SET);
	PWM_Off();
 8000b70:	f001 f868 	bl	8001c44 <PWM_Off>
	SetBuzzerFRQ(1000, 500);
 8000b74:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b7c:	f7ff fca4 	bl	80004c8 <SetBuzzerFRQ>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000b80:	f007 f9d8 	bl	8007f34 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of UARTTrmBinarySem */
	UARTTrmBinarySemHandle = osSemaphoreNew(1, 1, &UARTTrmBinarySem_attributes);
 8000b84:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <main+0xa4>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f007 faca 	bl	8008122 <osSemaphoreNew>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <main+0xa8>)
 8000b92:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <main+0xac>)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <main+0xb0>)
 8000b9a:	f007 fa15 	bl	8007fc8 <osThreadNew>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <main+0xb4>)
 8000ba2:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of UARTTx */
	UARTTxHandle = osThreadNew(StartUARTTx, NULL, &UARTTx_attributes);
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <main+0xb8>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <main+0xbc>)
 8000baa:	f007 fa0d 	bl	8007fc8 <osThreadNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <main+0xc0>)
 8000bb2:	6013      	str	r3, [r2, #0]

	/* creation of CANTask */
	CANTaskHandle = osThreadNew(CANEntry, NULL, &CANTask_attributes);
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <main+0xc4>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <main+0xc8>)
 8000bba:	f007 fa05 	bl	8007fc8 <osThreadNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <main+0xcc>)
 8000bc2:	6013      	str	r3, [r2, #0]

	/* creation of CfmPacket */
	CfmPacketHandle = osThreadNew(StartCfmPacket, NULL, &CfmPacket_attributes);
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <main+0xd0>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4810      	ldr	r0, [pc, #64]	; (8000c0c <main+0xd4>)
 8000bca:	f007 f9fd 	bl	8007fc8 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <main+0xd8>)
 8000bd2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000bd4:	f007 f9d2 	bl	8007f7c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000bd8:	e7fe      	b.n	8000bd8 <main+0xa0>
 8000bda:	bf00      	nop
 8000bdc:	0800b5bc 	.word	0x0800b5bc
 8000be0:	20004edc 	.word	0x20004edc
 8000be4:	0800b52c 	.word	0x0800b52c
 8000be8:	08001aed 	.word	0x08001aed
 8000bec:	20004b40 	.word	0x20004b40
 8000bf0:	0800b550 	.word	0x0800b550
 8000bf4:	08001b11 	.word	0x08001b11
 8000bf8:	20004be0 	.word	0x20004be0
 8000bfc:	0800b574 	.word	0x0800b574
 8000c00:	08001b65 	.word	0x08001b65
 8000c04:	20004fd8 	.word	0x20004fd8
 8000c08:	0800b598 	.word	0x0800b598
 8000c0c:	08001b75 	.word	0x08001b75
 8000c10:	20004e18 	.word	0x20004e18

08000c14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	; 0x50
 8000c18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	2230      	movs	r2, #48	; 0x30
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00a fc44 	bl	800b4b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <SystemClock_Config+0xd0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <SystemClock_Config+0xd0>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <SystemClock_Config+0xd0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000c84:	2304      	movs	r3, #4
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000c88:	2390      	movs	r3, #144	; 0x90
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c90:	2304      	movs	r3, #4
 8000c92:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fe99 	bl	80059d0 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x94>
		Error_Handler();
 8000ca4:	f000 ffc8 	bl	8001c38 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ca8:	230f      	movs	r3, #15
 8000caa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2302      	movs	r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cb8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f005 f8fa 	bl	8005ec0 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0xc2>
		Error_Handler();
 8000cd2:	f000 ffb1 	bl	8001c38 <Error_Handler>
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3750      	adds	r7, #80	; 0x50
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40007000 	.word	0x40007000

08000ce8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000cfa:	4b56      	ldr	r3, [pc, #344]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000cfc:	4a56      	ldr	r2, [pc, #344]	; (8000e58 <MX_ADC1_Init+0x170>)
 8000cfe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d00:	4b54      	ldr	r3, [pc, #336]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d06:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000d0c:	4b51      	ldr	r3, [pc, #324]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000d12:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d18:	4b4e      	ldr	r3, [pc, #312]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d20:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d26:	4b4b      	ldr	r3, [pc, #300]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d28:	4a4c      	ldr	r2, [pc, #304]	; (8000e5c <MX_ADC1_Init+0x174>)
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2c:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 8;
 8000d32:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d34:	2208      	movs	r2, #8
 8000d36:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d38:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d40:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000d46:	4843      	ldr	r0, [pc, #268]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d48:	f002 f8dc 	bl	8002f04 <HAL_ADC_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000d52:	f000 ff71 	bl	8001c38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000d56:	2304      	movs	r3, #4
 8000d58:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	483b      	ldr	r0, [pc, #236]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d68:	f002 fb7e 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8000d72:	f000 ff61 	bl	8001c38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000d76:	2305      	movs	r3, #5
 8000d78:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4619      	mov	r1, r3
 8000d82:	4834      	ldr	r0, [pc, #208]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000d84:	f002 fb70 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0xaa>
		Error_Handler();
 8000d8e:	f000 ff53 	bl	8001c38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000d92:	230a      	movs	r3, #10
 8000d94:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8000d96:	2303      	movs	r3, #3
 8000d98:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	482d      	ldr	r0, [pc, #180]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000da0:	f002 fb62 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0xc6>
		Error_Handler();
 8000daa:	f000 ff45 	bl	8001c38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8000dae:	230b      	movs	r3, #11
 8000db0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8000db2:	2304      	movs	r3, #4
 8000db4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4826      	ldr	r0, [pc, #152]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000dbc:	f002 fb54 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0xe2>
		Error_Handler();
 8000dc6:	f000 ff37 	bl	8001c38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8000dce:	2305      	movs	r3, #5
 8000dd0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481f      	ldr	r0, [pc, #124]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000dd8:	f002 fb46 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0xfe>
		Error_Handler();
 8000de2:	f000 ff29 	bl	8001c38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000de6:	230d      	movs	r3, #13
 8000de8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 8000dea:	2306      	movs	r3, #6
 8000dec:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dee:	463b      	mov	r3, r7
 8000df0:	4619      	mov	r1, r3
 8000df2:	4818      	ldr	r0, [pc, #96]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000df4:	f002 fb38 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC1_Init+0x11a>
		Error_Handler();
 8000dfe:	f000 ff1b 	bl	8001c38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000e02:	230e      	movs	r3, #14
 8000e04:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 8000e06:	2307      	movs	r3, #7
 8000e08:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000e10:	f002 fb2a 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x136>
		Error_Handler();
 8000e1a:	f000 ff0d 	bl	8001c38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8000e1e:	230f      	movs	r3, #15
 8000e20:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 8000e22:	2308      	movs	r3, #8
 8000e24:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480a      	ldr	r0, [pc, #40]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000e2c:	f002 fb1c 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC1_Init+0x152>
		Error_Handler();
 8000e36:	f000 feff 	bl	8001c38 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	hadc1.Instance->CR1 |= ADC_CR1_EOCIE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <MX_ADC1_Init+0x16c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0220 	orr.w	r2, r2, #32
 8000e48:	605a      	str	r2, [r3, #4]
	/* USER CODE END ADC1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20004c44 	.word	0x20004c44
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */
	//hcan2.Init.Mode = CAN_MODE_LOOPBACK;
	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e66:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <MX_CAN2_Init+0x70>)
 8000e68:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 5;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e82:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e86:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000e8a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000eb2:	f002 fd83 	bl	80039bc <HAL_CAN_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_CAN2_Init+0x60>
		Error_Handler();
 8000ebc:	f000 febc 	bl	8001c38 <Error_Handler>

	 HAL_CAN_Start(&hcan2);
	 HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	 */

	CAN_Config(&hcan2, 0);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4802      	ldr	r0, [pc, #8]	; (8000ecc <MX_CAN2_Init+0x6c>)
 8000ec4:	f7ff fb44 	bl	8000550 <CAN_Config>

	/* USER CODE END CAN2_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20004c8c 	.word	0x20004c8c
 8000ed0:	40006800 	.word	0x40006800

08000ed4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b096      	sub	sp, #88	; 0x58
 8000ed8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000eda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ee8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2220      	movs	r2, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00a facf 	bl	800b4b0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000f12:	4b68      	ldr	r3, [pc, #416]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f14:	4a68      	ldr	r2, [pc, #416]	; (80010b8 <MX_TIM1_Init+0x1e4>)
 8000f16:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000f18:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b65      	ldr	r3, [pc, #404]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 7200;
 8000f24:	4b63      	ldr	r3, [pc, #396]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f26:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000f2a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000f32:	4b60      	ldr	r3, [pc, #384]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f38:	4b5e      	ldr	r3, [pc, #376]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000f3e:	485d      	ldr	r0, [pc, #372]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f40:	f005 f9ec 	bl	800631c <HAL_TIM_Base_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM1_Init+0x7a>
		Error_Handler();
 8000f4a:	f000 fe75 	bl	8001c38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000f54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4856      	ldr	r0, [pc, #344]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f5c:	f005 fcbe 	bl	80068dc <HAL_TIM_ConfigClockSource>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0x96>
		Error_Handler();
 8000f66:	f000 fe67 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000f6a:	4852      	ldr	r0, [pc, #328]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f6c:	f005 fa96 	bl	800649c <HAL_TIM_PWM_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8000f76:	f000 fe5f 	bl	8001c38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000f82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f86:	4619      	mov	r1, r3
 8000f88:	484a      	ldr	r0, [pc, #296]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000f8a:	f006 f87d 	bl	8007088 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000f94:	f000 fe50 	bl	8001c38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f98:	2360      	movs	r3, #96	; 0x60
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	483d      	ldr	r0, [pc, #244]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000fbe:	f005 fbcf 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8000fc8:	f000 fe36 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4837      	ldr	r0, [pc, #220]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000fd6:	f005 fbc3 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8000fe0:	f000 fe2a 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	2208      	movs	r2, #8
 8000fea:	4619      	mov	r1, r3
 8000fec:	4831      	ldr	r0, [pc, #196]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8000fee:	f005 fbb7 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8000ff8:	f000 fe1e 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	220c      	movs	r2, #12
 8001002:	4619      	mov	r1, r3
 8001004:	482b      	ldr	r0, [pc, #172]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8001006:	f005 fbab 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8001010:	f000 fe12 	bl	8001c38 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	481f      	ldr	r0, [pc, #124]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8001038:	f006 f8a2 	bl	8007180 <HAL_TIMEx_ConfigBreakDeadTime>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0x172>
			!= HAL_OK) {
		Error_Handler();
 8001042:	f000 fdf9 	bl	8001c38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	// TIM1->CR1=0x1;
	htim1.Instance->CR1 |= TIM_CR1_CEN;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0201 	orr.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
	htim1.Instance->BDTR |= TIM_BDTR_MOE;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
	htim1.Instance->CCER |= TIM_CCER_CC1E;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6a1a      	ldr	r2, [r3, #32]
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC2E;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0210 	orr.w	r2, r2, #16
 8001084:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC3E;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001094:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC4E;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6a1a      	ldr	r2, [r3, #32]
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010a4:	621a      	str	r2, [r3, #32]

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <MX_TIM1_Init+0x1e0>)
 80010a8:	f001 f8e4 	bl	8002274 <HAL_TIM_MspPostInit>

}
 80010ac:	bf00      	nop
 80010ae:	3758      	adds	r7, #88	; 0x58
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20004e94 	.word	0x20004e94
 80010b8:	40010000 	.word	0x40010000

080010bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]
 80010ea:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80010ec:	4b55      	ldr	r3, [pc, #340]	; (8001244 <MX_TIM2_Init+0x188>)
 80010ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <MX_TIM2_Init+0x188>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b52      	ldr	r3, [pc, #328]	; (8001244 <MX_TIM2_Init+0x188>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3600;
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <MX_TIM2_Init+0x188>)
 8001102:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001106:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <MX_TIM2_Init+0x188>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b4d      	ldr	r3, [pc, #308]	; (8001244 <MX_TIM2_Init+0x188>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001114:	484b      	ldr	r0, [pc, #300]	; (8001244 <MX_TIM2_Init+0x188>)
 8001116:	f005 f901 	bl	800631c <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x68>
		Error_Handler();
 8001120:	f000 fd8a 	bl	8001c38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800112a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112e:	4619      	mov	r1, r3
 8001130:	4844      	ldr	r0, [pc, #272]	; (8001244 <MX_TIM2_Init+0x188>)
 8001132:	f005 fbd3 	bl	80068dc <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x84>
		Error_Handler();
 800113c:	f000 fd7c 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001140:	4840      	ldr	r0, [pc, #256]	; (8001244 <MX_TIM2_Init+0x188>)
 8001142:	f005 f9ab 	bl	800649c <HAL_TIM_PWM_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x94>
		Error_Handler();
 800114c:	f000 fd74 	bl	8001c38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4619      	mov	r1, r3
 800115e:	4839      	ldr	r0, [pc, #228]	; (8001244 <MX_TIM2_Init+0x188>)
 8001160:	f005 ff92 	bl	8007088 <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800116a:	f000 fd65 	bl	8001c38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116e:	2360      	movs	r3, #96	; 0x60
 8001170:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	4619      	mov	r1, r3
 8001184:	482f      	ldr	r0, [pc, #188]	; (8001244 <MX_TIM2_Init+0x188>)
 8001186:	f005 faeb 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001190:	f000 fd52 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2204      	movs	r2, #4
 8001198:	4619      	mov	r1, r3
 800119a:	482a      	ldr	r0, [pc, #168]	; (8001244 <MX_TIM2_Init+0x188>)
 800119c:	f005 fae0 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80011a6:	f000 fd47 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2208      	movs	r2, #8
 80011ae:	4619      	mov	r1, r3
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <MX_TIM2_Init+0x188>)
 80011b2:	f005 fad5 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 80011bc:	f000 fd3c 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	220c      	movs	r2, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	481f      	ldr	r0, [pc, #124]	; (8001244 <MX_TIM2_Init+0x188>)
 80011c8:	f005 faca 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 80011d2:	f000 fd31 	bl	8001c38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	htim2.Instance->CR1 |= TIM_CR1_CEN;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_TIM2_Init+0x188>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_TIM2_Init+0x188>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0201 	orr.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
	htim2.Instance->BDTR |= TIM_BDTR_MOE;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_TIM2_Init+0x188>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_TIM2_Init+0x188>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_TIM2_Init+0x188>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_TIM2_Init+0x188>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0201 	orr.w	r2, r2, #1
 8001204:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_TIM2_Init+0x188>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a1a      	ldr	r2, [r3, #32]
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_TIM2_Init+0x188>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0210 	orr.w	r2, r2, #16
 8001214:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC3E;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_TIM2_Init+0x188>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6a1a      	ldr	r2, [r3, #32]
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_TIM2_Init+0x188>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001224:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC4E;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_TIM2_Init+0x188>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6a1a      	ldr	r2, [r3, #32]
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <MX_TIM2_Init+0x188>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001234:	621a      	str	r2, [r3, #32]

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <MX_TIM2_Init+0x188>)
 8001238:	f001 f81c 	bl	8002274 <HAL_TIM_MspPostInit>

}
 800123c:	bf00      	nop
 800123e:	3738      	adds	r7, #56	; 0x38
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20004ef8 	.word	0x20004ef8

08001248 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800124e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001278:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <MX_TIM3_Init+0x188>)
 800127a:	4a56      	ldr	r2, [pc, #344]	; (80013d4 <MX_TIM3_Init+0x18c>)
 800127c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b52      	ldr	r3, [pc, #328]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3600;
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <MX_TIM3_Init+0x188>)
 800128c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001290:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <MX_TIM3_Init+0x188>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800129e:	484c      	ldr	r0, [pc, #304]	; (80013d0 <MX_TIM3_Init+0x188>)
 80012a0:	f005 f83c 	bl	800631c <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0x66>
		Error_Handler();
 80012aa:	f000 fcc5 	bl	8001c38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80012b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b8:	4619      	mov	r1, r3
 80012ba:	4845      	ldr	r0, [pc, #276]	; (80013d0 <MX_TIM3_Init+0x188>)
 80012bc:	f005 fb0e 	bl	80068dc <HAL_TIM_ConfigClockSource>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0x82>
		Error_Handler();
 80012c6:	f000 fcb7 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80012ca:	4841      	ldr	r0, [pc, #260]	; (80013d0 <MX_TIM3_Init+0x188>)
 80012cc:	f005 f8e6 	bl	800649c <HAL_TIM_PWM_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0x92>
		Error_Handler();
 80012d6:	f000 fcaf 	bl	8001c38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	4619      	mov	r1, r3
 80012e8:	4839      	ldr	r0, [pc, #228]	; (80013d0 <MX_TIM3_Init+0x188>)
 80012ea:	f005 fecd 	bl	8007088 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80012f4:	f000 fca0 	bl	8001c38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f8:	2360      	movs	r3, #96	; 0x60
 80012fa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	4830      	ldr	r0, [pc, #192]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001310:	f005 fa26 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800131a:	f000 fc8d 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	482a      	ldr	r0, [pc, #168]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001326:	f005 fa1b 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8001330:	f000 fc82 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2208      	movs	r2, #8
 8001338:	4619      	mov	r1, r3
 800133a:	4825      	ldr	r0, [pc, #148]	; (80013d0 <MX_TIM3_Init+0x188>)
 800133c:	f005 fa10 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8001346:	f000 fc77 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	220c      	movs	r2, #12
 800134e:	4619      	mov	r1, r3
 8001350:	481f      	ldr	r0, [pc, #124]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001352:	f005 fa05 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 800135c:	f000 fc6c 	bl	8001c38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	htim3.Instance->CR1 |= TIM_CR1_CEN;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0201 	orr.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
	htim3.Instance->BDTR |= TIM_BDTR_MOE;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800137e:	645a      	str	r2, [r3, #68]	; 0x44
	htim3.Instance->CCER |= TIM_CCER_CC1E;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a1a      	ldr	r2, [r3, #32]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	621a      	str	r2, [r3, #32]
	htim3.Instance->CCER |= TIM_CCER_CC2E;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a1a      	ldr	r2, [r3, #32]
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_TIM3_Init+0x188>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0210 	orr.w	r2, r2, #16
 800139e:	621a      	str	r2, [r3, #32]
	htim3.Instance->CCER |= TIM_CCER_CC3E;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_TIM3_Init+0x188>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_TIM3_Init+0x188>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ae:	621a      	str	r2, [r3, #32]
	htim3.Instance->CCER |= TIM_CCER_CC4E;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_TIM3_Init+0x188>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a1a      	ldr	r2, [r3, #32]
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_TIM3_Init+0x188>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013be:	621a      	str	r2, [r3, #32]
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <MX_TIM3_Init+0x188>)
 80013c2:	f000 ff57 	bl	8002274 <HAL_TIM_MspPostInit>

}
 80013c6:	bf00      	nop
 80013c8:	3738      	adds	r7, #56	; 0x38
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20004bec 	.word	0x20004bec
 80013d4:	40000400 	.word	0x40000400

080013d8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001408:	4b38      	ldr	r3, [pc, #224]	; (80014ec <MX_TIM4_Init+0x114>)
 800140a:	4a39      	ldr	r2, [pc, #228]	; (80014f0 <MX_TIM4_Init+0x118>)
 800140c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 10;
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <MX_TIM4_Init+0x114>)
 8001410:	220a      	movs	r2, #10
 8001412:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b35      	ldr	r3, [pc, #212]	; (80014ec <MX_TIM4_Init+0x114>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1800;
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <MX_TIM4_Init+0x114>)
 800141c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001420:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <MX_TIM4_Init+0x114>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b30      	ldr	r3, [pc, #192]	; (80014ec <MX_TIM4_Init+0x114>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800142e:	482f      	ldr	r0, [pc, #188]	; (80014ec <MX_TIM4_Init+0x114>)
 8001430:	f004 ff74 	bl	800631c <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM4_Init+0x66>
		Error_Handler();
 800143a:	f000 fbfd 	bl	8001c38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	4619      	mov	r1, r3
 800144a:	4828      	ldr	r0, [pc, #160]	; (80014ec <MX_TIM4_Init+0x114>)
 800144c:	f005 fa46 	bl	80068dc <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM4_Init+0x82>
		Error_Handler();
 8001456:	f000 fbef 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800145a:	4824      	ldr	r0, [pc, #144]	; (80014ec <MX_TIM4_Init+0x114>)
 800145c:	f005 f81e 	bl	800649c <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM4_Init+0x92>
		Error_Handler();
 8001466:	f000 fbe7 	bl	8001c38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	481c      	ldr	r0, [pc, #112]	; (80014ec <MX_TIM4_Init+0x114>)
 800147a:	f005 fe05 	bl	8007088 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001484:	f000 fbd8 	bl	8001c38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	; 0x60
 800148a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	220c      	movs	r2, #12
 800149c:	4619      	mov	r1, r3
 800149e:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_TIM4_Init+0x114>)
 80014a0:	f005 f95e 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80014aa:	f000 fbc5 	bl	8001c38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	htim4.Instance->CR1 |= TIM_CR1_CEN;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_TIM4_Init+0x114>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_TIM4_Init+0x114>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0201 	orr.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
	htim4.Instance->BDTR |= TIM_BDTR_MOE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_TIM4_Init+0x114>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_TIM4_Init+0x114>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
	// htim4.Instance->CCER|=TIM_CCER_CC1E;
	// htim4.Instance->CCER|=TIM_CCER_CC2E;
	// htim4.Instance->CCER|=TIM_CCER_CC3E;
	htim4.Instance->CCER |= TIM_CCER_CC4E;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_TIM4_Init+0x114>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a1a      	ldr	r2, [r3, #32]
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <MX_TIM4_Init+0x114>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014dc:	621a      	str	r2, [r3, #32]
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM4_Init+0x114>)
 80014e0:	f000 fec8 	bl	8002274 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3738      	adds	r7, #56	; 0x38
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20004b8c 	.word	0x20004b8c
 80014f0:	40000800 	.word	0x40000800

080014f4 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001508:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2220      	movs	r2, #32
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f009 ffbf 	bl	800b4b0 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001532:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001534:	4a68      	ldr	r2, [pc, #416]	; (80016d8 <MX_TIM8_Init+0x1e4>)
 8001536:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001538:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7200;
 8001544:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001546:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800154a:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001552:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800155e:	485d      	ldr	r0, [pc, #372]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001560:	f004 fedc 	bl	800631c <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM8_Init+0x7a>
		Error_Handler();
 800156a:	f000 fb65 	bl	8001c38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001574:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001578:	4619      	mov	r1, r3
 800157a:	4856      	ldr	r0, [pc, #344]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800157c:	f005 f9ae 	bl	80068dc <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM8_Init+0x96>
		Error_Handler();
 8001586:	f000 fb57 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800158a:	4852      	ldr	r0, [pc, #328]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800158c:	f004 ff86 	bl	800649c <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001596:	f000 fb4f 	bl	8001c38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80015a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a6:	4619      	mov	r1, r3
 80015a8:	484a      	ldr	r0, [pc, #296]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 80015aa:	f005 fd6d 	bl	8007088 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80015b4:	f000 fb40 	bl	8001c38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	; 0x60
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	483d      	ldr	r0, [pc, #244]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 80015de:	f005 f8bf 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80015e8:	f000 fb26 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	2204      	movs	r2, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4837      	ldr	r0, [pc, #220]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 80015f6:	f005 f8b3 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001600:	f000 fb1a 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2208      	movs	r2, #8
 800160a:	4619      	mov	r1, r3
 800160c:	4831      	ldr	r0, [pc, #196]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800160e:	f005 f8a7 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM8_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8001618:	f000 fb0e 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	220c      	movs	r2, #12
 8001622:	4619      	mov	r1, r3
 8001624:	482b      	ldr	r0, [pc, #172]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001626:	f005 f89b 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM8_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8001630:	f000 fb02 	bl	8001c38 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	481f      	ldr	r0, [pc, #124]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001658:	f005 fd92 	bl	8007180 <HAL_TIMEx_ConfigBreakDeadTime>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM8_Init+0x172>
			!= HAL_OK) {
		Error_Handler();
 8001662:	f000 fae9 	bl	8001c38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	htim8.Instance->CR1 |= TIM_CR1_CEN;
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
	htim8.Instance->BDTR |= TIM_BDTR_MOE;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
	htim8.Instance->CCER |= TIM_CCER_CC1E;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a1a      	ldr	r2, [r3, #32]
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	621a      	str	r2, [r3, #32]
	htim8.Instance->CCER |= TIM_CCER_CC2E;
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0210 	orr.w	r2, r2, #16
 80016a4:	621a      	str	r2, [r3, #32]
	htim8.Instance->CCER |= TIM_CCER_CC3E;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016b4:	621a      	str	r2, [r3, #32]
	htim8.Instance->CCER |= TIM_CCER_CC4E;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016c4:	621a      	str	r2, [r3, #32]
	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <MX_TIM8_Init+0x1e0>)
 80016c8:	f000 fdd4 	bl	8002274 <HAL_TIM_MspPostInit>

}
 80016cc:	bf00      	nop
 80016ce:	3758      	adds	r7, #88	; 0x58
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20004b44 	.word	0x20004b44
 80016d8:	40010400 	.word	0x40010400

080016dc <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	; 0x30
 80016e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016e2:	f107 0320 	add.w	r3, r7, #32
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <MX_TIM12_Init+0x120>)
 8001704:	4a3e      	ldr	r2, [pc, #248]	; (8001800 <MX_TIM12_Init+0x124>)
 8001706:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8001708:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <MX_TIM12_Init+0x120>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <MX_TIM12_Init+0x120>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 4200;
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <MX_TIM12_Init+0x120>)
 8001716:	f241 0268 	movw	r2, #4200	; 0x1068
 800171a:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b37      	ldr	r3, [pc, #220]	; (80017fc <MX_TIM12_Init+0x120>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <MX_TIM12_Init+0x120>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 8001728:	4834      	ldr	r0, [pc, #208]	; (80017fc <MX_TIM12_Init+0x120>)
 800172a:	f004 fdf7 	bl	800631c <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM12_Init+0x5c>
		Error_Handler();
 8001734:	f000 fa80 	bl	8001c38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	4619      	mov	r1, r3
 8001744:	482d      	ldr	r0, [pc, #180]	; (80017fc <MX_TIM12_Init+0x120>)
 8001746:	f005 f8c9 	bl	80068dc <HAL_TIM_ConfigClockSource>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM12_Init+0x78>
		Error_Handler();
 8001750:	f000 fa72 	bl	8001c38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8001754:	4829      	ldr	r0, [pc, #164]	; (80017fc <MX_TIM12_Init+0x120>)
 8001756:	f004 fea1 	bl	800649c <HAL_TIM_PWM_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM12_Init+0x88>
		Error_Handler();
 8001760:	f000 fa6a 	bl	8001c38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 3000;
 8001768:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800176c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	481f      	ldr	r0, [pc, #124]	; (80017fc <MX_TIM12_Init+0x120>)
 800177e:	f004 ffef 	bl	8006760 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM12_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001788:	f000 fa56 	bl	8001c38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */
	htim12.Instance->CR1 |= TIM_CR1_CEN;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <MX_TIM12_Init+0x120>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_TIM12_Init+0x120>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
	htim12.Instance->BDTR |= TIM_BDTR_MOE;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_TIM12_Init+0x120>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_TIM12_Init+0x120>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
	htim12.Instance->CCER |= TIM_CCER_CC1E;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MX_TIM12_Init+0x120>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_TIM12_Init+0x120>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	621a      	str	r2, [r3, #32]
	htim12.Instance->CCER |= TIM_CCER_CC2E;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_TIM12_Init+0x120>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6a1a      	ldr	r2, [r3, #32]
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_TIM12_Init+0x120>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0210 	orr.w	r2, r2, #16
 80017ca:	621a      	str	r2, [r3, #32]
	htim12.Instance->CCER |= TIM_CCER_CC3E;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_TIM12_Init+0x120>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a1a      	ldr	r2, [r3, #32]
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <MX_TIM12_Init+0x120>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017da:	621a      	str	r2, [r3, #32]
	htim12.Instance->CCER |= TIM_CCER_CC4E;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <MX_TIM12_Init+0x120>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a1a      	ldr	r2, [r3, #32]
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_TIM12_Init+0x120>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017ea:	621a      	str	r2, [r3, #32]
	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <MX_TIM12_Init+0x120>)
 80017ee:	f000 fd41 	bl	8002274 <HAL_TIM_MspPostInit>

}
 80017f2:	bf00      	nop
 80017f4:	3730      	adds	r7, #48	; 0x30
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20004f88 	.word	0x20004f88
 8001800:	40001800 	.word	0x40001800

08001804 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <MX_USART2_UART_Init+0x60>)
 800180c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 800183c:	f005 fd06 	bl	800724c <HAL_UART_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001846:	f000 f9f7 	bl	8001c38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0220 	orr.w	r2, r2, #32
 8001858:	60da      	str	r2, [r3, #12]

	/* USER CODE END USART2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20004f44 	.word	0x20004f44
 8001864:	40004400 	.word	0x40004400

08001868 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_DMA_Init+0x68>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <MX_DMA_Init+0x68>)
 8001878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_DMA_Init+0x68>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_DMA_Init+0x68>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <MX_DMA_Init+0x68>)
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_DMA_Init+0x68>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2105      	movs	r1, #5
 80018aa:	2011      	movs	r0, #17
 80018ac:	f002 ffd6 	bl	800485c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018b0:	2011      	movs	r0, #17
 80018b2:	f002 ffef 	bl	8004894 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	2038      	movs	r0, #56	; 0x38
 80018bc:	f002 ffce 	bl	800485c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018c0:	2038      	movs	r0, #56	; 0x38
 80018c2:	f002 ffe7 	bl	8004894 <HAL_NVIC_EnableIRQ>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <MX_GPIO_Init+0x148>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a4a      	ldr	r2, [pc, #296]	; (8001a1c <MX_GPIO_Init+0x148>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <MX_GPIO_Init+0x148>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <MX_GPIO_Init+0x148>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a43      	ldr	r2, [pc, #268]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a3c      	ldr	r2, [pc, #240]	; (8001a1c <MX_GPIO_Init+0x148>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a35      	ldr	r2, [pc, #212]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a2e      	ldr	r2, [pc, #184]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <MX_GPIO_Init+0x148>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_GPIO_Init+0x148>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <MX_GPIO_Init+0x148>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001992:	2201      	movs	r2, #1
 8001994:	21ff      	movs	r1, #255	; 0xff
 8001996:	4822      	ldr	r0, [pc, #136]	; (8001a20 <MX_GPIO_Init+0x14c>)
 8001998:	f004 f800 	bl	800599c <HAL_GPIO_WritePin>
			GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6
					| GPIO_PIN_7 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800199c:	2201      	movs	r2, #1
 800199e:	f640 7187 	movw	r1, #3975	; 0xf87
 80019a2:	4820      	ldr	r0, [pc, #128]	; (8001a24 <MX_GPIO_Init+0x150>)
 80019a4:	f003 fffa 	bl	800599c <HAL_GPIO_WritePin>
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_0
					| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14,
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80019ae:	481d      	ldr	r0, [pc, #116]	; (8001a24 <MX_GPIO_Init+0x150>)
 80019b0:	f003 fff4 	bl	800599c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2120      	movs	r1, #32
 80019b8:	481b      	ldr	r0, [pc, #108]	; (8001a28 <MX_GPIO_Init+0x154>)
 80019ba:	f003 ffef 	bl	800599c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PE2 PE3 PE4 PE5
	 PE6 PE7 PE0 PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 80019be:	23ff      	movs	r3, #255	; 0xff
 80019c0:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_0 | GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4812      	ldr	r0, [pc, #72]	; (8001a20 <MX_GPIO_Init+0x14c>)
 80019d6:	f003 fe45 	bl	8005664 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD0
	 PD1 PD2 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 80019da:	f647 7387 	movw	r3, #32647	; 0x7f87
 80019de:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	480c      	ldr	r0, [pc, #48]	; (8001a24 <MX_GPIO_Init+0x150>)
 80019f4:	f003 fe36 	bl	8005664 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019f8:	2320      	movs	r3, #32
 80019fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	; (8001a28 <MX_GPIO_Init+0x154>)
 8001a10:	f003 fe28 	bl	8005664 <HAL_GPIO_Init>

}
 8001a14:	bf00      	nop
 8001a16:	3730      	adds	r7, #48	; 0x30
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40020400 	.word	0x40020400

08001a2c <CalcCheckSumm>:

/* USER CODE BEGIN 4 */

uint8_t CalcCheckSumm(uint16_t N, uint8_t *Array) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	80fb      	strh	r3, [r7, #6]
	uint16_t Summ = 0, j;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	81fb      	strh	r3, [r7, #14]

	for (j = 0; j < N; j++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	81bb      	strh	r3, [r7, #12]
 8001a40:	e00a      	b.n	8001a58 <CalcCheckSumm+0x2c>
		Summ = Summ + Array[j];
 8001a42:	89bb      	ldrh	r3, [r7, #12]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	89fb      	ldrh	r3, [r7, #14]
 8001a4e:	4413      	add	r3, r2
 8001a50:	81fb      	strh	r3, [r7, #14]
	for (j = 0; j < N; j++)
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	3301      	adds	r3, #1
 8001a56:	81bb      	strh	r3, [r7, #12]
 8001a58:	89ba      	ldrh	r2, [r7, #12]
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3f0      	bcc.n	8001a42 <CalcCheckSumm+0x16>

	Summ = ~Summ;
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	81fb      	strh	r3, [r7, #14]

	return (unsigned char) Summ;
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	b2db      	uxtb	r3, r3

}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	if (AdcHandle == &hadc1) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_ADC_ConvCpltCallback+0x20>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d100      	bne.n	8001a8a <HAL_ADC_ConvCpltCallback+0x12>
		asm("Nop");
 8001a88:	bf00      	nop
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20004c44 	.word	0x20004c44

08001a9c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	if (hcan->Instance == CAN2) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d102      	bne.n	8001ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		processCAN2Packet(hcan);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe fe48 	bl	8000744 <processCAN2Packet>
	}

}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40006800 	.word	0x40006800

08001ac0 <HAL_UART_TxCpltCallback>:
 ReceivePacketUART(&huart2);
 }
 }

 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

	if (huart == &huart2) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_UART_TxCpltCallback+0x24>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d104      	bne.n	8001ada <HAL_UART_TxCpltCallback+0x1a>

		osSemaphoreRelease(UARTTrmBinarySemHandle);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_UART_TxCpltCallback+0x28>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f006 fbff 	bl	80082d8 <osSemaphoreRelease>
	}
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20004f44 	.word	0x20004f44
 8001ae8:	20004edc 	.word	0x20004edc

08001aec <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
		/*    HAL_ADC_Start(&hadc1);
		 HAL_ADC_PollForConversion(&hadc1, 100);
		 adcResult = HAL_ADC_GetValue(&hadc1);
		 HAL_ADC_Stop(&hadc1);
		 */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8001af4:	2208      	movs	r2, #8
 8001af6:	4904      	ldr	r1, [pc, #16]	; (8001b08 <StartDefaultTask+0x1c>)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <StartDefaultTask+0x20>)
 8001afa:	f001 fb87 	bl	800320c <HAL_ADC_Start_DMA>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,SET);

		asm("Nop");
 8001afe:	bf00      	nop

		osDelay(1);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f006 faf3 	bl	80080ec <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8001b06:	e7f5      	b.n	8001af4 <StartDefaultTask+0x8>
 8001b08:	20004fdc 	.word	0x20004fdc
 8001b0c:	20004c44 	.word	0x20004c44

08001b10 <StartUARTTx>:
 * @brief Function implementing the UARTTx thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTTx */
void StartUARTTx(void *argument) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUARTTx */
	osStatus_t stat;

	/* Infinite loop */
	for (;;) {
		if (Starting) {
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <StartUARTTx+0x48>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <StartUARTTx+0x20>
			Starting = 0;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <StartUARTTx+0x48>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
			osDelay(5000);
 8001b26:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b2a:	f006 fadf 	bl	80080ec <osDelay>
 8001b2e:	e7f3      	b.n	8001b18 <StartUARTTx+0x8>
		} else {
			stat = osSemaphoreAcquire(UARTTrmBinarySemHandle, 0);
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <StartUARTTx+0x4c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f006 fb7c 	bl	8008234 <osSemaphoreAcquire>
 8001b3c:	60f8      	str	r0, [r7, #12]
			if (stat == osOK) {
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <StartUARTTx+0x3c>
				TrmDataPacketUART(&huart2);
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <StartUARTTx+0x50>)
 8001b46:	f001 f813 	bl	8002b70 <TrmDataPacketUART>
 8001b4a:	e000      	b.n	8001b4e <StartUARTTx+0x3e>
			} else
				asm("Nop");
 8001b4c:	bf00      	nop

			osDelay(10);
 8001b4e:	200a      	movs	r0, #10
 8001b50:	f006 facc 	bl	80080ec <osDelay>
		if (Starting) {
 8001b54:	e7e0      	b.n	8001b18 <StartUARTTx+0x8>
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20004edc 	.word	0x20004edc
 8001b60:	20004f44 	.word	0x20004f44

08001b64 <CANEntry>:
 * @brief Function implementing the CANTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CANEntry */
void CANEntry(void *argument) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CANEntry */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8001b6c:	2064      	movs	r0, #100	; 0x64
 8001b6e:	f006 fabd 	bl	80080ec <osDelay>
 8001b72:	e7fb      	b.n	8001b6c <CANEntry+0x8>

08001b74 <StartCfmPacket>:
 * @brief Function implementing the CfmPacket thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCfmPacket */
void StartCfmPacket(void *argument) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCfmPacket */
	osStatus_t stat;

	/* Infinite loop */
	for (;;) {
		if (ConfirmCMD) {
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <StartCfmPacket+0x3c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d011      	beq.n	8001ba8 <StartCfmPacket+0x34>
			stat = osSemaphoreAcquire(UARTTrmBinarySemHandle, 0);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <StartCfmPacket+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f006 fb52 	bl	8008234 <osSemaphoreAcquire>
 8001b90:	60f8      	str	r0, [r7, #12]
			if (stat == osOK) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d106      	bne.n	8001ba6 <StartCfmPacket+0x32>
				ConfirmCMD = 0;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <StartCfmPacket+0x3c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
				TrmCfmPacketUART(&huart2);
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <StartCfmPacket+0x44>)
 8001ba0:	f001 f90e 	bl	8002dc0 <TrmCfmPacketUART>
 8001ba4:	e000      	b.n	8001ba8 <StartCfmPacket+0x34>
			} else
				asm("Nop");
 8001ba6:	bf00      	nop
		}

		osDelay(1);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f006 fa9f 	bl	80080ec <osDelay>
		if (ConfirmCMD) {
 8001bae:	e7e5      	b.n	8001b7c <StartCfmPacket+0x8>
 8001bb0:	2000506a 	.word	0x2000506a
 8001bb4:	20004edc 	.word	0x20004edc
 8001bb8:	20004f44 	.word	0x20004f44

08001bbc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
//	  if (htim->Instance == TIM14) {
	//   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 8);
	//}
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001bce:	f001 f979 	bl	8002ec4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM14) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d120      	bne.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x62>
		if (CntRxTimeOut) {
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00c      	beq.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x42>
			CntRxTimeOut--;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bee:	801a      	strh	r2, [r3, #0]
			if (!CntRxTimeOut) {
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x42>
				GettingPacketRx_FL = 0;
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
			}
		}
		if (BuzzerCnt) {
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x62>
			BuzzerCnt--;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c10:	801a      	strh	r2, [r3, #0]
			if (!BuzzerCnt) {
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x62>
				BuzzerOff();
 8001c1a:	f7fe fc8b 	bl	8000534 <BuzzerOff>
			}
		}
	}

	/* USER CODE END Callback 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40002000 	.word	0x40002000
 8001c2c:	20005066 	.word	0x20005066
 8001c30:	20005061 	.word	0x20005061
 8001c34:	20004940 	.word	0x20004940

08001c38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c40:	e7fe      	b.n	8001c40 <Error_Handler+0x8>
	...

08001c44 <PWM_Off>:
#include "main.h"



void PWM_Off(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
htim2.Instance->CCR1=htim2.Instance->CCR2=htim2.Instance->CCR3=htim2.Instance->CCR4=0;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <PWM_Off+0x44>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <PWM_Off+0x44>)
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c56:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <PWM_Off+0x44>)
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	6393      	str	r3, [r2, #56]	; 0x38
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <PWM_Off+0x44>)
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	6353      	str	r3, [r2, #52]	; 0x34
htim3.Instance->CCR1=htim3.Instance->CCR2=htim3.Instance->CCR3=htim3.Instance->CCR4=0;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <PWM_Off+0x48>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <PWM_Off+0x48>)
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <PWM_Off+0x48>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	6393      	str	r3, [r2, #56]	; 0x38
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <PWM_Off+0x48>)
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20004ef8 	.word	0x20004ef8
 8001c8c:	20004bec 	.word	0x20004bec

08001c90 <SetMotorPWM>:




void SetMotorPWM(int16_t PWM,uint16_t MotorNum)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	460a      	mov	r2, r1
 8001c9a:	80fb      	strh	r3, [r7, #6]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	80bb      	strh	r3, [r7, #4]

	if (PWM>MAX_PWM)
 8001ca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca4:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	dd02      	ble.n	8001cb2 <SetMotorPWM+0x22>
		PWM=MAX_PWM;
 8001cac:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001cb0:	80fb      	strh	r3, [r7, #6]
	if (PWM<-MAX_PWM)
 8001cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <SetMotorPWM+0x220>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	da02      	bge.n	8001cc2 <SetMotorPWM+0x32>
		PWM=-MAX_PWM;
 8001cbc:	f24f 2354 	movw	r3, #62036	; 0xf254
 8001cc0:	80fb      	strh	r3, [r7, #6]


	switch (MotorNum)
 8001cc2:	88bb      	ldrh	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	f200 80ec 	bhi.w	8001ea4 <SetMotorPWM+0x214>
 8001ccc:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <SetMotorPWM+0x44>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001cf5 	.word	0x08001cf5
 8001cd8:	08001d27 	.word	0x08001d27
 8001cdc:	08001d59 	.word	0x08001d59
 8001ce0:	08001d8b 	.word	0x08001d8b
 8001ce4:	08001dbd 	.word	0x08001dbd
 8001ce8:	08001df7 	.word	0x08001df7
 8001cec:	08001e31 	.word	0x08001e31
 8001cf0:	08001e6b 	.word	0x08001e6b
	{
	case MOTOR_L1:
		if (PWM>=0)
 8001cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db09      	blt.n	8001d10 <SetMotorPWM+0x80>
		{
			htim2.Instance->CCR1=PWM;
 8001cfc:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <SetMotorPWM+0x224>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2=0;
 8001d06:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <SetMotorPWM+0x224>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			htim2.Instance->CCR1=0;
			htim2.Instance->CCR2=-PWM;
		}
		break;
 8001d0e:	e0c9      	b.n	8001ea4 <SetMotorPWM+0x214>
			htim2.Instance->CCR1=0;
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <SetMotorPWM+0x224>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2=-PWM;
 8001d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1c:	425a      	negs	r2, r3
 8001d1e:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <SetMotorPWM+0x224>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001d24:	e0be      	b.n	8001ea4 <SetMotorPWM+0x214>
	case MOTOR_L2:
		if (PWM>=0)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db09      	blt.n	8001d42 <SetMotorPWM+0xb2>
		{
			htim2.Instance->CCR3=PWM;
 8001d2e:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <SetMotorPWM+0x224>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4=0;
 8001d38:	4b5e      	ldr	r3, [pc, #376]	; (8001eb4 <SetMotorPWM+0x224>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			htim2.Instance->CCR3=0;
			htim2.Instance->CCR4=-PWM;
		}
		break;
 8001d40:	e0b0      	b.n	8001ea4 <SetMotorPWM+0x214>
			htim2.Instance->CCR3=0;
 8001d42:	4b5c      	ldr	r3, [pc, #368]	; (8001eb4 <SetMotorPWM+0x224>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4=-PWM;
 8001d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4e:	425a      	negs	r2, r3
 8001d50:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <SetMotorPWM+0x224>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001d56:	e0a5      	b.n	8001ea4 <SetMotorPWM+0x214>
	case MOTOR_L3:
		if (PWM>=0)
 8001d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db09      	blt.n	8001d74 <SetMotorPWM+0xe4>
		{
			htim3.Instance->CCR1=PWM;
 8001d60:	4b55      	ldr	r3, [pc, #340]	; (8001eb8 <SetMotorPWM+0x228>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2=0;
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <SetMotorPWM+0x228>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			htim3.Instance->CCR1=0;
			htim3.Instance->CCR2=-PWM;
		}
		break;
 8001d72:	e097      	b.n	8001ea4 <SetMotorPWM+0x214>
			htim3.Instance->CCR1=0;
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <SetMotorPWM+0x228>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2=-PWM;
 8001d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d80:	425a      	negs	r2, r3
 8001d82:	4b4d      	ldr	r3, [pc, #308]	; (8001eb8 <SetMotorPWM+0x228>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001d88:	e08c      	b.n	8001ea4 <SetMotorPWM+0x214>
	case MOTOR_L4:
		if (PWM>=0)
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db09      	blt.n	8001da6 <SetMotorPWM+0x116>
		{
			htim3.Instance->CCR3=PWM;
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <SetMotorPWM+0x228>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4=0;
 8001d9c:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <SetMotorPWM+0x228>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2200      	movs	r2, #0
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			htim3.Instance->CCR3=0;
			htim3.Instance->CCR4=-PWM;
		}
		break;
 8001da4:	e07e      	b.n	8001ea4 <SetMotorPWM+0x214>
			htim3.Instance->CCR3=0;
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <SetMotorPWM+0x228>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4=-PWM;
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	425a      	negs	r2, r3
 8001db4:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <SetMotorPWM+0x228>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001dba:	e073      	b.n	8001ea4 <SetMotorPWM+0x214>
	case MOTOR_R1:
		PWM=PWM<<1;
 8001dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	80fb      	strh	r3, [r7, #6]
		if (PWM>=0)
 8001dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db09      	blt.n	8001de0 <SetMotorPWM+0x150>
		{
			htim8.Instance->CCR3=PWM;
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <SetMotorPWM+0x22c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dd4:	63da      	str	r2, [r3, #60]	; 0x3c
			htim8.Instance->CCR4=0;
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <SetMotorPWM+0x22c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			htim8.Instance->CCR3=0;
			htim8.Instance->CCR4=-PWM;
		}
		break;
 8001dde:	e061      	b.n	8001ea4 <SetMotorPWM+0x214>
			htim8.Instance->CCR3=0;
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <SetMotorPWM+0x22c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
			htim8.Instance->CCR4=-PWM;
 8001de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dec:	425a      	negs	r2, r3
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <SetMotorPWM+0x22c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001df4:	e056      	b.n	8001ea4 <SetMotorPWM+0x214>
	case MOTOR_R2:
		PWM=PWM<<1;
 8001df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	80fb      	strh	r3, [r7, #6]
		if (PWM>=0)
 8001dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db09      	blt.n	8001e1a <SetMotorPWM+0x18a>
		{
			htim8.Instance->CCR1=PWM;
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <SetMotorPWM+0x22c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2=0;
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <SetMotorPWM+0x22c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			htim8.Instance->CCR1=0;
			htim8.Instance->CCR2=-PWM;
		}
		break;
 8001e18:	e044      	b.n	8001ea4 <SetMotorPWM+0x214>
			htim8.Instance->CCR1=0;
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <SetMotorPWM+0x22c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2=-PWM;
 8001e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e26:	425a      	negs	r2, r3
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <SetMotorPWM+0x22c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001e2e:	e039      	b.n	8001ea4 <SetMotorPWM+0x214>
	case MOTOR_R3:
		PWM=PWM<<1;
 8001e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	80fb      	strh	r3, [r7, #6]
		if (PWM>=0)
 8001e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db09      	blt.n	8001e54 <SetMotorPWM+0x1c4>
		{
			htim1.Instance->CCR3=PWM;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <SetMotorPWM+0x230>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e48:	63da      	str	r2, [r3, #60]	; 0x3c
			htim1.Instance->CCR4=0;
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <SetMotorPWM+0x230>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			htim1.Instance->CCR3=0;
			htim1.Instance->CCR4=-PWM;
		}
		break;
 8001e52:	e027      	b.n	8001ea4 <SetMotorPWM+0x214>
			htim1.Instance->CCR3=0;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <SetMotorPWM+0x230>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim1.Instance->CCR4=-PWM;
 8001e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e60:	425a      	negs	r2, r3
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <SetMotorPWM+0x230>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001e68:	e01c      	b.n	8001ea4 <SetMotorPWM+0x214>
	case MOTOR_R4:
		PWM=PWM<<1;
 8001e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	80fb      	strh	r3, [r7, #6]
		if (PWM>=0)
 8001e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db09      	blt.n	8001e8e <SetMotorPWM+0x1fe>
		{
			htim1.Instance->CCR1=PWM;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <SetMotorPWM+0x230>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2=0;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <SetMotorPWM+0x230>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			htim1.Instance->CCR1=0;
			htim1.Instance->CCR2=-PWM;
		}
		break;
 8001e8c:	e009      	b.n	8001ea2 <SetMotorPWM+0x212>
			htim1.Instance->CCR1=0;
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <SetMotorPWM+0x230>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2=-PWM;
 8001e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9a:	425a      	negs	r2, r3
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <SetMotorPWM+0x230>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001ea2:	bf00      	nop




	}
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	fffff254 	.word	0xfffff254
 8001eb4:	20004ef8 	.word	0x20004ef8
 8001eb8:	20004bec 	.word	0x20004bec
 8001ebc:	20004b44 	.word	0x20004b44
 8001ec0:	20004e94 	.word	0x20004e94

08001ec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_MspInit+0x54>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_MspInit+0x54>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_MspInit+0x54>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_MspInit+0x54>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_MspInit+0x54>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_MspInit+0x54>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	210f      	movs	r1, #15
 8001f06:	f06f 0001 	mvn.w	r0, #1
 8001f0a:	f002 fca7 	bl	800485c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a3f      	ldr	r2, [pc, #252]	; (8002038 <HAL_ADC_MspInit+0x11c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d178      	bne.n	8002030 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a36      	ldr	r2, [pc, #216]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a2f      	ldr	r2, [pc, #188]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_ADC_MspInit+0x120>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f92:	233f      	movs	r3, #63	; 0x3f
 8001f94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f96:	2303      	movs	r3, #3
 8001f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4826      	ldr	r0, [pc, #152]	; (8002040 <HAL_ADC_MspInit+0x124>)
 8001fa6:	f003 fb5d 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001faa:	2330      	movs	r3, #48	; 0x30
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4821      	ldr	r0, [pc, #132]	; (8002044 <HAL_ADC_MspInit+0x128>)
 8001fbe:	f003 fb51 	bl	8005664 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_ADC_MspInit+0x130>)
 8001fc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001fec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002004:	4810      	ldr	r0, [pc, #64]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8002006:	f002 fc53 	bl	80048b0 <HAL_DMA_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8002010:	f7ff fe12 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_ADC_MspInit+0x12c>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2105      	movs	r1, #5
 8002024:	2012      	movs	r0, #18
 8002026:	f002 fc19 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800202a:	2012      	movs	r0, #18
 800202c:	f002 fc32 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3728      	adds	r7, #40	; 0x28
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40012000 	.word	0x40012000
 800203c:	40023800 	.word	0x40023800
 8002040:	40020800 	.word	0x40020800
 8002044:	40020000 	.word	0x40020000
 8002048:	20004e2c 	.word	0x20004e2c
 800204c:	40026410 	.word	0x40026410

08002050 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2c      	ldr	r2, [pc, #176]	; (8002120 <HAL_CAN_MspInit+0xd0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d152      	bne.n	8002118 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 800207c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 8002098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_CAN_MspInit+0xd4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80020d8:	2309      	movs	r3, #9
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4811      	ldr	r0, [pc, #68]	; (8002128 <HAL_CAN_MspInit+0xd8>)
 80020e4:	f003 fabe 	bl	8005664 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2105      	movs	r1, #5
 80020ec:	203f      	movs	r0, #63	; 0x3f
 80020ee:	f002 fbb5 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80020f2:	203f      	movs	r0, #63	; 0x3f
 80020f4:	f002 fbce 	bl	8004894 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2105      	movs	r1, #5
 80020fc:	2040      	movs	r0, #64	; 0x40
 80020fe:	f002 fbad 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002102:	2040      	movs	r0, #64	; 0x40
 8002104:	f002 fbc6 	bl	8004894 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2105      	movs	r1, #5
 800210c:	2041      	movs	r0, #65	; 0x41
 800210e:	f002 fba5 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002112:	2041      	movs	r0, #65	; 0x41
 8002114:	f002 fbbe 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002118:	bf00      	nop
 800211a:	3728      	adds	r7, #40	; 0x28
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40006800 	.word	0x40006800
 8002124:	40023800 	.word	0x40023800
 8002128:	40020400 	.word	0x40020400

0800212c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a48      	ldr	r2, [pc, #288]	; (800225c <HAL_TIM_Base_MspInit+0x130>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d116      	bne.n	800216c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a46      	ldr	r2, [pc, #280]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2105      	movs	r1, #5
 800215e:	2019      	movs	r0, #25
 8002160:	f002 fb7c 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002164:	2019      	movs	r0, #25
 8002166:	f002 fb95 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800216a:	e072      	b.n	8002252 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d116      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a38      	ldr	r2, [pc, #224]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2105      	movs	r1, #5
 8002196:	201c      	movs	r0, #28
 8002198:	f002 fb60 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800219c:	201c      	movs	r0, #28
 800219e:	f002 fb79 	bl	8004894 <HAL_NVIC_EnableIRQ>
}
 80021a2:	e056      	b.n	8002252 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a2e      	ldr	r2, [pc, #184]	; (8002264 <HAL_TIM_Base_MspInit+0x138>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
}
 80021ca:	e042      	b.n	8002252 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <HAL_TIM_Base_MspInit+0x13c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a20      	ldr	r2, [pc, #128]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
}
 80021f2:	e02e      	b.n	8002252 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_TIM_Base_MspInit+0x140>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d116      	bne.n	800222c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a16      	ldr	r2, [pc, #88]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	202d      	movs	r0, #45	; 0x2d
 8002220:	f002 fb1c 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002224:	202d      	movs	r0, #45	; 0x2d
 8002226:	f002 fb35 	bl	8004894 <HAL_NVIC_EnableIRQ>
}
 800222a:	e012      	b.n	8002252 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_TIM_Base_MspInit+0x144>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10d      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a08      	ldr	r2, [pc, #32]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_TIM_Base_MspInit+0x134>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
}
 8002252:	bf00      	nop
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40010000 	.word	0x40010000
 8002260:	40023800 	.word	0x40023800
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40010400 	.word	0x40010400
 8002270:	40001800 	.word	0x40001800

08002274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08e      	sub	sp, #56	; 0x38
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7d      	ldr	r2, [pc, #500]	; (8002488 <HAL_TIM_MspPostInit+0x214>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d11f      	bne.n	80022d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	4b7c      	ldr	r3, [pc, #496]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a7b      	ldr	r2, [pc, #492]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b79      	ldr	r3, [pc, #484]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80022b2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	4870      	ldr	r0, [pc, #448]	; (8002490 <HAL_TIM_MspPostInit+0x21c>)
 80022d0:	f003 f9c8 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80022d4:	e0d3      	b.n	800247e <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d11e      	bne.n	800231e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	4b69      	ldr	r3, [pc, #420]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4a68      	ldr	r2, [pc, #416]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6313      	str	r3, [r2, #48]	; 0x30
 80022f0:	4b66      	ldr	r3, [pc, #408]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80022fc:	230f      	movs	r3, #15
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230c:	2301      	movs	r3, #1
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002314:	4619      	mov	r1, r3
 8002316:	485f      	ldr	r0, [pc, #380]	; (8002494 <HAL_TIM_MspPostInit+0x220>)
 8002318:	f003 f9a4 	bl	8005664 <HAL_GPIO_Init>
}
 800231c:	e0af      	b.n	800247e <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM3)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a5d      	ldr	r2, [pc, #372]	; (8002498 <HAL_TIM_MspPostInit+0x224>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d13c      	bne.n	80023a2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	4b57      	ldr	r3, [pc, #348]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a56      	ldr	r2, [pc, #344]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b54      	ldr	r3, [pc, #336]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	4a4f      	ldr	r2, [pc, #316]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	6313      	str	r3, [r2, #48]	; 0x30
 8002354:	4b4d      	ldr	r3, [pc, #308]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002370:	2302      	movs	r3, #2
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002378:	4619      	mov	r1, r3
 800237a:	4846      	ldr	r0, [pc, #280]	; (8002494 <HAL_TIM_MspPostInit+0x220>)
 800237c:	f003 f972 	bl	8005664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002380:	2303      	movs	r3, #3
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002390:	2302      	movs	r3, #2
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002398:	4619      	mov	r1, r3
 800239a:	4840      	ldr	r0, [pc, #256]	; (800249c <HAL_TIM_MspPostInit+0x228>)
 800239c:	f003 f962 	bl	8005664 <HAL_GPIO_Init>
}
 80023a0:	e06d      	b.n	800247e <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM4)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a3e      	ldr	r2, [pc, #248]	; (80024a0 <HAL_TIM_MspPostInit+0x22c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d11f      	bne.n	80023ec <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4a35      	ldr	r2, [pc, #212]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80023b6:	f043 0308 	orr.w	r3, r3, #8
 80023ba:	6313      	str	r3, [r2, #48]	; 0x30
 80023bc:	4b33      	ldr	r3, [pc, #204]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023da:	2302      	movs	r3, #2
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	4619      	mov	r1, r3
 80023e4:	482f      	ldr	r0, [pc, #188]	; (80024a4 <HAL_TIM_MspPostInit+0x230>)
 80023e6:	f003 f93d 	bl	8005664 <HAL_GPIO_Init>
}
 80023ea:	e048      	b.n	800247e <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM8)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2d      	ldr	r2, [pc, #180]	; (80024a8 <HAL_TIM_MspPostInit+0x234>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11f      	bne.n	8002436 <HAL_TIM_MspPostInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002412:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002424:	2303      	movs	r3, #3
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242c:	4619      	mov	r1, r3
 800242e:	481f      	ldr	r0, [pc, #124]	; (80024ac <HAL_TIM_MspPostInit+0x238>)
 8002430:	f003 f918 	bl	8005664 <HAL_GPIO_Init>
}
 8002434:	e023      	b.n	800247e <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM12)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_TIM_MspPostInit+0x23c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d11e      	bne.n	800247e <HAL_TIM_MspPostInit+0x20a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	4a10      	ldr	r2, [pc, #64]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	6313      	str	r3, [r2, #48]	; 0x30
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_TIM_MspPostInit+0x218>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800245c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800246e:	2309      	movs	r3, #9
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	4619      	mov	r1, r3
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <HAL_TIM_MspPostInit+0x228>)
 800247a:	f003 f8f3 	bl	8005664 <HAL_GPIO_Init>
}
 800247e:	bf00      	nop
 8002480:	3738      	adds	r7, #56	; 0x38
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	40023800 	.word	0x40023800
 8002490:	40021000 	.word	0x40021000
 8002494:	40020000 	.word	0x40020000
 8002498:	40000400 	.word	0x40000400
 800249c:	40020400 	.word	0x40020400
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40010400 	.word	0x40010400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40001800 	.word	0x40001800

080024b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a34      	ldr	r2, [pc, #208]	; (80025a4 <HAL_UART_MspInit+0xf0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d161      	bne.n	800259a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_UART_MspInit+0xf4>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_UART_MspInit+0xf4>)
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_UART_MspInit+0xf4>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_UART_MspInit+0xf4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <HAL_UART_MspInit+0xf4>)
 80024fc:	f043 0308 	orr.w	r3, r3, #8
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_UART_MspInit+0xf4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800250e:	2360      	movs	r3, #96	; 0x60
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800251e:	2307      	movs	r3, #7
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4820      	ldr	r0, [pc, #128]	; (80025ac <HAL_UART_MspInit+0xf8>)
 800252a:	f003 f89b 	bl	8005664 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_UART_MspInit+0x100>)
 8002532:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002536:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800253a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 800254a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002552:	2200      	movs	r2, #0
 8002554:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002564:	2200      	movs	r2, #0
 8002566:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 800256a:	2200      	movs	r2, #0
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002570:	f002 f99e 	bl	80048b0 <HAL_DMA_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800257a:	f7ff fb5d 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002582:	635a      	str	r2, [r3, #52]	; 0x34
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_UART_MspInit+0xfc>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2105      	movs	r1, #5
 800258e:	2026      	movs	r0, #38	; 0x26
 8002590:	f002 f964 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002594:	2026      	movs	r0, #38	; 0x26
 8002596:	f002 f97d 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40004400 	.word	0x40004400
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	20004db8 	.word	0x20004db8
 80025b4:	400260a0 	.word	0x400260a0

080025b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	; 0x30
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	202d      	movs	r0, #45	; 0x2d
 80025ce:	f002 f945 	bl	800485c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80025d2:	202d      	movs	r0, #45	; 0x2d
 80025d4:	f002 f95e 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_InitTick+0xa4>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_InitTick+0xa4>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6413      	str	r3, [r2, #64]	; 0x40
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_InitTick+0xa4>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025f4:	f107 0210 	add.w	r2, r7, #16
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fe5a 	bl	80062b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002604:	f003 fe30 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8002608:	4603      	mov	r3, r0
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_InitTick+0xa8>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0c9b      	lsrs	r3, r3, #18
 8002618:	3b01      	subs	r3, #1
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_InitTick+0xac>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_InitTick+0xb0>)
 8002620:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_InitTick+0xac>)
 8002624:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002628:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_InitTick+0xac>)
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_InitTick+0xac>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_InitTick+0xac>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800263c:	4809      	ldr	r0, [pc, #36]	; (8002664 <HAL_InitTick+0xac>)
 800263e:	f003 fe6d 	bl	800631c <HAL_TIM_Base_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <HAL_InitTick+0xac>)
 800264a:	f003 feb7 	bl	80063bc <HAL_TIM_Base_Start_IT>
 800264e:	4603      	mov	r3, r0
 8002650:	e000      	b.n	8002654 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3730      	adds	r7, #48	; 0x30
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	431bde83 	.word	0x431bde83
 8002664:	20005018 	.word	0x20005018
 8002668:	40002000 	.word	0x40002000

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <NMI_Handler+0x4>

08002672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <MemManage_Handler+0x4>

0800267e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler+0x4>

0800268a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <DMA1_Stream6_IRQHandler+0x10>)
 800269e:	f002 fa9f 	bl	8004be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20004db8 	.word	0x20004db8

080026ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <ADC_IRQHandler+0x10>)
 80026b2:	f000 fc6a 	bl	8002f8a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20004c44 	.word	0x20004c44

080026c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026c6:	f003 ff42 	bl	800654e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20004e94 	.word	0x20004e94

080026d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <TIM2_IRQHandler+0x10>)
 80026da:	f003 ff38 	bl	800654e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20004ef8 	.word	0x20004ef8

080026e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
//	ReceivePacketUART(&huart2);

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026ec:	480b      	ldr	r0, [pc, #44]	; (800271c <USART2_IRQHandler+0x34>)
 80026ee:	f004 fe67 	bl	80073c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  ReceivePacketUART(&huart2);
 80026f2:	480a      	ldr	r0, [pc, #40]	; (800271c <USART2_IRQHandler+0x34>)
 80026f4:	f000 f860 	bl	80027b8 <ReceivePacketUART>

  if (!(huart2.Instance->CR1 & USART_CR1_RXNEIE))
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <USART2_IRQHandler+0x34>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d107      	bne.n	8002716 <USART2_IRQHandler+0x2e>
	huart2.Instance->CR1|= USART_CR1_RXNEIE;
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <USART2_IRQHandler+0x34>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <USART2_IRQHandler+0x34>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20004f44 	.word	0x20004f44

08002720 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002724:	4803      	ldr	r0, [pc, #12]	; (8002734 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002726:	f003 ff12 	bl	800654e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800272a:	4803      	ldr	r0, [pc, #12]	; (8002738 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800272c:	f003 ff0f 	bl	800654e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20004b44 	.word	0x20004b44
 8002738:	20005018 	.word	0x20005018

0800273c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <DMA2_Stream0_IRQHandler+0x10>)
 8002742:	f002 fa4d 	bl	8004be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,RESET);
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //светодиод
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20004e2c 	.word	0x20004e2c

08002750 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <CAN2_TX_IRQHandler+0x10>)
 8002756:	f001 fd99 	bl	800428c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20004c8c 	.word	0x20004c8c

08002764 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <CAN2_RX0_IRQHandler+0x10>)
 800276a:	f001 fd8f 	bl	800428c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20004c8c 	.word	0x20004c8c

08002778 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <CAN2_RX1_IRQHandler+0x10>)
 800277e:	f001 fd85 	bl	800428c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20004c8c 	.word	0x20004c8c

0800278c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <SystemInit+0x28>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <SystemInit+0x28>)
 8002798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800279c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <SystemInit+0x28>)
 80027a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027a6:	609a      	str	r2, [r3, #8]
#endif
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <ReceivePacketUART>:


void ProcessUARTCmd(void);


void ReceivePacketUART(UART_HandleTypeDef *huart) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	uint8_t Bt;

	if (huart->Instance->SR & USART_SR_RXNE) {
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d058      	beq.n	8002880 <ReceivePacketUART+0xc8>
		Bt = (uint8_t) huart->Instance->DR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	73fb      	strb	r3, [r7, #15]

		CntRxTimeOut = 500;
 80027d6:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <ReceivePacketUART+0xd0>)
 80027d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027dc:	801a      	strh	r2, [r3, #0]

		if (!GettingPacketRx_FL) {
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <ReceivePacketUART+0xd4>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d114      	bne.n	8002810 <ReceivePacketUART+0x58>
			if ((BtPrev_Rc == 0xff) && (Bt == 0xff)) {
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <ReceivePacketUART+0xd8>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2bff      	cmp	r3, #255	; 0xff
 80027ec:	d10c      	bne.n	8002808 <ReceivePacketUART+0x50>
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2bff      	cmp	r3, #255	; 0xff
 80027f2:	d109      	bne.n	8002808 <ReceivePacketUART+0x50>
				BtPrev_Rc = 0;
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <ReceivePacketUART+0xd8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
				GettingPacketRx_FL = 1;
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <ReceivePacketUART+0xd4>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
				CntRec_Rc = 0;
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <ReceivePacketUART+0xdc>)
 8002802:	2200      	movs	r2, #0
 8002804:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8002806:	e03b      	b.n	8002880 <ReceivePacketUART+0xc8>
				BtPrev_Rc = Bt;
 8002808:	4a21      	ldr	r2, [pc, #132]	; (8002890 <ReceivePacketUART+0xd8>)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	7013      	strb	r3, [r2, #0]
}
 800280e:	e037      	b.n	8002880 <ReceivePacketUART+0xc8>
			if (CntRec_Rc > (SIZE_OF_RECARRAY - 1))
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <ReceivePacketUART+0xdc>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	2bf9      	cmp	r3, #249	; 0xf9
 8002816:	d903      	bls.n	8002820 <ReceivePacketUART+0x68>
				GettingPacketRx_FL = 0;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <ReceivePacketUART+0xd4>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
}
 800281e:	e02f      	b.n	8002880 <ReceivePacketUART+0xc8>
				RecArray[CntRec_Rc] = Bt;
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <ReceivePacketUART+0xdc>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <ReceivePacketUART+0xe0>)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	5453      	strb	r3, [r2, r1]
				CntRec_Rc++;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <ReceivePacketUART+0xdc>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <ReceivePacketUART+0xdc>)
 8002836:	801a      	strh	r2, [r3, #0]
				if (CntRec_Rc > (RecArray[0] + 1)) {
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <ReceivePacketUART+0xdc>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <ReceivePacketUART+0xe0>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	429a      	cmp	r2, r3
 8002846:	dd1b      	ble.n	8002880 <ReceivePacketUART+0xc8>
					GettingPacketRx_FL = 0;
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <ReceivePacketUART+0xd4>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
					if (CalcCheckSumm(RecArray[0] + 1, RecArray)
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <ReceivePacketUART+0xe0>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	b29b      	uxth	r3, r3
 8002858:	490f      	ldr	r1, [pc, #60]	; (8002898 <ReceivePacketUART+0xe0>)
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f8e6 	bl	8001a2c <CalcCheckSumm>
 8002860:	4603      	mov	r3, r0
 8002862:	4619      	mov	r1, r3
							!= RecArray[RecArray[0] + 1]) {
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <ReceivePacketUART+0xe0>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <ReceivePacketUART+0xe0>)
 800286c:	5cd3      	ldrb	r3, [r2, r3]
					if (CalcCheckSumm(RecArray[0] + 1, RecArray)
 800286e:	4299      	cmp	r1, r3
 8002870:	d001      	beq.n	8002876 <ReceivePacketUART+0xbe>
						asm("Nop");
 8002872:	bf00      	nop
}
 8002874:	e004      	b.n	8002880 <ReceivePacketUART+0xc8>
						PacketReceived_FL = 1;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <ReceivePacketUART+0xe4>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
						ProcessUARTCmd();
 800287c:	f000 f810 	bl	80028a0 <ProcessUARTCmd>
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20005066 	.word	0x20005066
 800288c:	20005061 	.word	0x20005061
 8002890:	20005062 	.word	0x20005062
 8002894:	20005068 	.word	0x20005068
 8002898:	2000506c 	.word	0x2000506c
 800289c:	20005060 	.word	0x20005060

080028a0 <ProcessUARTCmd>:

void ProcessUARTCmd(void) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af02      	add	r7, sp, #8
	uint8_t Cmd = RecArray[1];
 80028a6:	4bac      	ldr	r3, [pc, #688]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte;
	int16_t PWM;

	if (!PacketReceived_FL)
 80028ac:	4bab      	ldr	r3, [pc, #684]	; (8002b5c <ProcessUARTCmd+0x2bc>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 814c 	beq.w	8002b4e <ProcessUARTCmd+0x2ae>
		return;

	PacketReceived_FL = 0;
 80028b6:	4ba9      	ldr	r3, [pc, #676]	; (8002b5c <ProcessUARTCmd+0x2bc>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]

	CntPacket++;
 80028bc:	4ba8      	ldr	r3, [pc, #672]	; (8002b60 <ProcessUARTCmd+0x2c0>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	4ba6      	ldr	r3, [pc, #664]	; (8002b60 <ProcessUARTCmd+0x2c0>)
 80028c6:	801a      	strh	r2, [r3, #0]

	ConfirmCMD = 1;
 80028c8:	4ba6      	ldr	r3, [pc, #664]	; (8002b64 <ProcessUARTCmd+0x2c4>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]

	switch (Cmd) {
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	2b12      	cmp	r3, #18
 80028d4:	f200 813c 	bhi.w	8002b50 <ProcessUARTCmd+0x2b0>
 80028d8:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <ProcessUARTCmd+0x40>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	0800292d 	.word	0x0800292d
 80028e4:	08002945 	.word	0x08002945
 80028e8:	0800295d 	.word	0x0800295d
 80028ec:	08002975 	.word	0x08002975
 80028f0:	0800298d 	.word	0x0800298d
 80028f4:	080029a5 	.word	0x080029a5
 80028f8:	080029bd 	.word	0x080029bd
 80028fc:	080029d5 	.word	0x080029d5
 8002900:	080029ed 	.word	0x080029ed
 8002904:	08002a05 	.word	0x08002a05
 8002908:	08002a29 	.word	0x08002a29
 800290c:	08002a4d 	.word	0x08002a4d
 8002910:	08002a71 	.word	0x08002a71
 8002914:	08002a95 	.word	0x08002a95
 8002918:	08002ab9 	.word	0x08002ab9
 800291c:	08002add 	.word	0x08002add
 8002920:	08002b01 	.word	0x08002b01
 8002924:	08002b25 	.word	0x08002b25
 8002928:	08002b39 	.word	0x08002b39
	case SET_ADDR:
		RecArray[9] = 3;
 800292c:	4b8a      	ldr	r3, [pc, #552]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 800292e:	2203      	movs	r2, #3
 8002930:	725a      	strb	r2, [r3, #9]
		Can_TxMessage(&hcan2, 0, SET_ADDR_CAN, 8, &RecArray[2]);
 8002932:	4b8d      	ldr	r3, [pc, #564]	; (8002b68 <ProcessUARTCmd+0x2c8>)
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2308      	movs	r3, #8
 8002938:	22fe      	movs	r2, #254	; 0xfe
 800293a:	2100      	movs	r1, #0
 800293c:	488b      	ldr	r0, [pc, #556]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 800293e:	f7fd febb 	bl	80006b8 <Can_TxMessage>
		break;
 8002942:	e105      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case CALIBR1:
		Byte = 1;
 8002944:	2301      	movs	r3, #1
 8002946:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_ADDR, 1, &Byte);
 8002948:	1cfb      	adds	r3, r7, #3
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	f240 1201 	movw	r2, #257	; 0x101
 8002952:	2100      	movs	r1, #0
 8002954:	4885      	ldr	r0, [pc, #532]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 8002956:	f7fd feaf 	bl	80006b8 <Can_TxMessage>
		break;
 800295a:	e0f9      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case CALIBR2:
		Byte = 1;
 800295c:	2301      	movs	r3, #1
 800295e:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_HIP_L_ADDR, 1, &Byte);
 8002960:	1cfb      	adds	r3, r7, #3
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	f240 1203 	movw	r2, #259	; 0x103
 800296a:	2100      	movs	r1, #0
 800296c:	487f      	ldr	r0, [pc, #508]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 800296e:	f7fd fea3 	bl	80006b8 <Can_TxMessage>
		break;
 8002972:	e0ed      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case CALIBR3:
		Byte = 1;
 8002974:	2301      	movs	r3, #1
 8002976:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_LOWERLEG_L_ADDR, 1, &Byte);
 8002978:	1cfb      	adds	r3, r7, #3
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2301      	movs	r3, #1
 800297e:	f240 1205 	movw	r2, #261	; 0x105
 8002982:	2100      	movs	r1, #0
 8002984:	4879      	ldr	r0, [pc, #484]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 8002986:	f7fd fe97 	bl	80006b8 <Can_TxMessage>
		break;
 800298a:	e0e1      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case CALIBR4:
		Byte = 1;
 800298c:	2301      	movs	r3, #1
 800298e:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_FOOT_L_ADDR, 1, &Byte);
 8002990:	1cfb      	adds	r3, r7, #3
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2301      	movs	r3, #1
 8002996:	f240 1207 	movw	r2, #263	; 0x107
 800299a:	2100      	movs	r1, #0
 800299c:	4873      	ldr	r0, [pc, #460]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 800299e:	f7fd fe8b 	bl	80006b8 <Can_TxMessage>
		break;
 80029a2:	e0d5      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case CALIBR5:
		Byte = 1;
 80029a4:	2301      	movs	r3, #1
 80029a6:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_HIP_R_ADDR, 1, &Byte);
 80029a8:	1cfb      	adds	r3, r7, #3
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2301      	movs	r3, #1
 80029ae:	f240 1209 	movw	r2, #265	; 0x109
 80029b2:	2100      	movs	r1, #0
 80029b4:	486d      	ldr	r0, [pc, #436]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 80029b6:	f7fd fe7f 	bl	80006b8 <Can_TxMessage>
		break;
 80029ba:	e0c9      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case CALIBR6:
		Byte = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_LOWERLEG_R_ADDR, 1, &Byte);
 80029c0:	1cfb      	adds	r3, r7, #3
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	f240 120b 	movw	r2, #267	; 0x10b
 80029ca:	2100      	movs	r1, #0
 80029cc:	4867      	ldr	r0, [pc, #412]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 80029ce:	f7fd fe73 	bl	80006b8 <Can_TxMessage>
		break;
 80029d2:	e0bd      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case CALIBR7:
		Byte = 1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_FOOT_R_ADDR, 1, &Byte);
 80029d8:	1cfb      	adds	r3, r7, #3
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2301      	movs	r3, #1
 80029de:	f240 120d 	movw	r2, #269	; 0x10d
 80029e2:	2100      	movs	r1, #0
 80029e4:	4861      	ldr	r0, [pc, #388]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 80029e6:	f7fd fe67 	bl	80006b8 <Can_TxMessage>
		break;
 80029ea:	e0b1      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_KGYRO:
		RecArray[9] = 4;
 80029ec:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 80029ee:	2204      	movs	r2, #4
 80029f0:	725a      	strb	r2, [r3, #9]
		Can_TxMessage(&hcan2, 0, SET_ADDR_CAN, 8, &RecArray[2]);
 80029f2:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <ProcessUARTCmd+0x2c8>)
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2308      	movs	r3, #8
 80029f8:	22fe      	movs	r2, #254	; 0xfe
 80029fa:	2100      	movs	r1, #0
 80029fc:	485b      	ldr	r0, [pc, #364]	; (8002b6c <ProcessUARTCmd+0x2cc>)
 80029fe:	f7fd fe5b 	bl	80006b8 <Can_TxMessage>
		break;
 8002a02:	e0a5      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_PWM_Motor_L1:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8002a04:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a06:	78db      	ldrb	r3, [r3, #3]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	4b52      	ldr	r3, [pc, #328]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a10:	789b      	ldrb	r3, [r3, #2]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_L1);
 8002a1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff f935 	bl	8001c90 <SetMotorPWM>
		break;
 8002a26:	e093      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_PWM_Motor_L2:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8002a28:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a2a:	78db      	ldrb	r3, [r3, #3]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a34:	789b      	ldrb	r3, [r3, #2]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_L2);
 8002a3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a42:	2102      	movs	r1, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff f923 	bl	8001c90 <SetMotorPWM>
		break;
 8002a4a:	e081      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_PWM_Motor_L3:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a4e:	78db      	ldrb	r3, [r3, #3]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a58:	789b      	ldrb	r3, [r3, #2]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_L3);
 8002a62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a66:	2103      	movs	r1, #3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff f911 	bl	8001c90 <SetMotorPWM>
		break;
 8002a6e:	e06f      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_PWM_Motor_L4:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8002a70:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a72:	78db      	ldrb	r3, [r3, #3]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a7c:	789b      	ldrb	r3, [r3, #2]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_L4);
 8002a86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff f8ff 	bl	8001c90 <SetMotorPWM>
		break;
 8002a92:	e05d      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_PWM_Motor_R1:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8002a94:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002a96:	78db      	ldrb	r3, [r3, #3]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002aa0:	789b      	ldrb	r3, [r3, #2]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_R1);
 8002aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aae:	2105      	movs	r1, #5
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f8ed 	bl	8001c90 <SetMotorPWM>
		break;
 8002ab6:	e04b      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_PWM_Motor_R2:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002aba:	78db      	ldrb	r3, [r3, #3]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002ac4:	789b      	ldrb	r3, [r3, #2]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_R2);
 8002ace:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ad2:	2106      	movs	r1, #6
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff f8db 	bl	8001c90 <SetMotorPWM>
		break;
 8002ada:	e039      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_PWM_Motor_R3:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002ade:	78db      	ldrb	r3, [r3, #3]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002ae8:	789b      	ldrb	r3, [r3, #2]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_R3);
 8002af2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002af6:	2107      	movs	r1, #7
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f8c9 	bl	8001c90 <SetMotorPWM>
		break;
 8002afe:	e027      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case SET_PWM_Motor_R4:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002b02:	78db      	ldrb	r3, [r3, #3]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <ProcessUARTCmd+0x2b8>)
 8002b0c:	789b      	ldrb	r3, [r3, #2]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_R4);
 8002b16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b1a:	2108      	movs	r1, #8
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff f8b7 	bl	8001c90 <SetMotorPWM>
		break;
 8002b22:	e015      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case GET_OPTIONS:
		FlashReadAll();
 8002b24:	f7fd ff5c 	bl	80009e0 <FlashReadAll>
		ArrayToOptions();
 8002b28:	f7fd fff0 	bl	8000b0c <ArrayToOptions>
		SetBuzzerFRQ(1000,50);
 8002b2c:	2132      	movs	r1, #50	; 0x32
 8002b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b32:	f7fd fcc9 	bl	80004c8 <SetBuzzerFRQ>
		break;
 8002b36:	e00b      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
	case WRITE_OPTIONS:
		OptionsToArray();
 8002b38:	f7fd ffae 	bl	8000a98 <OptionsToArray>
		FlashWriteAll();
 8002b3c:	f7fd ff08 	bl	8000950 <FlashWriteAll>
		SetBuzzerFRQ(1000,500);
 8002b40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b48:	f7fd fcbe 	bl	80004c8 <SetBuzzerFRQ>
		break;
 8002b4c:	e000      	b.n	8002b50 <ProcessUARTCmd+0x2b0>
		return;
 8002b4e:	bf00      	nop

	}
}
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000506c 	.word	0x2000506c
 8002b5c:	20005060 	.word	0x20005060
 8002b60:	20005064 	.word	0x20005064
 8002b64:	2000506a 	.word	0x2000506a
 8002b68:	2000506e 	.word	0x2000506e
 8002b6c:	20004c8c 	.word	0x20004c8c

08002b70 <TrmDataPacketUART>:

void TrmDataPacketUART(UART_HandleTypeDef *huart) {
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	uint16_t Cnt = 4;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	81fb      	strh	r3, [r7, #14]

	UART2TransmittArray[0] = 0xff;
 8002b7c:	4b78      	ldr	r3, [pc, #480]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002b7e:	22ff      	movs	r2, #255	; 0xff
 8002b80:	701a      	strb	r2, [r3, #0]
	UART2TransmittArray[1] = 0xff;
 8002b82:	4b77      	ldr	r3, [pc, #476]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	705a      	strb	r2, [r3, #1]
	UART2TransmittArray[3] = TRM_DATA_PACKET; //CMD
 8002b88:	4b75      	ldr	r3, [pc, #468]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	70da      	strb	r2, [r3, #3]

	*(float*) &UART2TransmittArray[Cnt] = Tilt1X;
 8002b8e:	89fb      	ldrh	r3, [r7, #14]
 8002b90:	4a73      	ldr	r2, [pc, #460]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002b92:	4413      	add	r3, r2
 8002b94:	4a73      	ldr	r2, [pc, #460]	; (8002d64 <TrmDataPacketUART+0x1f4>)
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002b9a:	89fb      	ldrh	r3, [r7, #14]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt1Y;
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	4a6f      	ldr	r2, [pc, #444]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a70      	ldr	r2, [pc, #448]	; (8002d68 <TrmDataPacketUART+0x1f8>)
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro1;
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	4a6a      	ldr	r2, [pc, #424]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a6c      	ldr	r2, [pc, #432]	; (8002d6c <TrmDataPacketUART+0x1fc>)
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002bbe:	89fb      	ldrh	r3, [r7, #14]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt2X;
 8002bc4:	89fb      	ldrh	r3, [r7, #14]
 8002bc6:	4a66      	ldr	r2, [pc, #408]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <TrmDataPacketUART+0x200>)
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt2Y;
 8002bd6:	89fb      	ldrh	r3, [r7, #14]
 8002bd8:	4a61      	ldr	r2, [pc, #388]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <TrmDataPacketUART+0x204>)
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002be2:	89fb      	ldrh	r3, [r7, #14]
 8002be4:	3304      	adds	r3, #4
 8002be6:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro2;
 8002be8:	89fb      	ldrh	r3, [r7, #14]
 8002bea:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002bec:	4413      	add	r3, r2
 8002bee:	4a62      	ldr	r2, [pc, #392]	; (8002d78 <TrmDataPacketUART+0x208>)
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt3X;
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a5e      	ldr	r2, [pc, #376]	; (8002d7c <TrmDataPacketUART+0x20c>)
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c06:	89fb      	ldrh	r3, [r7, #14]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt3Y;
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002c10:	4413      	add	r3, r2
 8002c12:	4a5b      	ldr	r2, [pc, #364]	; (8002d80 <TrmDataPacketUART+0x210>)
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c18:	89fb      	ldrh	r3, [r7, #14]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro3;
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002c22:	4413      	add	r3, r2
 8002c24:	4a57      	ldr	r2, [pc, #348]	; (8002d84 <TrmDataPacketUART+0x214>)
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c2a:	89fb      	ldrh	r3, [r7, #14]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt4X;
 8002c30:	89fb      	ldrh	r3, [r7, #14]
 8002c32:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002c34:	4413      	add	r3, r2
 8002c36:	4a54      	ldr	r2, [pc, #336]	; (8002d88 <TrmDataPacketUART+0x218>)
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c3c:	89fb      	ldrh	r3, [r7, #14]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt4Y;
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	4a46      	ldr	r2, [pc, #280]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002c46:	4413      	add	r3, r2
 8002c48:	4a50      	ldr	r2, [pc, #320]	; (8002d8c <TrmDataPacketUART+0x21c>)
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c4e:	89fb      	ldrh	r3, [r7, #14]
 8002c50:	3304      	adds	r3, #4
 8002c52:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro4;
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	4a42      	ldr	r2, [pc, #264]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a4d      	ldr	r2, [pc, #308]	; (8002d90 <TrmDataPacketUART+0x220>)
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c60:	89fb      	ldrh	r3, [r7, #14]
 8002c62:	3304      	adds	r3, #4
 8002c64:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt5X;
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	4a3d      	ldr	r2, [pc, #244]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a49      	ldr	r2, [pc, #292]	; (8002d94 <TrmDataPacketUART+0x224>)
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c72:	89fb      	ldrh	r3, [r7, #14]
 8002c74:	3304      	adds	r3, #4
 8002c76:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt5Y;
 8002c78:	89fb      	ldrh	r3, [r7, #14]
 8002c7a:	4a39      	ldr	r2, [pc, #228]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	4a46      	ldr	r2, [pc, #280]	; (8002d98 <TrmDataPacketUART+0x228>)
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c84:	89fb      	ldrh	r3, [r7, #14]
 8002c86:	3304      	adds	r3, #4
 8002c88:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro5;
 8002c8a:	89fb      	ldrh	r3, [r7, #14]
 8002c8c:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a42      	ldr	r2, [pc, #264]	; (8002d9c <TrmDataPacketUART+0x22c>)
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002c96:	89fb      	ldrh	r3, [r7, #14]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt6X;
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
 8002c9e:	4a30      	ldr	r2, [pc, #192]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a3f      	ldr	r2, [pc, #252]	; (8002da0 <TrmDataPacketUART+0x230>)
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002ca8:	89fb      	ldrh	r3, [r7, #14]
 8002caa:	3304      	adds	r3, #4
 8002cac:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt6Y;
 8002cae:	89fb      	ldrh	r3, [r7, #14]
 8002cb0:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a3b      	ldr	r2, [pc, #236]	; (8002da4 <TrmDataPacketUART+0x234>)
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro6;
 8002cc0:	89fb      	ldrh	r3, [r7, #14]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <TrmDataPacketUART+0x238>)
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt7X;
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a34      	ldr	r2, [pc, #208]	; (8002dac <TrmDataPacketUART+0x23c>)
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002cde:	89fb      	ldrh	r3, [r7, #14]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt7Y;
 8002ce4:	89fb      	ldrh	r3, [r7, #14]
 8002ce6:	4a1e      	ldr	r2, [pc, #120]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a31      	ldr	r2, [pc, #196]	; (8002db0 <TrmDataPacketUART+0x240>)
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002cf0:	89fb      	ldrh	r3, [r7, #14]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro7;
 8002cf6:	89fb      	ldrh	r3, [r7, #14]
 8002cf8:	4a19      	ldr	r2, [pc, #100]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a2d      	ldr	r2, [pc, #180]	; (8002db4 <TrmDataPacketUART+0x244>)
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	3304      	adds	r3, #4
 8002d06:	81fb      	strh	r3, [r7, #14]

	*(uint16_t*) &UART2TransmittArray[Cnt] = KGyro1;
 8002d08:	89fb      	ldrh	r3, [r7, #14]
 8002d0a:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <TrmDataPacketUART+0x248>)
 8002d10:	8812      	ldrh	r2, [r2, #0]
 8002d12:	801a      	strh	r2, [r3, #0]
	Cnt = Cnt + sizeof(uint16_t);
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	3302      	adds	r3, #2
 8002d18:	81fb      	strh	r3, [r7, #14]

	UART2TransmittArray[2] = Cnt - 3;
 8002d1a:	89fb      	ldrh	r3, [r7, #14]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3b03      	subs	r3, #3
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002d24:	709a      	strb	r2, [r3, #2]

	UART2TransmittArray[Cnt] = CalcCheckSumm(UART2TransmittArray[2] + 1,
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002d28:	789b      	ldrb	r3, [r3, #2]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	89fc      	ldrh	r4, [r7, #14]
 8002d32:	4922      	ldr	r1, [pc, #136]	; (8002dbc <TrmDataPacketUART+0x24c>)
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fe79 	bl	8001a2c <CalcCheckSumm>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002d40:	551a      	strb	r2, [r3, r4]
			&UART2TransmittArray[2]);

	HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
			UART2TransmittArray[2] + 4);
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002d44:	789b      	ldrb	r3, [r3, #2]
 8002d46:	b29b      	uxth	r3, r3
	HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
 8002d48:	3304      	adds	r3, #4
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4904      	ldr	r1, [pc, #16]	; (8002d60 <TrmDataPacketUART+0x1f0>)
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f004 fac9 	bl	80072e8 <HAL_UART_Transmit_DMA>

}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20004cb4 	.word	0x20004cb4
 8002d64:	20004f40 	.word	0x20004f40
 8002d68:	20004bd4 	.word	0x20004bd4
 8002d6c:	20004ee0 	.word	0x20004ee0
 8002d70:	20004e28 	.word	0x20004e28
 8002d74:	20004e1c 	.word	0x20004e1c
 8002d78:	20004db4 	.word	0x20004db4
 8002d7c:	20004be4 	.word	0x20004be4
 8002d80:	20004e90 	.word	0x20004e90
 8002d84:	20004eec 	.word	0x20004eec
 8002d88:	20004bdc 	.word	0x20004bdc
 8002d8c:	20004ef0 	.word	0x20004ef0
 8002d90:	20004e8c 	.word	0x20004e8c
 8002d94:	20004ef4 	.word	0x20004ef4
 8002d98:	20004c40 	.word	0x20004c40
 8002d9c:	20004e24 	.word	0x20004e24
 8002da0:	20004b3c 	.word	0x20004b3c
 8002da4:	20004c38 	.word	0x20004c38
 8002da8:	20004ee4 	.word	0x20004ee4
 8002dac:	20004bd8 	.word	0x20004bd8
 8002db0:	20004ee8 	.word	0x20004ee8
 8002db4:	20004fd0 	.word	0x20004fd0
 8002db8:	20004c34 	.word	0x20004c34
 8002dbc:	20004cb6 	.word	0x20004cb6

08002dc0 <TrmCfmPacketUART>:

void TrmCfmPacketUART(UART_HandleTypeDef *huart) {
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	uint16_t Cnt = 4;
 8002dc8:	2304      	movs	r3, #4
 8002dca:	81fb      	strh	r3, [r7, #14]

	UART2TransmittArray[0] = 0xff;
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <TrmCfmPacketUART+0x64>)
 8002dce:	22ff      	movs	r2, #255	; 0xff
 8002dd0:	701a      	strb	r2, [r3, #0]
	UART2TransmittArray[1] = 0xff;
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <TrmCfmPacketUART+0x64>)
 8002dd4:	22ff      	movs	r2, #255	; 0xff
 8002dd6:	705a      	strb	r2, [r3, #1]
	UART2TransmittArray[3] = TRM_CFM_PACKET; //CMD
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <TrmCfmPacketUART+0x64>)
 8002dda:	2202      	movs	r2, #2
 8002ddc:	70da      	strb	r2, [r3, #3]

	UART2TransmittArray[2] = Cnt - 3;
 8002dde:	89fb      	ldrh	r3, [r7, #14]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	3b03      	subs	r3, #3
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <TrmCfmPacketUART+0x64>)
 8002de8:	709a      	strb	r2, [r3, #2]

	UART2TransmittArray[Cnt] = CalcCheckSumm(UART2TransmittArray[2] + 1,
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <TrmCfmPacketUART+0x64>)
 8002dec:	789b      	ldrb	r3, [r3, #2]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	89fc      	ldrh	r4, [r7, #14]
 8002df6:	490c      	ldr	r1, [pc, #48]	; (8002e28 <TrmCfmPacketUART+0x68>)
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fe17 	bl	8001a2c <CalcCheckSumm>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <TrmCfmPacketUART+0x64>)
 8002e04:	551a      	strb	r2, [r3, r4]
			&UART2TransmittArray[2]);

	HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
			UART2TransmittArray[2] + 4);
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <TrmCfmPacketUART+0x64>)
 8002e08:	789b      	ldrb	r3, [r3, #2]
 8002e0a:	b29b      	uxth	r3, r3
	HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	4904      	ldr	r1, [pc, #16]	; (8002e24 <TrmCfmPacketUART+0x64>)
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f004 fa67 	bl	80072e8 <HAL_UART_Transmit_DMA>

}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20004cb4 	.word	0x20004cb4
 8002e28:	20004cb6 	.word	0x20004cb6

08002e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e32:	e003      	b.n	8002e3c <LoopCopyDataInit>

08002e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e3a:	3104      	adds	r1, #4

08002e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e3c:	480b      	ldr	r0, [pc, #44]	; (8002e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e44:	d3f6      	bcc.n	8002e34 <CopyDataInit>
  ldr  r2, =_sbss
 8002e46:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e48:	e002      	b.n	8002e50 <LoopFillZerobss>

08002e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e4c:	f842 3b04 	str.w	r3, [r2], #4

08002e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e54:	d3f9      	bcc.n	8002e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e56:	f7ff fc99 	bl	800278c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e5a:	f008 faf7 	bl	800b44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5e:	f7fd fe6b 	bl	8000b38 <main>
  bx  lr    
 8002e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e68:	0800b5fc 	.word	0x0800b5fc
  ldr  r0, =_sdata
 8002e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e70:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8002e74:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8002e78:	200051cc 	.word	0x200051cc

08002e7c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e7c:	e7fe      	b.n	8002e7c <CAN1_RX0_IRQHandler>
	...

08002e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <HAL_Init+0x40>)
 8002e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_Init+0x40>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <HAL_Init+0x40>)
 8002e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_Init+0x40>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_Init+0x40>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	f001 fccc 	bl	8004846 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7ff fb82 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb4:	f7ff f806 	bl	8001ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_IncTick+0x20>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_IncTick+0x24>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <HAL_IncTick+0x24>)
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	2000000c 	.word	0x2000000c
 8002ee8:	20005168 	.word	0x20005168

08002eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_GetTick+0x14>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20005168 	.word	0x20005168

08002f04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e033      	b.n	8002f82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe fffa 	bl	8001f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f4a:	f023 0302 	bic.w	r3, r3, #2
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fba8 	bl	80036ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
 8002f72:	e001      	b.n	8002f78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d049      	beq.n	8003060 <HAL_ADC_IRQHandler+0xd6>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d046      	beq.n	8003060 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d12b      	bne.n	8003050 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d127      	bne.n	8003050 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003018:	2b00      	cmp	r3, #0
 800301a:	d119      	bne.n	8003050 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0220 	bic.w	r2, r2, #32
 800302a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fe fd11 	bl	8001a78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0212 	mvn.w	r2, #18
 800305e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d057      	beq.n	8003142 <HAL_ADC_IRQHandler+0x1b8>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d054      	beq.n	8003142 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d139      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d12b      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d124      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fc38 	bl	80039a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 020c 	mvn.w	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d017      	beq.n	80031a4 <HAL_ADC_IRQHandler+0x21a>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d014      	beq.n	80031a4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10d      	bne.n	80031a4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f953 	bl	8003440 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f06f 0201 	mvn.w	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_ADC_IRQHandler+0x27a>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f043 0202 	orr.w	r2, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0220 	mvn.w	r2, #32
 80031f2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f92d 	bl	8003454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f06f 0220 	mvn.w	r2, #32
 8003202:	601a      	str	r2, [r3, #0]
  }
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_ADC_Start_DMA+0x1e>
 8003226:	2302      	movs	r3, #2
 8003228:	e0e9      	b.n	80033fe <HAL_ADC_Start_DMA+0x1f2>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d018      	beq.n	8003272 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003250:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_ADC_Start_DMA+0x1fc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6d      	ldr	r2, [pc, #436]	; (800340c <HAL_ADC_Start_DMA+0x200>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0c9a      	lsrs	r2, r3, #18
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003264:	e002      	b.n	800326c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3b01      	subs	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f9      	bne.n	8003266 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d107      	bne.n	8003292 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003290:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	f040 80a1 	bne.w	80033e4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d106      	bne.n	80032f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f023 0206 	bic.w	r2, r3, #6
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
 80032ee:	e002      	b.n	80032f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032fe:	4b44      	ldr	r3, [pc, #272]	; (8003410 <HAL_ADC_Start_DMA+0x204>)
 8003300:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	4a43      	ldr	r2, [pc, #268]	; (8003414 <HAL_ADC_Start_DMA+0x208>)
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	4a42      	ldr	r2, [pc, #264]	; (8003418 <HAL_ADC_Start_DMA+0x20c>)
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	4a41      	ldr	r2, [pc, #260]	; (800341c <HAL_ADC_Start_DMA+0x210>)
 8003318:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003322:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003332:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003342:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	334c      	adds	r3, #76	; 0x4c
 800334e:	4619      	mov	r1, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f001 fb5a 	bl	8004a0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12a      	bne.n	80033ba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2d      	ldr	r2, [pc, #180]	; (8003420 <HAL_ADC_Start_DMA+0x214>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d015      	beq.n	800339a <HAL_ADC_Start_DMA+0x18e>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2c      	ldr	r2, [pc, #176]	; (8003424 <HAL_ADC_Start_DMA+0x218>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d105      	bne.n	8003384 <HAL_ADC_Start_DMA+0x178>
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_ADC_Start_DMA+0x204>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <HAL_ADC_Start_DMA+0x21c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d136      	bne.n	80033fc <HAL_ADC_Start_DMA+0x1f0>
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_ADC_Start_DMA+0x204>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d130      	bne.n	80033fc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d129      	bne.n	80033fc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	e020      	b.n	80033fc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_ADC_Start_DMA+0x214>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d11b      	bne.n	80033fc <HAL_ADC_Start_DMA+0x1f0>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d114      	bne.n	80033fc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	e00b      	b.n	80033fc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000004 	.word	0x20000004
 800340c:	431bde83 	.word	0x431bde83
 8003410:	40012300 	.word	0x40012300
 8003414:	080038a5 	.word	0x080038a5
 8003418:	0800395f 	.word	0x0800395f
 800341c:	0800397b 	.word	0x0800397b
 8003420:	40012000 	.word	0x40012000
 8003424:	40012100 	.word	0x40012100
 8003428:	40012200 	.word	0x40012200

0800342c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1c>
 8003480:	2302      	movs	r3, #2
 8003482:	e105      	b.n	8003690 <HAL_ADC_ConfigChannel+0x228>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b09      	cmp	r3, #9
 8003492:	d925      	bls.n	80034e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68d9      	ldr	r1, [r3, #12]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	3b1e      	subs	r3, #30
 80034aa:	2207      	movs	r2, #7
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43da      	mvns	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	400a      	ands	r2, r1
 80034b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68d9      	ldr	r1, [r3, #12]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	4618      	mov	r0, r3
 80034cc:	4603      	mov	r3, r0
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4403      	add	r3, r0
 80034d2:	3b1e      	subs	r3, #30
 80034d4:	409a      	lsls	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	e022      	b.n	8003526 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6919      	ldr	r1, [r3, #16]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	2207      	movs	r2, #7
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43da      	mvns	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	400a      	ands	r2, r1
 8003502:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6919      	ldr	r1, [r3, #16]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	4618      	mov	r0, r3
 8003516:	4603      	mov	r3, r0
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4403      	add	r3, r0
 800351c:	409a      	lsls	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b06      	cmp	r3, #6
 800352c:	d824      	bhi.n	8003578 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	3b05      	subs	r3, #5
 8003540:	221f      	movs	r2, #31
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	400a      	ands	r2, r1
 800354e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	4618      	mov	r0, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	3b05      	subs	r3, #5
 800356a:	fa00 f203 	lsl.w	r2, r0, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	635a      	str	r2, [r3, #52]	; 0x34
 8003576:	e04c      	b.n	8003612 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d824      	bhi.n	80035ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	3b23      	subs	r3, #35	; 0x23
 8003592:	221f      	movs	r2, #31
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43da      	mvns	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	400a      	ands	r2, r1
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	3b23      	subs	r3, #35	; 0x23
 80035bc:	fa00 f203 	lsl.w	r2, r0, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
 80035c8:	e023      	b.n	8003612 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	3b41      	subs	r3, #65	; 0x41
 80035dc:	221f      	movs	r2, #31
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	400a      	ands	r2, r1
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	3b41      	subs	r3, #65	; 0x41
 8003606:	fa00 f203 	lsl.w	r2, r0, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_ADC_ConfigChannel+0x234>)
 8003614:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_ADC_ConfigChannel+0x238>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d109      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x1cc>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b12      	cmp	r3, #18
 8003626:	d105      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_ADC_ConfigChannel+0x238>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d123      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x21e>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b10      	cmp	r3, #16
 8003644:	d003      	beq.n	800364e <HAL_ADC_ConfigChannel+0x1e6>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b11      	cmp	r3, #17
 800364c:	d11b      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b10      	cmp	r3, #16
 8003660:	d111      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_ADC_ConfigChannel+0x23c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <HAL_ADC_ConfigChannel+0x240>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	0c9a      	lsrs	r2, r3, #18
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003678:	e002      	b.n	8003680 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3b01      	subs	r3, #1
 800367e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f9      	bne.n	800367a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40012300 	.word	0x40012300
 80036a0:	40012000 	.word	0x40012000
 80036a4:	20000004 	.word	0x20000004
 80036a8:	431bde83 	.word	0x431bde83

080036ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036b4:	4b79      	ldr	r3, [pc, #484]	; (800389c <ADC_Init+0x1f0>)
 80036b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	021a      	lsls	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <ADC_Init+0x1f4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003752:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6899      	ldr	r1, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	e00f      	b.n	80037aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0202 	bic.w	r2, r2, #2
 80037b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7e1b      	ldrb	r3, [r3, #24]
 80037c4:	005a      	lsls	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	3b01      	subs	r3, #1
 8003804:	035a      	lsls	r2, r3, #13
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	e007      	b.n	8003820 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	3b01      	subs	r3, #1
 800383c:	051a      	lsls	r2, r3, #20
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6899      	ldr	r1, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003862:	025a      	lsls	r2, r3, #9
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	029a      	lsls	r2, r3, #10
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40012300 	.word	0x40012300
 80038a0:	0f000001 	.word	0x0f000001

080038a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d13c      	bne.n	8003938 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d12b      	bne.n	8003930 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d127      	bne.n	8003930 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d006      	beq.n	80038fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d119      	bne.n	8003930 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0220 	bic.w	r2, r2, #32
 800390a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f043 0201 	orr.w	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7fe f8a1 	bl	8001a78 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003936:	e00e      	b.n	8003956 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff fd85 	bl	8003454 <HAL_ADC_ErrorCallback>
}
 800394a:	e004      	b.n	8003956 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff fd5d 	bl	800342c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f043 0204 	orr.w	r2, r3, #4
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff fd5a 	bl	8003454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0ed      	b.n	8003baa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe fb38 	bl	8002050 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0202 	bic.w	r2, r2, #2
 80039ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039f0:	f7ff fa7c 	bl	8002eec <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039f6:	e012      	b.n	8003a1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039f8:	f7ff fa78 	bl	8002eec <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b0a      	cmp	r3, #10
 8003a04:	d90b      	bls.n	8003a1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2205      	movs	r2, #5
 8003a16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0c5      	b.n	8003baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a3c:	f7ff fa56 	bl	8002eec <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a42:	e012      	b.n	8003a6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a44:	f7ff fa52 	bl	8002eec <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b0a      	cmp	r3, #10
 8003a50:	d90b      	bls.n	8003a6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2205      	movs	r2, #5
 8003a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e09f      	b.n	8003baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0e5      	beq.n	8003a44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7e1b      	ldrb	r3, [r3, #24]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d108      	bne.n	8003a92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e007      	b.n	8003aa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7e5b      	ldrb	r3, [r3, #25]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d108      	bne.n	8003abc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e007      	b.n	8003acc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7e9b      	ldrb	r3, [r3, #26]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d108      	bne.n	8003ae6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0220 	orr.w	r2, r2, #32
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e007      	b.n	8003af6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0220 	bic.w	r2, r2, #32
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	7edb      	ldrb	r3, [r3, #27]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d108      	bne.n	8003b10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0210 	bic.w	r2, r2, #16
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e007      	b.n	8003b20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0210 	orr.w	r2, r2, #16
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7f1b      	ldrb	r3, [r3, #28]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d108      	bne.n	8003b3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e007      	b.n	8003b4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0208 	bic.w	r2, r2, #8
 8003b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7f5b      	ldrb	r3, [r3, #29]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d108      	bne.n	8003b64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0204 	orr.w	r2, r2, #4
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e007      	b.n	8003b74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	ea42 0103 	orr.w	r1, r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	1e5a      	subs	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d003      	beq.n	8003bda <HAL_CAN_ConfigFilter+0x26>
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	f040 80be 	bne.w	8003d56 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003bda:	4b65      	ldr	r3, [pc, #404]	; (8003d70 <HAL_CAN_ConfigFilter+0x1bc>)
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bf4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d123      	bne.n	8003c84 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	401a      	ands	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3248      	adds	r2, #72	; 0x48
 8003c64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c7a:	6979      	ldr	r1, [r7, #20]
 8003c7c:	3348      	adds	r3, #72	; 0x48
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d122      	bne.n	8003cd2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003cac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3248      	adds	r2, #72	; 0x48
 8003cb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cc8:	6979      	ldr	r1, [r7, #20]
 8003cca:	3348      	adds	r3, #72	; 0x48
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003cec:	e007      	b.n	8003cfe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003d18:	e007      	b.n	8003d2a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d107      	bne.n	8003d42 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d48:	f023 0201 	bic.w	r2, r3, #1
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e006      	b.n	8003d64 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40006400 	.word	0x40006400

08003d74 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d12e      	bne.n	8003de6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003da0:	f7ff f8a4 	bl	8002eec <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003da6:	e012      	b.n	8003dce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003da8:	f7ff f8a0 	bl	8002eec <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b0a      	cmp	r3, #10
 8003db4:	d90b      	bls.n	8003dce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2205      	movs	r2, #5
 8003dc6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e012      	b.n	8003df4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e006      	b.n	8003df4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e10:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d003      	beq.n	8003e28 <HAL_CAN_AddTxMessage+0x2c>
 8003e20:	7ffb      	ldrb	r3, [r7, #31]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	f040 80b8 	bne.w	8003f98 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80a0 	beq.w	8003f88 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	0e1b      	lsrs	r3, r3, #24
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d907      	bls.n	8003e68 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e09e      	b.n	8003fa6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e84:	68f9      	ldr	r1, [r7, #12]
 8003e86:	6809      	ldr	r1, [r1, #0]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3318      	adds	r3, #24
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	440b      	add	r3, r1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e00f      	b.n	8003eb6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ea0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003eaa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	440b      	add	r3, r1
 8003eb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6819      	ldr	r1, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	3318      	adds	r3, #24
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	7d1b      	ldrb	r3, [r3, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d111      	bne.n	8003ef6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3318      	adds	r3, #24
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	4413      	add	r3, r2
 8003ede:	3304      	adds	r3, #4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	6811      	ldr	r1, [r2, #0]
 8003ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	3318      	adds	r3, #24
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3307      	adds	r3, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	061a      	lsls	r2, r3, #24
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3306      	adds	r3, #6
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3305      	adds	r3, #5
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	4313      	orrs	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	3204      	adds	r2, #4
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	4610      	mov	r0, r2
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	6811      	ldr	r1, [r2, #0]
 8003f1e:	ea43 0200 	orr.w	r2, r3, r0
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003f2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3303      	adds	r3, #3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	061a      	lsls	r2, r3, #24
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3301      	adds	r3, #1
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	4610      	mov	r0, r2
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	6811      	ldr	r1, [r2, #0]
 8003f54:	ea43 0200 	orr.w	r2, r3, r0
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003f62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	4413      	add	r3, r2
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	6811      	ldr	r1, [r2, #0]
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3318      	adds	r3, #24
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	440b      	add	r3, r1
 8003f82:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e00e      	b.n	8003fa6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e006      	b.n	8003fa6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3724      	adds	r7, #36	; 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fc6:	7afb      	ldrb	r3, [r7, #11]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d002      	beq.n	8003fd2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003fcc:	7afb      	ldrb	r3, [r7, #11]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d11d      	bne.n	800400e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004030:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d003      	beq.n	8004040 <HAL_CAN_GetRxMessage+0x24>
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	2b02      	cmp	r3, #2
 800403c:	f040 80f3 	bne.w	8004226 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10e      	bne.n	8004064 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d116      	bne.n	8004082 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0e7      	b.n	8004234 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0d8      	b.n	8004234 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	331b      	adds	r3, #27
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	4413      	add	r3, r2
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0204 	and.w	r2, r3, #4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10c      	bne.n	80040ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	331b      	adds	r3, #27
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	4413      	add	r3, r2
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	0d5b      	lsrs	r3, r3, #21
 80040b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e00b      	b.n	80040d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	331b      	adds	r3, #27
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	4413      	add	r3, r2
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	08db      	lsrs	r3, r3, #3
 80040ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	331b      	adds	r3, #27
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0202 	and.w	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	331b      	adds	r3, #27
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	4413      	add	r3, r2
 80040f4:	3304      	adds	r3, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	331b      	adds	r3, #27
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	b2da      	uxtb	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	331b      	adds	r3, #27
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	4413      	add	r3, r2
 8004124:	3304      	adds	r3, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	4413      	add	r3, r2
 800413a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	4413      	add	r3, r2
 8004150:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0a1a      	lsrs	r2, r3, #8
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0c1a      	lsrs	r2, r3, #16
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3302      	adds	r3, #2
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	4413      	add	r3, r2
 8004184:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0e1a      	lsrs	r2, r3, #24
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	3303      	adds	r3, #3
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	4413      	add	r3, r2
 800419e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	3304      	adds	r3, #4
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0a1a      	lsrs	r2, r3, #8
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	3305      	adds	r3, #5
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0c1a      	lsrs	r2, r3, #16
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	3306      	adds	r3, #6
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e1a      	lsrs	r2, r3, #24
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	3307      	adds	r3, #7
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0220 	orr.w	r2, r2, #32
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	e007      	b.n	8004222 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0220 	orr.w	r2, r2, #32
 8004220:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e006      	b.n	8004234 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004250:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d002      	beq.n	800425e <HAL_CAN_ActivateNotification+0x1e>
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d109      	bne.n	8004272 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6959      	ldr	r1, [r3, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e006      	b.n	8004280 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004294:	2300      	movs	r3, #0
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d07c      	beq.n	80043cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d023      	beq.n	8004324 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2201      	movs	r2, #1
 80042e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f983 	bl	80045fa <HAL_CAN_TxMailbox0CompleteCallback>
 80042f4:	e016      	b.n	8004324 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
 8004308:	e00c      	b.n	8004324 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	e002      	b.n	8004324 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f989 	bl	8004636 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d024      	beq.n	8004378 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004336:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f963 	bl	800460e <HAL_CAN_TxMailbox1CompleteCallback>
 8004348:	e016      	b.n	8004378 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	e00c      	b.n	8004378 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
 8004370:	e002      	b.n	8004378 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f969 	bl	800464a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d024      	beq.n	80043cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800438a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f943 	bl	8004622 <HAL_CAN_TxMailbox2CompleteCallback>
 800439c:	e016      	b.n	80043cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	e00c      	b.n	80043cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
 80043c4:	e002      	b.n	80043cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f949 	bl	800465e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2210      	movs	r2, #16
 80043ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2208      	movs	r2, #8
 800440a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f930 	bl	8004672 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fb36 	bl	8001a9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2210      	movs	r2, #16
 8004452:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d006      	beq.n	8004476 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2208      	movs	r2, #8
 800446e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f912 	bl	800469a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d009      	beq.n	8004494 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8f9 	bl	8004686 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d006      	beq.n	80044b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2210      	movs	r2, #16
 80044ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f8fc 	bl	80046ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2208      	movs	r2, #8
 80044d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8f5 	bl	80046c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d07b      	beq.n	80045da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d072      	beq.n	80045d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	f043 0304 	orr.w	r3, r3, #4
 800453e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004546:	2b00      	cmp	r3, #0
 8004548:	d043      	beq.n	80045d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004550:	2b00      	cmp	r3, #0
 8004552:	d03e      	beq.n	80045d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800455a:	2b60      	cmp	r3, #96	; 0x60
 800455c:	d02b      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x32a>
 800455e:	2b60      	cmp	r3, #96	; 0x60
 8004560:	d82e      	bhi.n	80045c0 <HAL_CAN_IRQHandler+0x334>
 8004562:	2b50      	cmp	r3, #80	; 0x50
 8004564:	d022      	beq.n	80045ac <HAL_CAN_IRQHandler+0x320>
 8004566:	2b50      	cmp	r3, #80	; 0x50
 8004568:	d82a      	bhi.n	80045c0 <HAL_CAN_IRQHandler+0x334>
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d019      	beq.n	80045a2 <HAL_CAN_IRQHandler+0x316>
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d826      	bhi.n	80045c0 <HAL_CAN_IRQHandler+0x334>
 8004572:	2b30      	cmp	r3, #48	; 0x30
 8004574:	d010      	beq.n	8004598 <HAL_CAN_IRQHandler+0x30c>
 8004576:	2b30      	cmp	r3, #48	; 0x30
 8004578:	d822      	bhi.n	80045c0 <HAL_CAN_IRQHandler+0x334>
 800457a:	2b10      	cmp	r3, #16
 800457c:	d002      	beq.n	8004584 <HAL_CAN_IRQHandler+0x2f8>
 800457e:	2b20      	cmp	r3, #32
 8004580:	d005      	beq.n	800458e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004582:	e01d      	b.n	80045c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	f043 0308 	orr.w	r3, r3, #8
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800458c:	e019      	b.n	80045c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	f043 0310 	orr.w	r3, r3, #16
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004596:	e014      	b.n	80045c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	f043 0320 	orr.w	r3, r3, #32
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045a0:	e00f      	b.n	80045c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045aa:	e00a      	b.n	80045c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045b4:	e005      	b.n	80045c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045be:	e000      	b.n	80045c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80045c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2204      	movs	r2, #4
 80045d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f872 	bl	80046d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80045f2:	bf00      	nop
 80045f4:	3728      	adds	r7, #40	; 0x28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <__NVIC_SetPriorityGrouping+0x44>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004708:	4013      	ands	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800471e:	4a04      	ldr	r2, [pc, #16]	; (8004730 <__NVIC_SetPriorityGrouping+0x44>)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	60d3      	str	r3, [r2, #12]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <__NVIC_GetPriorityGrouping+0x18>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f003 0307 	and.w	r3, r3, #7
}
 8004742:	4618      	mov	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	2b00      	cmp	r3, #0
 8004760:	db0b      	blt.n	800477a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	f003 021f 	and.w	r2, r3, #31
 8004768:	4907      	ldr	r1, [pc, #28]	; (8004788 <__NVIC_EnableIRQ+0x38>)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2001      	movs	r0, #1
 8004772:	fa00 f202 	lsl.w	r2, r0, r2
 8004776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	e000e100 	.word	0xe000e100

0800478c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	6039      	str	r1, [r7, #0]
 8004796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479c:	2b00      	cmp	r3, #0
 800479e:	db0a      	blt.n	80047b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	490c      	ldr	r1, [pc, #48]	; (80047d8 <__NVIC_SetPriority+0x4c>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	0112      	lsls	r2, r2, #4
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	440b      	add	r3, r1
 80047b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b4:	e00a      	b.n	80047cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4908      	ldr	r1, [pc, #32]	; (80047dc <__NVIC_SetPriority+0x50>)
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	3b04      	subs	r3, #4
 80047c4:	0112      	lsls	r2, r2, #4
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	440b      	add	r3, r1
 80047ca:	761a      	strb	r2, [r3, #24]
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000e100 	.word	0xe000e100
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f1c3 0307 	rsb	r3, r3, #7
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	bf28      	it	cs
 80047fe:	2304      	movcs	r3, #4
 8004800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3304      	adds	r3, #4
 8004806:	2b06      	cmp	r3, #6
 8004808:	d902      	bls.n	8004810 <NVIC_EncodePriority+0x30>
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3b03      	subs	r3, #3
 800480e:	e000      	b.n	8004812 <NVIC_EncodePriority+0x32>
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004814:	f04f 32ff 	mov.w	r2, #4294967295
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43da      	mvns	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	401a      	ands	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004828:	f04f 31ff 	mov.w	r1, #4294967295
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	43d9      	mvns	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	4313      	orrs	r3, r2
         );
}
 800483a:	4618      	mov	r0, r3
 800483c:	3724      	adds	r7, #36	; 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff ff4c 	bl	80046ec <__NVIC_SetPriorityGrouping>
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800486e:	f7ff ff61 	bl	8004734 <__NVIC_GetPriorityGrouping>
 8004872:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	6978      	ldr	r0, [r7, #20]
 800487a:	f7ff ffb1 	bl	80047e0 <NVIC_EncodePriority>
 800487e:	4602      	mov	r2, r0
 8004880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ff80 	bl	800478c <__NVIC_SetPriority>
}
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ff54 	bl	8004750 <__NVIC_EnableIRQ>
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048bc:	f7fe fb16 	bl	8002eec <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e099      	b.n	8004a00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ec:	e00f      	b.n	800490e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ee:	f7fe fafd 	bl	8002eec <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d908      	bls.n	800490e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2203      	movs	r2, #3
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e078      	b.n	8004a00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e8      	bne.n	80048ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_DMA_Init+0x158>)
 8004928:	4013      	ands	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800493a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b04      	cmp	r3, #4
 8004966:	d107      	bne.n	8004978 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	4313      	orrs	r3, r2
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0307 	bic.w	r3, r3, #7
 800498e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d117      	bne.n	80049d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00e      	beq.n	80049d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fb01 	bl	8004fbc <DMA_CheckFifoParam>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2240      	movs	r2, #64	; 0x40
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049ce:	2301      	movs	r3, #1
 80049d0:	e016      	b.n	8004a00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fab8 	bl	8004f50 <DMA_CalcBaseAndBitshift>
 80049e0:	4603      	mov	r3, r0
 80049e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	223f      	movs	r2, #63	; 0x3f
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	f010803f 	.word	0xf010803f

08004a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_DMA_Start_IT+0x26>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e040      	b.n	8004ab4 <HAL_DMA_Start_IT+0xa8>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d12f      	bne.n	8004aa6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fa4a 	bl	8004ef4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	223f      	movs	r2, #63	; 0x3f
 8004a66:	409a      	lsls	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0216 	orr.w	r2, r2, #22
 8004a7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0208 	orr.w	r2, r2, #8
 8004a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e005      	b.n	8004ab2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004aca:	f7fe fa0f 	bl	8002eec <HAL_GetTick>
 8004ace:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d008      	beq.n	8004aee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2280      	movs	r2, #128	; 0x80
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e052      	b.n	8004b94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0216 	bic.w	r2, r2, #22
 8004afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <HAL_DMA_Abort+0x62>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0208 	bic.w	r2, r2, #8
 8004b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b3e:	e013      	b.n	8004b68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b40:	f7fe f9d4 	bl	8002eec <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d90c      	bls.n	8004b68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e015      	b.n	8004b94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e4      	bne.n	8004b40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7a:	223f      	movs	r2, #63	; 0x3f
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d004      	beq.n	8004bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e00c      	b.n	8004bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2205      	movs	r2, #5
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bec:	4b92      	ldr	r3, [pc, #584]	; (8004e38 <HAL_DMA_IRQHandler+0x258>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a92      	ldr	r2, [pc, #584]	; (8004e3c <HAL_DMA_IRQHandler+0x25c>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01a      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d013      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0204 	bic.w	r2, r2, #4
 8004c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	2208      	movs	r2, #8
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d012      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	2201      	movs	r2, #1
 8004c70:	409a      	lsls	r2, r3
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 0202 	orr.w	r2, r3, #2
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c86:	2204      	movs	r2, #4
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d012      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	f043 0204 	orr.w	r2, r3, #4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbc:	2210      	movs	r2, #16
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d043      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d03c      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	2210      	movs	r2, #16
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d018      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d024      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
 8004d0e:	e01f      	b.n	8004d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01b      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
 8004d20:	e016      	b.n	8004d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d107      	bne.n	8004d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0208 	bic.w	r2, r2, #8
 8004d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d54:	2220      	movs	r2, #32
 8004d56:	409a      	lsls	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 808e 	beq.w	8004e7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8086 	beq.w	8004e7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d76:	2220      	movs	r2, #32
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d136      	bne.n	8004df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0216 	bic.w	r2, r2, #22
 8004d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695a      	ldr	r2, [r3, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <HAL_DMA_IRQHandler+0x1da>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0208 	bic.w	r2, r2, #8
 8004dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dce:	223f      	movs	r2, #63	; 0x3f
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d07d      	beq.n	8004eea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	4798      	blx	r3
        }
        return;
 8004df6:	e078      	b.n	8004eea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01c      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d108      	bne.n	8004e26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d030      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
 8004e24:	e02b      	b.n	8004e7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d027      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
 8004e36:	e022      	b.n	8004e7e <HAL_DMA_IRQHandler+0x29e>
 8004e38:	20000004 	.word	0x20000004
 8004e3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10f      	bne.n	8004e6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0210 	bic.w	r2, r2, #16
 8004e5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d032      	beq.n	8004eec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d022      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2205      	movs	r2, #5
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d307      	bcc.n	8004ec6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f2      	bne.n	8004eaa <HAL_DMA_IRQHandler+0x2ca>
 8004ec4:	e000      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ec6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
 8004ee8:	e000      	b.n	8004eec <HAL_DMA_IRQHandler+0x30c>
        return;
 8004eea:	bf00      	nop
    }
  }
}
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop

08004ef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d108      	bne.n	8004f34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f32:	e007      	b.n	8004f44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	3b10      	subs	r3, #16
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <DMA_CalcBaseAndBitshift+0x64>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f6a:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <DMA_CalcBaseAndBitshift+0x68>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d909      	bls.n	8004f92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	1d1a      	adds	r2, r3, #4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8004f90:	e007      	b.n	8004fa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	aaaaaaab 	.word	0xaaaaaaab
 8004fb8:	0800b5e4 	.word	0x0800b5e4

08004fbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d11f      	bne.n	8005016 <DMA_CheckFifoParam+0x5a>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d856      	bhi.n	800508a <DMA_CheckFifoParam+0xce>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <DMA_CheckFifoParam+0x28>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	08005007 	.word	0x08005007
 8004fec:	08004ff5 	.word	0x08004ff5
 8004ff0:	0800508b 	.word	0x0800508b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d046      	beq.n	800508e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005004:	e043      	b.n	800508e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800500e:	d140      	bne.n	8005092 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005014:	e03d      	b.n	8005092 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501e:	d121      	bne.n	8005064 <DMA_CheckFifoParam+0xa8>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b03      	cmp	r3, #3
 8005024:	d837      	bhi.n	8005096 <DMA_CheckFifoParam+0xda>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <DMA_CheckFifoParam+0x70>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	0800503d 	.word	0x0800503d
 8005030:	08005043 	.word	0x08005043
 8005034:	0800503d 	.word	0x0800503d
 8005038:	08005055 	.word	0x08005055
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      break;
 8005040:	e030      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d025      	beq.n	800509a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005052:	e022      	b.n	800509a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800505c:	d11f      	bne.n	800509e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005062:	e01c      	b.n	800509e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d903      	bls.n	8005072 <DMA_CheckFifoParam+0xb6>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d003      	beq.n	8005078 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005070:	e018      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
      break;
 8005076:	e015      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00e      	beq.n	80050a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      break;
 8005088:	e00b      	b.n	80050a2 <DMA_CheckFifoParam+0xe6>
      break;
 800508a:	bf00      	nop
 800508c:	e00a      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
      break;
 800508e:	bf00      	nop
 8005090:	e008      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005092:	bf00      	nop
 8005094:	e006      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005096:	bf00      	nop
 8005098:	e004      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
      break;
 800509a:	bf00      	nop
 800509c:	e002      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <DMA_CheckFifoParam+0xe8>
      break;
 80050a2:	bf00      	nop
    }
  } 
  
  return status; 
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80050c6:	4b23      	ldr	r3, [pc, #140]	; (8005154 <HAL_FLASH_Program+0xa0>)
 80050c8:	7e1b      	ldrb	r3, [r3, #24]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_FLASH_Program+0x1e>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e03b      	b.n	800514a <HAL_FLASH_Program+0x96>
 80050d2:	4b20      	ldr	r3, [pc, #128]	; (8005154 <HAL_FLASH_Program+0xa0>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050dc:	f000 f870 	bl	80051c0 <FLASH_WaitForLastOperation>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d12b      	bne.n	8005142 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d105      	bne.n	80050fc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80050f0:	783b      	ldrb	r3, [r7, #0]
 80050f2:	4619      	mov	r1, r3
 80050f4:	68b8      	ldr	r0, [r7, #8]
 80050f6:	f000 f91b 	bl	8005330 <FLASH_Program_Byte>
 80050fa:	e016      	b.n	800512a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005102:	883b      	ldrh	r3, [r7, #0]
 8005104:	4619      	mov	r1, r3
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f000 f8ee 	bl	80052e8 <FLASH_Program_HalfWord>
 800510c:	e00d      	b.n	800512a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d105      	bne.n	8005120 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	4619      	mov	r1, r3
 8005118:	68b8      	ldr	r0, [r7, #8]
 800511a:	f000 f8c3 	bl	80052a4 <FLASH_Program_Word>
 800511e:	e004      	b.n	800512a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005124:	68b8      	ldr	r0, [r7, #8]
 8005126:	f000 f88b 	bl	8005240 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800512a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800512e:	f000 f847 	bl	80051c0 <FLASH_WaitForLastOperation>
 8005132:	4603      	mov	r3, r0
 8005134:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <HAL_FLASH_Program+0xa4>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	4a07      	ldr	r2, [pc, #28]	; (8005158 <HAL_FLASH_Program+0xa4>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <HAL_FLASH_Program+0xa0>)
 8005144:	2200      	movs	r2, #0
 8005146:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005148:	7dfb      	ldrb	r3, [r7, #23]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	2000516c 	.word	0x2000516c
 8005158:	40023c00 	.word	0x40023c00

0800515c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_FLASH_Unlock+0x38>)
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	da0b      	bge.n	8005186 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_FLASH_Unlock+0x38>)
 8005170:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_FLASH_Unlock+0x3c>)
 8005172:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <HAL_FLASH_Unlock+0x38>)
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <HAL_FLASH_Unlock+0x40>)
 8005178:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_FLASH_Unlock+0x38>)
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	da01      	bge.n	8005186 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005186:	79fb      	ldrb	r3, [r7, #7]
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40023c00 	.word	0x40023c00
 8005198:	45670123 	.word	0x45670123
 800519c:	cdef89ab 	.word	0xcdef89ab

080051a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_FLASH_Lock+0x1c>)
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	4a04      	ldr	r2, [pc, #16]	; (80051bc <HAL_FLASH_Lock+0x1c>)
 80051aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40023c00 	.word	0x40023c00

080051c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80051cc:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <FLASH_WaitForLastOperation+0x78>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80051d2:	f7fd fe8b 	bl	8002eec <HAL_GetTick>
 80051d6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80051d8:	e010      	b.n	80051fc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d00c      	beq.n	80051fc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <FLASH_WaitForLastOperation+0x38>
 80051e8:	f7fd fe80 	bl	8002eec <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d201      	bcs.n	80051fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e019      	b.n	8005230 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <FLASH_WaitForLastOperation+0x7c>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e8      	bne.n	80051da <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <FLASH_WaitForLastOperation+0x7c>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <FLASH_WaitForLastOperation+0x7c>)
 8005216:	2201      	movs	r2, #1
 8005218:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <FLASH_WaitForLastOperation+0x7c>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005226:	f000 f8a5 	bl	8005374 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
  
}  
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	2000516c 	.word	0x2000516c
 800523c:	40023c00 	.word	0x40023c00

08005240 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <FLASH_Program_DoubleWord+0x60>)
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <FLASH_Program_DoubleWord+0x60>)
 8005252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005256:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <FLASH_Program_DoubleWord+0x60>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <FLASH_Program_DoubleWord+0x60>)
 800525e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <FLASH_Program_DoubleWord+0x60>)
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <FLASH_Program_DoubleWord+0x60>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005276:	f3bf 8f6f 	isb	sy
}
 800527a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800527c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	000a      	movs	r2, r1
 800528a:	2300      	movs	r3, #0
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	3104      	adds	r1, #4
 8005290:	4613      	mov	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40023c00 	.word	0x40023c00

080052a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <FLASH_Program_Word+0x40>)
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	4a0c      	ldr	r2, [pc, #48]	; (80052e4 <FLASH_Program_Word+0x40>)
 80052b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <FLASH_Program_Word+0x40>)
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <FLASH_Program_Word+0x40>)
 80052c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <FLASH_Program_Word+0x40>)
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <FLASH_Program_Word+0x40>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	601a      	str	r2, [r3, #0]
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40023c00 	.word	0x40023c00

080052e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052f4:	4b0d      	ldr	r3, [pc, #52]	; (800532c <FLASH_Program_HalfWord+0x44>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	4a0c      	ldr	r2, [pc, #48]	; (800532c <FLASH_Program_HalfWord+0x44>)
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <FLASH_Program_HalfWord+0x44>)
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <FLASH_Program_HalfWord+0x44>)
 8005306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <FLASH_Program_HalfWord+0x44>)
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	4a06      	ldr	r2, [pc, #24]	; (800532c <FLASH_Program_HalfWord+0x44>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	887a      	ldrh	r2, [r7, #2]
 800531c:	801a      	strh	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40023c00 	.word	0x40023c00

08005330 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <FLASH_Program_Byte+0x40>)
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <FLASH_Program_Byte+0x40>)
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005346:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <FLASH_Program_Byte+0x40>)
 800534a:	4a09      	ldr	r2, [pc, #36]	; (8005370 <FLASH_Program_Byte+0x40>)
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <FLASH_Program_Byte+0x40>)
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	4a06      	ldr	r2, [pc, #24]	; (8005370 <FLASH_Program_Byte+0x40>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	701a      	strb	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40023c00 	.word	0x40023c00

08005374 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005378:	4b27      	ldr	r3, [pc, #156]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <FLASH_SetErrorCode+0xa8>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f043 0310 	orr.w	r3, r3, #16
 800538c:	4a23      	ldr	r2, [pc, #140]	; (800541c <FLASH_SetErrorCode+0xa8>)
 800538e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005390:	4b21      	ldr	r3, [pc, #132]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 8005392:	2210      	movs	r2, #16
 8005394:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005396:	4b20      	ldr	r3, [pc, #128]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80053a2:	4b1e      	ldr	r3, [pc, #120]	; (800541c <FLASH_SetErrorCode+0xa8>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f043 0308 	orr.w	r3, r3, #8
 80053aa:	4a1c      	ldr	r2, [pc, #112]	; (800541c <FLASH_SetErrorCode+0xa8>)
 80053ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80053ae:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 80053b0:	2220      	movs	r2, #32
 80053b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80053b4:	4b18      	ldr	r3, [pc, #96]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80053c0:	4b16      	ldr	r3, [pc, #88]	; (800541c <FLASH_SetErrorCode+0xa8>)
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f043 0304 	orr.w	r3, r3, #4
 80053c8:	4a14      	ldr	r2, [pc, #80]	; (800541c <FLASH_SetErrorCode+0xa8>)
 80053ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80053cc:	4b12      	ldr	r3, [pc, #72]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80053de:	4b0f      	ldr	r3, [pc, #60]	; (800541c <FLASH_SetErrorCode+0xa8>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f043 0302 	orr.w	r3, r3, #2
 80053e6:	4a0d      	ldr	r2, [pc, #52]	; (800541c <FLASH_SetErrorCode+0xa8>)
 80053e8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80053fc:	4b07      	ldr	r3, [pc, #28]	; (800541c <FLASH_SetErrorCode+0xa8>)
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f043 0320 	orr.w	r3, r3, #32
 8005404:	4a05      	ldr	r2, [pc, #20]	; (800541c <FLASH_SetErrorCode+0xa8>)
 8005406:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005408:	4b03      	ldr	r3, [pc, #12]	; (8005418 <FLASH_SetErrorCode+0xa4>)
 800540a:	2202      	movs	r2, #2
 800540c:	60da      	str	r2, [r3, #12]
  }
}
 800540e:	bf00      	nop
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	40023c00 	.word	0x40023c00
 800541c:	2000516c 	.word	0x2000516c

08005420 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005432:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <HAL_FLASHEx_Erase+0xd8>)
 8005434:	7e1b      	ldrb	r3, [r3, #24]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_FLASHEx_Erase+0x1e>
 800543a:	2302      	movs	r3, #2
 800543c:	e058      	b.n	80054f0 <HAL_FLASHEx_Erase+0xd0>
 800543e:	4b2e      	ldr	r3, [pc, #184]	; (80054f8 <HAL_FLASHEx_Erase+0xd8>)
 8005440:	2201      	movs	r2, #1
 8005442:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005444:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005448:	f7ff feba 	bl	80051c0 <FLASH_WaitForLastOperation>
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d148      	bne.n	80054e8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d115      	bne.n	8005492 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f000 f844 	bl	8005500 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005478:	f24c 3050 	movw	r0, #50000	; 0xc350
 800547c:	f7ff fea0 	bl	80051c0 <FLASH_WaitForLastOperation>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005484:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <HAL_FLASHEx_Erase+0xdc>)
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <HAL_FLASHEx_Erase+0xdc>)
 800548a:	f023 0304 	bic.w	r3, r3, #4
 800548e:	6113      	str	r3, [r2, #16]
 8005490:	e028      	b.n	80054e4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	e01c      	b.n	80054d4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	4619      	mov	r1, r3
 80054a2:	68b8      	ldr	r0, [r7, #8]
 80054a4:	f000 f850 	bl	8005548 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80054a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054ac:	f7ff fe88 	bl	80051c0 <FLASH_WaitForLastOperation>
 80054b0:	4603      	mov	r3, r0
 80054b2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80054b4:	4b11      	ldr	r3, [pc, #68]	; (80054fc <HAL_FLASHEx_Erase+0xdc>)
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	4a10      	ldr	r2, [pc, #64]	; (80054fc <HAL_FLASHEx_Erase+0xdc>)
 80054ba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80054be:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	601a      	str	r2, [r3, #0]
          break;
 80054cc:	e00a      	b.n	80054e4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d3da      	bcc.n	800549a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80054e4:	f000 f878 	bl	80055d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <HAL_FLASHEx_Erase+0xd8>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	761a      	strb	r2, [r3, #24]

  return status;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	2000516c 	.word	0x2000516c
 80054fc:	40023c00 	.word	0x40023c00

08005500 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	6039      	str	r1, [r7, #0]
 800550a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <FLASH_MassErase+0x44>)
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <FLASH_MassErase+0x44>)
 8005512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <FLASH_MassErase+0x44>)
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	4a09      	ldr	r2, [pc, #36]	; (8005544 <FLASH_MassErase+0x44>)
 800551e:	f043 0304 	orr.w	r3, r3, #4
 8005522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <FLASH_MassErase+0x44>)
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	4313      	orrs	r3, r2
 800552e:	4a05      	ldr	r2, [pc, #20]	; (8005544 <FLASH_MassErase+0x44>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005534:	6113      	str	r3, [r2, #16]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40023c00 	.word	0x40023c00

08005548 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d102      	bne.n	8005564 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	e010      	b.n	8005586 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d103      	bne.n	8005572 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800556a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e009      	b.n	8005586 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d103      	bne.n	8005580 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e002      	b.n	8005586 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005580:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005584:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 800558c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005590:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005592:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	490f      	ldr	r1, [pc, #60]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 80055a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80055a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	4a07      	ldr	r2, [pc, #28]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 80055b6:	f043 0302 	orr.w	r3, r3, #2
 80055ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <FLASH_Erase_Sector+0x8c>)
 80055c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c6:	6113      	str	r3, [r2, #16]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40023c00 	.word	0x40023c00

080055d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80055dc:	4b20      	ldr	r3, [pc, #128]	; (8005660 <FLASH_FlushCaches+0x88>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <FLASH_FlushCaches+0x88>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1c      	ldr	r2, [pc, #112]	; (8005660 <FLASH_FlushCaches+0x88>)
 80055ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80055f4:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <FLASH_FlushCaches+0x88>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a19      	ldr	r2, [pc, #100]	; (8005660 <FLASH_FlushCaches+0x88>)
 80055fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4b17      	ldr	r3, [pc, #92]	; (8005660 <FLASH_FlushCaches+0x88>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a16      	ldr	r2, [pc, #88]	; (8005660 <FLASH_FlushCaches+0x88>)
 8005606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800560a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800560c:	4b14      	ldr	r3, [pc, #80]	; (8005660 <FLASH_FlushCaches+0x88>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a13      	ldr	r2, [pc, #76]	; (8005660 <FLASH_FlushCaches+0x88>)
 8005612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005616:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005618:	4b11      	ldr	r3, [pc, #68]	; (8005660 <FLASH_FlushCaches+0x88>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005620:	2b00      	cmp	r3, #0
 8005622:	d017      	beq.n	8005654 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005624:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <FLASH_FlushCaches+0x88>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a0d      	ldr	r2, [pc, #52]	; (8005660 <FLASH_FlushCaches+0x88>)
 800562a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800562e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <FLASH_FlushCaches+0x88>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <FLASH_FlushCaches+0x88>)
 8005636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	4b08      	ldr	r3, [pc, #32]	; (8005660 <FLASH_FlushCaches+0x88>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a07      	ldr	r2, [pc, #28]	; (8005660 <FLASH_FlushCaches+0x88>)
 8005642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005646:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <FLASH_FlushCaches+0x88>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a04      	ldr	r2, [pc, #16]	; (8005660 <FLASH_FlushCaches+0x88>)
 800564e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005652:	6013      	str	r3, [r2, #0]
  }
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40023c00 	.word	0x40023c00

08005664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005676:	2300      	movs	r3, #0
 8005678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	e16b      	b.n	8005958 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005680:	2201      	movs	r2, #1
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4013      	ands	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	429a      	cmp	r2, r3
 800569a:	f040 815a 	bne.w	8005952 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d005      	beq.n	80056b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d130      	bne.n	8005718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	2203      	movs	r2, #3
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43db      	mvns	r3, r3
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4013      	ands	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056ec:	2201      	movs	r2, #1
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 0201 	and.w	r2, r3, #1
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	2b03      	cmp	r3, #3
 8005722:	d017      	beq.n	8005754 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	2203      	movs	r2, #3
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d123      	bne.n	80057a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	08da      	lsrs	r2, r3, #3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3208      	adds	r2, #8
 8005768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	220f      	movs	r2, #15
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4013      	ands	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4313      	orrs	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	08da      	lsrs	r2, r3, #3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3208      	adds	r2, #8
 80057a2:	69b9      	ldr	r1, [r7, #24]
 80057a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f003 0203 	and.w	r2, r3, #3
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80b4 	beq.w	8005952 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	4b60      	ldr	r3, [pc, #384]	; (8005970 <HAL_GPIO_Init+0x30c>)
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	4a5f      	ldr	r2, [pc, #380]	; (8005970 <HAL_GPIO_Init+0x30c>)
 80057f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f8:	6453      	str	r3, [r2, #68]	; 0x44
 80057fa:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <HAL_GPIO_Init+0x30c>)
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005806:	4a5b      	ldr	r2, [pc, #364]	; (8005974 <HAL_GPIO_Init+0x310>)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	3302      	adds	r3, #2
 800580e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	220f      	movs	r2, #15
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	43db      	mvns	r3, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4013      	ands	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a52      	ldr	r2, [pc, #328]	; (8005978 <HAL_GPIO_Init+0x314>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02b      	beq.n	800588a <HAL_GPIO_Init+0x226>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a51      	ldr	r2, [pc, #324]	; (800597c <HAL_GPIO_Init+0x318>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d025      	beq.n	8005886 <HAL_GPIO_Init+0x222>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a50      	ldr	r2, [pc, #320]	; (8005980 <HAL_GPIO_Init+0x31c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01f      	beq.n	8005882 <HAL_GPIO_Init+0x21e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a4f      	ldr	r2, [pc, #316]	; (8005984 <HAL_GPIO_Init+0x320>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d019      	beq.n	800587e <HAL_GPIO_Init+0x21a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a4e      	ldr	r2, [pc, #312]	; (8005988 <HAL_GPIO_Init+0x324>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_GPIO_Init+0x216>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a4d      	ldr	r2, [pc, #308]	; (800598c <HAL_GPIO_Init+0x328>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00d      	beq.n	8005876 <HAL_GPIO_Init+0x212>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a4c      	ldr	r2, [pc, #304]	; (8005990 <HAL_GPIO_Init+0x32c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d007      	beq.n	8005872 <HAL_GPIO_Init+0x20e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a4b      	ldr	r2, [pc, #300]	; (8005994 <HAL_GPIO_Init+0x330>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_GPIO_Init+0x20a>
 800586a:	2307      	movs	r3, #7
 800586c:	e00e      	b.n	800588c <HAL_GPIO_Init+0x228>
 800586e:	2308      	movs	r3, #8
 8005870:	e00c      	b.n	800588c <HAL_GPIO_Init+0x228>
 8005872:	2306      	movs	r3, #6
 8005874:	e00a      	b.n	800588c <HAL_GPIO_Init+0x228>
 8005876:	2305      	movs	r3, #5
 8005878:	e008      	b.n	800588c <HAL_GPIO_Init+0x228>
 800587a:	2304      	movs	r3, #4
 800587c:	e006      	b.n	800588c <HAL_GPIO_Init+0x228>
 800587e:	2303      	movs	r3, #3
 8005880:	e004      	b.n	800588c <HAL_GPIO_Init+0x228>
 8005882:	2302      	movs	r3, #2
 8005884:	e002      	b.n	800588c <HAL_GPIO_Init+0x228>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_GPIO_Init+0x228>
 800588a:	2300      	movs	r3, #0
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	f002 0203 	and.w	r2, r2, #3
 8005892:	0092      	lsls	r2, r2, #2
 8005894:	4093      	lsls	r3, r2
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4313      	orrs	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800589c:	4935      	ldr	r1, [pc, #212]	; (8005974 <HAL_GPIO_Init+0x310>)
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	089b      	lsrs	r3, r3, #2
 80058a2:	3302      	adds	r3, #2
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058aa:	4b3b      	ldr	r3, [pc, #236]	; (8005998 <HAL_GPIO_Init+0x334>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	43db      	mvns	r3, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058ce:	4a32      	ldr	r2, [pc, #200]	; (8005998 <HAL_GPIO_Init+0x334>)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80058d4:	4b30      	ldr	r3, [pc, #192]	; (8005998 <HAL_GPIO_Init+0x334>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	43db      	mvns	r3, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4013      	ands	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058f8:	4a27      	ldr	r2, [pc, #156]	; (8005998 <HAL_GPIO_Init+0x334>)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058fe:	4b26      	ldr	r3, [pc, #152]	; (8005998 <HAL_GPIO_Init+0x334>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	43db      	mvns	r3, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4013      	ands	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005922:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <HAL_GPIO_Init+0x334>)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <HAL_GPIO_Init+0x334>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	43db      	mvns	r3, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4013      	ands	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800594c:	4a12      	ldr	r2, [pc, #72]	; (8005998 <HAL_GPIO_Init+0x334>)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3301      	adds	r3, #1
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b0f      	cmp	r3, #15
 800595c:	f67f ae90 	bls.w	8005680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	3724      	adds	r7, #36	; 0x24
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40023800 	.word	0x40023800
 8005974:	40013800 	.word	0x40013800
 8005978:	40020000 	.word	0x40020000
 800597c:	40020400 	.word	0x40020400
 8005980:	40020800 	.word	0x40020800
 8005984:	40020c00 	.word	0x40020c00
 8005988:	40021000 	.word	0x40021000
 800598c:	40021400 	.word	0x40021400
 8005990:	40021800 	.word	0x40021800
 8005994:	40021c00 	.word	0x40021c00
 8005998:	40013c00 	.word	0x40013c00

0800599c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
 80059a8:	4613      	mov	r3, r2
 80059aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059ac:	787b      	ldrb	r3, [r7, #1]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059b8:	e003      	b.n	80059c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059ba:	887b      	ldrh	r3, [r7, #2]
 80059bc:	041a      	lsls	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	619a      	str	r2, [r3, #24]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e264      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d075      	beq.n	8005ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ee:	4ba3      	ldr	r3, [pc, #652]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d00c      	beq.n	8005a14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fa:	4ba0      	ldr	r3, [pc, #640]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d112      	bne.n	8005a2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a06:	4b9d      	ldr	r3, [pc, #628]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a12:	d10b      	bne.n	8005a2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a14:	4b99      	ldr	r3, [pc, #612]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d05b      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x108>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d157      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e23f      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a34:	d106      	bne.n	8005a44 <HAL_RCC_OscConfig+0x74>
 8005a36:	4b91      	ldr	r3, [pc, #580]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a90      	ldr	r2, [pc, #576]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e01d      	b.n	8005a80 <HAL_RCC_OscConfig+0xb0>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a4c:	d10c      	bne.n	8005a68 <HAL_RCC_OscConfig+0x98>
 8005a4e:	4b8b      	ldr	r3, [pc, #556]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a8a      	ldr	r2, [pc, #552]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4b88      	ldr	r3, [pc, #544]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a87      	ldr	r2, [pc, #540]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	e00b      	b.n	8005a80 <HAL_RCC_OscConfig+0xb0>
 8005a68:	4b84      	ldr	r3, [pc, #528]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a83      	ldr	r2, [pc, #524]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4b81      	ldr	r3, [pc, #516]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a80      	ldr	r2, [pc, #512]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d013      	beq.n	8005ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a88:	f7fd fa30 	bl	8002eec <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a90:	f7fd fa2c 	bl	8002eec <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	; 0x64
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e204      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0xc0>
 8005aae:	e014      	b.n	8005ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab0:	f7fd fa1c 	bl	8002eec <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ab8:	f7fd fa18 	bl	8002eec <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	; 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e1f0      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aca:	4b6c      	ldr	r3, [pc, #432]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0xe8>
 8005ad6:	e000      	b.n	8005ada <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d063      	beq.n	8005bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ae6:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af2:	4b62      	ldr	r3, [pc, #392]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d11c      	bne.n	8005b38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afe:	4b5f      	ldr	r3, [pc, #380]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d116      	bne.n	8005b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0a:	4b5c      	ldr	r3, [pc, #368]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <HAL_RCC_OscConfig+0x152>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e1c4      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b22:	4b56      	ldr	r3, [pc, #344]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4952      	ldr	r1, [pc, #328]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	e03a      	b.n	8005bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b40:	4b4f      	ldr	r3, [pc, #316]	; (8005c80 <HAL_RCC_OscConfig+0x2b0>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b46:	f7fd f9d1 	bl	8002eec <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b4e:	f7fd f9cd 	bl	8002eec <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e1a5      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b60:	4b46      	ldr	r3, [pc, #280]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6c:	4b43      	ldr	r3, [pc, #268]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4940      	ldr	r1, [pc, #256]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]
 8005b80:	e015      	b.n	8005bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b82:	4b3f      	ldr	r3, [pc, #252]	; (8005c80 <HAL_RCC_OscConfig+0x2b0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fd f9b0 	bl	8002eec <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b90:	f7fd f9ac 	bl	8002eec <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e184      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba2:	4b36      	ldr	r3, [pc, #216]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d030      	beq.n	8005c1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc2:	4b30      	ldr	r3, [pc, #192]	; (8005c84 <HAL_RCC_OscConfig+0x2b4>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fd f990 	bl	8002eec <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd0:	f7fd f98c 	bl	8002eec <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e164      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	4b26      	ldr	r3, [pc, #152]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x200>
 8005bee:	e015      	b.n	8005c1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf0:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <HAL_RCC_OscConfig+0x2b4>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf6:	f7fd f979 	bl	8002eec <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bfe:	f7fd f975 	bl	8002eec <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e14d      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c10:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f0      	bne.n	8005bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80a0 	beq.w	8005d6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10f      	bne.n	8005c5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c48:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c56:	2301      	movs	r3, #1
 8005c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <HAL_RCC_OscConfig+0x2b8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d121      	bne.n	8005caa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c66:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <HAL_RCC_OscConfig+0x2b8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a07      	ldr	r2, [pc, #28]	; (8005c88 <HAL_RCC_OscConfig+0x2b8>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c72:	f7fd f93b 	bl	8002eec <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c78:	e011      	b.n	8005c9e <HAL_RCC_OscConfig+0x2ce>
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	42470000 	.word	0x42470000
 8005c84:	42470e80 	.word	0x42470e80
 8005c88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8c:	f7fd f92e 	bl	8002eec <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e106      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9e:	4b85      	ldr	r3, [pc, #532]	; (8005eb4 <HAL_RCC_OscConfig+0x4e4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d106      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x2f0>
 8005cb2:	4b81      	ldr	r3, [pc, #516]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4a80      	ldr	r2, [pc, #512]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbe:	e01c      	b.n	8005cfa <HAL_RCC_OscConfig+0x32a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d10c      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x312>
 8005cc8:	4b7b      	ldr	r3, [pc, #492]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	4a7a      	ldr	r2, [pc, #488]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005cce:	f043 0304 	orr.w	r3, r3, #4
 8005cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd4:	4b78      	ldr	r3, [pc, #480]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a77      	ldr	r2, [pc, #476]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce0:	e00b      	b.n	8005cfa <HAL_RCC_OscConfig+0x32a>
 8005ce2:	4b75      	ldr	r3, [pc, #468]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	4a74      	ldr	r2, [pc, #464]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	6713      	str	r3, [r2, #112]	; 0x70
 8005cee:	4b72      	ldr	r3, [pc, #456]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	4a71      	ldr	r2, [pc, #452]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005cf4:	f023 0304 	bic.w	r3, r3, #4
 8005cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d015      	beq.n	8005d2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d02:	f7fd f8f3 	bl	8002eec <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d08:	e00a      	b.n	8005d20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d0a:	f7fd f8ef 	bl	8002eec <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e0c5      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d20:	4b65      	ldr	r3, [pc, #404]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0ee      	beq.n	8005d0a <HAL_RCC_OscConfig+0x33a>
 8005d2c:	e014      	b.n	8005d58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d2e:	f7fd f8dd 	bl	8002eec <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d34:	e00a      	b.n	8005d4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d36:	f7fd f8d9 	bl	8002eec <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e0af      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d4c:	4b5a      	ldr	r3, [pc, #360]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ee      	bne.n	8005d36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d105      	bne.n	8005d6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5e:	4b56      	ldr	r3, [pc, #344]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	4a55      	ldr	r2, [pc, #340]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 809b 	beq.w	8005eaa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d74:	4b50      	ldr	r3, [pc, #320]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 030c 	and.w	r3, r3, #12
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d05c      	beq.n	8005e3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d141      	bne.n	8005e0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d88:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <HAL_RCC_OscConfig+0x4ec>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fd f8ad 	bl	8002eec <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d96:	f7fd f8a9 	bl	8002eec <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e081      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da8:	4b43      	ldr	r3, [pc, #268]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f0      	bne.n	8005d96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	019b      	lsls	r3, r3, #6
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	061b      	lsls	r3, r3, #24
 8005dd8:	4937      	ldr	r1, [pc, #220]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dde:	4b37      	ldr	r3, [pc, #220]	; (8005ebc <HAL_RCC_OscConfig+0x4ec>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de4:	f7fd f882 	bl	8002eec <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dec:	f7fd f87e 	bl	8002eec <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e056      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfe:	4b2e      	ldr	r3, [pc, #184]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0f0      	beq.n	8005dec <HAL_RCC_OscConfig+0x41c>
 8005e0a:	e04e      	b.n	8005eaa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0c:	4b2b      	ldr	r3, [pc, #172]	; (8005ebc <HAL_RCC_OscConfig+0x4ec>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e12:	f7fd f86b 	bl	8002eec <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1a:	f7fd f867 	bl	8002eec <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e03f      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2c:	4b22      	ldr	r3, [pc, #136]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f0      	bne.n	8005e1a <HAL_RCC_OscConfig+0x44a>
 8005e38:	e037      	b.n	8005eaa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e032      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e46:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <HAL_RCC_OscConfig+0x4e8>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d028      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d121      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d11a      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e76:	4013      	ands	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d111      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d107      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d001      	beq.n	8005eaa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	42470060 	.word	0x42470060

08005ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0cc      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b68      	ldr	r3, [pc, #416]	; (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d90c      	bls.n	8005efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b65      	ldr	r3, [pc, #404]	; (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eea:	4b63      	ldr	r3, [pc, #396]	; (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0b8      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f14:	4b59      	ldr	r3, [pc, #356]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4a58      	ldr	r2, [pc, #352]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f2c:	4b53      	ldr	r3, [pc, #332]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4a52      	ldr	r2, [pc, #328]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f38:	4b50      	ldr	r3, [pc, #320]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	494d      	ldr	r1, [pc, #308]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d044      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d107      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5e:	4b47      	ldr	r3, [pc, #284]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d119      	bne.n	8005f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e07f      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d003      	beq.n	8005f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d107      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7e:	4b3f      	ldr	r3, [pc, #252]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e06f      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8e:	4b3b      	ldr	r3, [pc, #236]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e067      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f9e:	4b37      	ldr	r3, [pc, #220]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f023 0203 	bic.w	r2, r3, #3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4934      	ldr	r1, [pc, #208]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fb0:	f7fc ff9c 	bl	8002eec <HAL_GetTick>
 8005fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb6:	e00a      	b.n	8005fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb8:	f7fc ff98 	bl	8002eec <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e04f      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fce:	4b2b      	ldr	r3, [pc, #172]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 020c 	and.w	r2, r3, #12
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d1eb      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe0:	4b25      	ldr	r3, [pc, #148]	; (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d20c      	bcs.n	8006008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fee:	4b22      	ldr	r3, [pc, #136]	; (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	4b20      	ldr	r3, [pc, #128]	; (8006078 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d001      	beq.n	8006008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e032      	b.n	800606e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4916      	ldr	r1, [pc, #88]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	490e      	ldr	r1, [pc, #56]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006046:	f000 f821 	bl	800608c <HAL_RCC_GetSysClockFreq>
 800604a:	4602      	mov	r2, r0
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	091b      	lsrs	r3, r3, #4
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	490a      	ldr	r1, [pc, #40]	; (8006080 <HAL_RCC_ClockConfig+0x1c0>)
 8006058:	5ccb      	ldrb	r3, [r1, r3]
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	4a09      	ldr	r2, [pc, #36]	; (8006084 <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_RCC_ClockConfig+0x1c8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fc faa6 	bl	80025b8 <HAL_InitTick>

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40023c00 	.word	0x40023c00
 800607c:	40023800 	.word	0x40023800
 8006080:	0800b5cc 	.word	0x0800b5cc
 8006084:	20000004 	.word	0x20000004
 8006088:	20000008 	.word	0x20000008

0800608c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800608c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	607b      	str	r3, [r7, #4]
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	2300      	movs	r3, #0
 800609e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060a4:	4b67      	ldr	r3, [pc, #412]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 030c 	and.w	r3, r3, #12
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d00d      	beq.n	80060cc <HAL_RCC_GetSysClockFreq+0x40>
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	f200 80bd 	bhi.w	8006230 <HAL_RCC_GetSysClockFreq+0x1a4>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_RCC_GetSysClockFreq+0x34>
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d003      	beq.n	80060c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80060be:	e0b7      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060c0:	4b61      	ldr	r3, [pc, #388]	; (8006248 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80060c2:	60bb      	str	r3, [r7, #8]
       break;
 80060c4:	e0b7      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060c6:	4b61      	ldr	r3, [pc, #388]	; (800624c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80060c8:	60bb      	str	r3, [r7, #8]
      break;
 80060ca:	e0b4      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060cc:	4b5d      	ldr	r3, [pc, #372]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060d6:	4b5b      	ldr	r3, [pc, #364]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d04d      	beq.n	800617e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e2:	4b58      	ldr	r3, [pc, #352]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	099b      	lsrs	r3, r3, #6
 80060e8:	461a      	mov	r2, r3
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060f2:	f04f 0100 	mov.w	r1, #0
 80060f6:	ea02 0800 	and.w	r8, r2, r0
 80060fa:	ea03 0901 	and.w	r9, r3, r1
 80060fe:	4640      	mov	r0, r8
 8006100:	4649      	mov	r1, r9
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	014b      	lsls	r3, r1, #5
 800610c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006110:	0142      	lsls	r2, r0, #5
 8006112:	4610      	mov	r0, r2
 8006114:	4619      	mov	r1, r3
 8006116:	ebb0 0008 	subs.w	r0, r0, r8
 800611a:	eb61 0109 	sbc.w	r1, r1, r9
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	018b      	lsls	r3, r1, #6
 8006128:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800612c:	0182      	lsls	r2, r0, #6
 800612e:	1a12      	subs	r2, r2, r0
 8006130:	eb63 0301 	sbc.w	r3, r3, r1
 8006134:	f04f 0000 	mov.w	r0, #0
 8006138:	f04f 0100 	mov.w	r1, #0
 800613c:	00d9      	lsls	r1, r3, #3
 800613e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006142:	00d0      	lsls	r0, r2, #3
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	eb12 0208 	adds.w	r2, r2, r8
 800614c:	eb43 0309 	adc.w	r3, r3, r9
 8006150:	f04f 0000 	mov.w	r0, #0
 8006154:	f04f 0100 	mov.w	r1, #0
 8006158:	0259      	lsls	r1, r3, #9
 800615a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800615e:	0250      	lsls	r0, r2, #9
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4610      	mov	r0, r2
 8006166:	4619      	mov	r1, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	461a      	mov	r2, r3
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	f7fa f82e 	bl	80001d0 <__aeabi_uldivmod>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4613      	mov	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	e04a      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800617e:	4b31      	ldr	r3, [pc, #196]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	099b      	lsrs	r3, r3, #6
 8006184:	461a      	mov	r2, r3
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800618e:	f04f 0100 	mov.w	r1, #0
 8006192:	ea02 0400 	and.w	r4, r2, r0
 8006196:	ea03 0501 	and.w	r5, r3, r1
 800619a:	4620      	mov	r0, r4
 800619c:	4629      	mov	r1, r5
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	014b      	lsls	r3, r1, #5
 80061a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061ac:	0142      	lsls	r2, r0, #5
 80061ae:	4610      	mov	r0, r2
 80061b0:	4619      	mov	r1, r3
 80061b2:	1b00      	subs	r0, r0, r4
 80061b4:	eb61 0105 	sbc.w	r1, r1, r5
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	018b      	lsls	r3, r1, #6
 80061c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061c6:	0182      	lsls	r2, r0, #6
 80061c8:	1a12      	subs	r2, r2, r0
 80061ca:	eb63 0301 	sbc.w	r3, r3, r1
 80061ce:	f04f 0000 	mov.w	r0, #0
 80061d2:	f04f 0100 	mov.w	r1, #0
 80061d6:	00d9      	lsls	r1, r3, #3
 80061d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061dc:	00d0      	lsls	r0, r2, #3
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	1912      	adds	r2, r2, r4
 80061e4:	eb45 0303 	adc.w	r3, r5, r3
 80061e8:	f04f 0000 	mov.w	r0, #0
 80061ec:	f04f 0100 	mov.w	r1, #0
 80061f0:	0299      	lsls	r1, r3, #10
 80061f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061f6:	0290      	lsls	r0, r2, #10
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4610      	mov	r0, r2
 80061fe:	4619      	mov	r1, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	461a      	mov	r2, r3
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	f7f9 ffe2 	bl	80001d0 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	0c1b      	lsrs	r3, r3, #16
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	3301      	adds	r3, #1
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	60bb      	str	r3, [r7, #8]
      break;
 800622e:	e002      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006232:	60bb      	str	r3, [r7, #8]
      break;
 8006234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006236:	68bb      	ldr	r3, [r7, #8]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006242:	bf00      	nop
 8006244:	40023800 	.word	0x40023800
 8006248:	00f42400 	.word	0x00f42400
 800624c:	007a1200 	.word	0x007a1200

08006250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006254:	4b03      	ldr	r3, [pc, #12]	; (8006264 <HAL_RCC_GetHCLKFreq+0x14>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000004 	.word	0x20000004

08006268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800626c:	f7ff fff0 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	0a9b      	lsrs	r3, r3, #10
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4903      	ldr	r1, [pc, #12]	; (800628c <HAL_RCC_GetPCLK1Freq+0x24>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40023800 	.word	0x40023800
 800628c:	0800b5dc 	.word	0x0800b5dc

08006290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006294:	f7ff ffdc 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006298:	4602      	mov	r2, r0
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	0b5b      	lsrs	r3, r3, #13
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4903      	ldr	r1, [pc, #12]	; (80062b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a6:	5ccb      	ldrb	r3, [r1, r3]
 80062a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40023800 	.word	0x40023800
 80062b4:	0800b5dc 	.word	0x0800b5dc

080062b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	220f      	movs	r2, #15
 80062c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062c8:	4b12      	ldr	r3, [pc, #72]	; (8006314 <HAL_RCC_GetClockConfig+0x5c>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0203 	and.w	r2, r3, #3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <HAL_RCC_GetClockConfig+0x5c>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062e0:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <HAL_RCC_GetClockConfig+0x5c>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <HAL_RCC_GetClockConfig+0x5c>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	08db      	lsrs	r3, r3, #3
 80062f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <HAL_RCC_GetClockConfig+0x60>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0207 	and.w	r2, r3, #7
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800
 8006318:	40023c00 	.word	0x40023c00

0800631c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e041      	b.n	80063b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb fef2 	bl	800212c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f000 fbaa 	bl	8006ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d001      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e04e      	b.n	8006472 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a23      	ldr	r2, [pc, #140]	; (8006480 <HAL_TIM_Base_Start_IT+0xc4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d022      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fe:	d01d      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <HAL_TIM_Base_Start_IT+0xc8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <HAL_TIM_Base_Start_IT+0xcc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1c      	ldr	r2, [pc, #112]	; (800648c <HAL_TIM_Base_Start_IT+0xd0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1b      	ldr	r2, [pc, #108]	; (8006490 <HAL_TIM_Base_Start_IT+0xd4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a19      	ldr	r2, [pc, #100]	; (8006494 <HAL_TIM_Base_Start_IT+0xd8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a18      	ldr	r2, [pc, #96]	; (8006498 <HAL_TIM_Base_Start_IT+0xdc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d111      	bne.n	8006460 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b06      	cmp	r3, #6
 800644c:	d010      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645e:	e007      	b.n	8006470 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40010000 	.word	0x40010000
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40000c00 	.word	0x40000c00
 8006490:	40010400 	.word	0x40010400
 8006494:	40014000 	.word	0x40014000
 8006498:	40001800 	.word	0x40001800

0800649c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e041      	b.n	8006532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f839 	bl	800653a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f000 faea 	bl	8006ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d122      	bne.n	80065aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d11b      	bne.n	80065aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f06f 0202 	mvn.w	r2, #2
 800657a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fa71 	bl	8006a78 <HAL_TIM_IC_CaptureCallback>
 8006596:	e005      	b.n	80065a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fa63 	bl	8006a64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa74 	bl	8006a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d122      	bne.n	80065fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d11b      	bne.n	80065fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f06f 0204 	mvn.w	r2, #4
 80065ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fa47 	bl	8006a78 <HAL_TIM_IC_CaptureCallback>
 80065ea:	e005      	b.n	80065f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fa39 	bl	8006a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa4a 	bl	8006a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d122      	bne.n	8006652 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b08      	cmp	r3, #8
 8006618:	d11b      	bne.n	8006652 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f06f 0208 	mvn.w	r2, #8
 8006622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2204      	movs	r2, #4
 8006628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fa1d 	bl	8006a78 <HAL_TIM_IC_CaptureCallback>
 800663e:	e005      	b.n	800664c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fa0f 	bl	8006a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa20 	bl	8006a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b10      	cmp	r3, #16
 800665e:	d122      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	2b10      	cmp	r3, #16
 800666c:	d11b      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f06f 0210 	mvn.w	r2, #16
 8006676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2208      	movs	r2, #8
 800667c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9f3 	bl	8006a78 <HAL_TIM_IC_CaptureCallback>
 8006692:	e005      	b.n	80066a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f9e5 	bl	8006a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9f6 	bl	8006a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d10e      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d107      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0201 	mvn.w	r2, #1
 80066ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fb fa75 	bl	8001bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b80      	cmp	r3, #128	; 0x80
 80066de:	d10e      	bne.n	80066fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ea:	2b80      	cmp	r3, #128	; 0x80
 80066ec:	d107      	bne.n	80066fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fd9d 	bl	8007238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d10e      	bne.n	800672a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d107      	bne.n	800672a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f9bb 	bl	8006aa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b20      	cmp	r3, #32
 8006736:	d10e      	bne.n	8006756 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b20      	cmp	r3, #32
 8006744:	d107      	bne.n	8006756 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0220 	mvn.w	r2, #32
 800674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fd67 	bl	8007224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006776:	2302      	movs	r3, #2
 8006778:	e0ac      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b0c      	cmp	r3, #12
 8006786:	f200 809f 	bhi.w	80068c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800678a:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067c5 	.word	0x080067c5
 8006794:	080068c9 	.word	0x080068c9
 8006798:	080068c9 	.word	0x080068c9
 800679c:	080068c9 	.word	0x080068c9
 80067a0:	08006805 	.word	0x08006805
 80067a4:	080068c9 	.word	0x080068c9
 80067a8:	080068c9 	.word	0x080068c9
 80067ac:	080068c9 	.word	0x080068c9
 80067b0:	08006847 	.word	0x08006847
 80067b4:	080068c9 	.word	0x080068c9
 80067b8:	080068c9 	.word	0x080068c9
 80067bc:	080068c9 	.word	0x080068c9
 80067c0:	08006887 	.word	0x08006887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fa12 	bl	8006bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0208 	orr.w	r2, r2, #8
 80067de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0204 	bic.w	r2, r2, #4
 80067ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6999      	ldr	r1, [r3, #24]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	619a      	str	r2, [r3, #24]
      break;
 8006802:	e062      	b.n	80068ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fa62 	bl	8006cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800681e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6999      	ldr	r1, [r3, #24]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	021a      	lsls	r2, r3, #8
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	619a      	str	r2, [r3, #24]
      break;
 8006844:	e041      	b.n	80068ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fab7 	bl	8006dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0208 	orr.w	r2, r2, #8
 8006860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0204 	bic.w	r2, r2, #4
 8006870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69d9      	ldr	r1, [r3, #28]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	61da      	str	r2, [r3, #28]
      break;
 8006884:	e021      	b.n	80068ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fb0b 	bl	8006ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69d9      	ldr	r1, [r3, #28]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	021a      	lsls	r2, r3, #8
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	61da      	str	r2, [r3, #28]
      break;
 80068c6:	e000      	b.n	80068ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80068c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIM_ConfigClockSource+0x18>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e0b3      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x180>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006912:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800691a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692c:	d03e      	beq.n	80069ac <HAL_TIM_ConfigClockSource+0xd0>
 800692e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006932:	f200 8087 	bhi.w	8006a44 <HAL_TIM_ConfigClockSource+0x168>
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693a:	f000 8085 	beq.w	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 800693e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006942:	d87f      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x168>
 8006944:	2b70      	cmp	r3, #112	; 0x70
 8006946:	d01a      	beq.n	800697e <HAL_TIM_ConfigClockSource+0xa2>
 8006948:	2b70      	cmp	r3, #112	; 0x70
 800694a:	d87b      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x168>
 800694c:	2b60      	cmp	r3, #96	; 0x60
 800694e:	d050      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0x116>
 8006950:	2b60      	cmp	r3, #96	; 0x60
 8006952:	d877      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x168>
 8006954:	2b50      	cmp	r3, #80	; 0x50
 8006956:	d03c      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0xf6>
 8006958:	2b50      	cmp	r3, #80	; 0x50
 800695a:	d873      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x168>
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d058      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0x136>
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d86f      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x168>
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d064      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x156>
 8006968:	2b30      	cmp	r3, #48	; 0x30
 800696a:	d86b      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x168>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d060      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x156>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d867      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x168>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d05c      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x156>
 8006978:	2b10      	cmp	r3, #16
 800697a:	d05a      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800697c:	e062      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6899      	ldr	r1, [r3, #8]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f000 fb5b 	bl	8007048 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	609a      	str	r2, [r3, #8]
      break;
 80069aa:	e04e      	b.n	8006a4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f000 fb44 	bl	8007048 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ce:	609a      	str	r2, [r3, #8]
      break;
 80069d0:	e03b      	b.n	8006a4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6859      	ldr	r1, [r3, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	461a      	mov	r2, r3
 80069e0:	f000 fab8 	bl	8006f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2150      	movs	r1, #80	; 0x50
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fb11 	bl	8007012 <TIM_ITRx_SetConfig>
      break;
 80069f0:	e02b      	b.n	8006a4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f000 fad7 	bl	8006fb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2160      	movs	r1, #96	; 0x60
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fb01 	bl	8007012 <TIM_ITRx_SetConfig>
      break;
 8006a10:	e01b      	b.n	8006a4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6859      	ldr	r1, [r3, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f000 fa98 	bl	8006f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2140      	movs	r1, #64	; 0x40
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 faf1 	bl	8007012 <TIM_ITRx_SetConfig>
      break;
 8006a30:	e00b      	b.n	8006a4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f000 fae8 	bl	8007012 <TIM_ITRx_SetConfig>
        break;
 8006a42:	e002      	b.n	8006a4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a44:	bf00      	nop
 8006a46:	e000      	b.n	8006a4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a40      	ldr	r2, [pc, #256]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d00f      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a3d      	ldr	r2, [pc, #244]	; (8006bcc <TIM_Base_SetConfig+0x118>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00b      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3c      	ldr	r2, [pc, #240]	; (8006bd0 <TIM_Base_SetConfig+0x11c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3b      	ldr	r2, [pc, #236]	; (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a3a      	ldr	r2, [pc, #232]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d108      	bne.n	8006b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a2f      	ldr	r2, [pc, #188]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d02b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b14:	d027      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2c      	ldr	r2, [pc, #176]	; (8006bcc <TIM_Base_SetConfig+0x118>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d023      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2b      	ldr	r2, [pc, #172]	; (8006bd0 <TIM_Base_SetConfig+0x11c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01f      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d017      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <TIM_Base_SetConfig+0x128>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <TIM_Base_SetConfig+0x12c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <TIM_Base_SetConfig+0x130>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <TIM_Base_SetConfig+0x134>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d007      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a24      	ldr	r2, [pc, #144]	; (8006bec <TIM_Base_SetConfig+0x138>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a23      	ldr	r2, [pc, #140]	; (8006bf0 <TIM_Base_SetConfig+0x13c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0xf8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d103      	bne.n	8006bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	615a      	str	r2, [r3, #20]
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40010400 	.word	0x40010400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800
 8006be8:	40001800 	.word	0x40001800
 8006bec:	40001c00 	.word	0x40001c00
 8006bf0:	40002000 	.word	0x40002000

08006bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0302 	bic.w	r3, r3, #2
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a20      	ldr	r2, [pc, #128]	; (8006ccc <TIM_OC1_SetConfig+0xd8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC1_SetConfig+0x64>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <TIM_OC1_SetConfig+0xdc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d10c      	bne.n	8006c72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 0308 	bic.w	r3, r3, #8
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f023 0304 	bic.w	r3, r3, #4
 8006c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <TIM_OC1_SetConfig+0xd8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_OC1_SetConfig+0x8e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <TIM_OC1_SetConfig+0xdc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d111      	bne.n	8006ca6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	621a      	str	r2, [r3, #32]
}
 8006cc0:	bf00      	nop
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	40010000 	.word	0x40010000
 8006cd0:	40010400 	.word	0x40010400

08006cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0210 	bic.w	r2, r3, #16
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f023 0320 	bic.w	r3, r3, #32
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a22      	ldr	r2, [pc, #136]	; (8006db8 <TIM_OC2_SetConfig+0xe4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_OC2_SetConfig+0x68>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a21      	ldr	r2, [pc, #132]	; (8006dbc <TIM_OC2_SetConfig+0xe8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d10d      	bne.n	8006d58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <TIM_OC2_SetConfig+0xe4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_OC2_SetConfig+0x94>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <TIM_OC2_SetConfig+0xe8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d113      	bne.n	8006d90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40010000 	.word	0x40010000
 8006dbc:	40010400 	.word	0x40010400

08006dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <TIM_OC3_SetConfig+0xe0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_OC3_SetConfig+0x66>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a20      	ldr	r2, [pc, #128]	; (8006ea4 <TIM_OC3_SetConfig+0xe4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d10d      	bne.n	8006e42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <TIM_OC3_SetConfig+0xe0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d003      	beq.n	8006e52 <TIM_OC3_SetConfig+0x92>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <TIM_OC3_SetConfig+0xe4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d113      	bne.n	8006e7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	621a      	str	r2, [r3, #32]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40010000 	.word	0x40010000
 8006ea4:	40010400 	.word	0x40010400

08006ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	031b      	lsls	r3, r3, #12
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a12      	ldr	r2, [pc, #72]	; (8006f4c <TIM_OC4_SetConfig+0xa4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_OC4_SetConfig+0x68>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a11      	ldr	r2, [pc, #68]	; (8006f50 <TIM_OC4_SetConfig+0xa8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d109      	bne.n	8006f24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	019b      	lsls	r3, r3, #6
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	621a      	str	r2, [r3, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40010400 	.word	0x40010400

08006f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f023 0201 	bic.w	r2, r3, #1
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f023 030a 	bic.w	r3, r3, #10
 8006f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	621a      	str	r2, [r3, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b087      	sub	sp, #28
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	f023 0210 	bic.w	r2, r3, #16
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	031b      	lsls	r3, r3, #12
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	f043 0307 	orr.w	r3, r3, #7
 8007034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	021a      	lsls	r2, r3, #8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	431a      	orrs	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4313      	orrs	r3, r2
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	609a      	str	r2, [r3, #8]
}
 800707c:	bf00      	nop
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800709c:	2302      	movs	r3, #2
 800709e:	e05a      	b.n	8007156 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a21      	ldr	r2, [pc, #132]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d022      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ec:	d01d      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1d      	ldr	r2, [pc, #116]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d018      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1b      	ldr	r2, [pc, #108]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a18      	ldr	r2, [pc, #96]	; (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a15      	ldr	r2, [pc, #84]	; (800717c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d10c      	bne.n	8007144 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	4313      	orrs	r3, r2
 800713a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40010000 	.word	0x40010000
 8007168:	40000400 	.word	0x40000400
 800716c:	40000800 	.word	0x40000800
 8007170:	40000c00 	.word	0x40000c00
 8007174:	40010400 	.word	0x40010400
 8007178:	40014000 	.word	0x40014000
 800717c:	40001800 	.word	0x40001800

08007180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007198:	2302      	movs	r3, #2
 800719a:	e03d      	b.n	8007218 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e03f      	b.n	80072de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fb f91e 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2224      	movs	r2, #36	; 0x24
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800728e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fc43 	bl	8007b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691a      	ldr	r2, [r3, #16]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695a      	ldr	r2, [r3, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4613      	mov	r3, r2
 80072f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d153      	bne.n	80073aa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_UART_Transmit_DMA+0x26>
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e04c      	b.n	80073ac <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_UART_Transmit_DMA+0x38>
 800731c:	2302      	movs	r3, #2
 800731e:	e045      	b.n	80073ac <HAL_UART_Transmit_DMA+0xc4>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	88fa      	ldrh	r2, [r7, #6]
 8007332:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2221      	movs	r2, #33	; 0x21
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734c:	4a19      	ldr	r2, [pc, #100]	; (80073b4 <HAL_UART_Transmit_DMA+0xcc>)
 800734e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	4a18      	ldr	r2, [pc, #96]	; (80073b8 <HAL_UART_Transmit_DMA+0xd0>)
 8007356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	4a17      	ldr	r2, [pc, #92]	; (80073bc <HAL_UART_Transmit_DMA+0xd4>)
 800735e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007364:	2200      	movs	r2, #0
 8007366:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007368:	f107 0308 	add.w	r3, r7, #8
 800736c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6819      	ldr	r1, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3304      	adds	r3, #4
 800737c:	461a      	mov	r2, r3
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	f7fd fb44 	bl	8004a0c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800738c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695a      	ldr	r2, [r3, #20]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073a4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e000      	b.n	80073ac <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80073aa:	2302      	movs	r3, #2
  }
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	0800776d 	.word	0x0800776d
 80073b8:	080077bf 	.word	0x080077bf
 80073bc:	080077db 	.word	0x080077db

080073c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08a      	sub	sp, #40	; 0x28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10d      	bne.n	8007412 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d008      	beq.n	8007412 <HAL_UART_IRQHandler+0x52>
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 faee 	bl	80079ec <UART_Receive_IT>
      return;
 8007410:	e17c      	b.n	800770c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80b1 	beq.w	800757c <HAL_UART_IRQHandler+0x1bc>
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d105      	bne.n	8007430 <HAL_UART_IRQHandler+0x70>
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80a6 	beq.w	800757c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <HAL_UART_IRQHandler+0x90>
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	f043 0201 	orr.w	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_UART_IRQHandler+0xb0>
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	f043 0202 	orr.w	r2, r3, #2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <HAL_UART_IRQHandler+0xd0>
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	f043 0204 	orr.w	r2, r3, #4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00f      	beq.n	80074ba <HAL_UART_IRQHandler+0xfa>
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d104      	bne.n	80074ae <HAL_UART_IRQHandler+0xee>
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	f043 0208 	orr.w	r2, r3, #8
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 811f 	beq.w	8007702 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <HAL_UART_IRQHandler+0x11e>
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa87 	bl	80079ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	bf0c      	ite	eq
 80074ec:	2301      	moveq	r3, #1
 80074ee:	2300      	movne	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d102      	bne.n	8007506 <HAL_UART_IRQHandler+0x146>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d031      	beq.n	800756a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f9c7 	bl	800789a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d123      	bne.n	8007562 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695a      	ldr	r2, [r3, #20]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007528:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	2b00      	cmp	r3, #0
 8007530:	d013      	beq.n	800755a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	4a77      	ldr	r2, [pc, #476]	; (8007714 <HAL_UART_IRQHandler+0x354>)
 8007538:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	4618      	mov	r0, r3
 8007540:	f7fd fb2c 	bl	8004b9c <HAL_DMA_Abort_IT>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d016      	beq.n	8007578 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	e00e      	b.n	8007578 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8f0 	bl	8007740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	e00a      	b.n	8007578 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f8ec 	bl	8007740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007568:	e006      	b.n	8007578 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f8e8 	bl	8007740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007576:	e0c4      	b.n	8007702 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007578:	bf00      	nop
    return;
 800757a:	e0c2      	b.n	8007702 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	2b01      	cmp	r3, #1
 8007582:	f040 80a2 	bne.w	80076ca <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	f003 0310 	and.w	r3, r3, #16
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 809c 	beq.w	80076ca <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8096 	beq.w	80076ca <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	d14f      	bne.n	8007662 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80075cc:	8a3b      	ldrh	r3, [r7, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 8099 	beq.w	8007706 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075d8:	8a3a      	ldrh	r2, [r7, #16]
 80075da:	429a      	cmp	r2, r3
 80075dc:	f080 8093 	bcs.w	8007706 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8a3a      	ldrh	r2, [r7, #16]
 80075e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f0:	d02b      	beq.n	800764a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007600:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695a      	ldr	r2, [r3, #20]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007620:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0210 	bic.w	r2, r2, #16
 800763e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd fa39 	bl	8004abc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007652:	b29b      	uxth	r3, r3
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	b29b      	uxth	r3, r3
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f87a 	bl	8007754 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007660:	e051      	b.n	8007706 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800766a:	b29b      	uxth	r3, r3
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d047      	beq.n	800770a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800767a:	8a7b      	ldrh	r3, [r7, #18]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d044      	beq.n	800770a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800768e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0201 	bic.w	r2, r2, #1
 800769e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0210 	bic.w	r2, r2, #16
 80076bc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076be:	8a7b      	ldrh	r3, [r7, #18]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f846 	bl	8007754 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076c8:	e01f      	b.n	800770a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d008      	beq.n	80076e6 <HAL_UART_IRQHandler+0x326>
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f91c 	bl	800791c <UART_Transmit_IT>
    return;
 80076e4:	e012      	b.n	800770c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00d      	beq.n	800770c <HAL_UART_IRQHandler+0x34c>
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f95e 	bl	80079bc <UART_EndTransmit_IT>
    return;
 8007700:	e004      	b.n	800770c <HAL_UART_IRQHandler+0x34c>
    return;
 8007702:	bf00      	nop
 8007704:	e002      	b.n	800770c <HAL_UART_IRQHandler+0x34c>
      return;
 8007706:	bf00      	nop
 8007708:	e000      	b.n	800770c <HAL_UART_IRQHandler+0x34c>
      return;
 800770a:	bf00      	nop
  }
}
 800770c:	3728      	adds	r7, #40	; 0x28
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	080078f5 	.word	0x080078f5

08007718 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007784:	2b00      	cmp	r3, #0
 8007786:	d113      	bne.n	80077b0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695a      	ldr	r2, [r3, #20]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800779c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ac:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077ae:	e002      	b.n	80077b6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7fa f985 	bl	8001ac0 <HAL_UART_TxCpltCallback>
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff ffa3 	bl	8007718 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b80      	cmp	r3, #128	; 0x80
 80077f8:	bf0c      	ite	eq
 80077fa:	2301      	moveq	r3, #1
 80077fc:	2300      	movne	r3, #0
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b21      	cmp	r3, #33	; 0x21
 800780c:	d108      	bne.n	8007820 <UART_DMAError+0x46>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2200      	movs	r2, #0
 8007818:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800781a:	68b8      	ldr	r0, [r7, #8]
 800781c:	f000 f827 	bl	800786e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782a:	2b40      	cmp	r3, #64	; 0x40
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	2300      	movne	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b22      	cmp	r3, #34	; 0x22
 8007840:	d108      	bne.n	8007854 <UART_DMAError+0x7a>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2200      	movs	r2, #0
 800784c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800784e:	68b8      	ldr	r0, [r7, #8]
 8007850:	f000 f823 	bl	800789a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	f043 0210 	orr.w	r2, r3, #16
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007860:	68b8      	ldr	r0, [r7, #8]
 8007862:	f7ff ff6d 	bl	8007740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007884:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2220      	movs	r2, #32
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0201 	bic.w	r2, r2, #1
 80078c0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d107      	bne.n	80078da <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0210 	bic.w	r2, r2, #16
 80078d8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff ff16 	bl	8007740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b21      	cmp	r3, #33	; 0x21
 800792e:	d13e      	bne.n	80079ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007938:	d114      	bne.n	8007964 <UART_Transmit_IT+0x48>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d110      	bne.n	8007964 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007956:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	1c9a      	adds	r2, r3, #2
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	621a      	str	r2, [r3, #32]
 8007962:	e008      	b.n	8007976 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	1c59      	adds	r1, r3, #1
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6211      	str	r1, [r2, #32]
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29b      	uxth	r3, r3
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	4619      	mov	r1, r3
 8007984:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10f      	bne.n	80079aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007998:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	e000      	b.n	80079b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079ae:	2302      	movs	r3, #2
  }
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7fa f86f 	bl	8001ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b22      	cmp	r3, #34	; 0x22
 80079fe:	f040 8087 	bne.w	8007b10 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0a:	d117      	bne.n	8007a3c <UART_Receive_IT+0x50>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d113      	bne.n	8007a3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	1c9a      	adds	r2, r3, #2
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	629a      	str	r2, [r3, #40]	; 0x28
 8007a3a:	e026      	b.n	8007a8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4e:	d007      	beq.n	8007a60 <UART_Receive_IT+0x74>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <UART_Receive_IT+0x82>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	e008      	b.n	8007a80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4619      	mov	r1, r3
 8007a98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d136      	bne.n	8007b0c <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0220 	bic.w	r2, r2, #32
 8007aac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695a      	ldr	r2, [r3, #20]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0201 	bic.w	r2, r2, #1
 8007acc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d10e      	bne.n	8007afc <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0210 	bic.w	r2, r2, #16
 8007aec:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff fe2d 	bl	8007754 <HAL_UARTEx_RxEventCallback>
 8007afa:	e002      	b.n	8007b02 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff fe15 	bl	800772c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e002      	b.n	8007b12 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b20:	b09f      	sub	sp, #124	; 0x7c
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b32:	68d9      	ldr	r1, [r3, #12]
 8007b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	ea40 0301 	orr.w	r3, r0, r1
 8007b3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	431a      	orrs	r2, r3
 8007b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b60:	f021 010c 	bic.w	r1, r1, #12
 8007b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7a:	6999      	ldr	r1, [r3, #24]
 8007b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	ea40 0301 	orr.w	r3, r0, r1
 8007b84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4bc5      	ldr	r3, [pc, #788]	; (8007ea0 <UART_SetConfig+0x384>)
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d004      	beq.n	8007b9a <UART_SetConfig+0x7e>
 8007b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4bc3      	ldr	r3, [pc, #780]	; (8007ea4 <UART_SetConfig+0x388>)
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d103      	bne.n	8007ba2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b9a:	f7fe fb79 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 8007b9e:	6778      	str	r0, [r7, #116]	; 0x74
 8007ba0:	e002      	b.n	8007ba8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ba2:	f7fe fb61 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8007ba6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb0:	f040 80b6 	bne.w	8007d20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bb6:	461c      	mov	r4, r3
 8007bb8:	f04f 0500 	mov.w	r5, #0
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	1891      	adds	r1, r2, r2
 8007bc2:	6439      	str	r1, [r7, #64]	; 0x40
 8007bc4:	415b      	adcs	r3, r3
 8007bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bcc:	1912      	adds	r2, r2, r4
 8007bce:	eb45 0303 	adc.w	r3, r5, r3
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f04f 0100 	mov.w	r1, #0
 8007bda:	00d9      	lsls	r1, r3, #3
 8007bdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007be0:	00d0      	lsls	r0, r2, #3
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	1911      	adds	r1, r2, r4
 8007be8:	6639      	str	r1, [r7, #96]	; 0x60
 8007bea:	416b      	adcs	r3, r5
 8007bec:	667b      	str	r3, [r7, #100]	; 0x64
 8007bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	1891      	adds	r1, r2, r2
 8007bfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8007bfc:	415b      	adcs	r3, r3
 8007bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c08:	f7f8 fae2 	bl	80001d0 <__aeabi_uldivmod>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4ba5      	ldr	r3, [pc, #660]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007c12:	fba3 2302 	umull	r2, r3, r3, r2
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	011e      	lsls	r6, r3, #4
 8007c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c1c:	461c      	mov	r4, r3
 8007c1e:	f04f 0500 	mov.w	r5, #0
 8007c22:	4622      	mov	r2, r4
 8007c24:	462b      	mov	r3, r5
 8007c26:	1891      	adds	r1, r2, r2
 8007c28:	6339      	str	r1, [r7, #48]	; 0x30
 8007c2a:	415b      	adcs	r3, r3
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c32:	1912      	adds	r2, r2, r4
 8007c34:	eb45 0303 	adc.w	r3, r5, r3
 8007c38:	f04f 0000 	mov.w	r0, #0
 8007c3c:	f04f 0100 	mov.w	r1, #0
 8007c40:	00d9      	lsls	r1, r3, #3
 8007c42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c46:	00d0      	lsls	r0, r2, #3
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	1911      	adds	r1, r2, r4
 8007c4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c50:	416b      	adcs	r3, r5
 8007c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	1891      	adds	r1, r2, r2
 8007c60:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c62:	415b      	adcs	r3, r3
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c6e:	f7f8 faaf 	bl	80001d0 <__aeabi_uldivmod>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4b8c      	ldr	r3, [pc, #560]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007c78:	fba3 1302 	umull	r1, r3, r3, r2
 8007c7c:	095b      	lsrs	r3, r3, #5
 8007c7e:	2164      	movs	r1, #100	; 0x64
 8007c80:	fb01 f303 	mul.w	r3, r1, r3
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	3332      	adds	r3, #50	; 0x32
 8007c8a:	4a87      	ldr	r2, [pc, #540]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c98:	441e      	add	r6, r3
 8007c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f04f 0100 	mov.w	r1, #0
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	1894      	adds	r4, r2, r2
 8007ca8:	623c      	str	r4, [r7, #32]
 8007caa:	415b      	adcs	r3, r3
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
 8007cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cb2:	1812      	adds	r2, r2, r0
 8007cb4:	eb41 0303 	adc.w	r3, r1, r3
 8007cb8:	f04f 0400 	mov.w	r4, #0
 8007cbc:	f04f 0500 	mov.w	r5, #0
 8007cc0:	00dd      	lsls	r5, r3, #3
 8007cc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cc6:	00d4      	lsls	r4, r2, #3
 8007cc8:	4622      	mov	r2, r4
 8007cca:	462b      	mov	r3, r5
 8007ccc:	1814      	adds	r4, r2, r0
 8007cce:	653c      	str	r4, [r7, #80]	; 0x50
 8007cd0:	414b      	adcs	r3, r1
 8007cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8007cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	f04f 0300 	mov.w	r3, #0
 8007cde:	1891      	adds	r1, r2, r2
 8007ce0:	61b9      	str	r1, [r7, #24]
 8007ce2:	415b      	adcs	r3, r3
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cee:	f7f8 fa6f 	bl	80001d0 <__aeabi_uldivmod>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4b6c      	ldr	r3, [pc, #432]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	2164      	movs	r1, #100	; 0x64
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	3332      	adds	r3, #50	; 0x32
 8007d0a:	4a67      	ldr	r2, [pc, #412]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	f003 0207 	and.w	r2, r3, #7
 8007d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4432      	add	r2, r6
 8007d1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d1e:	e0b9      	b.n	8007e94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d22:	461c      	mov	r4, r3
 8007d24:	f04f 0500 	mov.w	r5, #0
 8007d28:	4622      	mov	r2, r4
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	1891      	adds	r1, r2, r2
 8007d2e:	6139      	str	r1, [r7, #16]
 8007d30:	415b      	adcs	r3, r3
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d38:	1912      	adds	r2, r2, r4
 8007d3a:	eb45 0303 	adc.w	r3, r5, r3
 8007d3e:	f04f 0000 	mov.w	r0, #0
 8007d42:	f04f 0100 	mov.w	r1, #0
 8007d46:	00d9      	lsls	r1, r3, #3
 8007d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d4c:	00d0      	lsls	r0, r2, #3
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	eb12 0804 	adds.w	r8, r2, r4
 8007d56:	eb43 0905 	adc.w	r9, r3, r5
 8007d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f04f 0100 	mov.w	r1, #0
 8007d64:	f04f 0200 	mov.w	r2, #0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	008b      	lsls	r3, r1, #2
 8007d6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d72:	0082      	lsls	r2, r0, #2
 8007d74:	4640      	mov	r0, r8
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 fa2a 	bl	80001d0 <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4b49      	ldr	r3, [pc, #292]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007d82:	fba3 2302 	umull	r2, r3, r3, r2
 8007d86:	095b      	lsrs	r3, r3, #5
 8007d88:	011e      	lsls	r6, r3, #4
 8007d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f04f 0100 	mov.w	r1, #0
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	1894      	adds	r4, r2, r2
 8007d98:	60bc      	str	r4, [r7, #8]
 8007d9a:	415b      	adcs	r3, r3
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007da2:	1812      	adds	r2, r2, r0
 8007da4:	eb41 0303 	adc.w	r3, r1, r3
 8007da8:	f04f 0400 	mov.w	r4, #0
 8007dac:	f04f 0500 	mov.w	r5, #0
 8007db0:	00dd      	lsls	r5, r3, #3
 8007db2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007db6:	00d4      	lsls	r4, r2, #3
 8007db8:	4622      	mov	r2, r4
 8007dba:	462b      	mov	r3, r5
 8007dbc:	1814      	adds	r4, r2, r0
 8007dbe:	64bc      	str	r4, [r7, #72]	; 0x48
 8007dc0:	414b      	adcs	r3, r1
 8007dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f04f 0100 	mov.w	r1, #0
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	f04f 0300 	mov.w	r3, #0
 8007dd6:	008b      	lsls	r3, r1, #2
 8007dd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ddc:	0082      	lsls	r2, r0, #2
 8007dde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007de2:	f7f8 f9f5 	bl	80001d0 <__aeabi_uldivmod>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007dec:	fba3 1302 	umull	r1, r3, r3, r2
 8007df0:	095b      	lsrs	r3, r3, #5
 8007df2:	2164      	movs	r1, #100	; 0x64
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	3332      	adds	r3, #50	; 0x32
 8007dfe:	4a2a      	ldr	r2, [pc, #168]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e0a:	441e      	add	r6, r3
 8007e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f04f 0100 	mov.w	r1, #0
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	1894      	adds	r4, r2, r2
 8007e1a:	603c      	str	r4, [r7, #0]
 8007e1c:	415b      	adcs	r3, r3
 8007e1e:	607b      	str	r3, [r7, #4]
 8007e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e24:	1812      	adds	r2, r2, r0
 8007e26:	eb41 0303 	adc.w	r3, r1, r3
 8007e2a:	f04f 0400 	mov.w	r4, #0
 8007e2e:	f04f 0500 	mov.w	r5, #0
 8007e32:	00dd      	lsls	r5, r3, #3
 8007e34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e38:	00d4      	lsls	r4, r2, #3
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	462b      	mov	r3, r5
 8007e3e:	eb12 0a00 	adds.w	sl, r2, r0
 8007e42:	eb43 0b01 	adc.w	fp, r3, r1
 8007e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f04f 0100 	mov.w	r1, #0
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	008b      	lsls	r3, r1, #2
 8007e5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e5e:	0082      	lsls	r2, r0, #2
 8007e60:	4650      	mov	r0, sl
 8007e62:	4659      	mov	r1, fp
 8007e64:	f7f8 f9b4 	bl	80001d0 <__aeabi_uldivmod>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	2164      	movs	r1, #100	; 0x64
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	3332      	adds	r3, #50	; 0x32
 8007e80:	4a09      	ldr	r2, [pc, #36]	; (8007ea8 <UART_SetConfig+0x38c>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	095b      	lsrs	r3, r3, #5
 8007e88:	f003 020f 	and.w	r2, r3, #15
 8007e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4432      	add	r2, r6
 8007e92:	609a      	str	r2, [r3, #8]
}
 8007e94:	bf00      	nop
 8007e96:	377c      	adds	r7, #124	; 0x7c
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40011000 	.word	0x40011000
 8007ea4:	40011400 	.word	0x40011400
 8007ea8:	51eb851f 	.word	0x51eb851f

08007eac <__NVIC_SetPriority>:
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	db0a      	blt.n	8007ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	490c      	ldr	r1, [pc, #48]	; (8007ef8 <__NVIC_SetPriority+0x4c>)
 8007ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eca:	0112      	lsls	r2, r2, #4
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	440b      	add	r3, r1
 8007ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ed4:	e00a      	b.n	8007eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	4908      	ldr	r1, [pc, #32]	; (8007efc <__NVIC_SetPriority+0x50>)
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	3b04      	subs	r3, #4
 8007ee4:	0112      	lsls	r2, r2, #4
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	440b      	add	r3, r1
 8007eea:	761a      	strb	r2, [r3, #24]
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	e000e100 	.word	0xe000e100
 8007efc:	e000ed00 	.word	0xe000ed00

08007f00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <SysTick_Handler+0x1c>)
 8007f06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f08:	f002 f93e 	bl	800a188 <xTaskGetSchedulerState>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d001      	beq.n	8007f16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f12:	f003 f821 	bl	800af58 <xPortSysTickHandler>
  }
}
 8007f16:	bf00      	nop
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	e000e010 	.word	0xe000e010

08007f20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f24:	2100      	movs	r1, #0
 8007f26:	f06f 0004 	mvn.w	r0, #4
 8007f2a:	f7ff ffbf 	bl	8007eac <__NVIC_SetPriority>
#endif
}
 8007f2e:	bf00      	nop
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3a:	f3ef 8305 	mrs	r3, IPSR
 8007f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f46:	f06f 0305 	mvn.w	r3, #5
 8007f4a:	607b      	str	r3, [r7, #4]
 8007f4c:	e00c      	b.n	8007f68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f4e:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <osKernelInitialize+0x44>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d105      	bne.n	8007f62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f56:	4b08      	ldr	r3, [pc, #32]	; (8007f78 <osKernelInitialize+0x44>)
 8007f58:	2201      	movs	r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	607b      	str	r3, [r7, #4]
 8007f60:	e002      	b.n	8007f68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f62:	f04f 33ff 	mov.w	r3, #4294967295
 8007f66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f68:	687b      	ldr	r3, [r7, #4]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000030 	.word	0x20000030

08007f7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f82:	f3ef 8305 	mrs	r3, IPSR
 8007f86:	603b      	str	r3, [r7, #0]
  return(result);
 8007f88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f8e:	f06f 0305 	mvn.w	r3, #5
 8007f92:	607b      	str	r3, [r7, #4]
 8007f94:	e010      	b.n	8007fb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <osKernelStart+0x48>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d109      	bne.n	8007fb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f9e:	f7ff ffbf 	bl	8007f20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fa2:	4b08      	ldr	r3, [pc, #32]	; (8007fc4 <osKernelStart+0x48>)
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fa8:	f001 fca6 	bl	80098f8 <vTaskStartScheduler>
      stat = osOK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	607b      	str	r3, [r7, #4]
 8007fb0:	e002      	b.n	8007fb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fb8:	687b      	ldr	r3, [r7, #4]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000030 	.word	0x20000030

08007fc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08e      	sub	sp, #56	; 0x38
 8007fcc:	af04      	add	r7, sp, #16
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fd8:	f3ef 8305 	mrs	r3, IPSR
 8007fdc:	617b      	str	r3, [r7, #20]
  return(result);
 8007fde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d17e      	bne.n	80080e2 <osThreadNew+0x11a>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d07b      	beq.n	80080e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fea:	2380      	movs	r3, #128	; 0x80
 8007fec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fee:	2318      	movs	r3, #24
 8007ff0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d045      	beq.n	800808e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <osThreadNew+0x48>
        name = attr->name;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d008      	beq.n	8008036 <osThreadNew+0x6e>
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b38      	cmp	r3, #56	; 0x38
 8008028:	d805      	bhi.n	8008036 <osThreadNew+0x6e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <osThreadNew+0x72>
        return (NULL);
 8008036:	2300      	movs	r3, #0
 8008038:	e054      	b.n	80080e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	089b      	lsrs	r3, r3, #2
 8008048:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00e      	beq.n	8008070 <osThreadNew+0xa8>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	2b5b      	cmp	r3, #91	; 0x5b
 8008058:	d90a      	bls.n	8008070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800805e:	2b00      	cmp	r3, #0
 8008060:	d006      	beq.n	8008070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <osThreadNew+0xa8>
        mem = 1;
 800806a:	2301      	movs	r3, #1
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	e010      	b.n	8008092 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10c      	bne.n	8008092 <osThreadNew+0xca>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d108      	bne.n	8008092 <osThreadNew+0xca>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <osThreadNew+0xca>
          mem = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	e001      	b.n	8008092 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d110      	bne.n	80080ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080a0:	9202      	str	r2, [sp, #8]
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	6a3a      	ldr	r2, [r7, #32]
 80080ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f001 fa4c 	bl	800954c <xTaskCreateStatic>
 80080b4:	4603      	mov	r3, r0
 80080b6:	613b      	str	r3, [r7, #16]
 80080b8:	e013      	b.n	80080e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d110      	bne.n	80080e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f001 fa97 	bl	8009606 <xTaskCreate>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d001      	beq.n	80080e2 <osThreadNew+0x11a>
            hTask = NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080e2:	693b      	ldr	r3, [r7, #16]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3728      	adds	r7, #40	; 0x28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f4:	f3ef 8305 	mrs	r3, IPSR
 80080f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80080fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <osDelay+0x1c>
    stat = osErrorISR;
 8008100:	f06f 0305 	mvn.w	r3, #5
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	e007      	b.n	8008118 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 fbbc 	bl	8009890 <vTaskDelay>
    }
  }

  return (stat);
 8008118:	68fb      	ldr	r3, [r7, #12]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008122:	b580      	push	{r7, lr}
 8008124:	b08a      	sub	sp, #40	; 0x28
 8008126:	af02      	add	r7, sp, #8
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008132:	f3ef 8305 	mrs	r3, IPSR
 8008136:	613b      	str	r3, [r7, #16]
  return(result);
 8008138:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800813a:	2b00      	cmp	r3, #0
 800813c:	d175      	bne.n	800822a <osSemaphoreNew+0x108>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d072      	beq.n	800822a <osSemaphoreNew+0x108>
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	429a      	cmp	r2, r3
 800814a:	d86e      	bhi.n	800822a <osSemaphoreNew+0x108>
    mem = -1;
 800814c:	f04f 33ff 	mov.w	r3, #4294967295
 8008150:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d015      	beq.n	8008184 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <osSemaphoreNew+0x4c>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	2b4f      	cmp	r3, #79	; 0x4f
 8008166:	d902      	bls.n	800816e <osSemaphoreNew+0x4c>
        mem = 1;
 8008168:	2301      	movs	r3, #1
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	e00c      	b.n	8008188 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d108      	bne.n	8008188 <osSemaphoreNew+0x66>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d104      	bne.n	8008188 <osSemaphoreNew+0x66>
          mem = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	e001      	b.n	8008188 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818e:	d04c      	beq.n	800822a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d128      	bne.n	80081e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d10a      	bne.n	80081b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2203      	movs	r2, #3
 80081a2:	9200      	str	r2, [sp, #0]
 80081a4:	2200      	movs	r2, #0
 80081a6:	2100      	movs	r1, #0
 80081a8:	2001      	movs	r0, #1
 80081aa:	f000 fa29 	bl	8008600 <xQueueGenericCreateStatic>
 80081ae:	61f8      	str	r0, [r7, #28]
 80081b0:	e005      	b.n	80081be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80081b2:	2203      	movs	r2, #3
 80081b4:	2100      	movs	r1, #0
 80081b6:	2001      	movs	r0, #1
 80081b8:	f000 fa9a 	bl	80086f0 <xQueueGenericCreate>
 80081bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d022      	beq.n	800820a <osSemaphoreNew+0xe8>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01f      	beq.n	800820a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081ca:	2300      	movs	r3, #0
 80081cc:	2200      	movs	r2, #0
 80081ce:	2100      	movs	r1, #0
 80081d0:	69f8      	ldr	r0, [r7, #28]
 80081d2:	f000 fb55 	bl	8008880 <xQueueGenericSend>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d016      	beq.n	800820a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80081dc:	69f8      	ldr	r0, [r7, #28]
 80081de:	f000 ffe1 	bl	80091a4 <vQueueDelete>
            hSemaphore = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61fb      	str	r3, [r7, #28]
 80081e6:	e010      	b.n	800820a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d108      	bne.n	8008200 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	461a      	mov	r2, r3
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 fad7 	bl	80087aa <xQueueCreateCountingSemaphoreStatic>
 80081fc:	61f8      	str	r0, [r7, #28]
 80081fe:	e004      	b.n	800820a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 fb08 	bl	8008818 <xQueueCreateCountingSemaphore>
 8008208:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00c      	beq.n	800822a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <osSemaphoreNew+0xfc>
          name = attr->name;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	e001      	b.n	8008222 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008222:	6979      	ldr	r1, [r7, #20]
 8008224:	69f8      	ldr	r0, [r7, #28]
 8008226:	f001 f909 	bl	800943c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800822a:	69fb      	ldr	r3, [r7, #28]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d103      	bne.n	8008254 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800824c:	f06f 0303 	mvn.w	r3, #3
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	e039      	b.n	80082c8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008254:	f3ef 8305 	mrs	r3, IPSR
 8008258:	60fb      	str	r3, [r7, #12]
  return(result);
 800825a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800825c:	2b00      	cmp	r3, #0
 800825e:	d022      	beq.n	80082a6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008266:	f06f 0303 	mvn.w	r3, #3
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	e02c      	b.n	80082c8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800826e:	2300      	movs	r3, #0
 8008270:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	461a      	mov	r2, r3
 8008278:	2100      	movs	r1, #0
 800827a:	6938      	ldr	r0, [r7, #16]
 800827c:	f000 ff12 	bl	80090a4 <xQueueReceiveFromISR>
 8008280:	4603      	mov	r3, r0
 8008282:	2b01      	cmp	r3, #1
 8008284:	d003      	beq.n	800828e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008286:	f06f 0302 	mvn.w	r3, #2
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	e01c      	b.n	80082c8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d019      	beq.n	80082c8 <osSemaphoreAcquire+0x94>
 8008294:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <osSemaphoreAcquire+0xa0>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	e010      	b.n	80082c8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6938      	ldr	r0, [r7, #16]
 80082aa:	f000 fdef 	bl	8008e8c <xQueueSemaphoreTake>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d009      	beq.n	80082c8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80082ba:	f06f 0301 	mvn.w	r3, #1
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	e002      	b.n	80082c8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80082c2:	f06f 0302 	mvn.w	r3, #2
 80082c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80082c8:	697b      	ldr	r3, [r7, #20]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	e000ed04 	.word	0xe000ed04

080082d8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80082ee:	f06f 0303 	mvn.w	r3, #3
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e02c      	b.n	8008350 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082f6:	f3ef 8305 	mrs	r3, IPSR
 80082fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80082fc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d01a      	beq.n	8008338 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008302:	2300      	movs	r3, #0
 8008304:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008306:	f107 0308 	add.w	r3, r7, #8
 800830a:	4619      	mov	r1, r3
 800830c:	6938      	ldr	r0, [r7, #16]
 800830e:	f000 fc50 	bl	8008bb2 <xQueueGiveFromISR>
 8008312:	4603      	mov	r3, r0
 8008314:	2b01      	cmp	r3, #1
 8008316:	d003      	beq.n	8008320 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008318:	f06f 0302 	mvn.w	r3, #2
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	e017      	b.n	8008350 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d014      	beq.n	8008350 <osSemaphoreRelease+0x78>
 8008326:	4b0d      	ldr	r3, [pc, #52]	; (800835c <osSemaphoreRelease+0x84>)
 8008328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	e00b      	b.n	8008350 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008338:	2300      	movs	r3, #0
 800833a:	2200      	movs	r2, #0
 800833c:	2100      	movs	r1, #0
 800833e:	6938      	ldr	r0, [r7, #16]
 8008340:	f000 fa9e 	bl	8008880 <xQueueGenericSend>
 8008344:	4603      	mov	r3, r0
 8008346:	2b01      	cmp	r3, #1
 8008348:	d002      	beq.n	8008350 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800834a:	f06f 0302 	mvn.w	r3, #2
 800834e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008350:	697b      	ldr	r3, [r7, #20]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4a07      	ldr	r2, [pc, #28]	; (800838c <vApplicationGetIdleTaskMemory+0x2c>)
 8008370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4a06      	ldr	r2, [pc, #24]	; (8008390 <vApplicationGetIdleTaskMemory+0x30>)
 8008376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2280      	movs	r2, #128	; 0x80
 800837c:	601a      	str	r2, [r3, #0]
}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20000034 	.word	0x20000034
 8008390:	20000090 	.word	0x20000090

08008394 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a07      	ldr	r2, [pc, #28]	; (80083c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80083a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	4a06      	ldr	r2, [pc, #24]	; (80083c4 <vApplicationGetTimerTaskMemory+0x30>)
 80083aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20000290 	.word	0x20000290
 80083c4:	200002ec 	.word	0x200002ec

080083c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f103 0208 	add.w	r2, r3, #8
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f04f 32ff 	mov.w	r2, #4294967295
 80083e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f103 0208 	add.w	r2, r3, #8
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f103 0208 	add.w	r2, r3, #8
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	601a      	str	r2, [r3, #0]
}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008480:	d103      	bne.n	800848a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e00c      	b.n	80084a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3308      	adds	r3, #8
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e002      	b.n	8008498 <vListInsert+0x2e>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d2f6      	bcs.n	8008492 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	601a      	str	r2, [r3, #0]
}
 80084d0:	bf00      	nop
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	6892      	ldr	r2, [r2, #8]
 80084f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6852      	ldr	r2, [r2, #4]
 80084fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d103      	bne.n	8008510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	1e5a      	subs	r2, r3, #1
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008556:	bf00      	nop
 8008558:	e7fe      	b.n	8008558 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800855a:	f002 fc6b 	bl	800ae34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800856a:	fb01 f303 	mul.w	r3, r1, r3
 800856e:	441a      	add	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	3b01      	subs	r3, #1
 800858c:	68f9      	ldr	r1, [r7, #12]
 800858e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008590:	fb01 f303 	mul.w	r3, r1, r3
 8008594:	441a      	add	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	22ff      	movs	r2, #255	; 0xff
 800859e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	22ff      	movs	r2, #255	; 0xff
 80085a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d114      	bne.n	80085da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01a      	beq.n	80085ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3310      	adds	r3, #16
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 fc25 	bl	8009e0c <xTaskRemoveFromEventList>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d012      	beq.n	80085ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085c8:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <xQueueGenericReset+0xcc>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	e009      	b.n	80085ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3310      	adds	r3, #16
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fef2 	bl	80083c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3324      	adds	r3, #36	; 0x24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff feed 	bl	80083c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085ee:	f002 fc51 	bl	800ae94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085f2:	2301      	movs	r3, #1
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08e      	sub	sp, #56	; 0x38
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10a      	bne.n	800862a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008626:	bf00      	nop
 8008628:	e7fe      	b.n	8008628 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <xQueueGenericCreateStatic+0x52>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <xQueueGenericCreateStatic+0x56>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <xQueueGenericCreateStatic+0x58>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	623b      	str	r3, [r7, #32]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <xQueueGenericCreateStatic+0x7e>
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <xQueueGenericCreateStatic+0x82>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <xQueueGenericCreateStatic+0x84>
 8008682:	2300      	movs	r3, #0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	61fb      	str	r3, [r7, #28]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800869e:	2350      	movs	r3, #80	; 0x50
 80086a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b50      	cmp	r3, #80	; 0x50
 80086a6:	d00a      	beq.n	80086be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	61bb      	str	r3, [r7, #24]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00d      	beq.n	80086e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	4613      	mov	r3, r2
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f83f 	bl	8008764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3730      	adds	r7, #48	; 0x30
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08a      	sub	sp, #40	; 0x28
 80086f4:	af02      	add	r7, sp, #8
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	613b      	str	r3, [r7, #16]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3350      	adds	r3, #80	; 0x50
 8008728:	4618      	mov	r0, r3
 800872a:	f002 fca5 	bl	800b078 <pvPortMalloc>
 800872e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d011      	beq.n	800875a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	3350      	adds	r3, #80	; 0x50
 800873e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008748:	79fa      	ldrb	r2, [r7, #7]
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	4613      	mov	r3, r2
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f805 	bl	8008764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800875a:	69bb      	ldr	r3, [r7, #24]
	}
 800875c:	4618      	mov	r0, r3
 800875e:	3720      	adds	r7, #32
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d103      	bne.n	8008780 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	e002      	b.n	8008786 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008792:	2101      	movs	r1, #1
 8008794:	69b8      	ldr	r0, [r7, #24]
 8008796:	f7ff fecb 	bl	8008530 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b08a      	sub	sp, #40	; 0x28
 80087ae:	af02      	add	r7, sp, #8
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	61bb      	str	r3, [r7, #24]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d90a      	bls.n	80087f0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	617b      	str	r3, [r7, #20]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087f0:	2302      	movs	r3, #2
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff ff00 	bl	8008600 <xQueueGenericCreateStatic>
 8008800:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800880e:	69fb      	ldr	r3, [r7, #28]
	}
 8008810:	4618      	mov	r0, r3
 8008812:	3720      	adds	r7, #32
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	613b      	str	r3, [r7, #16]
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d90a      	bls.n	800885c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60fb      	str	r3, [r7, #12]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800885c:	2202      	movs	r2, #2
 800885e:	2100      	movs	r1, #0
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff ff45 	bl	80086f0 <xQueueGenericCreate>
 8008866:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008874:	697b      	ldr	r3, [r7, #20]
	}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08e      	sub	sp, #56	; 0x38
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800888e:	2300      	movs	r3, #0
 8008890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <xQueueGenericSend+0x32>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d103      	bne.n	80088c0 <xQueueGenericSend+0x40>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <xQueueGenericSend+0x44>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <xQueueGenericSend+0x46>
 80088c4:	2300      	movs	r3, #0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <xQueueGenericSend+0x60>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d103      	bne.n	80088ee <xQueueGenericSend+0x6e>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <xQueueGenericSend+0x72>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <xQueueGenericSend+0x74>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xQueueGenericSend+0x8e>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	623b      	str	r3, [r7, #32]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800890e:	f001 fc3b 	bl	800a188 <xTaskGetSchedulerState>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <xQueueGenericSend+0x9e>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <xQueueGenericSend+0xa2>
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <xQueueGenericSend+0xa4>
 8008922:	2300      	movs	r3, #0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <xQueueGenericSend+0xbe>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	61fb      	str	r3, [r7, #28]
}
 800893a:	bf00      	nop
 800893c:	e7fe      	b.n	800893c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800893e:	f002 fa79 	bl	800ae34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894a:	429a      	cmp	r2, r3
 800894c:	d302      	bcc.n	8008954 <xQueueGenericSend+0xd4>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d129      	bne.n	80089a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895a:	f000 fc5e 	bl	800921a <prvCopyDataToQueue>
 800895e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	d010      	beq.n	800898a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	3324      	adds	r3, #36	; 0x24
 800896c:	4618      	mov	r0, r3
 800896e:	f001 fa4d 	bl	8009e0c <xTaskRemoveFromEventList>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d013      	beq.n	80089a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008978:	4b3f      	ldr	r3, [pc, #252]	; (8008a78 <xQueueGenericSend+0x1f8>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	e00a      	b.n	80089a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008990:	4b39      	ldr	r3, [pc, #228]	; (8008a78 <xQueueGenericSend+0x1f8>)
 8008992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089a0:	f002 fa78 	bl	800ae94 <vPortExitCritical>
				return pdPASS;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e063      	b.n	8008a70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ae:	f002 fa71 	bl	800ae94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e05c      	b.n	8008a70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 fa87 	bl	8009ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ca:	f002 fa63 	bl	800ae94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089ce:	f000 fff9 	bl	80099c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089d2:	f002 fa2f 	bl	800ae34 <vPortEnterCritical>
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089dc:	b25b      	sxtb	r3, r3
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e2:	d103      	bne.n	80089ec <xQueueGenericSend+0x16c>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d103      	bne.n	8008a02 <xQueueGenericSend+0x182>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a02:	f002 fa47 	bl	800ae94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a06:	1d3a      	adds	r2, r7, #4
 8008a08:	f107 0314 	add.w	r3, r7, #20
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fa76 	bl	8009f00 <xTaskCheckForTimeOut>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d124      	bne.n	8008a64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1c:	f000 fcf5 	bl	800940a <prvIsQueueFull>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d018      	beq.n	8008a58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	3310      	adds	r3, #16
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 f99c 	bl	8009d6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a36:	f000 fc80 	bl	800933a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a3a:	f000 ffd1 	bl	80099e0 <xTaskResumeAll>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f47f af7c 	bne.w	800893e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a46:	4b0c      	ldr	r3, [pc, #48]	; (8008a78 <xQueueGenericSend+0x1f8>)
 8008a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	e772      	b.n	800893e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a5a:	f000 fc6e 	bl	800933a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a5e:	f000 ffbf 	bl	80099e0 <xTaskResumeAll>
 8008a62:	e76c      	b.n	800893e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a66:	f000 fc68 	bl	800933a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a6a:	f000 ffb9 	bl	80099e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3738      	adds	r7, #56	; 0x38
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b090      	sub	sp, #64	; 0x40
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <xQueueGenericSendFromISR+0x3c>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <xQueueGenericSendFromISR+0x40>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <xQueueGenericSendFromISR+0x42>
 8008abc:	2300      	movs	r3, #0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d103      	bne.n	8008ae6 <xQueueGenericSendFromISR+0x6a>
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <xQueueGenericSendFromISR+0x6e>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <xQueueGenericSendFromISR+0x70>
 8008aea:	2300      	movs	r3, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	623b      	str	r3, [r7, #32]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b06:	f002 fa77 	bl	800aff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	61fa      	str	r2, [r7, #28]
 8008b20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d302      	bcc.n	8008b38 <xQueueGenericSendFromISR+0xbc>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d12f      	bne.n	8008b98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b4e:	f000 fb64 	bl	800921a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5a:	d112      	bne.n	8008b82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d016      	beq.n	8008b92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	3324      	adds	r3, #36	; 0x24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 f94f 	bl	8009e0c <xTaskRemoveFromEventList>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00e      	beq.n	8008b92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e007      	b.n	8008b92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b86:	3301      	adds	r3, #1
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	b25a      	sxtb	r2, r3
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b92:	2301      	movs	r3, #1
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b96:	e001      	b.n	8008b9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ba6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3740      	adds	r7, #64	; 0x40
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b08e      	sub	sp, #56	; 0x38
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	623b      	str	r3, [r7, #32]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <xQueueGiveFromISR+0x48>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	61fb      	str	r3, [r7, #28]
}
 8008bf6:	bf00      	nop
 8008bf8:	e7fe      	b.n	8008bf8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d103      	bne.n	8008c0a <xQueueGiveFromISR+0x58>
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <xQueueGiveFromISR+0x5c>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <xQueueGiveFromISR+0x5e>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	61bb      	str	r3, [r7, #24]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c2a:	f002 f9e5 	bl	800aff8 <vPortValidateInterruptPriority>
	__asm volatile
 8008c2e:	f3ef 8211 	mrs	r2, BASEPRI
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	617a      	str	r2, [r7, #20]
 8008c44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d22b      	bcs.n	8008cb2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c74:	d112      	bne.n	8008c9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d016      	beq.n	8008cac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	3324      	adds	r3, #36	; 0x24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f8c2 	bl	8009e0c <xTaskRemoveFromEventList>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00e      	beq.n	8008cac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2201      	movs	r2, #1
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e007      	b.n	8008cac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	b25a      	sxtb	r2, r3
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cac:	2301      	movs	r3, #1
 8008cae:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb0:	e001      	b.n	8008cb6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f383 8811 	msr	BASEPRI, r3
}
 8008cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3738      	adds	r7, #56	; 0x38
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	; 0x30
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <xQueueReceive+0x30>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	623b      	str	r3, [r7, #32]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueReceive+0x3e>
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <xQueueReceive+0x42>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <xQueueReceive+0x44>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xQueueReceive+0x5e>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	61fb      	str	r3, [r7, #28]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d2a:	f001 fa2d 	bl	800a188 <xTaskGetSchedulerState>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d102      	bne.n	8008d3a <xQueueReceive+0x6e>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <xQueueReceive+0x72>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <xQueueReceive+0x74>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <xQueueReceive+0x8e>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	61bb      	str	r3, [r7, #24]
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d5a:	f002 f86b 	bl	800ae34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d01f      	beq.n	8008daa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d6e:	f000 fabe 	bl	80092ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1e5a      	subs	r2, r3, #1
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00f      	beq.n	8008da2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	3310      	adds	r3, #16
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 f840 	bl	8009e0c <xTaskRemoveFromEventList>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d92:	4b3d      	ldr	r3, [pc, #244]	; (8008e88 <xQueueReceive+0x1bc>)
 8008d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008da2:	f002 f877 	bl	800ae94 <vPortExitCritical>
				return pdPASS;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e069      	b.n	8008e7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008db0:	f002 f870 	bl	800ae94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e062      	b.n	8008e7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d106      	bne.n	8008dcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dbe:	f107 0310 	add.w	r3, r7, #16
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 f886 	bl	8009ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dcc:	f002 f862 	bl	800ae94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dd0:	f000 fdf8 	bl	80099c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dd4:	f002 f82e 	bl	800ae34 <vPortEnterCritical>
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dde:	b25b      	sxtb	r3, r3
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de4:	d103      	bne.n	8008dee <xQueueReceive+0x122>
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008df4:	b25b      	sxtb	r3, r3
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d103      	bne.n	8008e04 <xQueueReceive+0x138>
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e04:	f002 f846 	bl	800ae94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e08:	1d3a      	adds	r2, r7, #4
 8008e0a:	f107 0310 	add.w	r3, r7, #16
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 f875 	bl	8009f00 <xTaskCheckForTimeOut>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d123      	bne.n	8008e64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e1e:	f000 fade 	bl	80093de <prvIsQueueEmpty>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d017      	beq.n	8008e58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	3324      	adds	r3, #36	; 0x24
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 ff9b 	bl	8009d6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e38:	f000 fa7f 	bl	800933a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e3c:	f000 fdd0 	bl	80099e0 <xTaskResumeAll>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d189      	bne.n	8008d5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <xQueueReceive+0x1bc>)
 8008e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	e780      	b.n	8008d5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e5a:	f000 fa6e 	bl	800933a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e5e:	f000 fdbf 	bl	80099e0 <xTaskResumeAll>
 8008e62:	e77a      	b.n	8008d5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e66:	f000 fa68 	bl	800933a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e6a:	f000 fdb9 	bl	80099e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e70:	f000 fab5 	bl	80093de <prvIsQueueEmpty>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f43f af6f 	beq.w	8008d5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3730      	adds	r7, #48	; 0x30
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08e      	sub	sp, #56	; 0x38
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	623b      	str	r3, [r7, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	61fb      	str	r3, [r7, #28]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008edc:	f001 f954 	bl	800a188 <xTaskGetSchedulerState>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d102      	bne.n	8008eec <xQueueSemaphoreTake+0x60>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <xQueueSemaphoreTake+0x64>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e000      	b.n	8008ef2 <xQueueSemaphoreTake+0x66>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	61bb      	str	r3, [r7, #24]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f0c:	f001 ff92 	bl	800ae34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d024      	beq.n	8008f66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	1e5a      	subs	r2, r3, #1
 8008f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f2c:	f001 faa2 	bl	800a474 <pvTaskIncrementMutexHeldCount>
 8008f30:	4602      	mov	r2, r0
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00f      	beq.n	8008f5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	3310      	adds	r3, #16
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 ff62 	bl	8009e0c <xTaskRemoveFromEventList>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f4e:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <xQueueSemaphoreTake+0x214>)
 8008f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f5e:	f001 ff99 	bl	800ae94 <vPortExitCritical>
				return pdPASS;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e097      	b.n	8009096 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d111      	bne.n	8008f90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00a      	beq.n	8008f88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	617b      	str	r3, [r7, #20]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f88:	f001 ff84 	bl	800ae94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e082      	b.n	8009096 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 ff9a 	bl	8009ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fa4:	f001 ff76 	bl	800ae94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fa8:	f000 fd0c 	bl	80099c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fac:	f001 ff42 	bl	800ae34 <vPortEnterCritical>
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb6:	b25b      	sxtb	r3, r3
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbc:	d103      	bne.n	8008fc6 <xQueueSemaphoreTake+0x13a>
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fcc:	b25b      	sxtb	r3, r3
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd2:	d103      	bne.n	8008fdc <xQueueSemaphoreTake+0x150>
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fdc:	f001 ff5a 	bl	800ae94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe0:	463a      	mov	r2, r7
 8008fe2:	f107 030c 	add.w	r3, r7, #12
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 ff89 	bl	8009f00 <xTaskCheckForTimeOut>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d132      	bne.n	800905a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ff6:	f000 f9f2 	bl	80093de <prvIsQueueEmpty>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d026      	beq.n	800904e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009008:	f001 ff14 	bl	800ae34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f001 f8d7 	bl	800a1c4 <xTaskPriorityInherit>
 8009016:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009018:	f001 ff3c 	bl	800ae94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fea1 	bl	8009d6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800902a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800902c:	f000 f985 	bl	800933a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009030:	f000 fcd6 	bl	80099e0 <xTaskResumeAll>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	f47f af68 	bne.w	8008f0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800903c:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <xQueueSemaphoreTake+0x214>)
 800903e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	e75e      	b.n	8008f0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800904e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009050:	f000 f973 	bl	800933a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009054:	f000 fcc4 	bl	80099e0 <xTaskResumeAll>
 8009058:	e758      	b.n	8008f0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800905a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800905c:	f000 f96d 	bl	800933a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009060:	f000 fcbe 	bl	80099e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009066:	f000 f9ba 	bl	80093de <prvIsQueueEmpty>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	f43f af4d 	beq.w	8008f0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00d      	beq.n	8009094 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009078:	f001 fedc 	bl	800ae34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800907c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800907e:	f000 f8b4 	bl	80091ea <prvGetDisinheritPriorityAfterTimeout>
 8009082:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800908a:	4618      	mov	r0, r3
 800908c:	f001 f970 	bl	800a370 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009090:	f001 ff00 	bl	800ae94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009096:	4618      	mov	r0, r3
 8009098:	3738      	adds	r7, #56	; 0x38
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08e      	sub	sp, #56	; 0x38
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	623b      	str	r3, [r7, #32]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d103      	bne.n	80090de <xQueueReceiveFromISR+0x3a>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <xQueueReceiveFromISR+0x3e>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <xQueueReceiveFromISR+0x40>
 80090e2:	2300      	movs	r3, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	61fb      	str	r3, [r7, #28]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090fe:	f001 ff7b 	bl	800aff8 <vPortValidateInterruptPriority>
	__asm volatile
 8009102:	f3ef 8211 	mrs	r2, BASEPRI
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	61ba      	str	r2, [r7, #24]
 8009118:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800911a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800911c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d02f      	beq.n	800918a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009134:	68b9      	ldr	r1, [r7, #8]
 8009136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009138:	f000 f8d9 	bl	80092ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	1e5a      	subs	r2, r3, #1
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914c:	d112      	bne.n	8009174 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d016      	beq.n	8009184 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	3310      	adds	r3, #16
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fe56 	bl	8009e0c <xTaskRemoveFromEventList>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00e      	beq.n	8009184 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	e007      	b.n	8009184 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009178:	3301      	adds	r3, #1
 800917a:	b2db      	uxtb	r3, r3
 800917c:	b25a      	sxtb	r2, r3
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009184:	2301      	movs	r3, #1
 8009186:	637b      	str	r3, [r7, #52]	; 0x34
 8009188:	e001      	b.n	800918e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800918a:	2300      	movs	r3, #0
 800918c:	637b      	str	r3, [r7, #52]	; 0x34
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f383 8811 	msr	BASEPRI, r3
}
 8009198:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800919c:	4618      	mov	r0, r3
 800919e:	3738      	adds	r7, #56	; 0x38
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <vQueueDelete+0x28>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	60bb      	str	r3, [r7, #8]
}
 80091c8:	bf00      	nop
 80091ca:	e7fe      	b.n	80091ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 f95f 	bl	8009490 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d102      	bne.n	80091e2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f002 f817 	bl	800b210 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091ea:	b480      	push	{r7}
 80091ec:	b085      	sub	sp, #20
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d006      	beq.n	8009208 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e001      	b.n	800920c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800920c:	68fb      	ldr	r3, [r7, #12]
	}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10d      	bne.n	8009254 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d14d      	bne.n	80092dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	4618      	mov	r0, r3
 8009246:	f001 f825 	bl	800a294 <xTaskPriorityDisinherit>
 800924a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	609a      	str	r2, [r3, #8]
 8009252:	e043      	b.n	80092dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d119      	bne.n	800928e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6858      	ldr	r0, [r3, #4]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	461a      	mov	r2, r3
 8009264:	68b9      	ldr	r1, [r7, #8]
 8009266:	f002 f915 	bl	800b494 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009272:	441a      	add	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	429a      	cmp	r2, r3
 8009282:	d32b      	bcc.n	80092dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	605a      	str	r2, [r3, #4]
 800928c:	e026      	b.n	80092dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68d8      	ldr	r0, [r3, #12]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	461a      	mov	r2, r3
 8009298:	68b9      	ldr	r1, [r7, #8]
 800929a:	f002 f8fb 	bl	800b494 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a6:	425b      	negs	r3, r3
 80092a8:	441a      	add	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d207      	bcs.n	80092ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	425b      	negs	r3, r3
 80092c4:	441a      	add	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d105      	bne.n	80092dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092e4:	697b      	ldr	r3, [r7, #20]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d018      	beq.n	8009332 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009308:	441a      	add	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	429a      	cmp	r2, r3
 8009318:	d303      	bcc.n	8009322 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68d9      	ldr	r1, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	461a      	mov	r2, r3
 800932c:	6838      	ldr	r0, [r7, #0]
 800932e:	f002 f8b1 	bl	800b494 <memcpy>
	}
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009342:	f001 fd77 	bl	800ae34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800934c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800934e:	e011      	b.n	8009374 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	d012      	beq.n	800937e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3324      	adds	r3, #36	; 0x24
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fd55 	bl	8009e0c <xTaskRemoveFromEventList>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009368:	f000 fe2c 	bl	8009fc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	3b01      	subs	r3, #1
 8009370:	b2db      	uxtb	r3, r3
 8009372:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dce9      	bgt.n	8009350 <prvUnlockQueue+0x16>
 800937c:	e000      	b.n	8009380 <prvUnlockQueue+0x46>
					break;
 800937e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	22ff      	movs	r2, #255	; 0xff
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009388:	f001 fd84 	bl	800ae94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800938c:	f001 fd52 	bl	800ae34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009396:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009398:	e011      	b.n	80093be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d012      	beq.n	80093c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3310      	adds	r3, #16
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fd30 	bl	8009e0c <xTaskRemoveFromEventList>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093b2:	f000 fe07 	bl	8009fc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dce9      	bgt.n	800939a <prvUnlockQueue+0x60>
 80093c6:	e000      	b.n	80093ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	22ff      	movs	r2, #255	; 0xff
 80093ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093d2:	f001 fd5f 	bl	800ae94 <vPortExitCritical>
}
 80093d6:	bf00      	nop
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093e6:	f001 fd25 	bl	800ae34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093f2:	2301      	movs	r3, #1
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	e001      	b.n	80093fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093fc:	f001 fd4a 	bl	800ae94 <vPortExitCritical>

	return xReturn;
 8009400:	68fb      	ldr	r3, [r7, #12]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009412:	f001 fd0f 	bl	800ae34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941e:	429a      	cmp	r2, r3
 8009420:	d102      	bne.n	8009428 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009422:	2301      	movs	r3, #1
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	e001      	b.n	800942c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800942c:	f001 fd32 	bl	800ae94 <vPortExitCritical>

	return xReturn;
 8009430:	68fb      	ldr	r3, [r7, #12]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	e014      	b.n	8009476 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800944c:	4a0f      	ldr	r2, [pc, #60]	; (800948c <vQueueAddToRegistry+0x50>)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10b      	bne.n	8009470 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009458:	490c      	ldr	r1, [pc, #48]	; (800948c <vQueueAddToRegistry+0x50>)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009462:	4a0a      	ldr	r2, [pc, #40]	; (800948c <vQueueAddToRegistry+0x50>)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	4413      	add	r3, r2
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800946e:	e006      	b.n	800947e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b07      	cmp	r3, #7
 800947a:	d9e7      	bls.n	800944c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	2000518c 	.word	0x2000518c

08009490 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	e016      	b.n	80094cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800949e:	4a10      	ldr	r2, [pc, #64]	; (80094e0 <vQueueUnregisterQueue+0x50>)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d10b      	bne.n	80094c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094ae:	4a0c      	ldr	r2, [pc, #48]	; (80094e0 <vQueueUnregisterQueue+0x50>)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2100      	movs	r1, #0
 80094b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094b8:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <vQueueUnregisterQueue+0x50>)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	4413      	add	r3, r2
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
				break;
 80094c4:	e006      	b.n	80094d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b07      	cmp	r3, #7
 80094d0:	d9e5      	bls.n	800949e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	2000518c 	.word	0x2000518c

080094e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094f4:	f001 fc9e 	bl	800ae34 <vPortEnterCritical>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094fe:	b25b      	sxtb	r3, r3
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d103      	bne.n	800950e <vQueueWaitForMessageRestricted+0x2a>
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009514:	b25b      	sxtb	r3, r3
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d103      	bne.n	8009524 <vQueueWaitForMessageRestricted+0x40>
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009524:	f001 fcb6 	bl	800ae94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	3324      	adds	r3, #36	; 0x24
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fc3b 	bl	8009db4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f7ff fefb 	bl	800933a <prvUnlockQueue>
	}
 8009544:	bf00      	nop
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08e      	sub	sp, #56	; 0x38
 8009550:	af04      	add	r7, sp, #16
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800955a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	623b      	str	r3, [r7, #32]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <xTaskCreateStatic+0x46>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61fb      	str	r3, [r7, #28]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009592:	235c      	movs	r3, #92	; 0x5c
 8009594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b5c      	cmp	r3, #92	; 0x5c
 800959a:	d00a      	beq.n	80095b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	61bb      	str	r3, [r7, #24]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01e      	beq.n	80095f8 <xTaskCreateStatic+0xac>
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01b      	beq.n	80095f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	2202      	movs	r2, #2
 80095ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095d2:	2300      	movs	r3, #0
 80095d4:	9303      	str	r3, [sp, #12]
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	9302      	str	r3, [sp, #8]
 80095da:	f107 0314 	add.w	r3, r7, #20
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 f850 	bl	8009690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095f2:	f000 f8dd 	bl	80097b0 <prvAddNewTaskToReadyList>
 80095f6:	e001      	b.n	80095fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095fc:	697b      	ldr	r3, [r7, #20]
	}
 80095fe:	4618      	mov	r0, r3
 8009600:	3728      	adds	r7, #40	; 0x28
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009606:	b580      	push	{r7, lr}
 8009608:	b08c      	sub	sp, #48	; 0x30
 800960a:	af04      	add	r7, sp, #16
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4618      	mov	r0, r3
 800961c:	f001 fd2c 	bl	800b078 <pvPortMalloc>
 8009620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00e      	beq.n	8009646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009628:	205c      	movs	r0, #92	; 0x5c
 800962a:	f001 fd25 	bl	800b078 <pvPortMalloc>
 800962e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	631a      	str	r2, [r3, #48]	; 0x30
 800963c:	e005      	b.n	800964a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f001 fde6 	bl	800b210 <vPortFree>
 8009644:	e001      	b.n	800964a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d017      	beq.n	8009680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009658:	88fa      	ldrh	r2, [r7, #6]
 800965a:	2300      	movs	r3, #0
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f80e 	bl	8009690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009674:	69f8      	ldr	r0, [r7, #28]
 8009676:	f000 f89b 	bl	80097b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800967a:	2301      	movs	r3, #1
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e002      	b.n	8009686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009680:	f04f 33ff 	mov.w	r3, #4294967295
 8009684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009686:	69bb      	ldr	r3, [r7, #24]
	}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	461a      	mov	r2, r3
 80096a8:	21a5      	movs	r1, #165	; 0xa5
 80096aa:	f001 ff01 	bl	800b4b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096b8:	3b01      	subs	r3, #1
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f023 0307 	bic.w	r3, r3, #7
 80096c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	617b      	str	r3, [r7, #20]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d01f      	beq.n	800972e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096ee:	2300      	movs	r3, #0
 80096f0:	61fb      	str	r3, [r7, #28]
 80096f2:	e012      	b.n	800971a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	7819      	ldrb	r1, [r3, #0]
 80096fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	3334      	adds	r3, #52	; 0x34
 8009704:	460a      	mov	r2, r1
 8009706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d006      	beq.n	8009722 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	3301      	adds	r3, #1
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	2b0f      	cmp	r3, #15
 800971e:	d9e9      	bls.n	80096f4 <prvInitialiseNewTask+0x64>
 8009720:	e000      	b.n	8009724 <prvInitialiseNewTask+0x94>
			{
				break;
 8009722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800972c:	e003      	b.n	8009736 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	2b37      	cmp	r3, #55	; 0x37
 800973a:	d901      	bls.n	8009740 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800973c:	2337      	movs	r3, #55	; 0x37
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800974a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	2200      	movs	r2, #0
 8009750:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	3304      	adds	r3, #4
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe fe56 	bl	8008408 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	3318      	adds	r3, #24
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe fe51 	bl	8008408 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800977a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	2200      	movs	r2, #0
 8009780:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	68f9      	ldr	r1, [r7, #12]
 800978e:	69b8      	ldr	r0, [r7, #24]
 8009790:	f001 fa26 	bl	800abe0 <pxPortInitialiseStack>
 8009794:	4602      	mov	r2, r0
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097a6:	bf00      	nop
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097b8:	f001 fb3c 	bl	800ae34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097bc:	4b2d      	ldr	r3, [pc, #180]	; (8009874 <prvAddNewTaskToReadyList+0xc4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3301      	adds	r3, #1
 80097c2:	4a2c      	ldr	r2, [pc, #176]	; (8009874 <prvAddNewTaskToReadyList+0xc4>)
 80097c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097c6:	4b2c      	ldr	r3, [pc, #176]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097ce:	4a2a      	ldr	r2, [pc, #168]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097d4:	4b27      	ldr	r3, [pc, #156]	; (8009874 <prvAddNewTaskToReadyList+0xc4>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d110      	bne.n	80097fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097dc:	f000 fc16 	bl	800a00c <prvInitialiseTaskLists>
 80097e0:	e00d      	b.n	80097fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097e2:	4b26      	ldr	r3, [pc, #152]	; (800987c <prvAddNewTaskToReadyList+0xcc>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d109      	bne.n	80097fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097ea:	4b23      	ldr	r3, [pc, #140]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d802      	bhi.n	80097fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097f8:	4a1f      	ldr	r2, [pc, #124]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097fe:	4b20      	ldr	r3, [pc, #128]	; (8009880 <prvAddNewTaskToReadyList+0xd0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	4a1e      	ldr	r2, [pc, #120]	; (8009880 <prvAddNewTaskToReadyList+0xd0>)
 8009806:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009808:	4b1d      	ldr	r3, [pc, #116]	; (8009880 <prvAddNewTaskToReadyList+0xd0>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009814:	4b1b      	ldr	r3, [pc, #108]	; (8009884 <prvAddNewTaskToReadyList+0xd4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d903      	bls.n	8009824 <prvAddNewTaskToReadyList+0x74>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	4a18      	ldr	r2, [pc, #96]	; (8009884 <prvAddNewTaskToReadyList+0xd4>)
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4a15      	ldr	r2, [pc, #84]	; (8009888 <prvAddNewTaskToReadyList+0xd8>)
 8009832:	441a      	add	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3304      	adds	r3, #4
 8009838:	4619      	mov	r1, r3
 800983a:	4610      	mov	r0, r2
 800983c:	f7fe fdf1 	bl	8008422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009840:	f001 fb28 	bl	800ae94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009844:	4b0d      	ldr	r3, [pc, #52]	; (800987c <prvAddNewTaskToReadyList+0xcc>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00e      	beq.n	800986a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	429a      	cmp	r2, r3
 8009858:	d207      	bcs.n	800986a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800985a:	4b0c      	ldr	r3, [pc, #48]	; (800988c <prvAddNewTaskToReadyList+0xdc>)
 800985c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20000bc0 	.word	0x20000bc0
 8009878:	200006ec 	.word	0x200006ec
 800987c:	20000bcc 	.word	0x20000bcc
 8009880:	20000bdc 	.word	0x20000bdc
 8009884:	20000bc8 	.word	0x20000bc8
 8009888:	200006f0 	.word	0x200006f0
 800988c:	e000ed04 	.word	0xe000ed04

08009890 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d017      	beq.n	80098d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098a2:	4b13      	ldr	r3, [pc, #76]	; (80098f0 <vTaskDelay+0x60>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00a      	beq.n	80098c0 <vTaskDelay+0x30>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	60bb      	str	r3, [r7, #8]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098c0:	f000 f880 	bl	80099c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098c4:	2100      	movs	r1, #0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fde8 	bl	800a49c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098cc:	f000 f888 	bl	80099e0 <xTaskResumeAll>
 80098d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d107      	bne.n	80098e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80098d8:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <vTaskDelay+0x64>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000be8 	.word	0x20000be8
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08a      	sub	sp, #40	; 0x28
 80098fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009902:	2300      	movs	r3, #0
 8009904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009906:	463a      	mov	r2, r7
 8009908:	1d39      	adds	r1, r7, #4
 800990a:	f107 0308 	add.w	r3, r7, #8
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe fd26 	bl	8008360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	9202      	str	r2, [sp, #8]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	2300      	movs	r3, #0
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	2300      	movs	r3, #0
 8009924:	460a      	mov	r2, r1
 8009926:	4921      	ldr	r1, [pc, #132]	; (80099ac <vTaskStartScheduler+0xb4>)
 8009928:	4821      	ldr	r0, [pc, #132]	; (80099b0 <vTaskStartScheduler+0xb8>)
 800992a:	f7ff fe0f 	bl	800954c <xTaskCreateStatic>
 800992e:	4603      	mov	r3, r0
 8009930:	4a20      	ldr	r2, [pc, #128]	; (80099b4 <vTaskStartScheduler+0xbc>)
 8009932:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009934:	4b1f      	ldr	r3, [pc, #124]	; (80099b4 <vTaskStartScheduler+0xbc>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	e001      	b.n	8009946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009942:	2300      	movs	r3, #0
 8009944:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d102      	bne.n	8009952 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800994c:	f000 fdfa 	bl	800a544 <xTimerCreateTimerTask>
 8009950:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d116      	bne.n	8009986 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	613b      	str	r3, [r7, #16]
}
 800996a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800996c:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <vTaskStartScheduler+0xc0>)
 800996e:	f04f 32ff 	mov.w	r2, #4294967295
 8009972:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009974:	4b11      	ldr	r3, [pc, #68]	; (80099bc <vTaskStartScheduler+0xc4>)
 8009976:	2201      	movs	r2, #1
 8009978:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800997a:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <vTaskStartScheduler+0xc8>)
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009980:	f001 f9b6 	bl	800acf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009984:	e00e      	b.n	80099a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998c:	d10a      	bne.n	80099a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	60fb      	str	r3, [r7, #12]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <vTaskStartScheduler+0xaa>
}
 80099a4:	bf00      	nop
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	0800b514 	.word	0x0800b514
 80099b0:	08009fdd 	.word	0x08009fdd
 80099b4:	20000be4 	.word	0x20000be4
 80099b8:	20000be0 	.word	0x20000be0
 80099bc:	20000bcc 	.word	0x20000bcc
 80099c0:	20000bc4 	.word	0x20000bc4

080099c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099c8:	4b04      	ldr	r3, [pc, #16]	; (80099dc <vTaskSuspendAll+0x18>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3301      	adds	r3, #1
 80099ce:	4a03      	ldr	r2, [pc, #12]	; (80099dc <vTaskSuspendAll+0x18>)
 80099d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099d2:	bf00      	nop
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	20000be8 	.word	0x20000be8

080099e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099ee:	4b42      	ldr	r3, [pc, #264]	; (8009af8 <xTaskResumeAll+0x118>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10a      	bne.n	8009a0c <xTaskResumeAll+0x2c>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	603b      	str	r3, [r7, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a0c:	f001 fa12 	bl	800ae34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a10:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <xTaskResumeAll+0x118>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	4a38      	ldr	r2, [pc, #224]	; (8009af8 <xTaskResumeAll+0x118>)
 8009a18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a1a:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <xTaskResumeAll+0x118>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d162      	bne.n	8009ae8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a22:	4b36      	ldr	r3, [pc, #216]	; (8009afc <xTaskResumeAll+0x11c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d05e      	beq.n	8009ae8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a2a:	e02f      	b.n	8009a8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2c:	4b34      	ldr	r3, [pc, #208]	; (8009b00 <xTaskResumeAll+0x120>)
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3318      	adds	r3, #24
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fd4f 	bl	80084dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3304      	adds	r3, #4
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe fd4a 	bl	80084dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4c:	4b2d      	ldr	r3, [pc, #180]	; (8009b04 <xTaskResumeAll+0x124>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d903      	bls.n	8009a5c <xTaskResumeAll+0x7c>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	4a2a      	ldr	r2, [pc, #168]	; (8009b04 <xTaskResumeAll+0x124>)
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4a27      	ldr	r2, [pc, #156]	; (8009b08 <xTaskResumeAll+0x128>)
 8009a6a:	441a      	add	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f7fe fcd5 	bl	8008422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	4b23      	ldr	r3, [pc, #140]	; (8009b0c <xTaskResumeAll+0x12c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d302      	bcc.n	8009a8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a86:	4b22      	ldr	r3, [pc, #136]	; (8009b10 <xTaskResumeAll+0x130>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a8c:	4b1c      	ldr	r3, [pc, #112]	; (8009b00 <xTaskResumeAll+0x120>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1cb      	bne.n	8009a2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a9a:	f000 fb55 	bl	800a148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <xTaskResumeAll+0x134>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d010      	beq.n	8009acc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009aaa:	f000 f847 	bl	8009b3c <xTaskIncrementTick>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ab4:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <xTaskResumeAll+0x130>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1f1      	bne.n	8009aaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009ac6:	4b13      	ldr	r3, [pc, #76]	; (8009b14 <xTaskResumeAll+0x134>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009acc:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <xTaskResumeAll+0x130>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d009      	beq.n	8009ae8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ad8:	4b0f      	ldr	r3, [pc, #60]	; (8009b18 <xTaskResumeAll+0x138>)
 8009ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ae8:	f001 f9d4 	bl	800ae94 <vPortExitCritical>

	return xAlreadyYielded;
 8009aec:	68bb      	ldr	r3, [r7, #8]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000be8 	.word	0x20000be8
 8009afc:	20000bc0 	.word	0x20000bc0
 8009b00:	20000b80 	.word	0x20000b80
 8009b04:	20000bc8 	.word	0x20000bc8
 8009b08:	200006f0 	.word	0x200006f0
 8009b0c:	200006ec 	.word	0x200006ec
 8009b10:	20000bd4 	.word	0x20000bd4
 8009b14:	20000bd0 	.word	0x20000bd0
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <xTaskGetTickCount+0x1c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b28:	687b      	ldr	r3, [r7, #4]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20000bc4 	.word	0x20000bc4

08009b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b46:	4b4f      	ldr	r3, [pc, #316]	; (8009c84 <xTaskIncrementTick+0x148>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f040 808f 	bne.w	8009c6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b50:	4b4d      	ldr	r3, [pc, #308]	; (8009c88 <xTaskIncrementTick+0x14c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b58:	4a4b      	ldr	r2, [pc, #300]	; (8009c88 <xTaskIncrementTick+0x14c>)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d120      	bne.n	8009ba6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b64:	4b49      	ldr	r3, [pc, #292]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	603b      	str	r3, [r7, #0]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <xTaskIncrementTick+0x46>
 8009b84:	4b41      	ldr	r3, [pc, #260]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	4b41      	ldr	r3, [pc, #260]	; (8009c90 <xTaskIncrementTick+0x154>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a3f      	ldr	r2, [pc, #252]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009b90:	6013      	str	r3, [r2, #0]
 8009b92:	4a3f      	ldr	r2, [pc, #252]	; (8009c90 <xTaskIncrementTick+0x154>)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	4b3e      	ldr	r3, [pc, #248]	; (8009c94 <xTaskIncrementTick+0x158>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	4a3d      	ldr	r2, [pc, #244]	; (8009c94 <xTaskIncrementTick+0x158>)
 8009ba0:	6013      	str	r3, [r2, #0]
 8009ba2:	f000 fad1 	bl	800a148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ba6:	4b3c      	ldr	r3, [pc, #240]	; (8009c98 <xTaskIncrementTick+0x15c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d349      	bcc.n	8009c44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bb0:	4b36      	ldr	r3, [pc, #216]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d104      	bne.n	8009bc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bba:	4b37      	ldr	r3, [pc, #220]	; (8009c98 <xTaskIncrementTick+0x15c>)
 8009bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc0:	601a      	str	r2, [r3, #0]
					break;
 8009bc2:	e03f      	b.n	8009c44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc4:	4b31      	ldr	r3, [pc, #196]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d203      	bcs.n	8009be4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bdc:	4a2e      	ldr	r2, [pc, #184]	; (8009c98 <xTaskIncrementTick+0x15c>)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009be2:	e02f      	b.n	8009c44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fc77 	bl	80084dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	3318      	adds	r3, #24
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe fc6e 	bl	80084dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	4b25      	ldr	r3, [pc, #148]	; (8009c9c <xTaskIncrementTick+0x160>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d903      	bls.n	8009c14 <xTaskIncrementTick+0xd8>
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	4a22      	ldr	r2, [pc, #136]	; (8009c9c <xTaskIncrementTick+0x160>)
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <xTaskIncrementTick+0x164>)
 8009c22:	441a      	add	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f7fe fbf9 	bl	8008422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c34:	4b1b      	ldr	r3, [pc, #108]	; (8009ca4 <xTaskIncrementTick+0x168>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d3b8      	bcc.n	8009bb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c42:	e7b5      	b.n	8009bb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c44:	4b17      	ldr	r3, [pc, #92]	; (8009ca4 <xTaskIncrementTick+0x168>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4a:	4915      	ldr	r1, [pc, #84]	; (8009ca0 <xTaskIncrementTick+0x164>)
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d901      	bls.n	8009c60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c60:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <xTaskIncrementTick+0x16c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d007      	beq.n	8009c78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	e004      	b.n	8009c78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <xTaskIncrementTick+0x170>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3301      	adds	r3, #1
 8009c74:	4a0d      	ldr	r2, [pc, #52]	; (8009cac <xTaskIncrementTick+0x170>)
 8009c76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c78:	697b      	ldr	r3, [r7, #20]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20000be8 	.word	0x20000be8
 8009c88:	20000bc4 	.word	0x20000bc4
 8009c8c:	20000b78 	.word	0x20000b78
 8009c90:	20000b7c 	.word	0x20000b7c
 8009c94:	20000bd8 	.word	0x20000bd8
 8009c98:	20000be0 	.word	0x20000be0
 8009c9c:	20000bc8 	.word	0x20000bc8
 8009ca0:	200006f0 	.word	0x200006f0
 8009ca4:	200006ec 	.word	0x200006ec
 8009ca8:	20000bd4 	.word	0x20000bd4
 8009cac:	20000bd0 	.word	0x20000bd0

08009cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cb6:	4b28      	ldr	r3, [pc, #160]	; (8009d58 <vTaskSwitchContext+0xa8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cbe:	4b27      	ldr	r3, [pc, #156]	; (8009d5c <vTaskSwitchContext+0xac>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cc4:	e041      	b.n	8009d4a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009cc6:	4b25      	ldr	r3, [pc, #148]	; (8009d5c <vTaskSwitchContext+0xac>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ccc:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <vTaskSwitchContext+0xb0>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	e010      	b.n	8009cf6 <vTaskSwitchContext+0x46>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <vTaskSwitchContext+0x40>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	607b      	str	r3, [r7, #4]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <vTaskSwitchContext+0x3e>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	491b      	ldr	r1, [pc, #108]	; (8009d64 <vTaskSwitchContext+0xb4>)
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0e4      	beq.n	8009cd4 <vTaskSwitchContext+0x24>
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4a13      	ldr	r2, [pc, #76]	; (8009d64 <vTaskSwitchContext+0xb4>)
 8009d16:	4413      	add	r3, r2
 8009d18:	60bb      	str	r3, [r7, #8]
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	605a      	str	r2, [r3, #4]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d104      	bne.n	8009d3a <vTaskSwitchContext+0x8a>
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <vTaskSwitchContext+0xb8>)
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	4a06      	ldr	r2, [pc, #24]	; (8009d60 <vTaskSwitchContext+0xb0>)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6013      	str	r3, [r2, #0]
}
 8009d4a:	bf00      	nop
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	20000be8 	.word	0x20000be8
 8009d5c:	20000bd4 	.word	0x20000bd4
 8009d60:	20000bc8 	.word	0x20000bc8
 8009d64:	200006f0 	.word	0x200006f0
 8009d68:	200006ec 	.word	0x200006ec

08009d6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	60fb      	str	r3, [r7, #12]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d92:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <vTaskPlaceOnEventList+0x44>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3318      	adds	r3, #24
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fe fb65 	bl	800846a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009da0:	2101      	movs	r1, #1
 8009da2:	6838      	ldr	r0, [r7, #0]
 8009da4:	f000 fb7a 	bl	800a49c <prvAddCurrentTaskToDelayedList>
}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	200006ec 	.word	0x200006ec

08009db4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10a      	bne.n	8009ddc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	617b      	str	r3, [r7, #20]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <vTaskPlaceOnEventListRestricted+0x54>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3318      	adds	r3, #24
 8009de2:	4619      	mov	r1, r3
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f7fe fb1c 	bl	8008422 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295
 8009df4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	68b8      	ldr	r0, [r7, #8]
 8009dfa:	f000 fb4f 	bl	800a49c <prvAddCurrentTaskToDelayedList>
	}
 8009dfe:	bf00      	nop
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	200006ec 	.word	0x200006ec

08009e0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10a      	bne.n	8009e38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	60fb      	str	r3, [r7, #12]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	3318      	adds	r3, #24
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fb4d 	bl	80084dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e42:	4b1e      	ldr	r3, [pc, #120]	; (8009ebc <xTaskRemoveFromEventList+0xb0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d11d      	bne.n	8009e86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fb44 	bl	80084dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e58:	4b19      	ldr	r3, [pc, #100]	; (8009ec0 <xTaskRemoveFromEventList+0xb4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d903      	bls.n	8009e68 <xTaskRemoveFromEventList+0x5c>
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e64:	4a16      	ldr	r2, [pc, #88]	; (8009ec0 <xTaskRemoveFromEventList+0xb4>)
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <xTaskRemoveFromEventList+0xb8>)
 8009e76:	441a      	add	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe facf 	bl	8008422 <vListInsertEnd>
 8009e84:	e005      	b.n	8009e92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3318      	adds	r3, #24
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	480e      	ldr	r0, [pc, #56]	; (8009ec8 <xTaskRemoveFromEventList+0xbc>)
 8009e8e:	f7fe fac8 	bl	8008422 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e96:	4b0d      	ldr	r3, [pc, #52]	; (8009ecc <xTaskRemoveFromEventList+0xc0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d905      	bls.n	8009eac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ea4:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <xTaskRemoveFromEventList+0xc4>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	e001      	b.n	8009eb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009eb0:	697b      	ldr	r3, [r7, #20]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000be8 	.word	0x20000be8
 8009ec0:	20000bc8 	.word	0x20000bc8
 8009ec4:	200006f0 	.word	0x200006f0
 8009ec8:	20000b80 	.word	0x20000b80
 8009ecc:	200006ec 	.word	0x200006ec
 8009ed0:	20000bd4 	.word	0x20000bd4

08009ed4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <vTaskInternalSetTimeOutState+0x24>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <vTaskInternalSetTimeOutState+0x28>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	605a      	str	r2, [r3, #4]
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	20000bd8 	.word	0x20000bd8
 8009efc:	20000bc4 	.word	0x20000bc4

08009f00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	613b      	str	r3, [r7, #16]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	60fb      	str	r3, [r7, #12]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f42:	f000 ff77 	bl	800ae34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f46:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <xTaskCheckForTimeOut+0xbc>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5e:	d102      	bne.n	8009f66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	e023      	b.n	8009fae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	4b15      	ldr	r3, [pc, #84]	; (8009fc0 <xTaskCheckForTimeOut+0xc0>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d007      	beq.n	8009f82 <xTaskCheckForTimeOut+0x82>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d302      	bcc.n	8009f82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	e015      	b.n	8009fae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d20b      	bcs.n	8009fa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	1ad2      	subs	r2, r2, r3
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff ff9b 	bl	8009ed4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	e004      	b.n	8009fae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009faa:	2301      	movs	r3, #1
 8009fac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fae:	f000 ff71 	bl	800ae94 <vPortExitCritical>

	return xReturn;
 8009fb2:	69fb      	ldr	r3, [r7, #28]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3720      	adds	r7, #32
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20000bc4 	.word	0x20000bc4
 8009fc0:	20000bd8 	.word	0x20000bd8

08009fc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fc8:	4b03      	ldr	r3, [pc, #12]	; (8009fd8 <vTaskMissedYield+0x14>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]
}
 8009fce:	bf00      	nop
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	20000bd4 	.word	0x20000bd4

08009fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fe4:	f000 f852 	bl	800a08c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fe8:	4b06      	ldr	r3, [pc, #24]	; (800a004 <prvIdleTask+0x28>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d9f9      	bls.n	8009fe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <prvIdleTask+0x2c>)
 8009ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff6:	601a      	str	r2, [r3, #0]
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a000:	e7f0      	b.n	8009fe4 <prvIdleTask+0x8>
 800a002:	bf00      	nop
 800a004:	200006f0 	.word	0x200006f0
 800a008:	e000ed04 	.word	0xe000ed04

0800a00c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a012:	2300      	movs	r3, #0
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	e00c      	b.n	800a032 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4a12      	ldr	r2, [pc, #72]	; (800a06c <prvInitialiseTaskLists+0x60>)
 800a024:	4413      	add	r3, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe f9ce 	bl	80083c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3301      	adds	r3, #1
 800a030:	607b      	str	r3, [r7, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b37      	cmp	r3, #55	; 0x37
 800a036:	d9ef      	bls.n	800a018 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a038:	480d      	ldr	r0, [pc, #52]	; (800a070 <prvInitialiseTaskLists+0x64>)
 800a03a:	f7fe f9c5 	bl	80083c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a03e:	480d      	ldr	r0, [pc, #52]	; (800a074 <prvInitialiseTaskLists+0x68>)
 800a040:	f7fe f9c2 	bl	80083c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a044:	480c      	ldr	r0, [pc, #48]	; (800a078 <prvInitialiseTaskLists+0x6c>)
 800a046:	f7fe f9bf 	bl	80083c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a04a:	480c      	ldr	r0, [pc, #48]	; (800a07c <prvInitialiseTaskLists+0x70>)
 800a04c:	f7fe f9bc 	bl	80083c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a050:	480b      	ldr	r0, [pc, #44]	; (800a080 <prvInitialiseTaskLists+0x74>)
 800a052:	f7fe f9b9 	bl	80083c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a056:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <prvInitialiseTaskLists+0x78>)
 800a058:	4a05      	ldr	r2, [pc, #20]	; (800a070 <prvInitialiseTaskLists+0x64>)
 800a05a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a05c:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <prvInitialiseTaskLists+0x7c>)
 800a05e:	4a05      	ldr	r2, [pc, #20]	; (800a074 <prvInitialiseTaskLists+0x68>)
 800a060:	601a      	str	r2, [r3, #0]
}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	200006f0 	.word	0x200006f0
 800a070:	20000b50 	.word	0x20000b50
 800a074:	20000b64 	.word	0x20000b64
 800a078:	20000b80 	.word	0x20000b80
 800a07c:	20000b94 	.word	0x20000b94
 800a080:	20000bac 	.word	0x20000bac
 800a084:	20000b78 	.word	0x20000b78
 800a088:	20000b7c 	.word	0x20000b7c

0800a08c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a092:	e019      	b.n	800a0c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a094:	f000 fece 	bl	800ae34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a098:	4b10      	ldr	r3, [pc, #64]	; (800a0dc <prvCheckTasksWaitingTermination+0x50>)
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fa19 	bl	80084dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0aa:	4b0d      	ldr	r3, [pc, #52]	; (800a0e0 <prvCheckTasksWaitingTermination+0x54>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	4a0b      	ldr	r2, [pc, #44]	; (800a0e0 <prvCheckTasksWaitingTermination+0x54>)
 800a0b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <prvCheckTasksWaitingTermination+0x58>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	4a0a      	ldr	r2, [pc, #40]	; (800a0e4 <prvCheckTasksWaitingTermination+0x58>)
 800a0bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0be:	f000 fee9 	bl	800ae94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f810 	bl	800a0e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0c8:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <prvCheckTasksWaitingTermination+0x58>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e1      	bne.n	800a094 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0d0:	bf00      	nop
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000b94 	.word	0x20000b94
 800a0e0:	20000bc0 	.word	0x20000bc0
 800a0e4:	20000ba8 	.word	0x20000ba8

0800a0e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d108      	bne.n	800a10c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fe:	4618      	mov	r0, r3
 800a100:	f001 f886 	bl	800b210 <vPortFree>
				vPortFree( pxTCB );
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 f883 	bl	800b210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a10a:	e018      	b.n	800a13e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a112:	2b01      	cmp	r3, #1
 800a114:	d103      	bne.n	800a11e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f001 f87a 	bl	800b210 <vPortFree>
	}
 800a11c:	e00f      	b.n	800a13e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a124:	2b02      	cmp	r3, #2
 800a126:	d00a      	beq.n	800a13e <prvDeleteTCB+0x56>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	60fb      	str	r3, [r7, #12]
}
 800a13a:	bf00      	nop
 800a13c:	e7fe      	b.n	800a13c <prvDeleteTCB+0x54>
	}
 800a13e:	bf00      	nop
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a14e:	4b0c      	ldr	r3, [pc, #48]	; (800a180 <prvResetNextTaskUnblockTime+0x38>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <prvResetNextTaskUnblockTime+0x3c>)
 800a15a:	f04f 32ff 	mov.w	r2, #4294967295
 800a15e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a160:	e008      	b.n	800a174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a162:	4b07      	ldr	r3, [pc, #28]	; (800a180 <prvResetNextTaskUnblockTime+0x38>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	4a04      	ldr	r2, [pc, #16]	; (800a184 <prvResetNextTaskUnblockTime+0x3c>)
 800a172:	6013      	str	r3, [r2, #0]
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	20000b78 	.word	0x20000b78
 800a184:	20000be0 	.word	0x20000be0

0800a188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a18e:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <xTaskGetSchedulerState+0x34>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a196:	2301      	movs	r3, #1
 800a198:	607b      	str	r3, [r7, #4]
 800a19a:	e008      	b.n	800a1ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a19c:	4b08      	ldr	r3, [pc, #32]	; (800a1c0 <xTaskGetSchedulerState+0x38>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	607b      	str	r3, [r7, #4]
 800a1a8:	e001      	b.n	800a1ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1ae:	687b      	ldr	r3, [r7, #4]
	}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	20000bcc 	.word	0x20000bcc
 800a1c0:	20000be8 	.word	0x20000be8

0800a1c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d051      	beq.n	800a27e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1de:	4b2a      	ldr	r3, [pc, #168]	; (800a288 <xTaskPriorityInherit+0xc4>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d241      	bcs.n	800a26c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	db06      	blt.n	800a1fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f0:	4b25      	ldr	r3, [pc, #148]	; (800a288 <xTaskPriorityInherit+0xc4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	6959      	ldr	r1, [r3, #20]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4a1f      	ldr	r2, [pc, #124]	; (800a28c <xTaskPriorityInherit+0xc8>)
 800a210:	4413      	add	r3, r2
 800a212:	4299      	cmp	r1, r3
 800a214:	d122      	bne.n	800a25c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	3304      	adds	r3, #4
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe f95e 	bl	80084dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a220:	4b19      	ldr	r3, [pc, #100]	; (800a288 <xTaskPriorityInherit+0xc4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22e:	4b18      	ldr	r3, [pc, #96]	; (800a290 <xTaskPriorityInherit+0xcc>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d903      	bls.n	800a23e <xTaskPriorityInherit+0x7a>
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23a:	4a15      	ldr	r2, [pc, #84]	; (800a290 <xTaskPriorityInherit+0xcc>)
 800a23c:	6013      	str	r3, [r2, #0]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a242:	4613      	mov	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4a10      	ldr	r2, [pc, #64]	; (800a28c <xTaskPriorityInherit+0xc8>)
 800a24c:	441a      	add	r2, r3
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	3304      	adds	r3, #4
 800a252:	4619      	mov	r1, r3
 800a254:	4610      	mov	r0, r2
 800a256:	f7fe f8e4 	bl	8008422 <vListInsertEnd>
 800a25a:	e004      	b.n	800a266 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a25c:	4b0a      	ldr	r3, [pc, #40]	; (800a288 <xTaskPriorityInherit+0xc4>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a266:	2301      	movs	r3, #1
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	e008      	b.n	800a27e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a270:	4b05      	ldr	r3, [pc, #20]	; (800a288 <xTaskPriorityInherit+0xc4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a276:	429a      	cmp	r2, r3
 800a278:	d201      	bcs.n	800a27e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a27a:	2301      	movs	r3, #1
 800a27c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a27e:	68fb      	ldr	r3, [r7, #12]
	}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	200006ec 	.word	0x200006ec
 800a28c:	200006f0 	.word	0x200006f0
 800a290:	20000bc8 	.word	0x20000bc8

0800a294 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d056      	beq.n	800a358 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2aa:	4b2e      	ldr	r3, [pc, #184]	; (800a364 <xTaskPriorityDisinherit+0xd0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d00a      	beq.n	800a2ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60fb      	str	r3, [r7, #12]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60bb      	str	r3, [r7, #8]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ec:	1e5a      	subs	r2, r3, #1
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d02c      	beq.n	800a358 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a302:	2b00      	cmp	r3, #0
 800a304:	d128      	bne.n	800a358 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	3304      	adds	r3, #4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe f8e6 	bl	80084dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a328:	4b0f      	ldr	r3, [pc, #60]	; (800a368 <xTaskPriorityDisinherit+0xd4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d903      	bls.n	800a338 <xTaskPriorityDisinherit+0xa4>
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a334:	4a0c      	ldr	r2, [pc, #48]	; (800a368 <xTaskPriorityDisinherit+0xd4>)
 800a336:	6013      	str	r3, [r2, #0]
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33c:	4613      	mov	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4a09      	ldr	r2, [pc, #36]	; (800a36c <xTaskPriorityDisinherit+0xd8>)
 800a346:	441a      	add	r2, r3
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	3304      	adds	r3, #4
 800a34c:	4619      	mov	r1, r3
 800a34e:	4610      	mov	r0, r2
 800a350:	f7fe f867 	bl	8008422 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a354:	2301      	movs	r3, #1
 800a356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a358:	697b      	ldr	r3, [r7, #20]
	}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	200006ec 	.word	0x200006ec
 800a368:	20000bc8 	.word	0x20000bc8
 800a36c:	200006f0 	.word	0x200006f0

0800a370 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a37e:	2301      	movs	r3, #1
 800a380:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d06a      	beq.n	800a45e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10a      	bne.n	800a3a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	60fb      	str	r3, [r7, #12]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d902      	bls.n	800a3b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	61fb      	str	r3, [r7, #28]
 800a3b4:	e002      	b.n	800a3bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	69fa      	ldr	r2, [r7, #28]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d04b      	beq.n	800a45e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d146      	bne.n	800a45e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a3d0:	4b25      	ldr	r3, [pc, #148]	; (800a468 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69ba      	ldr	r2, [r7, #24]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d10a      	bne.n	800a3f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	60bb      	str	r3, [r7, #8]
}
 800a3ec:	bf00      	nop
 800a3ee:	e7fe      	b.n	800a3ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	69fa      	ldr	r2, [r7, #28]
 800a3fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	2b00      	cmp	r3, #0
 800a402:	db04      	blt.n	800a40e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	6959      	ldr	r1, [r3, #20]
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4a13      	ldr	r2, [pc, #76]	; (800a46c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a41e:	4413      	add	r3, r2
 800a420:	4299      	cmp	r1, r3
 800a422:	d11c      	bne.n	800a45e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	3304      	adds	r3, #4
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fe f857 	bl	80084dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a432:	4b0f      	ldr	r3, [pc, #60]	; (800a470 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d903      	bls.n	800a442 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43e:	4a0c      	ldr	r2, [pc, #48]	; (800a470 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4a07      	ldr	r2, [pc, #28]	; (800a46c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a450:	441a      	add	r2, r3
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	3304      	adds	r3, #4
 800a456:	4619      	mov	r1, r3
 800a458:	4610      	mov	r0, r2
 800a45a:	f7fd ffe2 	bl	8008422 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a45e:	bf00      	nop
 800a460:	3720      	adds	r7, #32
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200006ec 	.word	0x200006ec
 800a46c:	200006f0 	.word	0x200006f0
 800a470:	20000bc8 	.word	0x20000bc8

0800a474 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a478:	4b07      	ldr	r3, [pc, #28]	; (800a498 <pvTaskIncrementMutexHeldCount+0x24>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d004      	beq.n	800a48a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a480:	4b05      	ldr	r3, [pc, #20]	; (800a498 <pvTaskIncrementMutexHeldCount+0x24>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a486:	3201      	adds	r2, #1
 800a488:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a48a:	4b03      	ldr	r3, [pc, #12]	; (800a498 <pvTaskIncrementMutexHeldCount+0x24>)
 800a48c:	681b      	ldr	r3, [r3, #0]
	}
 800a48e:	4618      	mov	r0, r3
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	200006ec 	.word	0x200006ec

0800a49c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4a6:	4b21      	ldr	r3, [pc, #132]	; (800a52c <prvAddCurrentTaskToDelayedList+0x90>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ac:	4b20      	ldr	r3, [pc, #128]	; (800a530 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe f812 	bl	80084dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4be:	d10a      	bne.n	800a4d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d007      	beq.n	800a4d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4c6:	4b1a      	ldr	r3, [pc, #104]	; (800a530 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4819      	ldr	r0, [pc, #100]	; (800a534 <prvAddCurrentTaskToDelayedList+0x98>)
 800a4d0:	f7fd ffa7 	bl	8008422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4d4:	e026      	b.n	800a524 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4413      	add	r3, r2
 800a4dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4de:	4b14      	ldr	r3, [pc, #80]	; (800a530 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d209      	bcs.n	800a502 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4ee:	4b12      	ldr	r3, [pc, #72]	; (800a538 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4b0f      	ldr	r3, [pc, #60]	; (800a530 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	f7fd ffb5 	bl	800846a <vListInsert>
}
 800a500:	e010      	b.n	800a524 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a502:	4b0e      	ldr	r3, [pc, #56]	; (800a53c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	4b0a      	ldr	r3, [pc, #40]	; (800a530 <prvAddCurrentTaskToDelayedList+0x94>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4619      	mov	r1, r3
 800a50e:	4610      	mov	r0, r2
 800a510:	f7fd ffab 	bl	800846a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a514:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d202      	bcs.n	800a524 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a51e:	4a08      	ldr	r2, [pc, #32]	; (800a540 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6013      	str	r3, [r2, #0]
}
 800a524:	bf00      	nop
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20000bc4 	.word	0x20000bc4
 800a530:	200006ec 	.word	0x200006ec
 800a534:	20000bac 	.word	0x20000bac
 800a538:	20000b7c 	.word	0x20000b7c
 800a53c:	20000b78 	.word	0x20000b78
 800a540:	20000be0 	.word	0x20000be0

0800a544 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b08a      	sub	sp, #40	; 0x28
 800a548:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a54e:	f000 fb07 	bl	800ab60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a552:	4b1c      	ldr	r3, [pc, #112]	; (800a5c4 <xTimerCreateTimerTask+0x80>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d021      	beq.n	800a59e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a562:	1d3a      	adds	r2, r7, #4
 800a564:	f107 0108 	add.w	r1, r7, #8
 800a568:	f107 030c 	add.w	r3, r7, #12
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fd ff11 	bl	8008394 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	9202      	str	r2, [sp, #8]
 800a57a:	9301      	str	r3, [sp, #4]
 800a57c:	2302      	movs	r3, #2
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	2300      	movs	r3, #0
 800a582:	460a      	mov	r2, r1
 800a584:	4910      	ldr	r1, [pc, #64]	; (800a5c8 <xTimerCreateTimerTask+0x84>)
 800a586:	4811      	ldr	r0, [pc, #68]	; (800a5cc <xTimerCreateTimerTask+0x88>)
 800a588:	f7fe ffe0 	bl	800954c <xTaskCreateStatic>
 800a58c:	4603      	mov	r3, r0
 800a58e:	4a10      	ldr	r2, [pc, #64]	; (800a5d0 <xTimerCreateTimerTask+0x8c>)
 800a590:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a592:	4b0f      	ldr	r3, [pc, #60]	; (800a5d0 <xTimerCreateTimerTask+0x8c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a59a:	2301      	movs	r3, #1
 800a59c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	613b      	str	r3, [r7, #16]
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a5ba:	697b      	ldr	r3, [r7, #20]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	20000c1c 	.word	0x20000c1c
 800a5c8:	0800b51c 	.word	0x0800b51c
 800a5cc:	0800a709 	.word	0x0800a709
 800a5d0:	20000c20 	.word	0x20000c20

0800a5d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08a      	sub	sp, #40	; 0x28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	623b      	str	r3, [r7, #32]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a602:	4b1a      	ldr	r3, [pc, #104]	; (800a66c <xTimerGenericCommand+0x98>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d02a      	beq.n	800a660 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b05      	cmp	r3, #5
 800a61a:	dc18      	bgt.n	800a64e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a61c:	f7ff fdb4 	bl	800a188 <xTaskGetSchedulerState>
 800a620:	4603      	mov	r3, r0
 800a622:	2b02      	cmp	r3, #2
 800a624:	d109      	bne.n	800a63a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a626:	4b11      	ldr	r3, [pc, #68]	; (800a66c <xTimerGenericCommand+0x98>)
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f107 0110 	add.w	r1, r7, #16
 800a62e:	2300      	movs	r3, #0
 800a630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a632:	f7fe f925 	bl	8008880 <xQueueGenericSend>
 800a636:	6278      	str	r0, [r7, #36]	; 0x24
 800a638:	e012      	b.n	800a660 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a63a:	4b0c      	ldr	r3, [pc, #48]	; (800a66c <xTimerGenericCommand+0x98>)
 800a63c:	6818      	ldr	r0, [r3, #0]
 800a63e:	f107 0110 	add.w	r1, r7, #16
 800a642:	2300      	movs	r3, #0
 800a644:	2200      	movs	r2, #0
 800a646:	f7fe f91b 	bl	8008880 <xQueueGenericSend>
 800a64a:	6278      	str	r0, [r7, #36]	; 0x24
 800a64c:	e008      	b.n	800a660 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a64e:	4b07      	ldr	r3, [pc, #28]	; (800a66c <xTimerGenericCommand+0x98>)
 800a650:	6818      	ldr	r0, [r3, #0]
 800a652:	f107 0110 	add.w	r1, r7, #16
 800a656:	2300      	movs	r3, #0
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	f7fe fa0f 	bl	8008a7c <xQueueGenericSendFromISR>
 800a65e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a662:	4618      	mov	r0, r3
 800a664:	3728      	adds	r7, #40	; 0x28
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000c1c 	.word	0x20000c1c

0800a670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b088      	sub	sp, #32
 800a674:	af02      	add	r7, sp, #8
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a67a:	4b22      	ldr	r3, [pc, #136]	; (800a704 <prvProcessExpiredTimer+0x94>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	3304      	adds	r3, #4
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fd ff27 	bl	80084dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d022      	beq.n	800a6e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	699a      	ldr	r2, [r3, #24]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	18d1      	adds	r1, r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	6978      	ldr	r0, [r7, #20]
 800a6aa:	f000 f8d1 	bl	800a850 <prvInsertTimerInActiveList>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01f      	beq.n	800a6f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	6978      	ldr	r0, [r7, #20]
 800a6c0:	f7ff ff88 	bl	800a5d4 <xTimerGenericCommand>
 800a6c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d113      	bne.n	800a6f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	60fb      	str	r3, [r7, #12]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e8:	f023 0301 	bic.w	r3, r3, #1
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	6a1b      	ldr	r3, [r3, #32]
 800a6f8:	6978      	ldr	r0, [r7, #20]
 800a6fa:	4798      	blx	r3
}
 800a6fc:	bf00      	nop
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20000c14 	.word	0x20000c14

0800a708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a710:	f107 0308 	add.w	r3, r7, #8
 800a714:	4618      	mov	r0, r3
 800a716:	f000 f857 	bl	800a7c8 <prvGetNextExpireTime>
 800a71a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	4619      	mov	r1, r3
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 f803 	bl	800a72c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a726:	f000 f8d5 	bl	800a8d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a72a:	e7f1      	b.n	800a710 <prvTimerTask+0x8>

0800a72c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a736:	f7ff f945 	bl	80099c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a73a:	f107 0308 	add.w	r3, r7, #8
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f866 	bl	800a810 <prvSampleTimeNow>
 800a744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d130      	bne.n	800a7ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <prvProcessTimerOrBlockTask+0x3c>
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	429a      	cmp	r2, r3
 800a758:	d806      	bhi.n	800a768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a75a:	f7ff f941 	bl	80099e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a75e:	68f9      	ldr	r1, [r7, #12]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff ff85 	bl	800a670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a766:	e024      	b.n	800a7b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a76e:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <prvProcessTimerOrBlockTask+0x90>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <prvProcessTimerOrBlockTask+0x50>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <prvProcessTimerOrBlockTask+0x52>
 800a77c:	2300      	movs	r3, #0
 800a77e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a780:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <prvProcessTimerOrBlockTask+0x94>)
 800a782:	6818      	ldr	r0, [r3, #0]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	4619      	mov	r1, r3
 800a78e:	f7fe fea9 	bl	80094e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a792:	f7ff f925 	bl	80099e0 <xTaskResumeAll>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a79c:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <prvProcessTimerOrBlockTask+0x98>)
 800a79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	f3bf 8f6f 	isb	sy
}
 800a7ac:	e001      	b.n	800a7b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a7ae:	f7ff f917 	bl	80099e0 <xTaskResumeAll>
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000c18 	.word	0x20000c18
 800a7c0:	20000c1c 	.word	0x20000c1c
 800a7c4:	e000ed04 	.word	0xe000ed04

0800a7c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7d0:	4b0e      	ldr	r3, [pc, #56]	; (800a80c <prvGetNextExpireTime+0x44>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <prvGetNextExpireTime+0x16>
 800a7da:	2201      	movs	r2, #1
 800a7dc:	e000      	b.n	800a7e0 <prvGetNextExpireTime+0x18>
 800a7de:	2200      	movs	r2, #0
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7ec:	4b07      	ldr	r3, [pc, #28]	; (800a80c <prvGetNextExpireTime+0x44>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	e001      	b.n	800a7fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	20000c14 	.word	0x20000c14

0800a810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a818:	f7ff f980 	bl	8009b1c <xTaskGetTickCount>
 800a81c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a81e:	4b0b      	ldr	r3, [pc, #44]	; (800a84c <prvSampleTimeNow+0x3c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	429a      	cmp	r2, r3
 800a826:	d205      	bcs.n	800a834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a828:	f000 f936 	bl	800aa98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	e002      	b.n	800a83a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a83a:	4a04      	ldr	r2, [pc, #16]	; (800a84c <prvSampleTimeNow+0x3c>)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a840:	68fb      	ldr	r3, [r7, #12]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20000c24 	.word	0x20000c24

0800a850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
 800a85c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a85e:	2300      	movs	r3, #0
 800a860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	429a      	cmp	r2, r3
 800a874:	d812      	bhi.n	800a89c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	1ad2      	subs	r2, r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	429a      	cmp	r2, r3
 800a882:	d302      	bcc.n	800a88a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a884:	2301      	movs	r3, #1
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	e01b      	b.n	800a8c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a88a:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <prvInsertTimerInActiveList+0x7c>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3304      	adds	r3, #4
 800a892:	4619      	mov	r1, r3
 800a894:	4610      	mov	r0, r2
 800a896:	f7fd fde8 	bl	800846a <vListInsert>
 800a89a:	e012      	b.n	800a8c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d206      	bcs.n	800a8b2 <prvInsertTimerInActiveList+0x62>
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d302      	bcc.n	800a8b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	e007      	b.n	800a8c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8b2:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <prvInsertTimerInActiveList+0x80>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4610      	mov	r0, r2
 800a8be:	f7fd fdd4 	bl	800846a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8c2:	697b      	ldr	r3, [r7, #20]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20000c18 	.word	0x20000c18
 800a8d0:	20000c14 	.word	0x20000c14

0800a8d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08e      	sub	sp, #56	; 0x38
 800a8d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8da:	e0ca      	b.n	800aa72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da18      	bge.n	800a914 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a8e2:	1d3b      	adds	r3, r7, #4
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	61fb      	str	r3, [r7, #28]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a90a:	6850      	ldr	r0, [r2, #4]
 800a90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a90e:	6892      	ldr	r2, [r2, #8]
 800a910:	4611      	mov	r1, r2
 800a912:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	f2c0 80aa 	blt.w	800aa70 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	3304      	adds	r3, #4
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fd fdd5 	bl	80084dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a932:	463b      	mov	r3, r7
 800a934:	4618      	mov	r0, r3
 800a936:	f7ff ff6b 	bl	800a810 <prvSampleTimeNow>
 800a93a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b09      	cmp	r3, #9
 800a940:	f200 8097 	bhi.w	800aa72 <prvProcessReceivedCommands+0x19e>
 800a944:	a201      	add	r2, pc, #4	; (adr r2, 800a94c <prvProcessReceivedCommands+0x78>)
 800a946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94a:	bf00      	nop
 800a94c:	0800a975 	.word	0x0800a975
 800a950:	0800a975 	.word	0x0800a975
 800a954:	0800a975 	.word	0x0800a975
 800a958:	0800a9e9 	.word	0x0800a9e9
 800a95c:	0800a9fd 	.word	0x0800a9fd
 800a960:	0800aa47 	.word	0x0800aa47
 800a964:	0800a975 	.word	0x0800a975
 800a968:	0800a975 	.word	0x0800a975
 800a96c:	0800a9e9 	.word	0x0800a9e9
 800a970:	0800a9fd 	.word	0x0800a9fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a97a:	f043 0301 	orr.w	r3, r3, #1
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	18d1      	adds	r1, r2, r3
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a994:	f7ff ff5c 	bl	800a850 <prvInsertTimerInActiveList>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d069      	beq.n	800aa72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d05e      	beq.n	800aa72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	441a      	add	r2, r3
 800a9bc:	2300      	movs	r3, #0
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9c6:	f7ff fe05 	bl	800a5d4 <xTimerGenericCommand>
 800a9ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d14f      	bne.n	800aa72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	61bb      	str	r3, [r7, #24]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ee:	f023 0301 	bic.w	r3, r3, #1
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a9fa:	e03a      	b.n	800aa72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa02:	f043 0301 	orr.w	r3, r3, #1
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	617b      	str	r3, [r7, #20]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	699a      	ldr	r2, [r3, #24]
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	18d1      	adds	r1, r2, r3
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa40:	f7ff ff06 	bl	800a850 <prvInsertTimerInActiveList>
					break;
 800aa44:	e015      	b.n	800aa72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa4c:	f003 0302 	and.w	r3, r3, #2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aa54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa56:	f000 fbdb 	bl	800b210 <vPortFree>
 800aa5a:	e00a      	b.n	800aa72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa62:	f023 0301 	bic.w	r3, r3, #1
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa6e:	e000      	b.n	800aa72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa72:	4b08      	ldr	r3, [pc, #32]	; (800aa94 <prvProcessReceivedCommands+0x1c0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	1d39      	adds	r1, r7, #4
 800aa78:	2200      	movs	r2, #0
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe f926 	bl	8008ccc <xQueueReceive>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f47f af2a 	bne.w	800a8dc <prvProcessReceivedCommands+0x8>
	}
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	3730      	adds	r7, #48	; 0x30
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20000c1c 	.word	0x20000c1c

0800aa98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa9e:	e048      	b.n	800ab32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaa0:	4b2d      	ldr	r3, [pc, #180]	; (800ab58 <prvSwitchTimerLists+0xc0>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaaa:	4b2b      	ldr	r3, [pc, #172]	; (800ab58 <prvSwitchTimerLists+0xc0>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3304      	adds	r3, #4
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fd fd0f 	bl	80084dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aacc:	f003 0304 	and.w	r3, r3, #4
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d02e      	beq.n	800ab32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4413      	add	r3, r2
 800aadc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d90e      	bls.n	800ab04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaf2:	4b19      	ldr	r3, [pc, #100]	; (800ab58 <prvSwitchTimerLists+0xc0>)
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4619      	mov	r1, r3
 800aafc:	4610      	mov	r0, r2
 800aafe:	f7fd fcb4 	bl	800846a <vListInsert>
 800ab02:	e016      	b.n	800ab32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab04:	2300      	movs	r3, #0
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	2300      	movs	r3, #0
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7ff fd60 	bl	800a5d4 <xTimerGenericCommand>
 800ab14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	603b      	str	r3, [r7, #0]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <prvSwitchTimerLists+0xc0>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1b1      	bne.n	800aaa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab3c:	4b06      	ldr	r3, [pc, #24]	; (800ab58 <prvSwitchTimerLists+0xc0>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab42:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <prvSwitchTimerLists+0xc4>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a04      	ldr	r2, [pc, #16]	; (800ab58 <prvSwitchTimerLists+0xc0>)
 800ab48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab4a:	4a04      	ldr	r2, [pc, #16]	; (800ab5c <prvSwitchTimerLists+0xc4>)
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	6013      	str	r3, [r2, #0]
}
 800ab50:	bf00      	nop
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	20000c14 	.word	0x20000c14
 800ab5c:	20000c18 	.word	0x20000c18

0800ab60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab66:	f000 f965 	bl	800ae34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab6a:	4b15      	ldr	r3, [pc, #84]	; (800abc0 <prvCheckForValidListAndQueue+0x60>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d120      	bne.n	800abb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab72:	4814      	ldr	r0, [pc, #80]	; (800abc4 <prvCheckForValidListAndQueue+0x64>)
 800ab74:	f7fd fc28 	bl	80083c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab78:	4813      	ldr	r0, [pc, #76]	; (800abc8 <prvCheckForValidListAndQueue+0x68>)
 800ab7a:	f7fd fc25 	bl	80083c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab7e:	4b13      	ldr	r3, [pc, #76]	; (800abcc <prvCheckForValidListAndQueue+0x6c>)
 800ab80:	4a10      	ldr	r2, [pc, #64]	; (800abc4 <prvCheckForValidListAndQueue+0x64>)
 800ab82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab84:	4b12      	ldr	r3, [pc, #72]	; (800abd0 <prvCheckForValidListAndQueue+0x70>)
 800ab86:	4a10      	ldr	r2, [pc, #64]	; (800abc8 <prvCheckForValidListAndQueue+0x68>)
 800ab88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	4b11      	ldr	r3, [pc, #68]	; (800abd4 <prvCheckForValidListAndQueue+0x74>)
 800ab90:	4a11      	ldr	r2, [pc, #68]	; (800abd8 <prvCheckForValidListAndQueue+0x78>)
 800ab92:	2110      	movs	r1, #16
 800ab94:	200a      	movs	r0, #10
 800ab96:	f7fd fd33 	bl	8008600 <xQueueGenericCreateStatic>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	4a08      	ldr	r2, [pc, #32]	; (800abc0 <prvCheckForValidListAndQueue+0x60>)
 800ab9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aba0:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <prvCheckForValidListAndQueue+0x60>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d005      	beq.n	800abb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aba8:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <prvCheckForValidListAndQueue+0x60>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	490b      	ldr	r1, [pc, #44]	; (800abdc <prvCheckForValidListAndQueue+0x7c>)
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe fc44 	bl	800943c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abb4:	f000 f96e 	bl	800ae94 <vPortExitCritical>
}
 800abb8:	bf00      	nop
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20000c1c 	.word	0x20000c1c
 800abc4:	20000bec 	.word	0x20000bec
 800abc8:	20000c00 	.word	0x20000c00
 800abcc:	20000c14 	.word	0x20000c14
 800abd0:	20000c18 	.word	0x20000c18
 800abd4:	20000cc8 	.word	0x20000cc8
 800abd8:	20000c28 	.word	0x20000c28
 800abdc:	0800b524 	.word	0x0800b524

0800abe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3b04      	subs	r3, #4
 800abf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3b04      	subs	r3, #4
 800abfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	f023 0201 	bic.w	r2, r3, #1
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3b04      	subs	r3, #4
 800ac0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac10:	4a0c      	ldr	r2, [pc, #48]	; (800ac44 <pxPortInitialiseStack+0x64>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3b14      	subs	r3, #20
 800ac1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3b04      	subs	r3, #4
 800ac26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f06f 0202 	mvn.w	r2, #2
 800ac2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3b20      	subs	r3, #32
 800ac34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac36:	68fb      	ldr	r3, [r7, #12]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	0800ac49 	.word	0x0800ac49

0800ac48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac52:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <prvTaskExitError+0x54>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5a:	d00a      	beq.n	800ac72 <prvTaskExitError+0x2a>
	__asm volatile
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	60fb      	str	r3, [r7, #12]
}
 800ac6e:	bf00      	nop
 800ac70:	e7fe      	b.n	800ac70 <prvTaskExitError+0x28>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	60bb      	str	r3, [r7, #8]
}
 800ac84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac86:	bf00      	nop
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0fc      	beq.n	800ac88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	20000010 	.word	0x20000010

0800aca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aca0:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <pxCurrentTCBConst2>)
 800aca2:	6819      	ldr	r1, [r3, #0]
 800aca4:	6808      	ldr	r0, [r1, #0]
 800aca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acaa:	f380 8809 	msr	PSP, r0
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f04f 0000 	mov.w	r0, #0
 800acb6:	f380 8811 	msr	BASEPRI, r0
 800acba:	4770      	bx	lr
 800acbc:	f3af 8000 	nop.w

0800acc0 <pxCurrentTCBConst2>:
 800acc0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop

0800acc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800acc8:	4808      	ldr	r0, [pc, #32]	; (800acec <prvPortStartFirstTask+0x24>)
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	6800      	ldr	r0, [r0, #0]
 800acce:	f380 8808 	msr	MSP, r0
 800acd2:	f04f 0000 	mov.w	r0, #0
 800acd6:	f380 8814 	msr	CONTROL, r0
 800acda:	b662      	cpsie	i
 800acdc:	b661      	cpsie	f
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	df00      	svc	0
 800ace8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acea:	bf00      	nop
 800acec:	e000ed08 	.word	0xe000ed08

0800acf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acf6:	4b46      	ldr	r3, [pc, #280]	; (800ae10 <xPortStartScheduler+0x120>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a46      	ldr	r2, [pc, #280]	; (800ae14 <xPortStartScheduler+0x124>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d10a      	bne.n	800ad16 <xPortStartScheduler+0x26>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	613b      	str	r3, [r7, #16]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad16:	4b3e      	ldr	r3, [pc, #248]	; (800ae10 <xPortStartScheduler+0x120>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a3f      	ldr	r2, [pc, #252]	; (800ae18 <xPortStartScheduler+0x128>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d10a      	bne.n	800ad36 <xPortStartScheduler+0x46>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	60fb      	str	r3, [r7, #12]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad36:	4b39      	ldr	r3, [pc, #228]	; (800ae1c <xPortStartScheduler+0x12c>)
 800ad38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	22ff      	movs	r2, #255	; 0xff
 800ad46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	4b31      	ldr	r3, [pc, #196]	; (800ae20 <xPortStartScheduler+0x130>)
 800ad5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad5e:	4b31      	ldr	r3, [pc, #196]	; (800ae24 <xPortStartScheduler+0x134>)
 800ad60:	2207      	movs	r2, #7
 800ad62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad64:	e009      	b.n	800ad7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad66:	4b2f      	ldr	r3, [pc, #188]	; (800ae24 <xPortStartScheduler+0x134>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	4a2d      	ldr	r2, [pc, #180]	; (800ae24 <xPortStartScheduler+0x134>)
 800ad6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad82:	2b80      	cmp	r3, #128	; 0x80
 800ad84:	d0ef      	beq.n	800ad66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad86:	4b27      	ldr	r3, [pc, #156]	; (800ae24 <xPortStartScheduler+0x134>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f1c3 0307 	rsb	r3, r3, #7
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d00a      	beq.n	800ada8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	60bb      	str	r3, [r7, #8]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ada8:	4b1e      	ldr	r3, [pc, #120]	; (800ae24 <xPortStartScheduler+0x134>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	4a1d      	ldr	r2, [pc, #116]	; (800ae24 <xPortStartScheduler+0x134>)
 800adb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800adb2:	4b1c      	ldr	r3, [pc, #112]	; (800ae24 <xPortStartScheduler+0x134>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adba:	4a1a      	ldr	r2, [pc, #104]	; (800ae24 <xPortStartScheduler+0x134>)
 800adbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800adc6:	4b18      	ldr	r3, [pc, #96]	; (800ae28 <xPortStartScheduler+0x138>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a17      	ldr	r2, [pc, #92]	; (800ae28 <xPortStartScheduler+0x138>)
 800adcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800add0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800add2:	4b15      	ldr	r3, [pc, #84]	; (800ae28 <xPortStartScheduler+0x138>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a14      	ldr	r2, [pc, #80]	; (800ae28 <xPortStartScheduler+0x138>)
 800add8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800addc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adde:	f000 f8dd 	bl	800af9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ade2:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <xPortStartScheduler+0x13c>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ade8:	f000 f8fc 	bl	800afe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800adec:	4b10      	ldr	r3, [pc, #64]	; (800ae30 <xPortStartScheduler+0x140>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a0f      	ldr	r2, [pc, #60]	; (800ae30 <xPortStartScheduler+0x140>)
 800adf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800adf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800adf8:	f7ff ff66 	bl	800acc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adfc:	f7fe ff58 	bl	8009cb0 <vTaskSwitchContext>
	prvTaskExitError();
 800ae00:	f7ff ff22 	bl	800ac48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3718      	adds	r7, #24
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	e000ed00 	.word	0xe000ed00
 800ae14:	410fc271 	.word	0x410fc271
 800ae18:	410fc270 	.word	0x410fc270
 800ae1c:	e000e400 	.word	0xe000e400
 800ae20:	20000d18 	.word	0x20000d18
 800ae24:	20000d1c 	.word	0x20000d1c
 800ae28:	e000ed20 	.word	0xe000ed20
 800ae2c:	20000010 	.word	0x20000010
 800ae30:	e000ef34 	.word	0xe000ef34

0800ae34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	607b      	str	r3, [r7, #4]
}
 800ae4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae4e:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <vPortEnterCritical+0x58>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3301      	adds	r3, #1
 800ae54:	4a0d      	ldr	r2, [pc, #52]	; (800ae8c <vPortEnterCritical+0x58>)
 800ae56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae58:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <vPortEnterCritical+0x58>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d10f      	bne.n	800ae80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae60:	4b0b      	ldr	r3, [pc, #44]	; (800ae90 <vPortEnterCritical+0x5c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	603b      	str	r3, [r7, #0]
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <vPortEnterCritical+0x4a>
	}
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	20000010 	.word	0x20000010
 800ae90:	e000ed04 	.word	0xe000ed04

0800ae94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae9a:	4b12      	ldr	r3, [pc, #72]	; (800aee4 <vPortExitCritical+0x50>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <vPortExitCritical+0x24>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	607b      	str	r3, [r7, #4]
}
 800aeb4:	bf00      	nop
 800aeb6:	e7fe      	b.n	800aeb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aeb8:	4b0a      	ldr	r3, [pc, #40]	; (800aee4 <vPortExitCritical+0x50>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	4a09      	ldr	r2, [pc, #36]	; (800aee4 <vPortExitCritical+0x50>)
 800aec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aec2:	4b08      	ldr	r3, [pc, #32]	; (800aee4 <vPortExitCritical+0x50>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d105      	bne.n	800aed6 <vPortExitCritical+0x42>
 800aeca:	2300      	movs	r3, #0
 800aecc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	f383 8811 	msr	BASEPRI, r3
}
 800aed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	20000010 	.word	0x20000010
	...

0800aef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aef0:	f3ef 8009 	mrs	r0, PSP
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4b15      	ldr	r3, [pc, #84]	; (800af50 <pxCurrentTCBConst>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	f01e 0f10 	tst.w	lr, #16
 800af00:	bf08      	it	eq
 800af02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0a:	6010      	str	r0, [r2, #0]
 800af0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af14:	f380 8811 	msr	BASEPRI, r0
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f7fe fec6 	bl	8009cb0 <vTaskSwitchContext>
 800af24:	f04f 0000 	mov.w	r0, #0
 800af28:	f380 8811 	msr	BASEPRI, r0
 800af2c:	bc09      	pop	{r0, r3}
 800af2e:	6819      	ldr	r1, [r3, #0]
 800af30:	6808      	ldr	r0, [r1, #0]
 800af32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af36:	f01e 0f10 	tst.w	lr, #16
 800af3a:	bf08      	it	eq
 800af3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af40:	f380 8809 	msr	PSP, r0
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w

0800af50 <pxCurrentTCBConst>:
 800af50:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop

0800af58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
	__asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	607b      	str	r3, [r7, #4]
}
 800af70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af72:	f7fe fde3 	bl	8009b3c <xTaskIncrementTick>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <xPortSysTickHandler+0x40>)
 800af7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	2300      	movs	r3, #0
 800af86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	f383 8811 	msr	BASEPRI, r3
}
 800af8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <vPortSetupTimerInterrupt+0x34>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <vPortSetupTimerInterrupt+0x38>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800afac:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <vPortSetupTimerInterrupt+0x3c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a0a      	ldr	r2, [pc, #40]	; (800afdc <vPortSetupTimerInterrupt+0x40>)
 800afb2:	fba2 2303 	umull	r2, r3, r2, r3
 800afb6:	099b      	lsrs	r3, r3, #6
 800afb8:	4a09      	ldr	r2, [pc, #36]	; (800afe0 <vPortSetupTimerInterrupt+0x44>)
 800afba:	3b01      	subs	r3, #1
 800afbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afbe:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <vPortSetupTimerInterrupt+0x34>)
 800afc0:	2207      	movs	r2, #7
 800afc2:	601a      	str	r2, [r3, #0]
}
 800afc4:	bf00      	nop
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	e000e010 	.word	0xe000e010
 800afd4:	e000e018 	.word	0xe000e018
 800afd8:	20000004 	.word	0x20000004
 800afdc:	10624dd3 	.word	0x10624dd3
 800afe0:	e000e014 	.word	0xe000e014

0800afe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aff4 <vPortEnableVFP+0x10>
 800afe8:	6801      	ldr	r1, [r0, #0]
 800afea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afee:	6001      	str	r1, [r0, #0]
 800aff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aff2:	bf00      	nop
 800aff4:	e000ed88 	.word	0xe000ed88

0800aff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800affe:	f3ef 8305 	mrs	r3, IPSR
 800b002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b0f      	cmp	r3, #15
 800b008:	d914      	bls.n	800b034 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b00a:	4a17      	ldr	r2, [pc, #92]	; (800b068 <vPortValidateInterruptPriority+0x70>)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4413      	add	r3, r2
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b014:	4b15      	ldr	r3, [pc, #84]	; (800b06c <vPortValidateInterruptPriority+0x74>)
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	7afa      	ldrb	r2, [r7, #11]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d20a      	bcs.n	800b034 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	607b      	str	r3, [r7, #4]
}
 800b030:	bf00      	nop
 800b032:	e7fe      	b.n	800b032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b034:	4b0e      	ldr	r3, [pc, #56]	; (800b070 <vPortValidateInterruptPriority+0x78>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b03c:	4b0d      	ldr	r3, [pc, #52]	; (800b074 <vPortValidateInterruptPriority+0x7c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	d90a      	bls.n	800b05a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	603b      	str	r3, [r7, #0]
}
 800b056:	bf00      	nop
 800b058:	e7fe      	b.n	800b058 <vPortValidateInterruptPriority+0x60>
	}
 800b05a:	bf00      	nop
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	e000e3f0 	.word	0xe000e3f0
 800b06c:	20000d18 	.word	0x20000d18
 800b070:	e000ed0c 	.word	0xe000ed0c
 800b074:	20000d1c 	.word	0x20000d1c

0800b078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b08a      	sub	sp, #40	; 0x28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b080:	2300      	movs	r3, #0
 800b082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b084:	f7fe fc9e 	bl	80099c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b088:	4b5b      	ldr	r3, [pc, #364]	; (800b1f8 <pvPortMalloc+0x180>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d101      	bne.n	800b094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b090:	f000 f920 	bl	800b2d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b094:	4b59      	ldr	r3, [pc, #356]	; (800b1fc <pvPortMalloc+0x184>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4013      	ands	r3, r2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f040 8093 	bne.w	800b1c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d01d      	beq.n	800b0e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d014      	beq.n	800b0e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f023 0307 	bic.w	r3, r3, #7
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f003 0307 	and.w	r3, r3, #7
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00a      	beq.n	800b0e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	617b      	str	r3, [r7, #20]
}
 800b0e0:	bf00      	nop
 800b0e2:	e7fe      	b.n	800b0e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d06e      	beq.n	800b1c8 <pvPortMalloc+0x150>
 800b0ea:	4b45      	ldr	r3, [pc, #276]	; (800b200 <pvPortMalloc+0x188>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d869      	bhi.n	800b1c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0f4:	4b43      	ldr	r3, [pc, #268]	; (800b204 <pvPortMalloc+0x18c>)
 800b0f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0f8:	4b42      	ldr	r3, [pc, #264]	; (800b204 <pvPortMalloc+0x18c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0fe:	e004      	b.n	800b10a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	429a      	cmp	r2, r3
 800b112:	d903      	bls.n	800b11c <pvPortMalloc+0xa4>
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1f1      	bne.n	800b100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b11c:	4b36      	ldr	r3, [pc, #216]	; (800b1f8 <pvPortMalloc+0x180>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b122:	429a      	cmp	r2, r3
 800b124:	d050      	beq.n	800b1c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2208      	movs	r2, #8
 800b12c:	4413      	add	r3, r2
 800b12e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	1ad2      	subs	r2, r2, r3
 800b140:	2308      	movs	r3, #8
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	429a      	cmp	r2, r3
 800b146:	d91f      	bls.n	800b188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4413      	add	r3, r2
 800b14e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	f003 0307 	and.w	r3, r3, #7
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <pvPortMalloc+0xf8>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	613b      	str	r3, [r7, #16]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	1ad2      	subs	r2, r2, r3
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b182:	69b8      	ldr	r0, [r7, #24]
 800b184:	f000 f908 	bl	800b398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b188:	4b1d      	ldr	r3, [pc, #116]	; (800b200 <pvPortMalloc+0x188>)
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	4a1b      	ldr	r2, [pc, #108]	; (800b200 <pvPortMalloc+0x188>)
 800b194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b196:	4b1a      	ldr	r3, [pc, #104]	; (800b200 <pvPortMalloc+0x188>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	4b1b      	ldr	r3, [pc, #108]	; (800b208 <pvPortMalloc+0x190>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d203      	bcs.n	800b1aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1a2:	4b17      	ldr	r3, [pc, #92]	; (800b200 <pvPortMalloc+0x188>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a18      	ldr	r2, [pc, #96]	; (800b208 <pvPortMalloc+0x190>)
 800b1a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <pvPortMalloc+0x184>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b1be:	4b13      	ldr	r3, [pc, #76]	; (800b20c <pvPortMalloc+0x194>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	4a11      	ldr	r2, [pc, #68]	; (800b20c <pvPortMalloc+0x194>)
 800b1c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1c8:	f7fe fc0a 	bl	80099e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	f003 0307 	and.w	r3, r3, #7
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <pvPortMalloc+0x174>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	60fb      	str	r3, [r7, #12]
}
 800b1e8:	bf00      	nop
 800b1ea:	e7fe      	b.n	800b1ea <pvPortMalloc+0x172>
	return pvReturn;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3728      	adds	r7, #40	; 0x28
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20004928 	.word	0x20004928
 800b1fc:	2000493c 	.word	0x2000493c
 800b200:	2000492c 	.word	0x2000492c
 800b204:	20004920 	.word	0x20004920
 800b208:	20004930 	.word	0x20004930
 800b20c:	20004934 	.word	0x20004934

0800b210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d04d      	beq.n	800b2be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b222:	2308      	movs	r3, #8
 800b224:	425b      	negs	r3, r3
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	4413      	add	r3, r2
 800b22a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	4b24      	ldr	r3, [pc, #144]	; (800b2c8 <vPortFree+0xb8>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4013      	ands	r3, r2
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <vPortFree+0x44>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	60fb      	str	r3, [r7, #12]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00a      	beq.n	800b272 <vPortFree+0x62>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	60bb      	str	r3, [r7, #8]
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	4b14      	ldr	r3, [pc, #80]	; (800b2c8 <vPortFree+0xb8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4013      	ands	r3, r2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d01e      	beq.n	800b2be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d11a      	bne.n	800b2be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	4b0e      	ldr	r3, [pc, #56]	; (800b2c8 <vPortFree+0xb8>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	43db      	mvns	r3, r3
 800b292:	401a      	ands	r2, r3
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b298:	f7fe fb94 	bl	80099c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	; (800b2cc <vPortFree+0xbc>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	4a09      	ldr	r2, [pc, #36]	; (800b2cc <vPortFree+0xbc>)
 800b2a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2aa:	6938      	ldr	r0, [r7, #16]
 800b2ac:	f000 f874 	bl	800b398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b2b0:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <vPortFree+0xc0>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	4a06      	ldr	r2, [pc, #24]	; (800b2d0 <vPortFree+0xc0>)
 800b2b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b2ba:	f7fe fb91 	bl	80099e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2be:	bf00      	nop
 800b2c0:	3718      	adds	r7, #24
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	2000493c 	.word	0x2000493c
 800b2cc:	2000492c 	.word	0x2000492c
 800b2d0:	20004938 	.word	0x20004938

0800b2d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b2de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2e0:	4b27      	ldr	r3, [pc, #156]	; (800b380 <prvHeapInit+0xac>)
 800b2e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f003 0307 	and.w	r3, r3, #7
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00c      	beq.n	800b308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3307      	adds	r3, #7
 800b2f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f023 0307 	bic.w	r3, r3, #7
 800b2fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	4a1f      	ldr	r2, [pc, #124]	; (800b380 <prvHeapInit+0xac>)
 800b304:	4413      	add	r3, r2
 800b306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b30c:	4a1d      	ldr	r2, [pc, #116]	; (800b384 <prvHeapInit+0xb0>)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b312:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <prvHeapInit+0xb0>)
 800b314:	2200      	movs	r2, #0
 800b316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	4413      	add	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b320:	2208      	movs	r2, #8
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	1a9b      	subs	r3, r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 0307 	bic.w	r3, r3, #7
 800b32e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4a15      	ldr	r2, [pc, #84]	; (800b388 <prvHeapInit+0xb4>)
 800b334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <prvHeapInit+0xb4>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2200      	movs	r2, #0
 800b33c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b33e:	4b12      	ldr	r3, [pc, #72]	; (800b388 <prvHeapInit+0xb4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	1ad2      	subs	r2, r2, r3
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b354:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <prvHeapInit+0xb4>)
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	4a0a      	ldr	r2, [pc, #40]	; (800b38c <prvHeapInit+0xb8>)
 800b362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	4a09      	ldr	r2, [pc, #36]	; (800b390 <prvHeapInit+0xbc>)
 800b36a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b36c:	4b09      	ldr	r3, [pc, #36]	; (800b394 <prvHeapInit+0xc0>)
 800b36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b372:	601a      	str	r2, [r3, #0]
}
 800b374:	bf00      	nop
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	20000d20 	.word	0x20000d20
 800b384:	20004920 	.word	0x20004920
 800b388:	20004928 	.word	0x20004928
 800b38c:	20004930 	.word	0x20004930
 800b390:	2000492c 	.word	0x2000492c
 800b394:	2000493c 	.word	0x2000493c

0800b398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3a0:	4b28      	ldr	r3, [pc, #160]	; (800b444 <prvInsertBlockIntoFreeList+0xac>)
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	e002      	b.n	800b3ac <prvInsertBlockIntoFreeList+0x14>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d8f7      	bhi.n	800b3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d108      	bne.n	800b3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	441a      	add	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	441a      	add	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d118      	bne.n	800b420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	4b15      	ldr	r3, [pc, #84]	; (800b448 <prvInsertBlockIntoFreeList+0xb0>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d00d      	beq.n	800b416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	441a      	add	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	e008      	b.n	800b428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <prvInsertBlockIntoFreeList+0xb0>)
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	e003      	b.n	800b428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d002      	beq.n	800b436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	20004920 	.word	0x20004920
 800b448:	20004928 	.word	0x20004928

0800b44c <__libc_init_array>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	4d0d      	ldr	r5, [pc, #52]	; (800b484 <__libc_init_array+0x38>)
 800b450:	4c0d      	ldr	r4, [pc, #52]	; (800b488 <__libc_init_array+0x3c>)
 800b452:	1b64      	subs	r4, r4, r5
 800b454:	10a4      	asrs	r4, r4, #2
 800b456:	2600      	movs	r6, #0
 800b458:	42a6      	cmp	r6, r4
 800b45a:	d109      	bne.n	800b470 <__libc_init_array+0x24>
 800b45c:	4d0b      	ldr	r5, [pc, #44]	; (800b48c <__libc_init_array+0x40>)
 800b45e:	4c0c      	ldr	r4, [pc, #48]	; (800b490 <__libc_init_array+0x44>)
 800b460:	f000 f82e 	bl	800b4c0 <_init>
 800b464:	1b64      	subs	r4, r4, r5
 800b466:	10a4      	asrs	r4, r4, #2
 800b468:	2600      	movs	r6, #0
 800b46a:	42a6      	cmp	r6, r4
 800b46c:	d105      	bne.n	800b47a <__libc_init_array+0x2e>
 800b46e:	bd70      	pop	{r4, r5, r6, pc}
 800b470:	f855 3b04 	ldr.w	r3, [r5], #4
 800b474:	4798      	blx	r3
 800b476:	3601      	adds	r6, #1
 800b478:	e7ee      	b.n	800b458 <__libc_init_array+0xc>
 800b47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b47e:	4798      	blx	r3
 800b480:	3601      	adds	r6, #1
 800b482:	e7f2      	b.n	800b46a <__libc_init_array+0x1e>
 800b484:	0800b5f4 	.word	0x0800b5f4
 800b488:	0800b5f4 	.word	0x0800b5f4
 800b48c:	0800b5f4 	.word	0x0800b5f4
 800b490:	0800b5f8 	.word	0x0800b5f8

0800b494 <memcpy>:
 800b494:	440a      	add	r2, r1
 800b496:	4291      	cmp	r1, r2
 800b498:	f100 33ff 	add.w	r3, r0, #4294967295
 800b49c:	d100      	bne.n	800b4a0 <memcpy+0xc>
 800b49e:	4770      	bx	lr
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4aa:	4291      	cmp	r1, r2
 800b4ac:	d1f9      	bne.n	800b4a2 <memcpy+0xe>
 800b4ae:	bd10      	pop	{r4, pc}

0800b4b0 <memset>:
 800b4b0:	4402      	add	r2, r0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d100      	bne.n	800b4ba <memset+0xa>
 800b4b8:	4770      	bx	lr
 800b4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b4be:	e7f9      	b.n	800b4b4 <memset+0x4>

0800b4c0 <_init>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr

0800b4cc <_fini>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	bf00      	nop
 800b4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d2:	bc08      	pop	{r3}
 800b4d4:	469e      	mov	lr, r3
 800b4d6:	4770      	bx	lr
