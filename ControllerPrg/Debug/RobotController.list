
RobotController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800ac08  0800ac08  0001ac08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acec  0800acec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf4  0800acf4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf8  0800acf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800acfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fa4  20000010  0800ad0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fb4  0800ad0c  00024fb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021034  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004045  00000000  00000000  00041074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  000450c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  00046908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e6f  00000000  00000000  00047fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac4f  00000000  00000000  0004be47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3d9c  00000000  00000000  00066a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006640  00000000  00000000  0014a888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abf0 	.word	0x0800abf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800abf0 	.word	0x0800abf0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <PWM_Off>:
void PWM_Off(void);



void PWM_Off(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
htim2.Instance->CCR1=htim2.Instance->CCR2=htim2.Instance->CCR3=htim2.Instance->CCR4=0;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <PWM_Off+0x44>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	2300      	movs	r3, #0
 80004d2:	6413      	str	r3, [r2, #64]	; 0x40
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <PWM_Off+0x44>)
 80004d6:	6812      	ldr	r2, [r2, #0]
 80004d8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80004da:	4a0c      	ldr	r2, [pc, #48]	; (800050c <PWM_Off+0x44>)
 80004dc:	6812      	ldr	r2, [r2, #0]
 80004de:	6393      	str	r3, [r2, #56]	; 0x38
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <PWM_Off+0x44>)
 80004e2:	6812      	ldr	r2, [r2, #0]
 80004e4:	6353      	str	r3, [r2, #52]	; 0x34
htim3.Instance->CCR1=htim3.Instance->CCR2=htim3.Instance->CCR3=htim3.Instance->CCR4=0;
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <PWM_Off+0x48>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	6413      	str	r3, [r2, #64]	; 0x40
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <PWM_Off+0x48>)
 80004f0:	6812      	ldr	r2, [r2, #0]
 80004f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <PWM_Off+0x48>)
 80004f6:	6812      	ldr	r2, [r2, #0]
 80004f8:	6393      	str	r3, [r2, #56]	; 0x38
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <PWM_Off+0x48>)
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20004d04 	.word	0x20004d04
 8000510:	200049f4 	.word	0x200049f4

08000514 <SetMotorPWM>:




void SetMotorPWM(int16_t PWM,uint16_t MotorNum)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	80fb      	strh	r3, [r7, #6]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]

	if (PWM>MAX_PWM)
 8000524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000528:	f640 52ac 	movw	r2, #3500	; 0xdac
 800052c:	4293      	cmp	r3, r2
 800052e:	dd02      	ble.n	8000536 <SetMotorPWM+0x22>
		PWM=MAX_PWM;
 8000530:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000534:	80fb      	strh	r3, [r7, #6]
	if (PWM<-MAX_PWM)
 8000536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800053a:	4a7e      	ldr	r2, [pc, #504]	; (8000734 <SetMotorPWM+0x220>)
 800053c:	4293      	cmp	r3, r2
 800053e:	da02      	bge.n	8000546 <SetMotorPWM+0x32>
		PWM=-MAX_PWM;
 8000540:	f24f 2354 	movw	r3, #62036	; 0xf254
 8000544:	80fb      	strh	r3, [r7, #6]


	switch (MotorNum)
 8000546:	88bb      	ldrh	r3, [r7, #4]
 8000548:	3b01      	subs	r3, #1
 800054a:	2b07      	cmp	r3, #7
 800054c:	f200 80ec 	bhi.w	8000728 <SetMotorPWM+0x214>
 8000550:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <SetMotorPWM+0x44>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	08000579 	.word	0x08000579
 800055c:	080005ab 	.word	0x080005ab
 8000560:	080005dd 	.word	0x080005dd
 8000564:	0800060f 	.word	0x0800060f
 8000568:	08000641 	.word	0x08000641
 800056c:	0800067b 	.word	0x0800067b
 8000570:	080006b5 	.word	0x080006b5
 8000574:	080006ef 	.word	0x080006ef
	{
	case MOTOR_L1:
		if (PWM>=0)
 8000578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057c:	2b00      	cmp	r3, #0
 800057e:	db09      	blt.n	8000594 <SetMotorPWM+0x80>
		{
			htim2.Instance->CCR1=PWM;
 8000580:	4b6d      	ldr	r3, [pc, #436]	; (8000738 <SetMotorPWM+0x224>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2=0;
 800058a:	4b6b      	ldr	r3, [pc, #428]	; (8000738 <SetMotorPWM+0x224>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			htim2.Instance->CCR1=0;
			htim2.Instance->CCR2=-PWM;
		}
		break;
 8000592:	e0c9      	b.n	8000728 <SetMotorPWM+0x214>
			htim2.Instance->CCR1=0;
 8000594:	4b68      	ldr	r3, [pc, #416]	; (8000738 <SetMotorPWM+0x224>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2=-PWM;
 800059c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a0:	425a      	negs	r2, r3
 80005a2:	4b65      	ldr	r3, [pc, #404]	; (8000738 <SetMotorPWM+0x224>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80005a8:	e0be      	b.n	8000728 <SetMotorPWM+0x214>
	case MOTOR_L2:
		if (PWM>=0)
 80005aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	db09      	blt.n	80005c6 <SetMotorPWM+0xb2>
		{
			htim2.Instance->CCR3=PWM;
 80005b2:	4b61      	ldr	r3, [pc, #388]	; (8000738 <SetMotorPWM+0x224>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005ba:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4=0;
 80005bc:	4b5e      	ldr	r3, [pc, #376]	; (8000738 <SetMotorPWM+0x224>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			htim2.Instance->CCR3=0;
			htim2.Instance->CCR4=-PWM;
		}
		break;
 80005c4:	e0b0      	b.n	8000728 <SetMotorPWM+0x214>
			htim2.Instance->CCR3=0;
 80005c6:	4b5c      	ldr	r3, [pc, #368]	; (8000738 <SetMotorPWM+0x224>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2200      	movs	r2, #0
 80005cc:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4=-PWM;
 80005ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005d2:	425a      	negs	r2, r3
 80005d4:	4b58      	ldr	r3, [pc, #352]	; (8000738 <SetMotorPWM+0x224>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80005da:	e0a5      	b.n	8000728 <SetMotorPWM+0x214>
	case MOTOR_L3:
		if (PWM>=0)
 80005dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db09      	blt.n	80005f8 <SetMotorPWM+0xe4>
		{
			htim3.Instance->CCR1=PWM;
 80005e4:	4b55      	ldr	r3, [pc, #340]	; (800073c <SetMotorPWM+0x228>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2=0;
 80005ee:	4b53      	ldr	r3, [pc, #332]	; (800073c <SetMotorPWM+0x228>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			htim3.Instance->CCR1=0;
			htim3.Instance->CCR2=-PWM;
		}
		break;
 80005f6:	e097      	b.n	8000728 <SetMotorPWM+0x214>
			htim3.Instance->CCR1=0;
 80005f8:	4b50      	ldr	r3, [pc, #320]	; (800073c <SetMotorPWM+0x228>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2=-PWM;
 8000600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000604:	425a      	negs	r2, r3
 8000606:	4b4d      	ldr	r3, [pc, #308]	; (800073c <SetMotorPWM+0x228>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800060c:	e08c      	b.n	8000728 <SetMotorPWM+0x214>
	case MOTOR_L4:
		if (PWM>=0)
 800060e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000612:	2b00      	cmp	r3, #0
 8000614:	db09      	blt.n	800062a <SetMotorPWM+0x116>
		{
			htim3.Instance->CCR3=PWM;
 8000616:	4b49      	ldr	r3, [pc, #292]	; (800073c <SetMotorPWM+0x228>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800061e:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4=0;
 8000620:	4b46      	ldr	r3, [pc, #280]	; (800073c <SetMotorPWM+0x228>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			htim3.Instance->CCR3=0;
			htim3.Instance->CCR4=-PWM;
		}
		break;
 8000628:	e07e      	b.n	8000728 <SetMotorPWM+0x214>
			htim3.Instance->CCR3=0;
 800062a:	4b44      	ldr	r3, [pc, #272]	; (800073c <SetMotorPWM+0x228>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2200      	movs	r2, #0
 8000630:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4=-PWM;
 8000632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000636:	425a      	negs	r2, r3
 8000638:	4b40      	ldr	r3, [pc, #256]	; (800073c <SetMotorPWM+0x228>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800063e:	e073      	b.n	8000728 <SetMotorPWM+0x214>
	case MOTOR_R1:
		PWM=PWM<<1;
 8000640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	80fb      	strh	r3, [r7, #6]
		if (PWM>=0)
 8000648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800064c:	2b00      	cmp	r3, #0
 800064e:	db09      	blt.n	8000664 <SetMotorPWM+0x150>
		{
			htim8.Instance->CCR3=PWM;
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <SetMotorPWM+0x22c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000658:	63da      	str	r2, [r3, #60]	; 0x3c
			htim8.Instance->CCR4=0;
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <SetMotorPWM+0x22c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2200      	movs	r2, #0
 8000660:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			htim8.Instance->CCR3=0;
			htim8.Instance->CCR4=-PWM;
		}
		break;
 8000662:	e061      	b.n	8000728 <SetMotorPWM+0x214>
			htim8.Instance->CCR3=0;
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <SetMotorPWM+0x22c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim8.Instance->CCR4=-PWM;
 800066c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000670:	425a      	negs	r2, r3
 8000672:	4b33      	ldr	r3, [pc, #204]	; (8000740 <SetMotorPWM+0x22c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000678:	e056      	b.n	8000728 <SetMotorPWM+0x214>
	case MOTOR_R2:
		PWM=PWM<<1;
 800067a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	80fb      	strh	r3, [r7, #6]
		if (PWM>=0)
 8000682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db09      	blt.n	800069e <SetMotorPWM+0x18a>
		{
			htim8.Instance->CCR1=PWM;
 800068a:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <SetMotorPWM+0x22c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2=0;
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <SetMotorPWM+0x22c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			htim8.Instance->CCR1=0;
			htim8.Instance->CCR2=-PWM;
		}
		break;
 800069c:	e044      	b.n	8000728 <SetMotorPWM+0x214>
			htim8.Instance->CCR1=0;
 800069e:	4b28      	ldr	r3, [pc, #160]	; (8000740 <SetMotorPWM+0x22c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2=-PWM;
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	425a      	negs	r2, r3
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <SetMotorPWM+0x22c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80006b2:	e039      	b.n	8000728 <SetMotorPWM+0x214>
	case MOTOR_R3:
		PWM=PWM<<1;
 80006b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	80fb      	strh	r3, [r7, #6]
		if (PWM>=0)
 80006bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db09      	blt.n	80006d8 <SetMotorPWM+0x1c4>
		{
			htim1.Instance->CCR3=PWM;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <SetMotorPWM+0x230>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006cc:	63da      	str	r2, [r3, #60]	; 0x3c
			htim1.Instance->CCR4=0;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <SetMotorPWM+0x230>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2200      	movs	r2, #0
 80006d4:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			htim1.Instance->CCR3=0;
			htim1.Instance->CCR4=-PWM;
		}
		break;
 80006d6:	e027      	b.n	8000728 <SetMotorPWM+0x214>
			htim1.Instance->CCR3=0;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <SetMotorPWM+0x230>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
			htim1.Instance->CCR4=-PWM;
 80006e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e4:	425a      	negs	r2, r3
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <SetMotorPWM+0x230>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80006ec:	e01c      	b.n	8000728 <SetMotorPWM+0x214>
	case MOTOR_R4:
		PWM=PWM<<1;
 80006ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	80fb      	strh	r3, [r7, #6]
		if (PWM>=0)
 80006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db09      	blt.n	8000712 <SetMotorPWM+0x1fe>
		{
			htim1.Instance->CCR1=PWM;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <SetMotorPWM+0x230>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000706:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2=0;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <SetMotorPWM+0x230>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			htim1.Instance->CCR1=0;
			htim1.Instance->CCR2=-PWM;
		}
		break;
 8000710:	e009      	b.n	8000726 <SetMotorPWM+0x212>
			htim1.Instance->CCR1=0;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <SetMotorPWM+0x230>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2=-PWM;
 800071a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071e:	425a      	negs	r2, r3
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <SetMotorPWM+0x230>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000726:	bf00      	nop




	}
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	fffff254 	.word	0xfffff254
 8000738:	20004d04 	.word	0x20004d04
 800073c:	200049f4 	.word	0x200049f4
 8000740:	2000494c 	.word	0x2000494c
 8000744:	20004c9c 	.word	0x20004c9c

08000748 <CAN_Config>:
uint8_t Can_TxMessage(CAN_HandleTypeDef *phcan, uint8_t ide, uint32_t id, uint8_t len, uint8_t *pdata);
void processCAN2Packet(CAN_HandleTypeDef *hcan);


void CAN_Config(CAN_HandleTypeDef *phcan, uint8_t FIFO_Num)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
    /*Configure the filter to receive ID frames in the specified range*/
    CAN_FilterTypeDef CAN_FilterType;
    CAN_FilterType.FilterBank = 0;                        //Filter group [0,13]
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.SlaveStartFilterBank = 0;//14;             //Start from the filter group [0,27]
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR1)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 800075c:	2320      	movs	r3, #32
 800075e:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterIdLow = 0x0000;                  //ID to be filtered low [0x0000,0xFFFF]
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR1+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 8000764:	2340      	movs	r3, #64	; 0x40
 8000766:	613b      	str	r3, [r7, #16]
    CAN_FilterType.FilterMaskIdLow = 0x0000;              //The lower 16 bits of the filter must not match
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
    CAN_FilterType.FilterFIFOAssignment = FIFO_Num;       //The filter is associated to (0=RX_FIFO0/1=RX_FIFO1)
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	61bb      	str	r3, [r7, #24]
    CAN_FilterType.FilterMode = CAN_FILTERMODE_IDLIST;    //Work in identifier mask bit mode
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
    CAN_FilterType.FilterScale = CAN_FILTERSCALE_32BIT;   //The filter bit width is a single 32 bits
 8000774:	2301      	movs	r3, #1
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    CAN_FilterType.FilterActivation = ENABLE;             //Enable filter
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4619      	mov	r1, r3
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f003 f884 	bl	8003890 <HAL_CAN_ConfigFilter>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <CAN_Config+0x4a>
    {
        Error_Handler();
 800078e:	f001 fa57 	bl	8001c40 <Error_Handler>
    }

    CAN_FilterType.FilterBank = 1;                        //Filter group [0,13]
 8000792:	2301      	movs	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR2)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 8000796:	2360      	movs	r3, #96	; 0x60
 8000798:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR2+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f003 f873 	bl	8003890 <HAL_CAN_ConfigFilter>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <CAN_Config+0x6c>
    {
        Error_Handler();
 80007b0:	f001 fa46 	bl	8001c40 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 2;                        //Filter group [0,13]
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR3)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR3+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 80007bc:	23c0      	movs	r3, #192	; 0xc0
 80007be:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4619      	mov	r1, r3
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f003 f862 	bl	8003890 <HAL_CAN_ConfigFilter>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <CAN_Config+0x8e>
    {
        Error_Handler();
 80007d2:	f001 fa35 	bl	8001c40 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 3;                        //Filter group [0,13]
 80007d6:	2303      	movs	r3, #3
 80007d8:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR4)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 80007da:	23e0      	movs	r3, #224	; 0xe0
 80007dc:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR4+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 80007de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e2:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4619      	mov	r1, r3
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f003 f850 	bl	8003890 <HAL_CAN_ConfigFilter>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <CAN_Config+0xb2>
    {
        Error_Handler();
 80007f6:	f001 fa23 	bl	8001c40 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 4;                        //Filter group [0,13]
 80007fa:	2304      	movs	r3, #4
 80007fc:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR5)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 80007fe:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000802:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR5+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 8000804:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000808:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f003 f83d 	bl	8003890 <HAL_CAN_ConfigFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <CAN_Config+0xd8>
    {
        Error_Handler();
 800081c:	f001 fa10 	bl	8001c40 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 5;                        //Filter group [0,13]
 8000820:	2305      	movs	r3, #5
 8000822:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR6)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 8000824:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000828:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR6+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 800082a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800082e:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	4619      	mov	r1, r3
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f003 f82a 	bl	8003890 <HAL_CAN_ConfigFilter>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <CAN_Config+0xfe>
    {
        Error_Handler();
 8000842:	f001 f9fd 	bl	8001c40 <Error_Handler>
    }


    CAN_FilterType.FilterBank = 6;                        //Filter group [0,13]
 8000846:	2306      	movs	r3, #6
 8000848:	61fb      	str	r3, [r7, #28]
    CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR7)<<5;                 //ID high bit to be filtered [0x0000,0xFFFF]
 800084a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800084e:	60bb      	str	r3, [r7, #8]
    CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR7+1)<<5;//0xffe0;             //The high 16 bits of the filter must not match
 8000850:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000854:	613b      	str	r3, [r7, #16]
    if(HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK)
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4619      	mov	r1, r3
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f003 f817 	bl	8003890 <HAL_CAN_ConfigFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <CAN_Config+0x124>
    {
        Error_Handler();
 8000868:	f001 f9ea 	bl	8001c40 <Error_Handler>

*/


    /*Open the interrupt service corresponding to the CAN channel*/
    if(FIFO_Num == 0)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d109      	bne.n	8000886 <CAN_Config+0x13e>
    {
        if(HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING ) != HAL_OK)
 8000872:	2102      	movs	r1, #2
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f003 fb51 	bl	8003f1c <HAL_CAN_ActivateNotification>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00b      	beq.n	8000898 <CAN_Config+0x150>
        {
            Error_Handler();
 8000880:	f001 f9de 	bl	8001c40 <Error_Handler>
 8000884:	e008      	b.n	8000898 <CAN_Config+0x150>
        }
    }
    else
    {
        if(HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO1_MSG_PENDING ) != HAL_OK)
 8000886:	2110      	movs	r1, #16
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f003 fb47 	bl	8003f1c <HAL_CAN_ActivateNotification>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <CAN_Config+0x150>
        {
            Error_Handler();
 8000894:	f001 f9d4 	bl	8001c40 <Error_Handler>
        }
    }

    /*Start CAN communication*/
    if(HAL_CAN_Start(phcan) != HAL_OK)
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f003 f8d9 	bl	8003a50 <HAL_CAN_Start>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <CAN_Config+0x160>
    {
        Error_Handler();
 80008a4:	f001 f9cc 	bl	8001c40 <Error_Handler>
    }
}
 80008a8:	bf00      	nop
 80008aa:	3730      	adds	r7, #48	; 0x30
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Can_TxMessage>:



uint8_t Can_TxMessage(CAN_HandleTypeDef *phcan, uint8_t ide, uint32_t id, uint8_t len, uint8_t *pdata)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	461a      	mov	r2, r3
 80008bc:	460b      	mov	r3, r1
 80008be:	72fb      	strb	r3, [r7, #11]
 80008c0:	4613      	mov	r3, r2
 80008c2:	72bb      	strb	r3, [r7, #10]
    uint32_t  TxMailbox;           //Get the email number that was sent
    CAN_TxHeaderTypeDef TxHeader;  //Send-header protocol information structure, used to fill parameters
    HAL_StatusTypeDef   HAL_RetVal; //CAN return value
    uint16_t i = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /*Fill and send header protocol*/
    if(ide == 0)
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d104      	bne.n	80008d8 <Can_TxMessage+0x28>
    {
        TxHeader.IDE = CAN_ID_STD;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
        TxHeader.StdId = id;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	e003      	b.n	80008e0 <Can_TxMessage+0x30>
    }
    else
    {
        TxHeader.IDE = CAN_ID_EXT;
 80008d8:	2304      	movs	r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
        TxHeader.ExtId = id;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	617b      	str	r3, [r7, #20]
    }

    TxHeader.RTR = CAN_RTR_DATA,          //The frame type of the message data frame
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    TxHeader.DLC = len,                   //The length of the frame 8
 80008e4:	7abb      	ldrb	r3, [r7, #10]
 80008e6:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE; //Do not capture time
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    /*Ask if CAN has a free mailbox*/
    while(HAL_CAN_GetTxMailboxesFreeLevel(phcan) == 0)
 80008ee:	e009      	b.n	8000904 <Can_TxMessage+0x54>
    {
        i++;
 80008f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008f2:	3301      	adds	r3, #1
 80008f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(i > 0xfffe)//Timeout, sending failed
 80008f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d101      	bne.n	8000904 <Can_TxMessage+0x54>
            return 1;
 8000900:	2301      	movs	r3, #1
 8000902:	e017      	b.n	8000934 <Can_TxMessage+0x84>
    while(HAL_CAN_GetTxMailboxesFreeLevel(phcan) == 0)
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f003 f9c2 	bl	8003c8e <HAL_CAN_GetTxMailboxesFreeLevel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0ef      	beq.n	80008f0 <Can_TxMessage+0x40>
    }


    /*Send frame*/
    HAL_RetVal = HAL_CAN_AddTxMessage(phcan, &TxHeader, pdata, &TxMailbox); //Send a frame of data
 8000910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000914:	f107 0110 	add.w	r1, r7, #16
 8000918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f003 f8dc 	bl	8003ad8 <HAL_CAN_AddTxMessage>
 8000920:	4603      	mov	r3, r0
 8000922:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    //printf("TxMailbox %d\r\n",TxMailbox);
    if(HAL_RetVal != HAL_OK)
 8000926:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <Can_TxMessage+0x82>
        return 1;
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <Can_TxMessage+0x84>
    return 0;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3730      	adds	r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <processCAN2Packet>:




void processCAN2Packet(CAN_HandleTypeDef *hcan)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    uint8_t Rxbuff[8];
    CAN_RxHeaderTypeDef RxHeader;
    HAL_StatusTypeDef   HAL_RetVal;


        HAL_RetVal = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Rxbuff); //Read a frame from channel 0 buffer
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	f107 0208 	add.w	r2, r7, #8
 800094c:	2100      	movs	r1, #0
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f003 f9d2 	bl	8003cf8 <HAL_CAN_GetRxMessage>
 8000954:	4603      	mov	r3, r0
 8000956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(HAL_RetVal == HAL_OK)
 800095a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 80f8 	bne.w	8000b54 <processCAN2Packet+0x218>
        {
        	switch (RxHeader.StdId)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3b01      	subs	r3, #1
 8000968:	2b0d      	cmp	r3, #13
 800096a:	f200 8102 	bhi.w	8000b72 <processCAN2Packet+0x236>
 800096e:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <processCAN2Packet+0x38>)
 8000970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000974:	080009ad 	.word	0x080009ad
 8000978:	080009c5 	.word	0x080009c5
 800097c:	080009f5 	.word	0x080009f5
 8000980:	08000a0d 	.word	0x08000a0d
 8000984:	08000a31 	.word	0x08000a31
 8000988:	08000a49 	.word	0x08000a49
 800098c:	08000a6d 	.word	0x08000a6d
 8000990:	08000a85 	.word	0x08000a85
 8000994:	08000aa7 	.word	0x08000aa7
 8000998:	08000abf 	.word	0x08000abf
 800099c:	08000ae1 	.word	0x08000ae1
 80009a0:	08000af9 	.word	0x08000af9
 80009a4:	08000b1b 	.word	0x08000b1b
 80009a8:	08000b33 	.word	0x08000b33
        	{
        	case TILT_SENSOR_ADDR1:
        		Tilt1X=*(float*)Rxbuff;
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a72      	ldr	r2, [pc, #456]	; (8000b7c <processCAN2Packet+0x240>)
 80009b4:	6013      	str	r3, [r2, #0]
        		Tilt1Y=*(float*)&Rxbuff[4];
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	3304      	adds	r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a70      	ldr	r2, [pc, #448]	; (8000b80 <processCAN2Packet+0x244>)
 80009c0:	6013      	str	r3, [r2, #0]
        		break;
 80009c2:	e0d6      	b.n	8000b72 <processCAN2Packet+0x236>
        	case (TILT_SENSOR_ADDR1+1):
				Gyro1=*(float*)Rxbuff;
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a6e      	ldr	r2, [pc, #440]	; (8000b84 <processCAN2Packet+0x248>)
 80009cc:	6013      	str	r3, [r2, #0]
        		KGyro1=*(uint16_t*)&Rxbuff[4];
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	3304      	adds	r3, #4
 80009d4:	881a      	ldrh	r2, [r3, #0]
 80009d6:	4b6c      	ldr	r3, [pc, #432]	; (8000b88 <processCAN2Packet+0x24c>)
 80009d8:	801a      	strh	r2, [r3, #0]
        		if (TiltSensor1DataReady<1000)
 80009da:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <processCAN2Packet+0x250>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009e2:	f080 80b9 	bcs.w	8000b58 <processCAN2Packet+0x21c>
        			TiltSensor1DataReady++;
 80009e6:	4b69      	ldr	r3, [pc, #420]	; (8000b8c <processCAN2Packet+0x250>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	3301      	adds	r3, #1
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b67      	ldr	r3, [pc, #412]	; (8000b8c <processCAN2Packet+0x250>)
 80009f0:	801a      	strh	r2, [r3, #0]
        		break;
 80009f2:	e0b1      	b.n	8000b58 <processCAN2Packet+0x21c>
        	case TILT_SENSOR_ADDR2:
        		Tilt2X=*(float*)Rxbuff;
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a65      	ldr	r2, [pc, #404]	; (8000b90 <processCAN2Packet+0x254>)
 80009fc:	6013      	str	r3, [r2, #0]
        		Tilt2Y=*(float*)&Rxbuff[4];
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	3304      	adds	r3, #4
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a63      	ldr	r2, [pc, #396]	; (8000b94 <processCAN2Packet+0x258>)
 8000a08:	6013      	str	r3, [r2, #0]
        		break;
 8000a0a:	e0b2      	b.n	8000b72 <processCAN2Packet+0x236>
        	case (TILT_SENSOR_ADDR2+1):
				Gyro2=*(float*)Rxbuff;
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a61      	ldr	r2, [pc, #388]	; (8000b98 <processCAN2Packet+0x25c>)
 8000a14:	6013      	str	r3, [r2, #0]
        		if (TiltSensor2DataReady<1000)
 8000a16:	4b61      	ldr	r3, [pc, #388]	; (8000b9c <processCAN2Packet+0x260>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a1e:	f080 809d 	bcs.w	8000b5c <processCAN2Packet+0x220>
        			TiltSensor2DataReady++;
 8000a22:	4b5e      	ldr	r3, [pc, #376]	; (8000b9c <processCAN2Packet+0x260>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b5c      	ldr	r3, [pc, #368]	; (8000b9c <processCAN2Packet+0x260>)
 8000a2c:	801a      	strh	r2, [r3, #0]
        		break;
 8000a2e:	e095      	b.n	8000b5c <processCAN2Packet+0x220>
        	case TILT_SENSOR_ADDR3:
        		Tilt3X=*(float*)Rxbuff;
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a5a      	ldr	r2, [pc, #360]	; (8000ba0 <processCAN2Packet+0x264>)
 8000a38:	6013      	str	r3, [r2, #0]
        		Tilt3Y=*(float*)&Rxbuff[4];
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	3304      	adds	r3, #4
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a58      	ldr	r2, [pc, #352]	; (8000ba4 <processCAN2Packet+0x268>)
 8000a44:	6013      	str	r3, [r2, #0]
        		break;
 8000a46:	e094      	b.n	8000b72 <processCAN2Packet+0x236>
        	case (TILT_SENSOR_ADDR3+1):
				Gyro3=*(float*)Rxbuff;
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a56      	ldr	r2, [pc, #344]	; (8000ba8 <processCAN2Packet+0x26c>)
 8000a50:	6013      	str	r3, [r2, #0]
        		if (TiltSensor3DataReady<1000)
 8000a52:	4b56      	ldr	r3, [pc, #344]	; (8000bac <processCAN2Packet+0x270>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a5a:	f080 8081 	bcs.w	8000b60 <processCAN2Packet+0x224>
        			TiltSensor3DataReady++;
 8000a5e:	4b53      	ldr	r3, [pc, #332]	; (8000bac <processCAN2Packet+0x270>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	4b51      	ldr	r3, [pc, #324]	; (8000bac <processCAN2Packet+0x270>)
 8000a68:	801a      	strh	r2, [r3, #0]
        		break;
 8000a6a:	e079      	b.n	8000b60 <processCAN2Packet+0x224>
        	case TILT_SENSOR_ADDR4:
        		Tilt4X=*(float*)Rxbuff;
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a4f      	ldr	r2, [pc, #316]	; (8000bb0 <processCAN2Packet+0x274>)
 8000a74:	6013      	str	r3, [r2, #0]
        		Tilt4Y=*(float*)&Rxbuff[4];
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a4d      	ldr	r2, [pc, #308]	; (8000bb4 <processCAN2Packet+0x278>)
 8000a80:	6013      	str	r3, [r2, #0]
        		break;
 8000a82:	e076      	b.n	8000b72 <processCAN2Packet+0x236>
        	case (TILT_SENSOR_ADDR4+1):
				Gyro4=*(float*)Rxbuff;
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a4b      	ldr	r2, [pc, #300]	; (8000bb8 <processCAN2Packet+0x27c>)
 8000a8c:	6013      	str	r3, [r2, #0]
        		if (TiltSensor4DataReady<1000)
 8000a8e:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <processCAN2Packet+0x280>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a96:	d265      	bcs.n	8000b64 <processCAN2Packet+0x228>
        			TiltSensor4DataReady++;
 8000a98:	4b48      	ldr	r3, [pc, #288]	; (8000bbc <processCAN2Packet+0x280>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <processCAN2Packet+0x280>)
 8000aa2:	801a      	strh	r2, [r3, #0]
        		break;
 8000aa4:	e05e      	b.n	8000b64 <processCAN2Packet+0x228>
        	case TILT_SENSOR_ADDR5:
        		Tilt5X=*(float*)Rxbuff;
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <processCAN2Packet+0x284>)
 8000aae:	6013      	str	r3, [r2, #0]
        		Tilt5Y=*(float*)&Rxbuff[4];
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a42      	ldr	r2, [pc, #264]	; (8000bc4 <processCAN2Packet+0x288>)
 8000aba:	6013      	str	r3, [r2, #0]
        		break;
 8000abc:	e059      	b.n	8000b72 <processCAN2Packet+0x236>
        	case (TILT_SENSOR_ADDR5+1):
				Gyro5=*(float*)Rxbuff;
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <processCAN2Packet+0x28c>)
 8000ac6:	6013      	str	r3, [r2, #0]
        		if (TiltSensor5DataReady<1000)
 8000ac8:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <processCAN2Packet+0x290>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ad0:	d24a      	bcs.n	8000b68 <processCAN2Packet+0x22c>
        			TiltSensor5DataReady++;
 8000ad2:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <processCAN2Packet+0x290>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <processCAN2Packet+0x290>)
 8000adc:	801a      	strh	r2, [r3, #0]
        		break;
 8000ade:	e043      	b.n	8000b68 <processCAN2Packet+0x22c>
        	case TILT_SENSOR_ADDR6:
        		Tilt6X=*(float*)Rxbuff;
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a3a      	ldr	r2, [pc, #232]	; (8000bd0 <processCAN2Packet+0x294>)
 8000ae8:	6013      	str	r3, [r2, #0]
        		Tilt6Y=*(float*)&Rxbuff[4];
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	3304      	adds	r3, #4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a38      	ldr	r2, [pc, #224]	; (8000bd4 <processCAN2Packet+0x298>)
 8000af4:	6013      	str	r3, [r2, #0]
        		break;
 8000af6:	e03c      	b.n	8000b72 <processCAN2Packet+0x236>
        	case (TILT_SENSOR_ADDR6+1):
				Gyro6=*(float*)Rxbuff;
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <processCAN2Packet+0x29c>)
 8000b00:	6013      	str	r3, [r2, #0]
        		if (TiltSensor6DataReady<1000)
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <processCAN2Packet+0x2a0>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b0a:	d22f      	bcs.n	8000b6c <processCAN2Packet+0x230>
        			TiltSensor6DataReady++;
 8000b0c:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <processCAN2Packet+0x2a0>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <processCAN2Packet+0x2a0>)
 8000b16:	801a      	strh	r2, [r3, #0]
        		break;
 8000b18:	e028      	b.n	8000b6c <processCAN2Packet+0x230>
        	case TILT_SENSOR_ADDR7:
        		Tilt7X=*(float*)Rxbuff;
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <processCAN2Packet+0x2a4>)
 8000b22:	6013      	str	r3, [r2, #0]
        		Tilt7Y=*(float*)&Rxbuff[4];
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	3304      	adds	r3, #4
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a2d      	ldr	r2, [pc, #180]	; (8000be4 <processCAN2Packet+0x2a8>)
 8000b2e:	6013      	str	r3, [r2, #0]
        		break;
 8000b30:	e01f      	b.n	8000b72 <processCAN2Packet+0x236>
        	case (TILT_SENSOR_ADDR7+1):
				Gyro7=*(float*)Rxbuff;
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a2b      	ldr	r2, [pc, #172]	; (8000be8 <processCAN2Packet+0x2ac>)
 8000b3a:	6013      	str	r3, [r2, #0]
        		if (TiltSensor7DataReady<1000)
 8000b3c:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <processCAN2Packet+0x2b0>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b44:	d214      	bcs.n	8000b70 <processCAN2Packet+0x234>
        			TiltSensor7DataReady++;
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <processCAN2Packet+0x2b0>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <processCAN2Packet+0x2b0>)
 8000b50:	801a      	strh	r2, [r3, #0]
        		break;
 8000b52:	e00d      	b.n	8000b70 <processCAN2Packet+0x234>
        	}
        }
 8000b54:	bf00      	nop
 8000b56:	e00c      	b.n	8000b72 <processCAN2Packet+0x236>
        		break;
 8000b58:	bf00      	nop
 8000b5a:	e00a      	b.n	8000b72 <processCAN2Packet+0x236>
        		break;
 8000b5c:	bf00      	nop
 8000b5e:	e008      	b.n	8000b72 <processCAN2Packet+0x236>
        		break;
 8000b60:	bf00      	nop
 8000b62:	e006      	b.n	8000b72 <processCAN2Packet+0x236>
        		break;
 8000b64:	bf00      	nop
 8000b66:	e004      	b.n	8000b72 <processCAN2Packet+0x236>
        		break;
 8000b68:	bf00      	nop
 8000b6a:	e002      	b.n	8000b72 <processCAN2Packet+0x236>
        		break;
 8000b6c:	bf00      	nop
 8000b6e:	e000      	b.n	8000b72 <processCAN2Packet+0x236>
        		break;
 8000b70:	bf00      	nop
    }
 8000b72:	bf00      	nop
 8000b74:	3730      	adds	r7, #48	; 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20004d4c 	.word	0x20004d4c
 8000b80:	200049dc 	.word	0x200049dc
 8000b84:	20004cec 	.word	0x20004cec
 8000b88:	20004a3c 	.word	0x20004a3c
 8000b8c:	20004c90 	.word	0x20004c90
 8000b90:	20004c2c 	.word	0x20004c2c
 8000b94:	20004c24 	.word	0x20004c24
 8000b98:	20004bc0 	.word	0x20004bc0
 8000b9c:	20004944 	.word	0x20004944
 8000ba0:	200049ec 	.word	0x200049ec
 8000ba4:	20004c98 	.word	0x20004c98
 8000ba8:	20004cf8 	.word	0x20004cf8
 8000bac:	20004bbc 	.word	0x20004bbc
 8000bb0:	200049e4 	.word	0x200049e4
 8000bb4:	20004cfc 	.word	0x20004cfc
 8000bb8:	20004c94 	.word	0x20004c94
 8000bbc:	200049f2 	.word	0x200049f2
 8000bc0:	20004d00 	.word	0x20004d00
 8000bc4:	20004a48 	.word	0x20004a48
 8000bc8:	20004c28 	.word	0x20004c28
 8000bcc:	2000493c 	.word	0x2000493c
 8000bd0:	20004940 	.word	0x20004940
 8000bd4:	20004a40 	.word	0x20004a40
 8000bd8:	20004cf0 	.word	0x20004cf0
 8000bdc:	20004ce8 	.word	0x20004ce8
 8000be0:	200049e0 	.word	0x200049e0
 8000be4:	20004cf4 	.word	0x20004cf4
 8000be8:	20004ddc 	.word	0x20004ddc
 8000bec:	200049f0 	.word	0x200049f0

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf4:	f001 ffb2 	bl	8002b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf8:	f000 f854 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfc:	f000 feb2 	bl	8001964 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c00:	f000 fe7a 	bl	80018f8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000c04:	f000 f9ae 	bl	8000f64 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c08:	f000 faa0 	bl	800114c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c0c:	f000 fb64 	bl	80012d8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000c10:	f000 fcb8 	bl	8001584 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000c14:	f000 f8b0 	bl	8000d78 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 fe3c 	bl	8001894 <MX_USART2_UART_Init>
  MX_TIM12_Init();
 8000c1c:	f000 fda6 	bl	800176c <MX_TIM12_Init>
  MX_CAN2_Init();
 8000c20:	f000 f966 	bl	8000ef0 <MX_CAN2_Init>
  MX_TIM4_Init();
 8000c24:	f000 fc20 	bl	8001468 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,SET);
  PWM_Off();
 8000c28:	f7ff fc4e 	bl	80004c8 <PWM_Off>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c2c:	f006 fd18 	bl	8007660 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UARTTrmBinarySem */
  UARTTrmBinarySemHandle = osSemaphoreNew(1, 1, &UARTTrmBinarySem_attributes);
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <main+0x88>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	2001      	movs	r0, #1
 8000c36:	f006 fe0a 	bl	800784e <osSemaphoreNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <main+0x8c>)
 8000c3e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c40:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <main+0x90>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <main+0x94>)
 8000c46:	f006 fd55 	bl	80076f4 <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <main+0x98>)
 8000c4e:	6013      	str	r3, [r2, #0]

  /* creation of UARTTx */
  UARTTxHandle = osThreadNew(StartUARTTx, NULL, &UARTTx_attributes);
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <main+0x9c>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <main+0xa0>)
 8000c56:	f006 fd4d 	bl	80076f4 <osThreadNew>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <main+0xa4>)
 8000c5e:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(CANEntry, NULL, &CANTask_attributes);
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <main+0xa8>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <main+0xac>)
 8000c66:	f006 fd45 	bl	80076f4 <osThreadNew>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <main+0xb0>)
 8000c6e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c70:	f006 fd1a 	bl	80076a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x84>
 8000c76:	bf00      	nop
 8000c78:	0800acbc 	.word	0x0800acbc
 8000c7c:	20004ce4 	.word	0x20004ce4
 8000c80:	0800ac50 	.word	0x0800ac50
 8000c84:	08001b7d 	.word	0x08001b7d
 8000c88:	20004948 	.word	0x20004948
 8000c8c:	0800ac74 	.word	0x0800ac74
 8000c90:	08001ba1 	.word	0x08001ba1
 8000c94:	200049e8 	.word	0x200049e8
 8000c98:	0800ac98 	.word	0x0800ac98
 8000c9c:	08001bd9 	.word	0x08001bd9
 8000ca0:	20004de0 	.word	0x20004de0

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	; 0x50
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0320 	add.w	r3, r7, #32
 8000cae:	2230      	movs	r2, #48	; 0x30
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f009 ff94 	bl	800abe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <SystemClock_Config+0xcc>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <SystemClock_Config+0xcc>)
 8000cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <SystemClock_Config+0xcc>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <SystemClock_Config+0xd0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <SystemClock_Config+0xd0>)
 8000cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <SystemClock_Config+0xd0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000d18:	2390      	movs	r3, #144	; 0x90
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 f9e7 	bl	80050fc <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d34:	f000 ff84 	bl	8001c40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	230f      	movs	r3, #15
 8000d3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2104      	movs	r1, #4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fc48 	bl	80055ec <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d62:	f000 ff6d 	bl	8001c40 <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3750      	adds	r7, #80	; 0x50
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40007000 	.word	0x40007000

08000d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8a:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000d8c:	4a56      	ldr	r2, [pc, #344]	; (8000ee8 <MX_ADC1_Init+0x170>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d90:	4b54      	ldr	r3, [pc, #336]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d96:	4b53      	ldr	r3, [pc, #332]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d9c:	4b51      	ldr	r3, [pc, #324]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da2:	4b50      	ldr	r3, [pc, #320]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b4e      	ldr	r3, [pc, #312]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db0:	4b4c      	ldr	r3, [pc, #304]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db6:	4b4b      	ldr	r3, [pc, #300]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000db8:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <MX_ADC1_Init+0x174>)
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dbc:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000dc2:	4b48      	ldr	r3, [pc, #288]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc8:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	4843      	ldr	r0, [pc, #268]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000dd8:	f001 ff02 	bl	8002be0 <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 ff2d 	bl	8001c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000de6:	2304      	movs	r3, #4
 8000de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	483b      	ldr	r0, [pc, #236]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000df8:	f002 f9a4 	bl	8003144 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e02:	f000 ff1d 	bl	8001c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e06:	2305      	movs	r3, #5
 8000e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	4834      	ldr	r0, [pc, #208]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000e14:	f002 f996 	bl	8003144 <HAL_ADC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e1e:	f000 ff0f 	bl	8001c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e22:	230a      	movs	r3, #10
 8000e24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e26:	2303      	movs	r3, #3
 8000e28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	482d      	ldr	r0, [pc, #180]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000e30:	f002 f988 	bl	8003144 <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e3a:	f000 ff01 	bl	8001c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e42:	2304      	movs	r3, #4
 8000e44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000e4c:	f002 f97a 	bl	8003144 <HAL_ADC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e56:	f000 fef3 	bl	8001c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000e68:	f002 f96c 	bl	8003144 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e72:	f000 fee5 	bl	8001c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e76:	230d      	movs	r3, #13
 8000e78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000e84:	f002 f95e 	bl	8003144 <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000e8e:	f000 fed7 	bl	8001c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e92:	230e      	movs	r3, #14
 8000e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000e96:	2307      	movs	r3, #7
 8000e98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000ea0:	f002 f950 	bl	8003144 <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000eaa:	f000 fec9 	bl	8001c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000eae:	230f      	movs	r3, #15
 8000eb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000ebc:	f002 f942 	bl	8003144 <HAL_ADC_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000ec6:	f000 febb 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  hadc1.Instance->CR1|=ADC_CR1_EOCIE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <MX_ADC1_Init+0x16c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0220 	orr.w	r2, r2, #32
 8000ed8:	605a      	str	r2, [r3, #4]
  /* USER CODE END ADC1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20004a4c 	.word	0x20004a4c
 8000ee8:	40012000 	.word	0x40012000
 8000eec:	0f000001 	.word	0x0f000001

08000ef0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN2_Init 1 */
	//hcan2.Init.Mode = CAN_MODE_LOOPBACK;

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <MX_CAN2_Init+0x70>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000efc:	2205      	movs	r2, #5
 8000efe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f0e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f12:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f16:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000f1a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f42:	f002 fba9 	bl	8003698 <HAL_CAN_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f4c:	f000 fe78 	bl	8001c40 <Error_Handler>

  HAL_CAN_Start(&hcan2);
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
*/

  CAN_Config(&hcan2,0);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <MX_CAN2_Init+0x6c>)
 8000f54:	f7ff fbf8 	bl	8000748 <CAN_Config>


  /* USER CODE END CAN2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20004a94 	.word	0x20004a94
 8000f60:	40006800 	.word	0x40006800

08000f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b096      	sub	sp, #88	; 0x58
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
 8000f92:	615a      	str	r2, [r3, #20]
 8000f94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2220      	movs	r2, #32
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f009 fe1f 	bl	800abe0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa2:	4b68      	ldr	r3, [pc, #416]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000fa4:	4a68      	ldr	r2, [pc, #416]	; (8001148 <MX_TIM1_Init+0x1e4>)
 8000fa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa8:	4b66      	ldr	r3, [pc, #408]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b65      	ldr	r3, [pc, #404]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7200;
 8000fb4:	4b63      	ldr	r3, [pc, #396]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000fb6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000fba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc2:	4b60      	ldr	r3, [pc, #384]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fce:	485d      	ldr	r0, [pc, #372]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000fd0:	f004 fd3a 	bl	8005a48 <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fda:	f000 fe31 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4856      	ldr	r0, [pc, #344]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000fec:	f005 f80c 	bl	8006008 <HAL_TIM_ConfigClockSource>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ff6:	f000 fe23 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ffa:	4852      	ldr	r0, [pc, #328]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8000ffc:	f004 fde4 	bl	8005bc8 <HAL_TIM_PWM_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001006:	f000 fe1b 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001016:	4619      	mov	r1, r3
 8001018:	484a      	ldr	r0, [pc, #296]	; (8001144 <MX_TIM1_Init+0x1e0>)
 800101a:	f005 fbcb 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001024:	f000 fe0c 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001028:	2360      	movs	r3, #96	; 0x60
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	483d      	ldr	r0, [pc, #244]	; (8001144 <MX_TIM1_Init+0x1e0>)
 800104e:	f004 ff1d 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001058:	f000 fdf2 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	2204      	movs	r2, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4837      	ldr	r0, [pc, #220]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8001066:	f004 ff11 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001070:	f000 fde6 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	2208      	movs	r2, #8
 800107a:	4619      	mov	r1, r3
 800107c:	4831      	ldr	r0, [pc, #196]	; (8001144 <MX_TIM1_Init+0x1e0>)
 800107e:	f004 ff05 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001088:	f000 fdda 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	220c      	movs	r2, #12
 8001092:	4619      	mov	r1, r3
 8001094:	482b      	ldr	r0, [pc, #172]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8001096:	f004 fef9 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80010a0:	f000 fdce 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	481f      	ldr	r0, [pc, #124]	; (8001144 <MX_TIM1_Init+0x1e0>)
 80010c8:	f005 fbf0 	bl	80068ac <HAL_TIMEx_ConfigBreakDeadTime>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80010d2:	f000 fdb5 	bl	8001c40 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */

  // TIM1->CR1=0x1;


  htim1.Instance->CR1|=TIM_CR1_CEN;
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_TIM1_Init+0x1e0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_TIM1_Init+0x1e0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0201 	orr.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
  htim1.Instance->BDTR|=TIM_BDTR_MOE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_TIM1_Init+0x1e0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_TIM1_Init+0x1e0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
  htim1.Instance->CCER|=TIM_CCER_CC1E;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_TIM1_Init+0x1e0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_TIM1_Init+0x1e0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 0201 	orr.w	r2, r2, #1
 8001104:	621a      	str	r2, [r3, #32]
  htim1.Instance->CCER|=TIM_CCER_CC2E;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a1a      	ldr	r2, [r3, #32]
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <MX_TIM1_Init+0x1e0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0210 	orr.w	r2, r2, #16
 8001114:	621a      	str	r2, [r3, #32]
  htim1.Instance->CCER|=TIM_CCER_CC3E;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_TIM1_Init+0x1e0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001124:	621a      	str	r2, [r3, #32]
  htim1.Instance->CCER|=TIM_CCER_CC4E;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <MX_TIM1_Init+0x1e0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001134:	621a      	str	r2, [r3, #32]

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <MX_TIM1_Init+0x1e0>)
 8001138:	f000 ff60 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 800113c:	bf00      	nop
 800113e:	3758      	adds	r7, #88	; 0x58
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20004c9c 	.word	0x20004c9c
 8001148:	40010000 	.word	0x40010000

0800114c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	615a      	str	r2, [r3, #20]
 800117a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117c:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <MX_TIM2_Init+0x188>)
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <MX_TIM2_Init+0x188>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600;
 8001190:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001192:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <MX_TIM2_Init+0x188>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <MX_TIM2_Init+0x188>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a4:	484b      	ldr	r0, [pc, #300]	; (80012d4 <MX_TIM2_Init+0x188>)
 80011a6:	f004 fc4f 	bl	8005a48 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011b0:	f000 fd46 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011be:	4619      	mov	r1, r3
 80011c0:	4844      	ldr	r0, [pc, #272]	; (80012d4 <MX_TIM2_Init+0x188>)
 80011c2:	f004 ff21 	bl	8006008 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011cc:	f000 fd38 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011d0:	4840      	ldr	r0, [pc, #256]	; (80012d4 <MX_TIM2_Init+0x188>)
 80011d2:	f004 fcf9 	bl	8005bc8 <HAL_TIM_PWM_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011dc:	f000 fd30 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4619      	mov	r1, r3
 80011ee:	4839      	ldr	r0, [pc, #228]	; (80012d4 <MX_TIM2_Init+0x188>)
 80011f0:	f005 fae0 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011fa:	f000 fd21 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fe:	2360      	movs	r3, #96	; 0x60
 8001200:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	482f      	ldr	r0, [pc, #188]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001216:	f004 fe39 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001220:	f000 fd0e 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2204      	movs	r2, #4
 8001228:	4619      	mov	r1, r3
 800122a:	482a      	ldr	r0, [pc, #168]	; (80012d4 <MX_TIM2_Init+0x188>)
 800122c:	f004 fe2e 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001236:	f000 fd03 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2208      	movs	r2, #8
 800123e:	4619      	mov	r1, r3
 8001240:	4824      	ldr	r0, [pc, #144]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001242:	f004 fe23 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800124c:	f000 fcf8 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	220c      	movs	r2, #12
 8001254:	4619      	mov	r1, r3
 8001256:	481f      	ldr	r0, [pc, #124]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001258:	f004 fe18 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001262:	f000 fced 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  htim2.Instance->CR1|=TIM_CR1_CEN;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_TIM2_Init+0x188>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]
  htim2.Instance->BDTR|=TIM_BDTR_MOE;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_TIM2_Init+0x188>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
  htim2.Instance->CCER|=TIM_CCER_CC1E;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a1a      	ldr	r2, [r3, #32]
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_TIM2_Init+0x188>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0201 	orr.w	r2, r2, #1
 8001294:	621a      	str	r2, [r3, #32]
  htim2.Instance->CCER|=TIM_CCER_CC2E;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_TIM2_Init+0x188>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a1a      	ldr	r2, [r3, #32]
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_TIM2_Init+0x188>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0210 	orr.w	r2, r2, #16
 80012a4:	621a      	str	r2, [r3, #32]
  htim2.Instance->CCER|=TIM_CCER_CC3E;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_TIM2_Init+0x188>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_TIM2_Init+0x188>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012b4:	621a      	str	r2, [r3, #32]
  htim2.Instance->CCER|=TIM_CCER_CC4E;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_TIM2_Init+0x188>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6a1a      	ldr	r2, [r3, #32]
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <MX_TIM2_Init+0x188>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012c4:	621a      	str	r2, [r3, #32]

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_TIM2_Init+0x188>)
 80012c8:	f000 fe98 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 80012cc:	bf00      	nop
 80012ce:	3738      	adds	r7, #56	; 0x38
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20004d04 	.word	0x20004d04

080012d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <MX_TIM3_Init+0x188>)
 800130a:	4a56      	ldr	r2, [pc, #344]	; (8001464 <MX_TIM3_Init+0x18c>)
 800130c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800130e:	4b54      	ldr	r3, [pc, #336]	; (8001460 <MX_TIM3_Init+0x188>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b52      	ldr	r3, [pc, #328]	; (8001460 <MX_TIM3_Init+0x188>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 800131a:	4b51      	ldr	r3, [pc, #324]	; (8001460 <MX_TIM3_Init+0x188>)
 800131c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001320:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <MX_TIM3_Init+0x188>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <MX_TIM3_Init+0x188>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800132e:	484c      	ldr	r0, [pc, #304]	; (8001460 <MX_TIM3_Init+0x188>)
 8001330:	f004 fb8a 	bl	8005a48 <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800133a:	f000 fc81 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	4845      	ldr	r0, [pc, #276]	; (8001460 <MX_TIM3_Init+0x188>)
 800134c:	f004 fe5c 	bl	8006008 <HAL_TIM_ConfigClockSource>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001356:	f000 fc73 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800135a:	4841      	ldr	r0, [pc, #260]	; (8001460 <MX_TIM3_Init+0x188>)
 800135c:	f004 fc34 	bl	8005bc8 <HAL_TIM_PWM_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001366:	f000 fc6b 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	4619      	mov	r1, r3
 8001378:	4839      	ldr	r0, [pc, #228]	; (8001460 <MX_TIM3_Init+0x188>)
 800137a:	f005 fa1b 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001384:	f000 fc5c 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001388:	2360      	movs	r3, #96	; 0x60
 800138a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	4830      	ldr	r0, [pc, #192]	; (8001460 <MX_TIM3_Init+0x188>)
 80013a0:	f004 fd74 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013aa:	f000 fc49 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2204      	movs	r2, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	482a      	ldr	r0, [pc, #168]	; (8001460 <MX_TIM3_Init+0x188>)
 80013b6:	f004 fd69 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80013c0:	f000 fc3e 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2208      	movs	r2, #8
 80013c8:	4619      	mov	r1, r3
 80013ca:	4825      	ldr	r0, [pc, #148]	; (8001460 <MX_TIM3_Init+0x188>)
 80013cc:	f004 fd5e 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80013d6:	f000 fc33 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	220c      	movs	r2, #12
 80013de:	4619      	mov	r1, r3
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <MX_TIM3_Init+0x188>)
 80013e2:	f004 fd53 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80013ec:	f000 fc28 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  htim3.Instance->CR1|=TIM_CR1_CEN;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_TIM3_Init+0x188>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_TIM3_Init+0x188>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
  htim3.Instance->BDTR|=TIM_BDTR_MOE;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_TIM3_Init+0x188>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_TIM3_Init+0x188>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800140e:	645a      	str	r2, [r3, #68]	; 0x44
  htim3.Instance->CCER|=TIM_CCER_CC1E;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_TIM3_Init+0x188>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_TIM3_Init+0x188>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	621a      	str	r2, [r3, #32]
  htim3.Instance->CCER|=TIM_CCER_CC2E;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_TIM3_Init+0x188>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a1a      	ldr	r2, [r3, #32]
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_TIM3_Init+0x188>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0210 	orr.w	r2, r2, #16
 800142e:	621a      	str	r2, [r3, #32]
  htim3.Instance->CCER|=TIM_CCER_CC3E;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_TIM3_Init+0x188>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a1a      	ldr	r2, [r3, #32]
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <MX_TIM3_Init+0x188>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800143e:	621a      	str	r2, [r3, #32]
  htim3.Instance->CCER|=TIM_CCER_CC4E;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <MX_TIM3_Init+0x188>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_TIM3_Init+0x188>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800144e:	621a      	str	r2, [r3, #32]
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM3_Init+0x188>)
 8001452:	f000 fdd3 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001456:	bf00      	nop
 8001458:	3738      	adds	r7, #56	; 0x38
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200049f4 	.word	0x200049f4
 8001464:	40000400 	.word	0x40000400

08001468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <MX_TIM4_Init+0x114>)
 800149a:	4a39      	ldr	r2, [pc, #228]	; (8001580 <MX_TIM4_Init+0x118>)
 800149c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <MX_TIM4_Init+0x114>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <MX_TIM4_Init+0x114>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <MX_TIM4_Init+0x114>)
 80014ac:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80014b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <MX_TIM4_Init+0x114>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <MX_TIM4_Init+0x114>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014be:	482f      	ldr	r0, [pc, #188]	; (800157c <MX_TIM4_Init+0x114>)
 80014c0:	f004 fac2 	bl	8005a48 <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014ca:	f000 fbb9 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d8:	4619      	mov	r1, r3
 80014da:	4828      	ldr	r0, [pc, #160]	; (800157c <MX_TIM4_Init+0x114>)
 80014dc:	f004 fd94 	bl	8006008 <HAL_TIM_ConfigClockSource>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014e6:	f000 fbab 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014ea:	4824      	ldr	r0, [pc, #144]	; (800157c <MX_TIM4_Init+0x114>)
 80014ec:	f004 fb6c 	bl	8005bc8 <HAL_TIM_PWM_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014f6:	f000 fba3 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	4619      	mov	r1, r3
 8001508:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_TIM4_Init+0x114>)
 800150a:	f005 f953 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001514:	f000 fb94 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001518:	2360      	movs	r3, #96	; 0x60
 800151a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	220c      	movs	r2, #12
 800152c:	4619      	mov	r1, r3
 800152e:	4813      	ldr	r0, [pc, #76]	; (800157c <MX_TIM4_Init+0x114>)
 8001530:	f004 fcac 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800153a:	f000 fb81 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  htim4.Instance->CR1|=TIM_CR1_CEN;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_TIM4_Init+0x114>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_TIM4_Init+0x114>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0201 	orr.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]
  htim4.Instance->BDTR|=TIM_BDTR_MOE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_TIM4_Init+0x114>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_TIM4_Init+0x114>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
 // htim4.Instance->CCER|=TIM_CCER_CC1E;
 // htim4.Instance->CCER|=TIM_CCER_CC2E;
 // htim4.Instance->CCER|=TIM_CCER_CC3E;
  htim4.Instance->CCER|=TIM_CCER_CC4E;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_TIM4_Init+0x114>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a1a      	ldr	r2, [r3, #32]
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <MX_TIM4_Init+0x114>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800156c:	621a      	str	r2, [r3, #32]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM4_Init+0x114>)
 8001570:	f000 fd44 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	; 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20004994 	.word	0x20004994
 8001580:	40000800 	.word	0x40000800

08001584 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b096      	sub	sp, #88	; 0x58
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2220      	movs	r2, #32
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f009 fb0f 	bl	800abe0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015c2:	4b68      	ldr	r3, [pc, #416]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80015c4:	4a68      	ldr	r2, [pc, #416]	; (8001768 <MX_TIM8_Init+0x1e4>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015c8:	4b66      	ldr	r3, [pc, #408]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200;
 80015d4:	4b63      	ldr	r3, [pc, #396]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80015d6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80015da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b61      	ldr	r3, [pc, #388]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015e2:	4b60      	ldr	r3, [pc, #384]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015ee:	485d      	ldr	r0, [pc, #372]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80015f0:	f004 fa2a 	bl	8005a48 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80015fa:	f000 fb21 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001608:	4619      	mov	r1, r3
 800160a:	4856      	ldr	r0, [pc, #344]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800160c:	f004 fcfc 	bl	8006008 <HAL_TIM_ConfigClockSource>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001616:	f000 fb13 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800161a:	4852      	ldr	r0, [pc, #328]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800161c:	f004 fad4 	bl	8005bc8 <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001626:	f000 fb0b 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001636:	4619      	mov	r1, r3
 8001638:	484a      	ldr	r0, [pc, #296]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800163a:	f005 f8bb 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001644:	f000 fafc 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	483d      	ldr	r0, [pc, #244]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800166e:	f004 fc0d 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001678:	f000 fae2 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800167c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001680:	2204      	movs	r2, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4837      	ldr	r0, [pc, #220]	; (8001764 <MX_TIM8_Init+0x1e0>)
 8001686:	f004 fc01 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001690:	f000 fad6 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	2208      	movs	r2, #8
 800169a:	4619      	mov	r1, r3
 800169c:	4831      	ldr	r0, [pc, #196]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800169e:	f004 fbf5 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80016a8:	f000 faca 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	220c      	movs	r2, #12
 80016b2:	4619      	mov	r1, r3
 80016b4:	482b      	ldr	r0, [pc, #172]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80016b6:	f004 fbe9 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80016c0:	f000 fabe 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	481f      	ldr	r0, [pc, #124]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80016e8:	f005 f8e0 	bl	80068ac <HAL_TIMEx_ConfigBreakDeadTime>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80016f2:	f000 faa5 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  htim8.Instance->CR1|=TIM_CR1_CEN;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_TIM8_Init+0x1e0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
  htim8.Instance->BDTR|=TIM_BDTR_MOE;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_TIM8_Init+0x1e0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
  htim8.Instance->CCER|=TIM_CCER_CC1E;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_TIM8_Init+0x1e0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	621a      	str	r2, [r3, #32]
  htim8.Instance->CCER|=TIM_CCER_CC2E;
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_TIM8_Init+0x1e0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	621a      	str	r2, [r3, #32]
  htim8.Instance->CCER|=TIM_CCER_CC3E;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_TIM8_Init+0x1e0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001744:	621a      	str	r2, [r3, #32]
  htim8.Instance->CCER|=TIM_CCER_CC4E;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_TIM8_Init+0x1e0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a1a      	ldr	r2, [r3, #32]
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <MX_TIM8_Init+0x1e0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001754:	621a      	str	r2, [r3, #32]
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001756:	4803      	ldr	r0, [pc, #12]	; (8001764 <MX_TIM8_Init+0x1e0>)
 8001758:	f000 fc50 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 800175c:	bf00      	nop
 800175e:	3758      	adds	r7, #88	; 0x58
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000494c 	.word	0x2000494c
 8001768:	40010400 	.word	0x40010400

0800176c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <MX_TIM12_Init+0x120>)
 8001794:	4a3e      	ldr	r2, [pc, #248]	; (8001890 <MX_TIM12_Init+0x124>)
 8001796:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001798:	4b3c      	ldr	r3, [pc, #240]	; (800188c <MX_TIM12_Init+0x120>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <MX_TIM12_Init+0x120>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4200;
 80017a4:	4b39      	ldr	r3, [pc, #228]	; (800188c <MX_TIM12_Init+0x120>)
 80017a6:	f241 0268 	movw	r2, #4200	; 0x1068
 80017aa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <MX_TIM12_Init+0x120>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b36      	ldr	r3, [pc, #216]	; (800188c <MX_TIM12_Init+0x120>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80017b8:	4834      	ldr	r0, [pc, #208]	; (800188c <MX_TIM12_Init+0x120>)
 80017ba:	f004 f945 	bl	8005a48 <HAL_TIM_Base_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80017c4:	f000 fa3c 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	4619      	mov	r1, r3
 80017d4:	482d      	ldr	r0, [pc, #180]	; (800188c <MX_TIM12_Init+0x120>)
 80017d6:	f004 fc17 	bl	8006008 <HAL_TIM_ConfigClockSource>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80017e0:	f000 fa2e 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017e4:	4829      	ldr	r0, [pc, #164]	; (800188c <MX_TIM12_Init+0x120>)
 80017e6:	f004 f9ef 	bl	8005bc8 <HAL_TIM_PWM_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80017f0:	f000 fa26 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2360      	movs	r3, #96	; 0x60
 80017f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3000;
 80017f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	481f      	ldr	r0, [pc, #124]	; (800188c <MX_TIM12_Init+0x120>)
 800180e:	f004 fb3d 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001818:	f000 fa12 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
  htim12.Instance->CR1|=TIM_CR1_CEN;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM12_Init+0x120>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_TIM12_Init+0x120>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  htim12.Instance->BDTR|=TIM_BDTR_MOE;
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_TIM12_Init+0x120>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_TIM12_Init+0x120>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800183a:	645a      	str	r2, [r3, #68]	; 0x44
  htim12.Instance->CCER|=TIM_CCER_CC1E;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_TIM12_Init+0x120>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a1a      	ldr	r2, [r3, #32]
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_TIM12_Init+0x120>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	621a      	str	r2, [r3, #32]
  htim12.Instance->CCER|=TIM_CCER_CC2E;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_TIM12_Init+0x120>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a1a      	ldr	r2, [r3, #32]
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_TIM12_Init+0x120>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0210 	orr.w	r2, r2, #16
 800185a:	621a      	str	r2, [r3, #32]
  htim12.Instance->CCER|=TIM_CCER_CC3E;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_TIM12_Init+0x120>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <MX_TIM12_Init+0x120>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800186a:	621a      	str	r2, [r3, #32]
  htim12.Instance->CCER|=TIM_CCER_CC4E;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <MX_TIM12_Init+0x120>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a1a      	ldr	r2, [r3, #32]
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_TIM12_Init+0x120>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800187a:	621a      	str	r2, [r3, #32]
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <MX_TIM12_Init+0x120>)
 800187e:	f000 fbbd 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001882:	bf00      	nop
 8001884:	3730      	adds	r7, #48	; 0x30
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20004d94 	.word	0x20004d94
 8001890:	40001800 	.word	0x40001800

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 800189a:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <MX_USART2_UART_Init+0x60>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ca:	4809      	ldr	r0, [pc, #36]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018cc:	f005 f854 	bl	8006978 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f000 f9b3 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

   huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	60da      	str	r2, [r3, #12]



  /* USER CODE END USART2_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20004d50 	.word	0x20004d50
 80018f4:	40004400 	.word	0x40004400

080018f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_DMA_Init+0x68>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a16      	ldr	r2, [pc, #88]	; (8001960 <MX_DMA_Init+0x68>)
 8001908:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_DMA_Init+0x68>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_DMA_Init+0x68>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <MX_DMA_Init+0x68>)
 8001924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <MX_DMA_Init+0x68>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2105      	movs	r1, #5
 800193a:	2011      	movs	r0, #17
 800193c:	f002 fdfc 	bl	8004538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001940:	2011      	movs	r0, #17
 8001942:	f002 fe15 	bl	8004570 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2105      	movs	r1, #5
 800194a:	2038      	movs	r0, #56	; 0x38
 800194c:	f002 fdf4 	bl	8004538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001950:	2038      	movs	r0, #56	; 0x38
 8001952:	f002 fe0d 	bl	8004570 <HAL_NVIC_EnableIRQ>

}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <MX_GPIO_Init+0x148>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <MX_GPIO_Init+0x148>)
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b48      	ldr	r3, [pc, #288]	; (8001aac <MX_GPIO_Init+0x148>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <MX_GPIO_Init+0x148>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a43      	ldr	r2, [pc, #268]	; (8001aac <MX_GPIO_Init+0x148>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <MX_GPIO_Init+0x148>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <MX_GPIO_Init+0x148>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a3c      	ldr	r2, [pc, #240]	; (8001aac <MX_GPIO_Init+0x148>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <MX_GPIO_Init+0x148>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b36      	ldr	r3, [pc, #216]	; (8001aac <MX_GPIO_Init+0x148>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a35      	ldr	r2, [pc, #212]	; (8001aac <MX_GPIO_Init+0x148>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <MX_GPIO_Init+0x148>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <MX_GPIO_Init+0x148>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <MX_GPIO_Init+0x148>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <MX_GPIO_Init+0x148>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <MX_GPIO_Init+0x148>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a27      	ldr	r2, [pc, #156]	; (8001aac <MX_GPIO_Init+0x148>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MX_GPIO_Init+0x148>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001a22:	2201      	movs	r2, #1
 8001a24:	21ff      	movs	r1, #255	; 0xff
 8001a26:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <MX_GPIO_Init+0x14c>)
 8001a28:	f003 fb4e 	bl	80050c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f640 7187 	movw	r1, #3975	; 0xf87
 8001a32:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <MX_GPIO_Init+0x150>)
 8001a34:	f003 fb48 	bl	80050c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001a3e:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <MX_GPIO_Init+0x150>)
 8001a40:	f003 fb42 	bl	80050c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2120      	movs	r1, #32
 8001a48:	481b      	ldr	r0, [pc, #108]	; (8001ab8 <MX_GPIO_Init+0x154>)
 8001a4a:	f003 fb3d 	bl	80050c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001a4e:	23ff      	movs	r3, #255	; 0xff
 8001a50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <MX_GPIO_Init+0x14c>)
 8001a66:	f003 f993 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD0
                           PD1 PD2 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a6a:	f647 7387 	movw	r3, #32647	; 0x7f87
 8001a6e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_GPIO_Init+0x150>)
 8001a84:	f003 f984 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MX_GPIO_Init+0x154>)
 8001aa0:	f003 f976 	bl	8004d90 <HAL_GPIO_Init>

}
 8001aa4:	bf00      	nop
 8001aa6:	3730      	adds	r7, #48	; 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40020400 	.word	0x40020400

08001abc <CalcCheckSumm>:

/* USER CODE BEGIN 4 */

uint8_t CalcCheckSumm(uint16_t N, uint8_t *Array) {
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	80fb      	strh	r3, [r7, #6]
	uint16_t Summ = 0, j;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	81fb      	strh	r3, [r7, #14]

	for (j = 0; j < N; j++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	81bb      	strh	r3, [r7, #12]
 8001ad0:	e00a      	b.n	8001ae8 <CalcCheckSumm+0x2c>
		Summ = Summ + Array[j];
 8001ad2:	89bb      	ldrh	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	4413      	add	r3, r2
 8001ae0:	81fb      	strh	r3, [r7, #14]
	for (j = 0; j < N; j++)
 8001ae2:	89bb      	ldrh	r3, [r7, #12]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	81bb      	strh	r3, [r7, #12]
 8001ae8:	89ba      	ldrh	r2, [r7, #12]
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3f0      	bcc.n	8001ad2 <CalcCheckSumm+0x16>

	Summ = ~Summ;
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	81fb      	strh	r3, [r7, #14]

	return (unsigned char) Summ;
 8001af6:	89fb      	ldrh	r3, [r7, #14]
 8001af8:	b2db      	uxtb	r3, r3

}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    if (AdcHandle==&hadc1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_ADC_ConvCpltCallback+0x20>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_ADC_ConvCpltCallback+0x12>
    {
    	asm("Nop");
 8001b18:	bf00      	nop
    }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20004a4c 	.word	0x20004a4c

08001b2c <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    if(hcan->Instance == CAN2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d102      	bne.n	8001b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
    {
    	processCAN2Packet(hcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe fefc 	bl	800093c <processCAN2Packet>
    }


}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40006800 	.word	0x40006800

08001b50 <HAL_UART_TxCpltCallback>:
	  ReceivePacketUART(&huart2);
  }
}

*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  if(huart == &huart2) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_UART_TxCpltCallback+0x24>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d104      	bne.n	8001b6a <HAL_UART_TxCpltCallback+0x1a>

	  osSemaphoreRelease(UARTTrmBinarySemHandle);
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_UART_TxCpltCallback+0x28>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f005 ff4d 	bl	8007a04 <osSemaphoreRelease>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20004d50 	.word	0x20004d50
 8001b78:	20004ce4 	.word	0x20004ce4

08001b7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /*    HAL_ADC_Start(&hadc1);
      HAL_ADC_PollForConversion(&hadc1, 100);
      adcResult = HAL_ADC_GetValue(&hadc1);
      HAL_ADC_Stop(&hadc1);
*/
	   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 8);
 8001b84:	2208      	movs	r2, #8
 8001b86:	4904      	ldr	r1, [pc, #16]	; (8001b98 <StartDefaultTask+0x1c>)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <StartDefaultTask+0x20>)
 8001b8a:	f001 f9ad 	bl	8002ee8 <HAL_ADC_Start_DMA>
	   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,SET);

	  asm("Nop");
 8001b8e:	bf00      	nop


    osDelay(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f005 fe41 	bl	8007818 <osDelay>
	   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 8);
 8001b96:	e7f5      	b.n	8001b84 <StartDefaultTask+0x8>
 8001b98:	20004de4 	.word	0x20004de4
 8001b9c:	20004a4c 	.word	0x20004a4c

08001ba0 <StartUARTTx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTx */
void StartUARTTx(void *argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
{
	stat=osSemaphoreAcquire(UARTTrmBinarySemHandle,0);
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <StartUARTTx+0x30>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 fed6 	bl	8007960 <osSemaphoreAcquire>
 8001bb4:	60f8      	str	r0, [r7, #12]
	if (stat==osOK)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <StartUARTTx+0x24>
	{
	TrmDataPacketUART(&huart2);
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <StartUARTTx+0x34>)
 8001bbe:	f000 fe7b 	bl	80028b8 <TrmDataPacketUART>
 8001bc2:	e000      	b.n	8001bc6 <StartUARTTx+0x26>
	}
	else
		asm("Nop");
 8001bc4:	bf00      	nop
}

    osDelay(10);
 8001bc6:	200a      	movs	r0, #10
 8001bc8:	f005 fe26 	bl	8007818 <osDelay>
	stat=osSemaphoreAcquire(UARTTrmBinarySemHandle,0);
 8001bcc:	e7ec      	b.n	8001ba8 <StartUARTTx+0x8>
 8001bce:	bf00      	nop
 8001bd0:	20004ce4 	.word	0x20004ce4
 8001bd4:	20004d50 	.word	0x20004d50

08001bd8 <CANEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANEntry */
void CANEntry(void *argument)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001be0:	2064      	movs	r0, #100	; 0x64
 8001be2:	f005 fe19 	bl	8007818 <osDelay>
 8001be6:	e7fb      	b.n	8001be0 <CANEntry+0x8>

08001be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	  if (htim->Instance == TIM14) {
	//   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 8);
	  //}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bfa:	f000 ffd1 	bl	8002ba0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM14) {
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d110      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x42>
	  if (CntRxTimeOut)
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00c      	beq.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x42>
	  {
		  CntRxTimeOut--;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c1a:	801a      	strh	r2, [r3, #0]
		  if (!CntRxTimeOut)
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x42>
		  {
			  GettingPacketRx_FL=0;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]




  /* USER CODE END Callback 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40002000 	.word	0x40002000
 8001c38:	20004e6e 	.word	0x20004e6e
 8001c3c:	20004e69 	.word	0x20004e69

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <Error_Handler+0x8>
	...

08001c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	f06f 0001 	mvn.w	r0, #1
 8001c92:	f002 fc51 	bl	8004538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a3f      	ldr	r2, [pc, #252]	; (8001dc0 <HAL_ADC_MspInit+0x11c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d178      	bne.n	8001db8 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a3d      	ldr	r2, [pc, #244]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a36      	ldr	r2, [pc, #216]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_ADC_MspInit+0x120>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d1a:	233f      	movs	r3, #63	; 0x3f
 8001d1c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4826      	ldr	r0, [pc, #152]	; (8001dc8 <HAL_ADC_MspInit+0x124>)
 8001d2e:	f003 f82f 	bl	8004d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d32:	2330      	movs	r3, #48	; 0x30
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d36:	2303      	movs	r3, #3
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4821      	ldr	r0, [pc, #132]	; (8001dcc <HAL_ADC_MspInit+0x128>)
 8001d46:	f003 f823 	bl	8004d90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_ADC_MspInit+0x130>)
 8001d4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d8c:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001d8e:	f002 fbfd 	bl	800458c <HAL_DMA_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001d98:	f7ff ff52 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_ADC_MspInit+0x12c>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2105      	movs	r1, #5
 8001dac:	2012      	movs	r0, #18
 8001dae:	f002 fbc3 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001db2:	2012      	movs	r0, #18
 8001db4:	f002 fbdc 	bl	8004570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	20004c30 	.word	0x20004c30
 8001dd4:	40026410 	.word	0x40026410

08001dd8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2c      	ldr	r2, [pc, #176]	; (8001ea8 <HAL_CAN_MspInit+0xd0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d152      	bne.n	8001ea0 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_CAN_MspInit+0xd4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001e60:	2309      	movs	r3, #9
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4811      	ldr	r0, [pc, #68]	; (8001eb0 <HAL_CAN_MspInit+0xd8>)
 8001e6c:	f002 ff90 	bl	8004d90 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2105      	movs	r1, #5
 8001e74:	203f      	movs	r0, #63	; 0x3f
 8001e76:	f002 fb5f 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001e7a:	203f      	movs	r0, #63	; 0x3f
 8001e7c:	f002 fb78 	bl	8004570 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2105      	movs	r1, #5
 8001e84:	2040      	movs	r0, #64	; 0x40
 8001e86:	f002 fb57 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e8a:	2040      	movs	r0, #64	; 0x40
 8001e8c:	f002 fb70 	bl	8004570 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2105      	movs	r1, #5
 8001e94:	2041      	movs	r0, #65	; 0x41
 8001e96:	f002 fb4f 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001e9a:	2041      	movs	r0, #65	; 0x41
 8001e9c:	f002 fb68 	bl	8004570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40006800 	.word	0x40006800
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a48      	ldr	r2, [pc, #288]	; (8001fe4 <HAL_TIM_Base_MspInit+0x130>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d116      	bne.n	8001ef4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a46      	ldr	r2, [pc, #280]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	2019      	movs	r0, #25
 8001ee8:	f002 fb26 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eec:	2019      	movs	r0, #25
 8001eee:	f002 fb3f 	bl	8004570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001ef2:	e072      	b.n	8001fda <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d116      	bne.n	8001f2c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a38      	ldr	r2, [pc, #224]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	201c      	movs	r0, #28
 8001f20:	f002 fb0a 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f24:	201c      	movs	r0, #28
 8001f26:	f002 fb23 	bl	8004570 <HAL_NVIC_EnableIRQ>
}
 8001f2a:	e056      	b.n	8001fda <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <HAL_TIM_Base_MspInit+0x138>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
}
 8001f52:	e042      	b.n	8001fda <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <HAL_TIM_Base_MspInit+0x13c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
}
 8001f7a:	e02e      	b.n	8001fda <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <HAL_TIM_Base_MspInit+0x140>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d116      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	202d      	movs	r0, #45	; 0x2d
 8001fa8:	f002 fac6 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001fac:	202d      	movs	r0, #45	; 0x2d
 8001fae:	f002 fadf 	bl	8004570 <HAL_NVIC_EnableIRQ>
}
 8001fb2:	e012      	b.n	8001fda <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HAL_TIM_Base_MspInit+0x144>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10d      	bne.n	8001fda <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_TIM_Base_MspInit+0x134>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
}
 8001fda:	bf00      	nop
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	40010400 	.word	0x40010400
 8001ff8:	40001800 	.word	0x40001800

08001ffc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7d      	ldr	r2, [pc, #500]	; (8002210 <HAL_TIM_MspPostInit+0x214>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d11f      	bne.n	800205e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
 8002022:	4b7c      	ldr	r3, [pc, #496]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a7b      	ldr	r2, [pc, #492]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b79      	ldr	r3, [pc, #484]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800203a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800204c:	2301      	movs	r3, #1
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	4870      	ldr	r0, [pc, #448]	; (8002218 <HAL_TIM_MspPostInit+0x21c>)
 8002058:	f002 fe9a 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800205c:	e0d3      	b.n	8002206 <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002066:	d11e      	bne.n	80020a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	4b69      	ldr	r3, [pc, #420]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a68      	ldr	r2, [pc, #416]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002084:	230f      	movs	r3, #15
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002094:	2301      	movs	r3, #1
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	4619      	mov	r1, r3
 800209e:	485f      	ldr	r0, [pc, #380]	; (800221c <HAL_TIM_MspPostInit+0x220>)
 80020a0:	f002 fe76 	bl	8004d90 <HAL_GPIO_Init>
}
 80020a4:	e0af      	b.n	8002206 <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5d      	ldr	r2, [pc, #372]	; (8002220 <HAL_TIM_MspPostInit+0x224>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d13c      	bne.n	800212a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	4b57      	ldr	r3, [pc, #348]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	4a56      	ldr	r2, [pc, #344]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6313      	str	r3, [r2, #48]	; 0x30
 80020c0:	4b54      	ldr	r3, [pc, #336]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a4f      	ldr	r2, [pc, #316]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e8:	23c0      	movs	r3, #192	; 0xc0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f8:	2302      	movs	r3, #2
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002100:	4619      	mov	r1, r3
 8002102:	4846      	ldr	r0, [pc, #280]	; (800221c <HAL_TIM_MspPostInit+0x220>)
 8002104:	f002 fe44 	bl	8004d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002108:	2303      	movs	r3, #3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002118:	2302      	movs	r3, #2
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	4840      	ldr	r0, [pc, #256]	; (8002224 <HAL_TIM_MspPostInit+0x228>)
 8002124:	f002 fe34 	bl	8004d90 <HAL_GPIO_Init>
}
 8002128:	e06d      	b.n	8002206 <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM4)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <HAL_TIM_MspPostInit+0x22c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d11f      	bne.n	8002174 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a35      	ldr	r2, [pc, #212]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002162:	2302      	movs	r3, #2
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216a:	4619      	mov	r1, r3
 800216c:	482f      	ldr	r0, [pc, #188]	; (800222c <HAL_TIM_MspPostInit+0x230>)
 800216e:	f002 fe0f 	bl	8004d90 <HAL_GPIO_Init>
}
 8002172:	e048      	b.n	8002206 <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM8)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_TIM_MspPostInit+0x234>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d11f      	bne.n	80021be <HAL_TIM_MspPostInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a23      	ldr	r2, [pc, #140]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800219a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021ac:	2303      	movs	r3, #3
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b4:	4619      	mov	r1, r3
 80021b6:	481f      	ldr	r0, [pc, #124]	; (8002234 <HAL_TIM_MspPostInit+0x238>)
 80021b8:	f002 fdea 	bl	8004d90 <HAL_GPIO_Init>
}
 80021bc:	e023      	b.n	8002206 <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM12)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_TIM_MspPostInit+0x23c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d11e      	bne.n	8002206 <HAL_TIM_MspPostInit+0x20a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a10      	ldr	r2, [pc, #64]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_TIM_MspPostInit+0x218>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80021f6:	2309      	movs	r3, #9
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4808      	ldr	r0, [pc, #32]	; (8002224 <HAL_TIM_MspPostInit+0x228>)
 8002202:	f002 fdc5 	bl	8004d90 <HAL_GPIO_Init>
}
 8002206:	bf00      	nop
 8002208:	3738      	adds	r7, #56	; 0x38
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40023800 	.word	0x40023800
 8002218:	40021000 	.word	0x40021000
 800221c:	40020000 	.word	0x40020000
 8002220:	40000400 	.word	0x40000400
 8002224:	40020400 	.word	0x40020400
 8002228:	40000800 	.word	0x40000800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40010400 	.word	0x40010400
 8002234:	40020800 	.word	0x40020800
 8002238:	40001800 	.word	0x40001800

0800223c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_UART_MspInit+0xf0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d161      	bne.n	8002322 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_UART_MspInit+0xf4>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a32      	ldr	r2, [pc, #200]	; (8002330 <HAL_UART_MspInit+0xf4>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_UART_MspInit+0xf4>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <HAL_UART_MspInit+0xf4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <HAL_UART_MspInit+0xf4>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_UART_MspInit+0xf4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002296:	2360      	movs	r3, #96	; 0x60
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a6:	2307      	movs	r3, #7
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4820      	ldr	r0, [pc, #128]	; (8002334 <HAL_UART_MspInit+0xf8>)
 80022b2:	f002 fd6d 	bl	8004d90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022b8:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_UART_MspInit+0x100>)
 80022ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80022f6:	4810      	ldr	r0, [pc, #64]	; (8002338 <HAL_UART_MspInit+0xfc>)
 80022f8:	f002 f948 	bl	800458c <HAL_DMA_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002302:	f7ff fc9d 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_UART_MspInit+0xfc>)
 800230a:	635a      	str	r2, [r3, #52]	; 0x34
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_UART_MspInit+0xfc>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2105      	movs	r1, #5
 8002316:	2026      	movs	r0, #38	; 0x26
 8002318:	f002 f90e 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800231c:	2026      	movs	r0, #38	; 0x26
 800231e:	f002 f927 	bl	8004570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002322:	bf00      	nop
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40004400 	.word	0x40004400
 8002330:	40023800 	.word	0x40023800
 8002334:	40020c00 	.word	0x40020c00
 8002338:	20004bc4 	.word	0x20004bc4
 800233c:	400260a0 	.word	0x400260a0

08002340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	; 0x30
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	202d      	movs	r0, #45	; 0x2d
 8002356:	f002 f8ef 	bl	8004538 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800235a:	202d      	movs	r0, #45	; 0x2d
 800235c:	f002 f908 	bl	8004570 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_InitTick+0xa4>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_InitTick+0xa4>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_InitTick+0xa4>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800237c:	f107 0210 	add.w	r2, r7, #16
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fb2c 	bl	80059e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800238c:	f003 fb02 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8002390:	4603      	mov	r3, r0
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_InitTick+0xa8>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9b      	lsrs	r3, r3, #18
 80023a0:	3b01      	subs	r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_InitTick+0xac>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <HAL_InitTick+0xb0>)
 80023a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_InitTick+0xac>)
 80023ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_InitTick+0xac>)
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_InitTick+0xac>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_InitTick+0xac>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80023c4:	4809      	ldr	r0, [pc, #36]	; (80023ec <HAL_InitTick+0xac>)
 80023c6:	f003 fb3f 	bl	8005a48 <HAL_TIM_Base_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80023d0:	4806      	ldr	r0, [pc, #24]	; (80023ec <HAL_InitTick+0xac>)
 80023d2:	f003 fb89 	bl	8005ae8 <HAL_TIM_Base_Start_IT>
 80023d6:	4603      	mov	r3, r0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	431bde83 	.word	0x431bde83
 80023ec:	20004e20 	.word	0x20004e20
 80023f0:	40002000 	.word	0x40002000

080023f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <NMI_Handler+0x4>

080023fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <HardFault_Handler+0x4>

08002400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <MemManage_Handler+0x4>

08002406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <UsageFault_Handler+0x4>

08002412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <DMA1_Stream6_IRQHandler+0x10>)
 8002426:	f002 fa49 	bl	80048bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20004bc4 	.word	0x20004bc4

08002434 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <ADC_IRQHandler+0x10>)
 800243a:	f000 fc14 	bl	8002c66 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20004a4c 	.word	0x20004a4c

08002448 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800244e:	f003 fc14 	bl	8005c7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20004c9c 	.word	0x20004c9c

0800245c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <TIM2_IRQHandler+0x10>)
 8002462:	f003 fc0a 	bl	8005c7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20004d04 	.word	0x20004d04

08002470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
//	ReceivePacketUART(&huart2);

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <USART2_IRQHandler+0x34>)
 8002476:	f004 fb39 	bl	8006aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  ReceivePacketUART(&huart2);
 800247a:	480a      	ldr	r0, [pc, #40]	; (80024a4 <USART2_IRQHandler+0x34>)
 800247c:	f000 f860 	bl	8002540 <ReceivePacketUART>

  if (!(huart2.Instance->CR1 & USART_CR1_RXNEIE))
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <USART2_IRQHandler+0x34>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d107      	bne.n	800249e <USART2_IRQHandler+0x2e>
	huart2.Instance->CR1|= USART_CR1_RXNEIE;
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <USART2_IRQHandler+0x34>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <USART2_IRQHandler+0x34>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0220 	orr.w	r2, r2, #32
 800249c:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20004d50 	.word	0x20004d50

080024a8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024ac:	4803      	ldr	r0, [pc, #12]	; (80024bc <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80024ae:	f003 fbe4 	bl	8005c7a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80024b2:	4803      	ldr	r0, [pc, #12]	; (80024c0 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 80024b4:	f003 fbe1 	bl	8005c7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2000494c 	.word	0x2000494c
 80024c0:	20004e20 	.word	0x20004e20

080024c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <DMA2_Stream0_IRQHandler+0x10>)
 80024ca:	f002 f9f7 	bl	80048bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,RESET);
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //светодиод
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20004c30 	.word	0x20004c30

080024d8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <CAN2_TX_IRQHandler+0x10>)
 80024de:	f001 fd43 	bl	8003f68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20004a94 	.word	0x20004a94

080024ec <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <CAN2_RX0_IRQHandler+0x10>)
 80024f2:	f001 fd39 	bl	8003f68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20004a94 	.word	0x20004a94

08002500 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <CAN2_RX1_IRQHandler+0x10>)
 8002506:	f001 fd2f 	bl	8003f68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20004a94 	.word	0x20004a94

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <SystemInit+0x28>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a07      	ldr	r2, [pc, #28]	; (800253c <SystemInit+0x28>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <SystemInit+0x28>)
 800252a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800252e:	609a      	str	r2, [r3, #8]
#endif
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <ReceivePacketUART>:
void ReceivePacketUART(UART_HandleTypeDef *huart);
void ProcessUARTCmd(void);
void TrmDataPacketUART(UART_HandleTypeDef *huart);

void ReceivePacketUART(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	uint8_t Bt;



	if (huart->Instance->SR & USART_SR_RXNE) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d058      	beq.n	8002608 <ReceivePacketUART+0xc8>
		Bt = (uint8_t) huart->Instance->DR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	73fb      	strb	r3, [r7, #15]

		CntRxTimeOut = 500;
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <ReceivePacketUART+0xd0>)
 8002560:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002564:	801a      	strh	r2, [r3, #0]

		if (!GettingPacketRx_FL) {
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <ReceivePacketUART+0xd4>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d114      	bne.n	8002598 <ReceivePacketUART+0x58>
			if ((BtPrev_Rc == 0xff) && (Bt == 0xff)) {
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <ReceivePacketUART+0xd8>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2bff      	cmp	r3, #255	; 0xff
 8002574:	d10c      	bne.n	8002590 <ReceivePacketUART+0x50>
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2bff      	cmp	r3, #255	; 0xff
 800257a:	d109      	bne.n	8002590 <ReceivePacketUART+0x50>
				BtPrev_Rc = 0;
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <ReceivePacketUART+0xd8>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
				GettingPacketRx_FL = 1;
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <ReceivePacketUART+0xd4>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
				CntRec_Rc = 0;
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <ReceivePacketUART+0xdc>)
 800258a:	2200      	movs	r2, #0
 800258c:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 800258e:	e03b      	b.n	8002608 <ReceivePacketUART+0xc8>
				BtPrev_Rc = Bt;
 8002590:	4a21      	ldr	r2, [pc, #132]	; (8002618 <ReceivePacketUART+0xd8>)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	7013      	strb	r3, [r2, #0]
}
 8002596:	e037      	b.n	8002608 <ReceivePacketUART+0xc8>
			if (CntRec_Rc > (SIZE_OF_RECARRAY - 1))
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <ReceivePacketUART+0xdc>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	2bf9      	cmp	r3, #249	; 0xf9
 800259e:	d903      	bls.n	80025a8 <ReceivePacketUART+0x68>
				GettingPacketRx_FL = 0;
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <ReceivePacketUART+0xd4>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
}
 80025a6:	e02f      	b.n	8002608 <ReceivePacketUART+0xc8>
				RecArray[CntRec_Rc] = Bt;
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <ReceivePacketUART+0xdc>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <ReceivePacketUART+0xe0>)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	5453      	strb	r3, [r2, r1]
				CntRec_Rc++;
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <ReceivePacketUART+0xdc>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <ReceivePacketUART+0xdc>)
 80025be:	801a      	strh	r2, [r3, #0]
				if (CntRec_Rc > (RecArray[0] + 1)) {
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <ReceivePacketUART+0xdc>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <ReceivePacketUART+0xe0>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	429a      	cmp	r2, r3
 80025ce:	dd1b      	ble.n	8002608 <ReceivePacketUART+0xc8>
					GettingPacketRx_FL = 0;
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <ReceivePacketUART+0xd4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
						if (CalcCheckSumm(RecArray[0] + 1, RecArray)
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <ReceivePacketUART+0xe0>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	b29b      	uxth	r3, r3
 80025e0:	490f      	ldr	r1, [pc, #60]	; (8002620 <ReceivePacketUART+0xe0>)
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fa6a 	bl	8001abc <CalcCheckSumm>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4619      	mov	r1, r3
							!= RecArray[RecArray[0] + 1])
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <ReceivePacketUART+0xe0>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <ReceivePacketUART+0xe0>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
						if (CalcCheckSumm(RecArray[0] + 1, RecArray)
 80025f6:	4299      	cmp	r1, r3
 80025f8:	d001      	beq.n	80025fe <ReceivePacketUART+0xbe>
							asm("Nop");
 80025fa:	bf00      	nop
}
 80025fc:	e004      	b.n	8002608 <ReceivePacketUART+0xc8>
						PacketReceived_FL = 1;
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <ReceivePacketUART+0xe4>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
						ProcessUARTCmd();
 8002604:	f000 f810 	bl	8002628 <ProcessUARTCmd>
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20004e6e 	.word	0x20004e6e
 8002614:	20004e69 	.word	0x20004e69
 8002618:	20004e6a 	.word	0x20004e6a
 800261c:	20004e70 	.word	0x20004e70
 8002620:	20004e74 	.word	0x20004e74
 8002624:	20004e68 	.word	0x20004e68

08002628 <ProcessUARTCmd>:



void ProcessUARTCmd(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af02      	add	r7, sp, #8
uint8_t Cmd=RecArray[1];
 800262e:	4b9d      	ldr	r3, [pc, #628]	; (80028a4 <ProcessUARTCmd+0x27c>)
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	71fb      	strb	r3, [r7, #7]
uint8_t Byte;
int16_t PWM;

		if (!PacketReceived_FL)
 8002634:	4b9c      	ldr	r3, [pc, #624]	; (80028a8 <ProcessUARTCmd+0x280>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 812f 	beq.w	800289c <ProcessUARTCmd+0x274>
			return;

		PacketReceived_FL=0;
 800263e:	4b9a      	ldr	r3, [pc, #616]	; (80028a8 <ProcessUARTCmd+0x280>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]

		CntPacket++;
 8002644:	4b99      	ldr	r3, [pc, #612]	; (80028ac <ProcessUARTCmd+0x284>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	4b97      	ldr	r3, [pc, #604]	; (80028ac <ProcessUARTCmd+0x284>)
 800264e:	801a      	strh	r2, [r3, #0]


		switch (Cmd)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	3b01      	subs	r3, #1
 8002654:	2b10      	cmp	r3, #16
 8002656:	f200 8122 	bhi.w	800289e <ProcessUARTCmd+0x276>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <ProcessUARTCmd+0x38>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	080026a5 	.word	0x080026a5
 8002664:	080026bd 	.word	0x080026bd
 8002668:	080026d5 	.word	0x080026d5
 800266c:	080026ed 	.word	0x080026ed
 8002670:	08002705 	.word	0x08002705
 8002674:	0800271d 	.word	0x0800271d
 8002678:	08002735 	.word	0x08002735
 800267c:	0800274d 	.word	0x0800274d
 8002680:	08002765 	.word	0x08002765
 8002684:	0800277d 	.word	0x0800277d
 8002688:	080027a1 	.word	0x080027a1
 800268c:	080027c5 	.word	0x080027c5
 8002690:	080027e9 	.word	0x080027e9
 8002694:	0800280d 	.word	0x0800280d
 8002698:	08002831 	.word	0x08002831
 800269c:	08002855 	.word	0x08002855
 80026a0:	08002879 	.word	0x08002879
		{
		case SET_ADDR:
			RecArray[9]=3;
 80026a4:	4b7f      	ldr	r3, [pc, #508]	; (80028a4 <ProcessUARTCmd+0x27c>)
 80026a6:	2203      	movs	r2, #3
 80026a8:	725a      	strb	r2, [r3, #9]
		    Can_TxMessage(&hcan2, 0, SET_ADDR_CAN, 8, &RecArray[2]);
 80026aa:	4b81      	ldr	r3, [pc, #516]	; (80028b0 <ProcessUARTCmd+0x288>)
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2308      	movs	r3, #8
 80026b0:	22fe      	movs	r2, #254	; 0xfe
 80026b2:	2100      	movs	r1, #0
 80026b4:	487f      	ldr	r0, [pc, #508]	; (80028b4 <ProcessUARTCmd+0x28c>)
 80026b6:	f7fe f8fb 	bl	80008b0 <Can_TxMessage>
		break;
 80026ba:	e0f0      	b.n	800289e <ProcessUARTCmd+0x276>
		case CALIBR1:
			Byte=1;
 80026bc:	2301      	movs	r3, #1
 80026be:	70fb      	strb	r3, [r7, #3]
		    Can_TxMessage(&hcan2, 0, 0x100+TILT_SENSOR_ADDR1, 1, &Byte);
 80026c0:	1cfb      	adds	r3, r7, #3
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2301      	movs	r3, #1
 80026c6:	f240 1201 	movw	r2, #257	; 0x101
 80026ca:	2100      	movs	r1, #0
 80026cc:	4879      	ldr	r0, [pc, #484]	; (80028b4 <ProcessUARTCmd+0x28c>)
 80026ce:	f7fe f8ef 	bl	80008b0 <Can_TxMessage>
			break;
 80026d2:	e0e4      	b.n	800289e <ProcessUARTCmd+0x276>
		case CALIBR2:
			Byte=1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	70fb      	strb	r3, [r7, #3]
		    Can_TxMessage(&hcan2, 0, 0x100+TILT_SENSOR_ADDR2, 1, &Byte);
 80026d8:	1cfb      	adds	r3, r7, #3
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	f240 1203 	movw	r2, #259	; 0x103
 80026e2:	2100      	movs	r1, #0
 80026e4:	4873      	ldr	r0, [pc, #460]	; (80028b4 <ProcessUARTCmd+0x28c>)
 80026e6:	f7fe f8e3 	bl	80008b0 <Can_TxMessage>
			break;
 80026ea:	e0d8      	b.n	800289e <ProcessUARTCmd+0x276>
		case CALIBR3:
			Byte=1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	70fb      	strb	r3, [r7, #3]
		    Can_TxMessage(&hcan2, 0, 0x100+TILT_SENSOR_ADDR3, 1, &Byte);
 80026f0:	1cfb      	adds	r3, r7, #3
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2301      	movs	r3, #1
 80026f6:	f240 1205 	movw	r2, #261	; 0x105
 80026fa:	2100      	movs	r1, #0
 80026fc:	486d      	ldr	r0, [pc, #436]	; (80028b4 <ProcessUARTCmd+0x28c>)
 80026fe:	f7fe f8d7 	bl	80008b0 <Can_TxMessage>
			break;
 8002702:	e0cc      	b.n	800289e <ProcessUARTCmd+0x276>
		case CALIBR4:
			Byte=1;
 8002704:	2301      	movs	r3, #1
 8002706:	70fb      	strb	r3, [r7, #3]
		    Can_TxMessage(&hcan2, 0, 0x100+TILT_SENSOR_ADDR4, 1, &Byte);
 8002708:	1cfb      	adds	r3, r7, #3
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2301      	movs	r3, #1
 800270e:	f240 1207 	movw	r2, #263	; 0x107
 8002712:	2100      	movs	r1, #0
 8002714:	4867      	ldr	r0, [pc, #412]	; (80028b4 <ProcessUARTCmd+0x28c>)
 8002716:	f7fe f8cb 	bl	80008b0 <Can_TxMessage>
			break;
 800271a:	e0c0      	b.n	800289e <ProcessUARTCmd+0x276>
		case CALIBR5:
			Byte=1;
 800271c:	2301      	movs	r3, #1
 800271e:	70fb      	strb	r3, [r7, #3]
		    Can_TxMessage(&hcan2, 0, 0x100+TILT_SENSOR_ADDR5, 1, &Byte);
 8002720:	1cfb      	adds	r3, r7, #3
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	f240 1209 	movw	r2, #265	; 0x109
 800272a:	2100      	movs	r1, #0
 800272c:	4861      	ldr	r0, [pc, #388]	; (80028b4 <ProcessUARTCmd+0x28c>)
 800272e:	f7fe f8bf 	bl	80008b0 <Can_TxMessage>
			break;
 8002732:	e0b4      	b.n	800289e <ProcessUARTCmd+0x276>
		case CALIBR6:
			Byte=1;
 8002734:	2301      	movs	r3, #1
 8002736:	70fb      	strb	r3, [r7, #3]
		    Can_TxMessage(&hcan2, 0, 0x100+TILT_SENSOR_ADDR6, 1, &Byte);
 8002738:	1cfb      	adds	r3, r7, #3
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2301      	movs	r3, #1
 800273e:	f240 120b 	movw	r2, #267	; 0x10b
 8002742:	2100      	movs	r1, #0
 8002744:	485b      	ldr	r0, [pc, #364]	; (80028b4 <ProcessUARTCmd+0x28c>)
 8002746:	f7fe f8b3 	bl	80008b0 <Can_TxMessage>
			break;
 800274a:	e0a8      	b.n	800289e <ProcessUARTCmd+0x276>
		case CALIBR7:
			Byte=1;
 800274c:	2301      	movs	r3, #1
 800274e:	70fb      	strb	r3, [r7, #3]
		    Can_TxMessage(&hcan2, 0, 0x100+TILT_SENSOR_ADDR7, 1, &Byte);
 8002750:	1cfb      	adds	r3, r7, #3
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2301      	movs	r3, #1
 8002756:	f240 120d 	movw	r2, #269	; 0x10d
 800275a:	2100      	movs	r1, #0
 800275c:	4855      	ldr	r0, [pc, #340]	; (80028b4 <ProcessUARTCmd+0x28c>)
 800275e:	f7fe f8a7 	bl	80008b0 <Can_TxMessage>
			break;
 8002762:	e09c      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_KGYRO:
			RecArray[9]=4;
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <ProcessUARTCmd+0x27c>)
 8002766:	2204      	movs	r2, #4
 8002768:	725a      	strb	r2, [r3, #9]
		    Can_TxMessage(&hcan2, 0, SET_ADDR_CAN, 8, &RecArray[2]);
 800276a:	4b51      	ldr	r3, [pc, #324]	; (80028b0 <ProcessUARTCmd+0x288>)
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2308      	movs	r3, #8
 8002770:	22fe      	movs	r2, #254	; 0xfe
 8002772:	2100      	movs	r1, #0
 8002774:	484f      	ldr	r0, [pc, #316]	; (80028b4 <ProcessUARTCmd+0x28c>)
 8002776:	f7fe f89b 	bl	80008b0 <Can_TxMessage>
		break;
 800277a:	e090      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_PWM_Motor_L1:
			PWM=(RecArray[3]<<8)+RecArray[2];
 800277c:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <ProcessUARTCmd+0x27c>)
 800277e:	78db      	ldrb	r3, [r3, #3]
 8002780:	b29b      	uxth	r3, r3
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <ProcessUARTCmd+0x27c>)
 8002788:	789b      	ldrb	r3, [r3, #2]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4413      	add	r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	80bb      	strh	r3, [r7, #4]
			SetMotorPWM(PWM,MOTOR_L1);
 8002792:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd febb 	bl	8000514 <SetMotorPWM>
			break;
 800279e:	e07e      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_PWM_Motor_L2:
			PWM=(RecArray[3]<<8)+RecArray[2];
 80027a0:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <ProcessUARTCmd+0x27c>)
 80027a2:	78db      	ldrb	r3, [r3, #3]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <ProcessUARTCmd+0x27c>)
 80027ac:	789b      	ldrb	r3, [r3, #2]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	80bb      	strh	r3, [r7, #4]
			SetMotorPWM(PWM,MOTOR_L2);
 80027b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fea9 	bl	8000514 <SetMotorPWM>
			break;
 80027c2:	e06c      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_PWM_Motor_L3:
			PWM=(RecArray[3]<<8)+RecArray[2];
 80027c4:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <ProcessUARTCmd+0x27c>)
 80027c6:	78db      	ldrb	r3, [r3, #3]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <ProcessUARTCmd+0x27c>)
 80027d0:	789b      	ldrb	r3, [r3, #2]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	80bb      	strh	r3, [r7, #4]
			SetMotorPWM(PWM,MOTOR_L3);
 80027da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027de:	2103      	movs	r1, #3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fe97 	bl	8000514 <SetMotorPWM>
			break;
 80027e6:	e05a      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_PWM_Motor_L4:
			PWM=(RecArray[3]<<8)+RecArray[2];
 80027e8:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <ProcessUARTCmd+0x27c>)
 80027ea:	78db      	ldrb	r3, [r3, #3]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <ProcessUARTCmd+0x27c>)
 80027f4:	789b      	ldrb	r3, [r3, #2]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	80bb      	strh	r3, [r7, #4]
			SetMotorPWM(PWM,MOTOR_L4);
 80027fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002802:	2104      	movs	r1, #4
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fe85 	bl	8000514 <SetMotorPWM>
			break;
 800280a:	e048      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_PWM_Motor_R1:
			PWM=(RecArray[3]<<8)+RecArray[2];
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <ProcessUARTCmd+0x27c>)
 800280e:	78db      	ldrb	r3, [r3, #3]
 8002810:	b29b      	uxth	r3, r3
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <ProcessUARTCmd+0x27c>)
 8002818:	789b      	ldrb	r3, [r3, #2]
 800281a:	b29b      	uxth	r3, r3
 800281c:	4413      	add	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	80bb      	strh	r3, [r7, #4]
			SetMotorPWM(PWM,MOTOR_R1);
 8002822:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002826:	2105      	movs	r1, #5
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fe73 	bl	8000514 <SetMotorPWM>
			break;
 800282e:	e036      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_PWM_Motor_R2:
			PWM=(RecArray[3]<<8)+RecArray[2];
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <ProcessUARTCmd+0x27c>)
 8002832:	78db      	ldrb	r3, [r3, #3]
 8002834:	b29b      	uxth	r3, r3
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b29a      	uxth	r2, r3
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <ProcessUARTCmd+0x27c>)
 800283c:	789b      	ldrb	r3, [r3, #2]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b29b      	uxth	r3, r3
 8002844:	80bb      	strh	r3, [r7, #4]
			SetMotorPWM(PWM,MOTOR_R2);
 8002846:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800284a:	2106      	movs	r1, #6
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe61 	bl	8000514 <SetMotorPWM>
			break;
 8002852:	e024      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_PWM_Motor_R3:
			PWM=(RecArray[3]<<8)+RecArray[2];
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <ProcessUARTCmd+0x27c>)
 8002856:	78db      	ldrb	r3, [r3, #3]
 8002858:	b29b      	uxth	r3, r3
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <ProcessUARTCmd+0x27c>)
 8002860:	789b      	ldrb	r3, [r3, #2]
 8002862:	b29b      	uxth	r3, r3
 8002864:	4413      	add	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	80bb      	strh	r3, [r7, #4]
			SetMotorPWM(PWM,MOTOR_R3);
 800286a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800286e:	2107      	movs	r1, #7
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fe4f 	bl	8000514 <SetMotorPWM>
			break;
 8002876:	e012      	b.n	800289e <ProcessUARTCmd+0x276>
		case SET_PWM_Motor_R4:
			PWM=(RecArray[3]<<8)+RecArray[2];
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <ProcessUARTCmd+0x27c>)
 800287a:	78db      	ldrb	r3, [r3, #3]
 800287c:	b29b      	uxth	r3, r3
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <ProcessUARTCmd+0x27c>)
 8002884:	789b      	ldrb	r3, [r3, #2]
 8002886:	b29b      	uxth	r3, r3
 8002888:	4413      	add	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	80bb      	strh	r3, [r7, #4]
			SetMotorPWM(PWM,MOTOR_R4);
 800288e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002892:	2108      	movs	r1, #8
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe3d 	bl	8000514 <SetMotorPWM>
			break;
 800289a:	e000      	b.n	800289e <ProcessUARTCmd+0x276>
			return;
 800289c:	bf00      	nop




		}
}
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20004e74 	.word	0x20004e74
 80028a8:	20004e68 	.word	0x20004e68
 80028ac:	20004e6c 	.word	0x20004e6c
 80028b0:	20004e76 	.word	0x20004e76
 80028b4:	20004a94 	.word	0x20004a94

080028b8 <TrmDataPacketUART>:

void TrmDataPacketUART(UART_HandleTypeDef *huart)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	uint16_t Cnt=4;
 80028c0:	2304      	movs	r3, #4
 80028c2:	81fb      	strh	r3, [r7, #14]

	  UART2TransmittArray[0]=0xff;
 80028c4:	4b78      	ldr	r3, [pc, #480]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80028c6:	22ff      	movs	r2, #255	; 0xff
 80028c8:	701a      	strb	r2, [r3, #0]
	  UART2TransmittArray[1]=0xff;
 80028ca:	4b77      	ldr	r3, [pc, #476]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80028cc:	22ff      	movs	r2, #255	; 0xff
 80028ce:	705a      	strb	r2, [r3, #1]
	  UART2TransmittArray[3] = TRM_DATA_PACKET; //CMD
 80028d0:	4b75      	ldr	r3, [pc, #468]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	70da      	strb	r2, [r3, #3]



	  *(float*)&UART2TransmittArray[Cnt]=Tilt1X;
 80028d6:	89fb      	ldrh	r3, [r7, #14]
 80028d8:	4a73      	ldr	r2, [pc, #460]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80028da:	4413      	add	r3, r2
 80028dc:	4a73      	ldr	r2, [pc, #460]	; (8002aac <TrmDataPacketUART+0x1f4>)
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	3304      	adds	r3, #4
 80028e6:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Tilt1Y;
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	4a6f      	ldr	r2, [pc, #444]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80028ec:	4413      	add	r3, r2
 80028ee:	4a70      	ldr	r2, [pc, #448]	; (8002ab0 <TrmDataPacketUART+0x1f8>)
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	3304      	adds	r3, #4
 80028f8:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Gyro1;
 80028fa:	89fb      	ldrh	r3, [r7, #14]
 80028fc:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80028fe:	4413      	add	r3, r2
 8002900:	4a6c      	ldr	r2, [pc, #432]	; (8002ab4 <TrmDataPacketUART+0x1fc>)
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002906:	89fb      	ldrh	r3, [r7, #14]
 8002908:	3304      	adds	r3, #4
 800290a:	81fb      	strh	r3, [r7, #14]

	  *(float*)&UART2TransmittArray[Cnt]=Tilt2X;
 800290c:	89fb      	ldrh	r3, [r7, #14]
 800290e:	4a66      	ldr	r2, [pc, #408]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002910:	4413      	add	r3, r2
 8002912:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <TrmDataPacketUART+0x200>)
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002918:	89fb      	ldrh	r3, [r7, #14]
 800291a:	3304      	adds	r3, #4
 800291c:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Tilt2Y;
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002922:	4413      	add	r3, r2
 8002924:	4a65      	ldr	r2, [pc, #404]	; (8002abc <TrmDataPacketUART+0x204>)
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	3304      	adds	r3, #4
 800292e:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Gyro2;
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	4a5d      	ldr	r2, [pc, #372]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002934:	4413      	add	r3, r2
 8002936:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <TrmDataPacketUART+0x208>)
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 800293c:	89fb      	ldrh	r3, [r7, #14]
 800293e:	3304      	adds	r3, #4
 8002940:	81fb      	strh	r3, [r7, #14]

	  *(float*)&UART2TransmittArray[Cnt]=Tilt3X;
 8002942:	89fb      	ldrh	r3, [r7, #14]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002946:	4413      	add	r3, r2
 8002948:	4a5e      	ldr	r2, [pc, #376]	; (8002ac4 <TrmDataPacketUART+0x20c>)
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	3304      	adds	r3, #4
 8002952:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Tilt3Y;
 8002954:	89fb      	ldrh	r3, [r7, #14]
 8002956:	4a54      	ldr	r2, [pc, #336]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002958:	4413      	add	r3, r2
 800295a:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <TrmDataPacketUART+0x210>)
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	3304      	adds	r3, #4
 8002964:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Gyro3;
 8002966:	89fb      	ldrh	r3, [r7, #14]
 8002968:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 800296a:	4413      	add	r3, r2
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <TrmDataPacketUART+0x214>)
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	3304      	adds	r3, #4
 8002976:	81fb      	strh	r3, [r7, #14]

	  *(float*)&UART2TransmittArray[Cnt]=Tilt4X;
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 800297c:	4413      	add	r3, r2
 800297e:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <TrmDataPacketUART+0x218>)
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002984:	89fb      	ldrh	r3, [r7, #14]
 8002986:	3304      	adds	r3, #4
 8002988:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Tilt4Y;
 800298a:	89fb      	ldrh	r3, [r7, #14]
 800298c:	4a46      	ldr	r2, [pc, #280]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 800298e:	4413      	add	r3, r2
 8002990:	4a50      	ldr	r2, [pc, #320]	; (8002ad4 <TrmDataPacketUART+0x21c>)
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	3304      	adds	r3, #4
 800299a:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Gyro4;
 800299c:	89fb      	ldrh	r3, [r7, #14]
 800299e:	4a42      	ldr	r2, [pc, #264]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80029a0:	4413      	add	r3, r2
 80029a2:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <TrmDataPacketUART+0x220>)
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 80029a8:	89fb      	ldrh	r3, [r7, #14]
 80029aa:	3304      	adds	r3, #4
 80029ac:	81fb      	strh	r3, [r7, #14]

	  *(float*)&UART2TransmittArray[Cnt]=Tilt5X;
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	4a3d      	ldr	r2, [pc, #244]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80029b2:	4413      	add	r3, r2
 80029b4:	4a49      	ldr	r2, [pc, #292]	; (8002adc <TrmDataPacketUART+0x224>)
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	3304      	adds	r3, #4
 80029be:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Tilt5Y;
 80029c0:	89fb      	ldrh	r3, [r7, #14]
 80029c2:	4a39      	ldr	r2, [pc, #228]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80029c4:	4413      	add	r3, r2
 80029c6:	4a46      	ldr	r2, [pc, #280]	; (8002ae0 <TrmDataPacketUART+0x228>)
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 80029cc:	89fb      	ldrh	r3, [r7, #14]
 80029ce:	3304      	adds	r3, #4
 80029d0:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Gyro5;
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80029d6:	4413      	add	r3, r2
 80029d8:	4a42      	ldr	r2, [pc, #264]	; (8002ae4 <TrmDataPacketUART+0x22c>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	3304      	adds	r3, #4
 80029e2:	81fb      	strh	r3, [r7, #14]

	  *(float*)&UART2TransmittArray[Cnt]=Tilt6X;
 80029e4:	89fb      	ldrh	r3, [r7, #14]
 80029e6:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80029e8:	4413      	add	r3, r2
 80029ea:	4a3f      	ldr	r2, [pc, #252]	; (8002ae8 <TrmDataPacketUART+0x230>)
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	3304      	adds	r3, #4
 80029f4:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Tilt6Y;
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 80029fa:	4413      	add	r3, r2
 80029fc:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <TrmDataPacketUART+0x234>)
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	3304      	adds	r3, #4
 8002a06:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Gyro6;
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <TrmDataPacketUART+0x238>)
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002a14:	89fb      	ldrh	r3, [r7, #14]
 8002a16:	3304      	adds	r3, #4
 8002a18:	81fb      	strh	r3, [r7, #14]

	  *(float*)&UART2TransmittArray[Cnt]=Tilt7X;
 8002a1a:	89fb      	ldrh	r3, [r7, #14]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a34      	ldr	r2, [pc, #208]	; (8002af4 <TrmDataPacketUART+0x23c>)
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Tilt7Y;
 8002a2c:	89fb      	ldrh	r3, [r7, #14]
 8002a2e:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a30:	4413      	add	r3, r2
 8002a32:	4a31      	ldr	r2, [pc, #196]	; (8002af8 <TrmDataPacketUART+0x240>)
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002a38:	89fb      	ldrh	r3, [r7, #14]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	81fb      	strh	r3, [r7, #14]
	  *(float*)&UART2TransmittArray[Cnt]=Gyro7;
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a42:	4413      	add	r3, r2
 8002a44:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <TrmDataPacketUART+0x244>)
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	601a      	str	r2, [r3, #0]
	  Cnt=Cnt+sizeof(float);
 8002a4a:	89fb      	ldrh	r3, [r7, #14]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	81fb      	strh	r3, [r7, #14]

	  *(uint16_t*)&UART2TransmittArray[Cnt]=KGyro1;
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a54:	4413      	add	r3, r2
 8002a56:	4a2a      	ldr	r2, [pc, #168]	; (8002b00 <TrmDataPacketUART+0x248>)
 8002a58:	8812      	ldrh	r2, [r2, #0]
 8002a5a:	801a      	strh	r2, [r3, #0]
	  Cnt=Cnt+sizeof(uint16_t);
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	3302      	adds	r3, #2
 8002a60:	81fb      	strh	r3, [r7, #14]


	  UART2TransmittArray[2]=Cnt-3;
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3b03      	subs	r3, #3
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a6c:	709a      	strb	r2, [r3, #2]


      UART2TransmittArray[Cnt] = CalcCheckSumm(
	  UART2TransmittArray[2] + 1, &UART2TransmittArray[2]);
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a70:	789b      	ldrb	r3, [r3, #2]
 8002a72:	b29b      	uxth	r3, r3
      UART2TransmittArray[Cnt] = CalcCheckSumm(
 8002a74:	3301      	adds	r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	89fc      	ldrh	r4, [r7, #14]
 8002a7a:	4922      	ldr	r1, [pc, #136]	; (8002b04 <TrmDataPacketUART+0x24c>)
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f81d 	bl	8001abc <CalcCheckSumm>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a88:	551a      	strb	r2, [r3, r4]


	  HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
				UART2TransmittArray[2]+4);
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a8c:	789b      	ldrb	r3, [r3, #2]
 8002a8e:	b29b      	uxth	r3, r3
	  HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
 8002a90:	3304      	adds	r3, #4
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <TrmDataPacketUART+0x1f0>)
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f003 ffbb 	bl	8006a14 <HAL_UART_Transmit_DMA>

}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd90      	pop	{r4, r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20004abc 	.word	0x20004abc
 8002aac:	20004d4c 	.word	0x20004d4c
 8002ab0:	200049dc 	.word	0x200049dc
 8002ab4:	20004cec 	.word	0x20004cec
 8002ab8:	20004c2c 	.word	0x20004c2c
 8002abc:	20004c24 	.word	0x20004c24
 8002ac0:	20004bc0 	.word	0x20004bc0
 8002ac4:	200049ec 	.word	0x200049ec
 8002ac8:	20004c98 	.word	0x20004c98
 8002acc:	20004cf8 	.word	0x20004cf8
 8002ad0:	200049e4 	.word	0x200049e4
 8002ad4:	20004cfc 	.word	0x20004cfc
 8002ad8:	20004c94 	.word	0x20004c94
 8002adc:	20004d00 	.word	0x20004d00
 8002ae0:	20004a48 	.word	0x20004a48
 8002ae4:	20004c28 	.word	0x20004c28
 8002ae8:	20004940 	.word	0x20004940
 8002aec:	20004a40 	.word	0x20004a40
 8002af0:	20004cf0 	.word	0x20004cf0
 8002af4:	200049e0 	.word	0x200049e0
 8002af8:	20004cf4 	.word	0x20004cf4
 8002afc:	20004ddc 	.word	0x20004ddc
 8002b00:	20004a3c 	.word	0x20004a3c
 8002b04:	20004abe 	.word	0x20004abe

08002b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b0e:	e003      	b.n	8002b18 <LoopCopyDataInit>

08002b10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b16:	3104      	adds	r1, #4

08002b18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b18:	480b      	ldr	r0, [pc, #44]	; (8002b48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b20:	d3f6      	bcc.n	8002b10 <CopyDataInit>
  ldr  r2, =_sbss
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b24:	e002      	b.n	8002b2c <LoopFillZerobss>

08002b26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b28:	f842 3b04 	str.w	r3, [r2], #4

08002b2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b30:	d3f9      	bcc.n	8002b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b32:	f7ff fcef 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b36:	f008 f821 	bl	800ab7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b3a:	f7fe f859 	bl	8000bf0 <main>
  bx  lr    
 8002b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b44:	0800acfc 	.word	0x0800acfc
  ldr  r0, =_sdata
 8002b48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b4c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002b50:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002b54:	20004fb4 	.word	0x20004fb4

08002b58 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <CAN1_RX0_IRQHandler>
	...

08002b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <HAL_Init+0x40>)
 8002b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_Init+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <HAL_Init+0x40>)
 8002b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <HAL_Init+0x40>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b84:	2003      	movs	r0, #3
 8002b86:	f001 fccc 	bl	8004522 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7ff fbd8 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b90:	f7ff f85c 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023c00 	.word	0x40023c00

08002ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_IncTick+0x20>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_IncTick+0x24>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_IncTick+0x24>)
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000008 	.word	0x20000008
 8002bc4:	20004f70 	.word	0x20004f70

08002bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return uwTick;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <HAL_GetTick+0x14>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20004f70 	.word	0x20004f70

08002be0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e033      	b.n	8002c5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff f850 	bl	8001ca4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d118      	bne.n	8002c50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c26:	f023 0302 	bic.w	r3, r3, #2
 8002c2a:	f043 0202 	orr.w	r2, r3, #2
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fba8 	bl	8003388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c4e:	e001      	b.n	8002c54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d049      	beq.n	8002d3c <HAL_ADC_IRQHandler+0xd6>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d046      	beq.n	8002d3c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d12b      	bne.n	8002d2c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d127      	bne.n	8002d2c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d119      	bne.n	8002d2c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0220 	bic.w	r2, r2, #32
 8002d06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fe feeb 	bl	8001b08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0212 	mvn.w	r2, #18
 8002d3a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	2b80      	cmp	r3, #128	; 0x80
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d057      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x1b8>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d054      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d139      	bne.n	8002e0e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d12b      	bne.n	8002e0e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d124      	bne.n	8002e0e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11d      	bne.n	8002e0e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d119      	bne.n	8002e0e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d105      	bne.n	8002e0e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fc38 	bl	8003684 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 020c 	mvn.w	r2, #12
 8002e1c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d017      	beq.n	8002e80 <HAL_ADC_IRQHandler+0x21a>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d014      	beq.n	8002e80 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d10d      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f953 	bl	800311c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f06f 0201 	mvn.w	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ea0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x27a>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d012      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f06f 0220 	mvn.w	r2, #32
 8002ece:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f92d 	bl	8003130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f06f 0220 	mvn.w	r2, #32
 8002ede:	601a      	str	r2, [r3, #0]
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_Start_DMA+0x1e>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e0e9      	b.n	80030da <HAL_ADC_Start_DMA+0x1f2>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d018      	beq.n	8002f4e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f2c:	4b6d      	ldr	r3, [pc, #436]	; (80030e4 <HAL_ADC_Start_DMA+0x1fc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6d      	ldr	r2, [pc, #436]	; (80030e8 <HAL_ADC_Start_DMA+0x200>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0c9a      	lsrs	r2, r3, #18
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f40:	e002      	b.n	8002f48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5c:	d107      	bne.n	8002f6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 80a1 	bne.w	80030c0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbc:	d106      	bne.n	8002fcc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f023 0206 	bic.w	r2, r3, #6
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
 8002fca:	e002      	b.n	8002fd2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <HAL_ADC_Start_DMA+0x204>)
 8002fdc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4a43      	ldr	r2, [pc, #268]	; (80030f0 <HAL_ADC_Start_DMA+0x208>)
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	4a42      	ldr	r2, [pc, #264]	; (80030f4 <HAL_ADC_Start_DMA+0x20c>)
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	4a41      	ldr	r2, [pc, #260]	; (80030f8 <HAL_ADC_Start_DMA+0x210>)
 8002ff4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800300e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	334c      	adds	r3, #76	; 0x4c
 800302a:	4619      	mov	r1, r3
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f001 fb5a 	bl	80046e8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2b00      	cmp	r3, #0
 800303e:	d12a      	bne.n	8003096 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2d      	ldr	r2, [pc, #180]	; (80030fc <HAL_ADC_Start_DMA+0x214>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d015      	beq.n	8003076 <HAL_ADC_Start_DMA+0x18e>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <HAL_ADC_Start_DMA+0x218>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d105      	bne.n	8003060 <HAL_ADC_Start_DMA+0x178>
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <HAL_ADC_Start_DMA+0x204>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <HAL_ADC_Start_DMA+0x21c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d136      	bne.n	80030d8 <HAL_ADC_Start_DMA+0x1f0>
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_ADC_Start_DMA+0x204>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d130      	bne.n	80030d8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d129      	bne.n	80030d8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	e020      	b.n	80030d8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_ADC_Start_DMA+0x214>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d11b      	bne.n	80030d8 <HAL_ADC_Start_DMA+0x1f0>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d114      	bne.n	80030d8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	e00b      	b.n	80030d8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000000 	.word	0x20000000
 80030e8:	431bde83 	.word	0x431bde83
 80030ec:	40012300 	.word	0x40012300
 80030f0:	08003581 	.word	0x08003581
 80030f4:	0800363b 	.word	0x0800363b
 80030f8:	08003657 	.word	0x08003657
 80030fc:	40012000 	.word	0x40012000
 8003100:	40012100 	.word	0x40012100
 8003104:	40012200 	.word	0x40012200

08003108 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1c>
 800315c:	2302      	movs	r3, #2
 800315e:	e105      	b.n	800336c <HAL_ADC_ConfigChannel+0x228>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b09      	cmp	r3, #9
 800316e:	d925      	bls.n	80031bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68d9      	ldr	r1, [r3, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	3b1e      	subs	r3, #30
 8003186:	2207      	movs	r2, #7
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68d9      	ldr	r1, [r3, #12]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4403      	add	r3, r0
 80031ae:	3b1e      	subs	r3, #30
 80031b0:	409a      	lsls	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	e022      	b.n	8003202 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	2207      	movs	r2, #7
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4403      	add	r3, r0
 80031f8:	409a      	lsls	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b06      	cmp	r3, #6
 8003208:	d824      	bhi.n	8003254 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	3b05      	subs	r3, #5
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	400a      	ands	r2, r1
 800322a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3b05      	subs	r3, #5
 8003246:	fa00 f203 	lsl.w	r2, r0, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	635a      	str	r2, [r3, #52]	; 0x34
 8003252:	e04c      	b.n	80032ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d824      	bhi.n	80032a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	3b23      	subs	r3, #35	; 0x23
 800326e:	221f      	movs	r2, #31
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43da      	mvns	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	400a      	ands	r2, r1
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	3b23      	subs	r3, #35	; 0x23
 8003298:	fa00 f203 	lsl.w	r2, r0, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
 80032a4:	e023      	b.n	80032ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b41      	subs	r3, #65	; 0x41
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b41      	subs	r3, #65	; 0x41
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <HAL_ADC_ConfigChannel+0x234>)
 80032f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a21      	ldr	r2, [pc, #132]	; (800337c <HAL_ADC_ConfigChannel+0x238>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1cc>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b12      	cmp	r3, #18
 8003302:	d105      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a19      	ldr	r2, [pc, #100]	; (800337c <HAL_ADC_ConfigChannel+0x238>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d123      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x21e>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b10      	cmp	r3, #16
 8003320:	d003      	beq.n	800332a <HAL_ADC_ConfigChannel+0x1e6>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b11      	cmp	r3, #17
 8003328:	d11b      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b10      	cmp	r3, #16
 800333c:	d111      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_ADC_ConfigChannel+0x23c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a10      	ldr	r2, [pc, #64]	; (8003384 <HAL_ADC_ConfigChannel+0x240>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	0c9a      	lsrs	r2, r3, #18
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003354:	e002      	b.n	800335c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3b01      	subs	r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f9      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40012300 	.word	0x40012300
 800337c:	40012000 	.word	0x40012000
 8003380:	20000000 	.word	0x20000000
 8003384:	431bde83 	.word	0x431bde83

08003388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003390:	4b79      	ldr	r3, [pc, #484]	; (8003578 <ADC_Init+0x1f0>)
 8003392:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	021a      	lsls	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	4a58      	ldr	r2, [pc, #352]	; (800357c <ADC_Init+0x1f4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800342e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6899      	ldr	r1, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	e00f      	b.n	8003486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003484:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0202 	bic.w	r2, r2, #2
 8003494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7e1b      	ldrb	r3, [r3, #24]
 80034a0:	005a      	lsls	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01b      	beq.n	80034ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	3b01      	subs	r3, #1
 80034e0:	035a      	lsls	r2, r3, #13
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	e007      	b.n	80034fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	3b01      	subs	r3, #1
 8003518:	051a      	lsls	r2, r3, #20
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800353e:	025a      	lsls	r2, r3, #9
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	029a      	lsls	r2, r3, #10
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40012300 	.word	0x40012300
 800357c:	0f000001 	.word	0x0f000001

08003580 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003596:	2b00      	cmp	r3, #0
 8003598:	d13c      	bne.n	8003614 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d12b      	bne.n	800360c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d127      	bne.n	800360c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d119      	bne.n	800360c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0220 	bic.w	r2, r2, #32
 80035e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7fe fa7b 	bl	8001b08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003612:	e00e      	b.n	8003632 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fd85 	bl	8003130 <HAL_ADC_ErrorCallback>
}
 8003626:	e004      	b.n	8003632 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff fd5d 	bl	8003108 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0204 	orr.w	r2, r3, #4
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff fd5a 	bl	8003130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e0ed      	b.n	8003886 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fe fb8e 	bl	8001dd8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0202 	bic.w	r2, r2, #2
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036cc:	f7ff fa7c 	bl	8002bc8 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036d2:	e012      	b.n	80036fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036d4:	f7ff fa78 	bl	8002bc8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b0a      	cmp	r3, #10
 80036e0:	d90b      	bls.n	80036fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2205      	movs	r2, #5
 80036f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0c5      	b.n	8003886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003718:	f7ff fa56 	bl	8002bc8 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800371e:	e012      	b.n	8003746 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003720:	f7ff fa52 	bl	8002bc8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b0a      	cmp	r3, #10
 800372c:	d90b      	bls.n	8003746 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2205      	movs	r2, #5
 800373e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e09f      	b.n	8003886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0e5      	beq.n	8003720 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7e1b      	ldrb	r3, [r3, #24]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d108      	bne.n	800376e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e007      	b.n	800377e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800377c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7e5b      	ldrb	r3, [r3, #25]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d108      	bne.n	8003798 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e007      	b.n	80037a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7e9b      	ldrb	r3, [r3, #26]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d108      	bne.n	80037c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0220 	orr.w	r2, r2, #32
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e007      	b.n	80037d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0220 	bic.w	r2, r2, #32
 80037d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7edb      	ldrb	r3, [r3, #27]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0210 	bic.w	r2, r2, #16
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e007      	b.n	80037fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0210 	orr.w	r2, r2, #16
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7f1b      	ldrb	r3, [r3, #28]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d108      	bne.n	8003816 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0208 	orr.w	r2, r2, #8
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e007      	b.n	8003826 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0208 	bic.w	r2, r2, #8
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7f5b      	ldrb	r3, [r3, #29]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d108      	bne.n	8003840 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0204 	orr.w	r2, r2, #4
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e007      	b.n	8003850 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	ea42 0103 	orr.w	r1, r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d003      	beq.n	80038b6 <HAL_CAN_ConfigFilter+0x26>
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	f040 80be 	bne.w	8003a32 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80038b6:	4b65      	ldr	r3, [pc, #404]	; (8003a4c <HAL_CAN_ConfigFilter+0x1bc>)
 80038b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038c0:	f043 0201 	orr.w	r2, r3, #1
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	431a      	orrs	r2, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2201      	movs	r2, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43db      	mvns	r3, r3
 8003908:	401a      	ands	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d123      	bne.n	8003960 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	43db      	mvns	r3, r3
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800393a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3248      	adds	r2, #72	; 0x48
 8003940:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003954:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003956:	6979      	ldr	r1, [r7, #20]
 8003958:	3348      	adds	r3, #72	; 0x48
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d122      	bne.n	80039ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	431a      	orrs	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003988:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3248      	adds	r2, #72	; 0x48
 800398e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039a4:	6979      	ldr	r1, [r7, #20]
 80039a6:	3348      	adds	r3, #72	; 0x48
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	440b      	add	r3, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	401a      	ands	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039c8:	e007      	b.n	80039da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	401a      	ands	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80039f4:	e007      	b.n	8003a06 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a24:	f023 0201 	bic.w	r2, r3, #1
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e006      	b.n	8003a40 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40006400 	.word	0x40006400

08003a50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d12e      	bne.n	8003ac2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7ff f8a4 	bl	8002bc8 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a82:	e012      	b.n	8003aaa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a84:	f7ff f8a0 	bl	8002bc8 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b0a      	cmp	r3, #10
 8003a90:	d90b      	bls.n	8003aaa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2205      	movs	r2, #5
 8003aa2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e012      	b.n	8003ad0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e5      	bne.n	8003a84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e006      	b.n	8003ad0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	; 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003af6:	7ffb      	ldrb	r3, [r7, #31]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d003      	beq.n	8003b04 <HAL_CAN_AddTxMessage+0x2c>
 8003afc:	7ffb      	ldrb	r3, [r7, #31]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	f040 80b8 	bne.w	8003c74 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a0 	beq.w	8003c64 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	0e1b      	lsrs	r3, r3, #24
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d907      	bls.n	8003b44 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e09e      	b.n	8003c82 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003b44:	2201      	movs	r2, #1
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10d      	bne.n	8003b72 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b60:	68f9      	ldr	r1, [r7, #12]
 8003b62:	6809      	ldr	r1, [r1, #0]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3318      	adds	r3, #24
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	440b      	add	r3, r1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e00f      	b.n	8003b92 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b7c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b86:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	440b      	add	r3, r1
 8003b90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	3318      	adds	r3, #24
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	7d1b      	ldrb	r3, [r3, #20]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d111      	bne.n	8003bd2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	4413      	add	r3, r2
 8003bba:	3304      	adds	r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	6811      	ldr	r1, [r2, #0]
 8003bc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3318      	adds	r3, #24
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	440b      	add	r3, r1
 8003bce:	3304      	adds	r3, #4
 8003bd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	061a      	lsls	r2, r3, #24
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3306      	adds	r3, #6
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3305      	adds	r3, #5
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	4313      	orrs	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	3204      	adds	r2, #4
 8003bf2:	7812      	ldrb	r2, [r2, #0]
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6811      	ldr	r1, [r2, #0]
 8003bfa:	ea43 0200 	orr.w	r2, r3, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	440b      	add	r3, r1
 8003c04:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003c08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3303      	adds	r3, #3
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	061a      	lsls	r2, r3, #24
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3302      	adds	r3, #2
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	4313      	orrs	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	7812      	ldrb	r2, [r2, #0]
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	ea43 0200 	orr.w	r2, r3, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	440b      	add	r3, r1
 8003c3a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003c3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3318      	adds	r3, #24
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	4413      	add	r3, r2
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	6811      	ldr	r1, [r2, #0]
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	3318      	adds	r3, #24
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	440b      	add	r3, r1
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e00e      	b.n	8003c82 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e006      	b.n	8003c82 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
  }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	; 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d002      	beq.n	8003cae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003ca8:	7afb      	ldrb	r3, [r7, #11]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d11d      	bne.n	8003cea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003cea:	68fb      	ldr	r3, [r7, #12]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d0c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d003      	beq.n	8003d1c <HAL_CAN_GetRxMessage+0x24>
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	f040 80f3 	bne.w	8003f02 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10e      	bne.n	8003d40 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d116      	bne.n	8003d5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0e7      	b.n	8003f10 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0d8      	b.n	8003f10 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	331b      	adds	r3, #27
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	4413      	add	r3, r2
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0204 	and.w	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10c      	bne.n	8003d96 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	331b      	adds	r3, #27
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	4413      	add	r3, r2
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	0d5b      	lsrs	r3, r3, #21
 8003d8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e00b      	b.n	8003dae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	331b      	adds	r3, #27
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	4413      	add	r3, r2
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	331b      	adds	r3, #27
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	4413      	add	r3, r2
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0202 	and.w	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	331b      	adds	r3, #27
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4413      	add	r3, r2
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 020f 	and.w	r2, r3, #15
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	331b      	adds	r3, #27
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	4413      	add	r3, r2
 8003de8:	3304      	adds	r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	331b      	adds	r3, #27
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	0a1a      	lsrs	r2, r3, #8
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	0c1a      	lsrs	r2, r3, #16
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	3302      	adds	r3, #2
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	0e1a      	lsrs	r2, r3, #24
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	3303      	adds	r3, #3
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	3304      	adds	r3, #4
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0a1a      	lsrs	r2, r3, #8
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	3305      	adds	r3, #5
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	0c1a      	lsrs	r2, r3, #16
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	3306      	adds	r3, #6
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e1a      	lsrs	r2, r3, #24
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	3307      	adds	r3, #7
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d108      	bne.n	8003eee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0220 	orr.w	r2, r2, #32
 8003eea:	60da      	str	r2, [r3, #12]
 8003eec:	e007      	b.n	8003efe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0220 	orr.w	r2, r2, #32
 8003efc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e006      	b.n	8003f10 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d002      	beq.n	8003f3a <HAL_CAN_ActivateNotification+0x1e>
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d109      	bne.n	8003f4e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6959      	ldr	r1, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e006      	b.n	8003f5c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07c      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d023      	beq.n	8004000 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f983 	bl	80042d6 <HAL_CAN_TxMailbox0CompleteCallback>
 8003fd0:	e016      	b.n	8004000 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe4:	e00c      	b.n	8004000 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff8:	e002      	b.n	8004000 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f989 	bl	8004312 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d024      	beq.n	8004054 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004012:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f963 	bl	80042ea <HAL_CAN_TxMailbox1CompleteCallback>
 8004024:	e016      	b.n	8004054 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d004      	beq.n	800403a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	e00c      	b.n	8004054 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	e002      	b.n	8004054 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f969 	bl	8004326 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d024      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004066:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f943 	bl	80042fe <HAL_CAN_TxMailbox2CompleteCallback>
 8004078:	e016      	b.n	80040a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
 800408c:	e00c      	b.n	80040a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d004      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	e002      	b.n	80040a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f949 	bl	800433a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2210      	movs	r2, #16
 80040ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2208      	movs	r2, #8
 80040e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f930 	bl	800434e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fd10 	bl	8001b2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00c      	beq.n	8004130 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004126:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2210      	movs	r2, #16
 800412e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2208      	movs	r2, #8
 800414a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f912 	bl	8004376 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8f9 	bl	8004362 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d006      	beq.n	8004192 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2210      	movs	r2, #16
 800418a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f8fc 	bl	800438a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00b      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d006      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2208      	movs	r2, #8
 80041ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8f5 	bl	800439e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d07b      	beq.n	80042b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d072      	beq.n	80042ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	f043 0302 	orr.w	r3, r3, #2
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f043 0304 	orr.w	r3, r3, #4
 800421a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004222:	2b00      	cmp	r3, #0
 8004224:	d043      	beq.n	80042ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800422c:	2b00      	cmp	r3, #0
 800422e:	d03e      	beq.n	80042ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004236:	2b60      	cmp	r3, #96	; 0x60
 8004238:	d02b      	beq.n	8004292 <HAL_CAN_IRQHandler+0x32a>
 800423a:	2b60      	cmp	r3, #96	; 0x60
 800423c:	d82e      	bhi.n	800429c <HAL_CAN_IRQHandler+0x334>
 800423e:	2b50      	cmp	r3, #80	; 0x50
 8004240:	d022      	beq.n	8004288 <HAL_CAN_IRQHandler+0x320>
 8004242:	2b50      	cmp	r3, #80	; 0x50
 8004244:	d82a      	bhi.n	800429c <HAL_CAN_IRQHandler+0x334>
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d019      	beq.n	800427e <HAL_CAN_IRQHandler+0x316>
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d826      	bhi.n	800429c <HAL_CAN_IRQHandler+0x334>
 800424e:	2b30      	cmp	r3, #48	; 0x30
 8004250:	d010      	beq.n	8004274 <HAL_CAN_IRQHandler+0x30c>
 8004252:	2b30      	cmp	r3, #48	; 0x30
 8004254:	d822      	bhi.n	800429c <HAL_CAN_IRQHandler+0x334>
 8004256:	2b10      	cmp	r3, #16
 8004258:	d002      	beq.n	8004260 <HAL_CAN_IRQHandler+0x2f8>
 800425a:	2b20      	cmp	r3, #32
 800425c:	d005      	beq.n	800426a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800425e:	e01d      	b.n	800429c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004268:	e019      	b.n	800429e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	f043 0310 	orr.w	r3, r3, #16
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004272:	e014      	b.n	800429e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	f043 0320 	orr.w	r3, r3, #32
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800427c:	e00f      	b.n	800429e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004286:	e00a      	b.n	800429e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004290:	e005      	b.n	800429e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800429a:	e000      	b.n	800429e <HAL_CAN_IRQHandler+0x336>
            break;
 800429c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2204      	movs	r2, #4
 80042b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f872 	bl	80043b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80042ce:	bf00      	nop
 80042d0:	3728      	adds	r7, #40	; 0x28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <__NVIC_SetPriorityGrouping+0x44>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043e4:	4013      	ands	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043fa:	4a04      	ldr	r2, [pc, #16]	; (800440c <__NVIC_SetPriorityGrouping+0x44>)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	60d3      	str	r3, [r2, #12]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <__NVIC_GetPriorityGrouping+0x18>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	f003 0307 	and.w	r3, r3, #7
}
 800441e:	4618      	mov	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000ed00 	.word	0xe000ed00

0800442c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	2b00      	cmp	r3, #0
 800443c:	db0b      	blt.n	8004456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	4907      	ldr	r1, [pc, #28]	; (8004464 <__NVIC_EnableIRQ+0x38>)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2001      	movs	r0, #1
 800444e:	fa00 f202 	lsl.w	r2, r0, r2
 8004452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	e000e100 	.word	0xe000e100

08004468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004478:	2b00      	cmp	r3, #0
 800447a:	db0a      	blt.n	8004492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	490c      	ldr	r1, [pc, #48]	; (80044b4 <__NVIC_SetPriority+0x4c>)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	0112      	lsls	r2, r2, #4
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	440b      	add	r3, r1
 800448c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004490:	e00a      	b.n	80044a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	4908      	ldr	r1, [pc, #32]	; (80044b8 <__NVIC_SetPriority+0x50>)
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	3b04      	subs	r3, #4
 80044a0:	0112      	lsls	r2, r2, #4
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	440b      	add	r3, r1
 80044a6:	761a      	strb	r2, [r3, #24]
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000e100 	.word	0xe000e100
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044bc:	b480      	push	{r7}
 80044be:	b089      	sub	sp, #36	; 0x24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f1c3 0307 	rsb	r3, r3, #7
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	bf28      	it	cs
 80044da:	2304      	movcs	r3, #4
 80044dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3304      	adds	r3, #4
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d902      	bls.n	80044ec <NVIC_EncodePriority+0x30>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3b03      	subs	r3, #3
 80044ea:	e000      	b.n	80044ee <NVIC_EncodePriority+0x32>
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43da      	mvns	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	401a      	ands	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004504:	f04f 31ff 	mov.w	r1, #4294967295
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	fa01 f303 	lsl.w	r3, r1, r3
 800450e:	43d9      	mvns	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	4313      	orrs	r3, r2
         );
}
 8004516:	4618      	mov	r0, r3
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff4c 	bl	80043c8 <__NVIC_SetPriorityGrouping>
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800454a:	f7ff ff61 	bl	8004410 <__NVIC_GetPriorityGrouping>
 800454e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	6978      	ldr	r0, [r7, #20]
 8004556:	f7ff ffb1 	bl	80044bc <NVIC_EncodePriority>
 800455a:	4602      	mov	r2, r0
 800455c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff80 	bl	8004468 <__NVIC_SetPriority>
}
 8004568:	bf00      	nop
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ff54 	bl	800442c <__NVIC_EnableIRQ>
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004598:	f7fe fb16 	bl	8002bc8 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e099      	b.n	80046dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c8:	e00f      	b.n	80045ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ca:	f7fe fafd 	bl	8002bc8 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d908      	bls.n	80045ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2203      	movs	r2, #3
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e078      	b.n	80046dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e8      	bne.n	80045ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <HAL_DMA_Init+0x158>)
 8004604:	4013      	ands	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004616:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800462e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b04      	cmp	r3, #4
 8004642:	d107      	bne.n	8004654 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	4313      	orrs	r3, r2
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0307 	bic.w	r3, r3, #7
 800466a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	2b04      	cmp	r3, #4
 800467c:	d117      	bne.n	80046ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00e      	beq.n	80046ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fb01 	bl	8004c98 <DMA_CheckFifoParam>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046aa:	2301      	movs	r3, #1
 80046ac:	e016      	b.n	80046dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fab8 	bl	8004c2c <DMA_CalcBaseAndBitshift>
 80046bc:	4603      	mov	r3, r0
 80046be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c4:	223f      	movs	r2, #63	; 0x3f
 80046c6:	409a      	lsls	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	f010803f 	.word	0xf010803f

080046e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_DMA_Start_IT+0x26>
 800470a:	2302      	movs	r3, #2
 800470c:	e040      	b.n	8004790 <HAL_DMA_Start_IT+0xa8>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d12f      	bne.n	8004782 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa4a 	bl	8004bd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	223f      	movs	r2, #63	; 0x3f
 8004742:	409a      	lsls	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0216 	orr.w	r2, r2, #22
 8004756:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0208 	orr.w	r2, r2, #8
 800476e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e005      	b.n	800478e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800478a:	2302      	movs	r3, #2
 800478c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047a6:	f7fe fa0f 	bl	8002bc8 <HAL_GetTick>
 80047aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d008      	beq.n	80047ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2280      	movs	r2, #128	; 0x80
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e052      	b.n	8004870 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0216 	bic.w	r2, r2, #22
 80047d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <HAL_DMA_Abort+0x62>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0208 	bic.w	r2, r2, #8
 8004808:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800481a:	e013      	b.n	8004844 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800481c:	f7fe f9d4 	bl	8002bc8 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b05      	cmp	r3, #5
 8004828:	d90c      	bls.n	8004844 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2203      	movs	r2, #3
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e015      	b.n	8004870 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e4      	bne.n	800481c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	223f      	movs	r2, #63	; 0x3f
 8004858:	409a      	lsls	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d004      	beq.n	8004896 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2280      	movs	r2, #128	; 0x80
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e00c      	b.n	80048b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2205      	movs	r2, #5
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048c8:	4b92      	ldr	r3, [pc, #584]	; (8004b14 <HAL_DMA_IRQHandler+0x258>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a92      	ldr	r2, [pc, #584]	; (8004b18 <HAL_DMA_IRQHandler+0x25c>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	0a9b      	lsrs	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	2208      	movs	r2, #8
 80048e8:	409a      	lsls	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01a      	beq.n	8004928 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d013      	beq.n	8004928 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0204 	bic.w	r2, r2, #4
 800490e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004914:	2208      	movs	r2, #8
 8004916:	409a      	lsls	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f043 0201 	orr.w	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	2201      	movs	r2, #1
 800492e:	409a      	lsls	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d012      	beq.n	800495e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	2201      	movs	r2, #1
 800494c:	409a      	lsls	r2, r3
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f043 0202 	orr.w	r2, r3, #2
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004962:	2204      	movs	r2, #4
 8004964:	409a      	lsls	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d012      	beq.n	8004994 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	2204      	movs	r2, #4
 8004982:	409a      	lsls	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f043 0204 	orr.w	r2, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	2210      	movs	r2, #16
 800499a:	409a      	lsls	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d043      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d03c      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	2210      	movs	r2, #16
 80049b8:	409a      	lsls	r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d018      	beq.n	80049fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d108      	bne.n	80049ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d024      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	4798      	blx	r3
 80049ea:	e01f      	b.n	8004a2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01b      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
 80049fc:	e016      	b.n	8004a2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d107      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0208 	bic.w	r2, r2, #8
 8004a1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a30:	2220      	movs	r2, #32
 8004a32:	409a      	lsls	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 808e 	beq.w	8004b5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8086 	beq.w	8004b5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a52:	2220      	movs	r2, #32
 8004a54:	409a      	lsls	r2, r3
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d136      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0216 	bic.w	r2, r2, #22
 8004a74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <HAL_DMA_IRQHandler+0x1da>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0208 	bic.w	r2, r2, #8
 8004aa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aaa:	223f      	movs	r2, #63	; 0x3f
 8004aac:	409a      	lsls	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d07d      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
        }
        return;
 8004ad2:	e078      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01c      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d108      	bne.n	8004b02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d030      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
 8004b00:	e02b      	b.n	8004b5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d027      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
 8004b12:	e022      	b.n	8004b5a <HAL_DMA_IRQHandler+0x29e>
 8004b14:	20000000 	.word	0x20000000
 8004b18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0210 	bic.w	r2, r2, #16
 8004b38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d032      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d022      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2205      	movs	r2, #5
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d307      	bcc.n	8004ba2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f2      	bne.n	8004b86 <HAL_DMA_IRQHandler+0x2ca>
 8004ba0:	e000      	b.n	8004ba4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ba2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
 8004bc4:	e000      	b.n	8004bc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004bc6:	bf00      	nop
    }
  }
}
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop

08004bd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d108      	bne.n	8004c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c0e:	e007      	b.n	8004c20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3b10      	subs	r3, #16
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <DMA_CalcBaseAndBitshift+0x64>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c46:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <DMA_CalcBaseAndBitshift+0x68>)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d909      	bls.n	8004c6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c6c:	e007      	b.n	8004c7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	aaaaaaab 	.word	0xaaaaaaab
 8004c94:	0800ace4 	.word	0x0800ace4

08004c98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11f      	bne.n	8004cf2 <DMA_CheckFifoParam+0x5a>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d856      	bhi.n	8004d66 <DMA_CheckFifoParam+0xce>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <DMA_CheckFifoParam+0x28>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004ce3 	.word	0x08004ce3
 8004cc8:	08004cd1 	.word	0x08004cd1
 8004ccc:	08004d67 	.word	0x08004d67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d046      	beq.n	8004d6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce0:	e043      	b.n	8004d6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cea:	d140      	bne.n	8004d6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf0:	e03d      	b.n	8004d6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfa:	d121      	bne.n	8004d40 <DMA_CheckFifoParam+0xa8>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d837      	bhi.n	8004d72 <DMA_CheckFifoParam+0xda>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <DMA_CheckFifoParam+0x70>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d1f 	.word	0x08004d1f
 8004d10:	08004d19 	.word	0x08004d19
 8004d14:	08004d31 	.word	0x08004d31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e030      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d025      	beq.n	8004d76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2e:	e022      	b.n	8004d76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d38:	d11f      	bne.n	8004d7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d3e:	e01c      	b.n	8004d7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d903      	bls.n	8004d4e <DMA_CheckFifoParam+0xb6>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d003      	beq.n	8004d54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d4c:	e018      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
      break;
 8004d52:	e015      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e00b      	b.n	8004d7e <DMA_CheckFifoParam+0xe6>
      break;
 8004d66:	bf00      	nop
 8004d68:	e00a      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e008      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e006      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d72:	bf00      	nop
 8004d74:	e004      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7e:	bf00      	nop
    }
  } 
  
  return status; 
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop

08004d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e16b      	b.n	8005084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dac:	2201      	movs	r2, #1
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	f040 815a 	bne.w	800507e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d005      	beq.n	8004de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d130      	bne.n	8004e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	2203      	movs	r2, #3
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e18:	2201      	movs	r2, #1
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 0201 	and.w	r2, r3, #1
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d017      	beq.n	8004e80 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d123      	bne.n	8004ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	08da      	lsrs	r2, r3, #3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3208      	adds	r2, #8
 8004e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	220f      	movs	r2, #15
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	08da      	lsrs	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3208      	adds	r2, #8
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	2203      	movs	r2, #3
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 0203 	and.w	r2, r3, #3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80b4 	beq.w	800507e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	4b60      	ldr	r3, [pc, #384]	; (800509c <HAL_GPIO_Init+0x30c>)
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	4a5f      	ldr	r2, [pc, #380]	; (800509c <HAL_GPIO_Init+0x30c>)
 8004f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f24:	6453      	str	r3, [r2, #68]	; 0x44
 8004f26:	4b5d      	ldr	r3, [pc, #372]	; (800509c <HAL_GPIO_Init+0x30c>)
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f32:	4a5b      	ldr	r2, [pc, #364]	; (80050a0 <HAL_GPIO_Init+0x310>)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	3302      	adds	r3, #2
 8004f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	220f      	movs	r2, #15
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a52      	ldr	r2, [pc, #328]	; (80050a4 <HAL_GPIO_Init+0x314>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02b      	beq.n	8004fb6 <HAL_GPIO_Init+0x226>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a51      	ldr	r2, [pc, #324]	; (80050a8 <HAL_GPIO_Init+0x318>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d025      	beq.n	8004fb2 <HAL_GPIO_Init+0x222>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a50      	ldr	r2, [pc, #320]	; (80050ac <HAL_GPIO_Init+0x31c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01f      	beq.n	8004fae <HAL_GPIO_Init+0x21e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a4f      	ldr	r2, [pc, #316]	; (80050b0 <HAL_GPIO_Init+0x320>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d019      	beq.n	8004faa <HAL_GPIO_Init+0x21a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a4e      	ldr	r2, [pc, #312]	; (80050b4 <HAL_GPIO_Init+0x324>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_GPIO_Init+0x216>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a4d      	ldr	r2, [pc, #308]	; (80050b8 <HAL_GPIO_Init+0x328>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00d      	beq.n	8004fa2 <HAL_GPIO_Init+0x212>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a4c      	ldr	r2, [pc, #304]	; (80050bc <HAL_GPIO_Init+0x32c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a4b      	ldr	r2, [pc, #300]	; (80050c0 <HAL_GPIO_Init+0x330>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <HAL_GPIO_Init+0x20a>
 8004f96:	2307      	movs	r3, #7
 8004f98:	e00e      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	e00c      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004f9e:	2306      	movs	r3, #6
 8004fa0:	e00a      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	e008      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	e006      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004faa:	2303      	movs	r3, #3
 8004fac:	e004      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e002      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	f002 0203 	and.w	r2, r2, #3
 8004fbe:	0092      	lsls	r2, r2, #2
 8004fc0:	4093      	lsls	r3, r2
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fc8:	4935      	ldr	r1, [pc, #212]	; (80050a0 <HAL_GPIO_Init+0x310>)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	3302      	adds	r3, #2
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fd6:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ffa:	4a32      	ldr	r2, [pc, #200]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005000:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005024:	4a27      	ldr	r2, [pc, #156]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800502a:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_GPIO_Init+0x334>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800504e:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005054:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005078:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <HAL_GPIO_Init+0x334>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	f67f ae90 	bls.w	8004dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	40013800 	.word	0x40013800
 80050a4:	40020000 	.word	0x40020000
 80050a8:	40020400 	.word	0x40020400
 80050ac:	40020800 	.word	0x40020800
 80050b0:	40020c00 	.word	0x40020c00
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40021400 	.word	0x40021400
 80050bc:	40021800 	.word	0x40021800
 80050c0:	40021c00 	.word	0x40021c00
 80050c4:	40013c00 	.word	0x40013c00

080050c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
 80050d4:	4613      	mov	r3, r2
 80050d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050d8:	787b      	ldrb	r3, [r7, #1]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050de:	887a      	ldrh	r2, [r7, #2]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050e4:	e003      	b.n	80050ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	041a      	lsls	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	619a      	str	r2, [r3, #24]
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e264      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d075      	beq.n	8005206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800511a:	4ba3      	ldr	r3, [pc, #652]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	2b04      	cmp	r3, #4
 8005124:	d00c      	beq.n	8005140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005126:	4ba0      	ldr	r3, [pc, #640]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800512e:	2b08      	cmp	r3, #8
 8005130:	d112      	bne.n	8005158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005132:	4b9d      	ldr	r3, [pc, #628]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800513e:	d10b      	bne.n	8005158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	4b99      	ldr	r3, [pc, #612]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d05b      	beq.n	8005204 <HAL_RCC_OscConfig+0x108>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d157      	bne.n	8005204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e23f      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005160:	d106      	bne.n	8005170 <HAL_RCC_OscConfig+0x74>
 8005162:	4b91      	ldr	r3, [pc, #580]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a90      	ldr	r2, [pc, #576]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e01d      	b.n	80051ac <HAL_RCC_OscConfig+0xb0>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005178:	d10c      	bne.n	8005194 <HAL_RCC_OscConfig+0x98>
 800517a:	4b8b      	ldr	r3, [pc, #556]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a8a      	ldr	r2, [pc, #552]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b88      	ldr	r3, [pc, #544]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a87      	ldr	r2, [pc, #540]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e00b      	b.n	80051ac <HAL_RCC_OscConfig+0xb0>
 8005194:	4b84      	ldr	r3, [pc, #528]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a83      	ldr	r2, [pc, #524]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800519a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	4b81      	ldr	r3, [pc, #516]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a80      	ldr	r2, [pc, #512]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 80051a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b4:	f7fd fd08 	bl	8002bc8 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051bc:	f7fd fd04 	bl	8002bc8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b64      	cmp	r3, #100	; 0x64
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e204      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ce:	4b76      	ldr	r3, [pc, #472]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0xc0>
 80051da:	e014      	b.n	8005206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fd fcf4 	bl	8002bc8 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fd fcf0 	bl	8002bc8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e1f0      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f6:	4b6c      	ldr	r3, [pc, #432]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0xe8>
 8005202:	e000      	b.n	8005206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d063      	beq.n	80052da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005212:	4b65      	ldr	r3, [pc, #404]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800521e:	4b62      	ldr	r3, [pc, #392]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005226:	2b08      	cmp	r3, #8
 8005228:	d11c      	bne.n	8005264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800522a:	4b5f      	ldr	r3, [pc, #380]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d116      	bne.n	8005264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005236:	4b5c      	ldr	r3, [pc, #368]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_RCC_OscConfig+0x152>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d001      	beq.n	800524e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e1c4      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524e:	4b56      	ldr	r3, [pc, #344]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4952      	ldr	r1, [pc, #328]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005262:	e03a      	b.n	80052da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d020      	beq.n	80052ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800526c:	4b4f      	ldr	r3, [pc, #316]	; (80053ac <HAL_RCC_OscConfig+0x2b0>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fd fca9 	bl	8002bc8 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800527a:	f7fd fca5 	bl	8002bc8 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e1a5      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528c:	4b46      	ldr	r3, [pc, #280]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005298:	4b43      	ldr	r3, [pc, #268]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4940      	ldr	r1, [pc, #256]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	600b      	str	r3, [r1, #0]
 80052ac:	e015      	b.n	80052da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ae:	4b3f      	ldr	r3, [pc, #252]	; (80053ac <HAL_RCC_OscConfig+0x2b0>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fd fc88 	bl	8002bc8 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052bc:	f7fd fc84 	bl	8002bc8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e184      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ce:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d030      	beq.n	8005348 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ee:	4b30      	ldr	r3, [pc, #192]	; (80053b0 <HAL_RCC_OscConfig+0x2b4>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f4:	f7fd fc68 	bl	8002bc8 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fc:	f7fd fc64 	bl	8002bc8 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e164      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0x200>
 800531a:	e015      	b.n	8005348 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800531c:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCC_OscConfig+0x2b4>)
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005322:	f7fd fc51 	bl	8002bc8 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800532a:	f7fd fc4d 	bl	8002bc8 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e14d      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800533c:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800533e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80a0 	beq.w	8005496 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005356:	2300      	movs	r3, #0
 8005358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	4a0e      	ldr	r2, [pc, #56]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005374:	6413      	str	r3, [r2, #64]	; 0x40
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <HAL_RCC_OscConfig+0x2ac>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_RCC_OscConfig+0x2b8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d121      	bne.n	80053d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005392:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <HAL_RCC_OscConfig+0x2b8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a07      	ldr	r2, [pc, #28]	; (80053b4 <HAL_RCC_OscConfig+0x2b8>)
 8005398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539e:	f7fd fc13 	bl	8002bc8 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a4:	e011      	b.n	80053ca <HAL_RCC_OscConfig+0x2ce>
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800
 80053ac:	42470000 	.word	0x42470000
 80053b0:	42470e80 	.word	0x42470e80
 80053b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b8:	f7fd fc06 	bl	8002bc8 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e106      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ca:	4b85      	ldr	r3, [pc, #532]	; (80055e0 <HAL_RCC_OscConfig+0x4e4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d106      	bne.n	80053ec <HAL_RCC_OscConfig+0x2f0>
 80053de:	4b81      	ldr	r3, [pc, #516]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	4a80      	ldr	r2, [pc, #512]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ea:	e01c      	b.n	8005426 <HAL_RCC_OscConfig+0x32a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d10c      	bne.n	800540e <HAL_RCC_OscConfig+0x312>
 80053f4:	4b7b      	ldr	r3, [pc, #492]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	4a7a      	ldr	r2, [pc, #488]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 80053fa:	f043 0304 	orr.w	r3, r3, #4
 80053fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005400:	4b78      	ldr	r3, [pc, #480]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 8005402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005404:	4a77      	ldr	r2, [pc, #476]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	6713      	str	r3, [r2, #112]	; 0x70
 800540c:	e00b      	b.n	8005426 <HAL_RCC_OscConfig+0x32a>
 800540e:	4b75      	ldr	r3, [pc, #468]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a74      	ldr	r2, [pc, #464]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	4b72      	ldr	r3, [pc, #456]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	4a71      	ldr	r2, [pc, #452]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 8005420:	f023 0304 	bic.w	r3, r3, #4
 8005424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d015      	beq.n	800545a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542e:	f7fd fbcb 	bl	8002bc8 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005434:	e00a      	b.n	800544c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fd fbc7 	bl	8002bc8 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e0c5      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544c:	4b65      	ldr	r3, [pc, #404]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ee      	beq.n	8005436 <HAL_RCC_OscConfig+0x33a>
 8005458:	e014      	b.n	8005484 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545a:	f7fd fbb5 	bl	8002bc8 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005460:	e00a      	b.n	8005478 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005462:	f7fd fbb1 	bl	8002bc8 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e0af      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005478:	4b5a      	ldr	r3, [pc, #360]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ee      	bne.n	8005462 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d105      	bne.n	8005496 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800548a:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	4a55      	ldr	r2, [pc, #340]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 8005490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005494:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 809b 	beq.w	80055d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054a0:	4b50      	ldr	r3, [pc, #320]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 030c 	and.w	r3, r3, #12
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d05c      	beq.n	8005566 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d141      	bne.n	8005538 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b4:	4b4c      	ldr	r3, [pc, #304]	; (80055e8 <HAL_RCC_OscConfig+0x4ec>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ba:	f7fd fb85 	bl	8002bc8 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fd fb81 	bl	8002bc8 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e081      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d4:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	019b      	lsls	r3, r3, #6
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	3b01      	subs	r3, #1
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	061b      	lsls	r3, r3, #24
 8005504:	4937      	ldr	r1, [pc, #220]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 8005506:	4313      	orrs	r3, r2
 8005508:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <HAL_RCC_OscConfig+0x4ec>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fd fb5a 	bl	8002bc8 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005518:	f7fd fb56 	bl	8002bc8 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e056      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552a:	4b2e      	ldr	r3, [pc, #184]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0x41c>
 8005536:	e04e      	b.n	80055d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005538:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <HAL_RCC_OscConfig+0x4ec>)
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553e:	f7fd fb43 	bl	8002bc8 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005546:	f7fd fb3f 	bl	8002bc8 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e03f      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005558:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <HAL_RCC_OscConfig+0x44a>
 8005564:	e037      	b.n	80055d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e032      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <HAL_RCC_OscConfig+0x4e8>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d028      	beq.n	80055d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800558a:	429a      	cmp	r2, r3
 800558c:	d121      	bne.n	80055d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d11a      	bne.n	80055d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d111      	bne.n	80055d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	3b01      	subs	r3, #1
 80055bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d001      	beq.n	80055d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40007000 	.word	0x40007000
 80055e4:	40023800 	.word	0x40023800
 80055e8:	42470060 	.word	0x42470060

080055ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0cc      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005600:	4b68      	ldr	r3, [pc, #416]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d90c      	bls.n	8005628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b65      	ldr	r3, [pc, #404]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005616:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0b8      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d020      	beq.n	8005676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005640:	4b59      	ldr	r3, [pc, #356]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4a58      	ldr	r2, [pc, #352]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800564a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005658:	4b53      	ldr	r3, [pc, #332]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4a52      	ldr	r2, [pc, #328]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005664:	4b50      	ldr	r3, [pc, #320]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	494d      	ldr	r1, [pc, #308]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d044      	beq.n	800570c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d119      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e07f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d003      	beq.n	80056aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d107      	bne.n	80056ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056aa:	4b3f      	ldr	r3, [pc, #252]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e06f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ba:	4b3b      	ldr	r3, [pc, #236]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e067      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ca:	4b37      	ldr	r3, [pc, #220]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 0203 	bic.w	r2, r3, #3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4934      	ldr	r1, [pc, #208]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056dc:	f7fd fa74 	bl	8002bc8 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e2:	e00a      	b.n	80056fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e4:	f7fd fa70 	bl	8002bc8 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e04f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fa:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 020c 	and.w	r2, r3, #12
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	429a      	cmp	r2, r3
 800570a:	d1eb      	bne.n	80056e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d20c      	bcs.n	8005734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571a:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005722:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e032      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4916      	ldr	r1, [pc, #88]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	490e      	ldr	r1, [pc, #56]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005772:	f000 f821 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 8005776:	4602      	mov	r2, r0
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	490a      	ldr	r1, [pc, #40]	; (80057ac <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	5ccb      	ldrb	r3, [r1, r3]
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <HAL_RCC_ClockConfig+0x1c4>)
 800578c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f7fc fdd4 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40023c00 	.word	0x40023c00
 80057a8:	40023800 	.word	0x40023800
 80057ac:	0800accc 	.word	0x0800accc
 80057b0:	20000000 	.word	0x20000000
 80057b4:	20000004 	.word	0x20000004

080057b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	2300      	movs	r3, #0
 80057ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057d0:	4b67      	ldr	r3, [pc, #412]	; (8005970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 030c 	and.w	r3, r3, #12
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d00d      	beq.n	80057f8 <HAL_RCC_GetSysClockFreq+0x40>
 80057dc:	2b08      	cmp	r3, #8
 80057de:	f200 80bd 	bhi.w	800595c <HAL_RCC_GetSysClockFreq+0x1a4>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_RCC_GetSysClockFreq+0x34>
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d003      	beq.n	80057f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ea:	e0b7      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057ec:	4b61      	ldr	r3, [pc, #388]	; (8005974 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057ee:	60bb      	str	r3, [r7, #8]
       break;
 80057f0:	e0b7      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057f2:	4b61      	ldr	r3, [pc, #388]	; (8005978 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80057f4:	60bb      	str	r3, [r7, #8]
      break;
 80057f6:	e0b4      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057f8:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005800:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005802:	4b5b      	ldr	r3, [pc, #364]	; (8005970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04d      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800580e:	4b58      	ldr	r3, [pc, #352]	; (8005970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	099b      	lsrs	r3, r3, #6
 8005814:	461a      	mov	r2, r3
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	ea02 0800 	and.w	r8, r2, r0
 8005826:	ea03 0901 	and.w	r9, r3, r1
 800582a:	4640      	mov	r0, r8
 800582c:	4649      	mov	r1, r9
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	014b      	lsls	r3, r1, #5
 8005838:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800583c:	0142      	lsls	r2, r0, #5
 800583e:	4610      	mov	r0, r2
 8005840:	4619      	mov	r1, r3
 8005842:	ebb0 0008 	subs.w	r0, r0, r8
 8005846:	eb61 0109 	sbc.w	r1, r1, r9
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	018b      	lsls	r3, r1, #6
 8005854:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005858:	0182      	lsls	r2, r0, #6
 800585a:	1a12      	subs	r2, r2, r0
 800585c:	eb63 0301 	sbc.w	r3, r3, r1
 8005860:	f04f 0000 	mov.w	r0, #0
 8005864:	f04f 0100 	mov.w	r1, #0
 8005868:	00d9      	lsls	r1, r3, #3
 800586a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800586e:	00d0      	lsls	r0, r2, #3
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	eb12 0208 	adds.w	r2, r2, r8
 8005878:	eb43 0309 	adc.w	r3, r3, r9
 800587c:	f04f 0000 	mov.w	r0, #0
 8005880:	f04f 0100 	mov.w	r1, #0
 8005884:	0259      	lsls	r1, r3, #9
 8005886:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800588a:	0250      	lsls	r0, r2, #9
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4610      	mov	r0, r2
 8005892:	4619      	mov	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	461a      	mov	r2, r3
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	f7fa fc98 	bl	80001d0 <__aeabi_uldivmod>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4613      	mov	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e04a      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058aa:	4b31      	ldr	r3, [pc, #196]	; (8005970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	099b      	lsrs	r3, r3, #6
 80058b0:	461a      	mov	r2, r3
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	ea02 0400 	and.w	r4, r2, r0
 80058c2:	ea03 0501 	and.w	r5, r3, r1
 80058c6:	4620      	mov	r0, r4
 80058c8:	4629      	mov	r1, r5
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	014b      	lsls	r3, r1, #5
 80058d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058d8:	0142      	lsls	r2, r0, #5
 80058da:	4610      	mov	r0, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	1b00      	subs	r0, r0, r4
 80058e0:	eb61 0105 	sbc.w	r1, r1, r5
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	018b      	lsls	r3, r1, #6
 80058ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058f2:	0182      	lsls	r2, r0, #6
 80058f4:	1a12      	subs	r2, r2, r0
 80058f6:	eb63 0301 	sbc.w	r3, r3, r1
 80058fa:	f04f 0000 	mov.w	r0, #0
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	00d9      	lsls	r1, r3, #3
 8005904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005908:	00d0      	lsls	r0, r2, #3
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	1912      	adds	r2, r2, r4
 8005910:	eb45 0303 	adc.w	r3, r5, r3
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f04f 0100 	mov.w	r1, #0
 800591c:	0299      	lsls	r1, r3, #10
 800591e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005922:	0290      	lsls	r0, r2, #10
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	461a      	mov	r2, r3
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	f7fa fc4c 	bl	80001d0 <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4613      	mov	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	3301      	adds	r3, #1
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	60bb      	str	r3, [r7, #8]
      break;
 800595a:	e002      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800595e:	60bb      	str	r3, [r7, #8]
      break;
 8005960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005962:	68bb      	ldr	r3, [r7, #8]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800596e:	bf00      	nop
 8005970:	40023800 	.word	0x40023800
 8005974:	00f42400 	.word	0x00f42400
 8005978:	007a1200 	.word	0x007a1200

0800597c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_RCC_GetHCLKFreq+0x14>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000000 	.word	0x20000000

08005994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005998:	f7ff fff0 	bl	800597c <HAL_RCC_GetHCLKFreq>
 800599c:	4602      	mov	r2, r0
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0a9b      	lsrs	r3, r3, #10
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	4903      	ldr	r1, [pc, #12]	; (80059b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059aa:	5ccb      	ldrb	r3, [r1, r3]
 80059ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40023800 	.word	0x40023800
 80059b8:	0800acdc 	.word	0x0800acdc

080059bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059c0:	f7ff ffdc 	bl	800597c <HAL_RCC_GetHCLKFreq>
 80059c4:	4602      	mov	r2, r0
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	0b5b      	lsrs	r3, r3, #13
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	4903      	ldr	r1, [pc, #12]	; (80059e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059d2:	5ccb      	ldrb	r3, [r1, r3]
 80059d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d8:	4618      	mov	r0, r3
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40023800 	.word	0x40023800
 80059e0:	0800acdc 	.word	0x0800acdc

080059e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	220f      	movs	r2, #15
 80059f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059f4:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <HAL_RCC_GetClockConfig+0x5c>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0203 	and.w	r2, r3, #3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <HAL_RCC_GetClockConfig+0x5c>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <HAL_RCC_GetClockConfig+0x5c>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <HAL_RCC_GetClockConfig+0x5c>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	08db      	lsrs	r3, r3, #3
 8005a1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a26:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <HAL_RCC_GetClockConfig+0x60>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0207 	and.w	r2, r3, #7
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	601a      	str	r2, [r3, #0]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	40023c00 	.word	0x40023c00

08005a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e041      	b.n	8005ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fc fa20 	bl	8001eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f000 fbaa 	bl	80061e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d001      	beq.n	8005b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e04e      	b.n	8005b9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a23      	ldr	r2, [pc, #140]	; (8005bac <HAL_TIM_Base_Start_IT+0xc4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d022      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x80>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2a:	d01d      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x80>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d018      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x80>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x80>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x80>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <HAL_TIM_Base_Start_IT+0xd4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x80>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x80>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d111      	bne.n	8005b8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d010      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8a:	e007      	b.n	8005b9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40001800 	.word	0x40001800

08005bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e041      	b.n	8005c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f839 	bl	8005c66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f000 faea 	bl	80061e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d122      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d11b      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0202 	mvn.w	r2, #2
 8005ca6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fa71 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005cc2:	e005      	b.n	8005cd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fa63 	bl	8006190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa74 	bl	80061b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d122      	bne.n	8005d2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d11b      	bne.n	8005d2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f06f 0204 	mvn.w	r2, #4
 8005cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa47 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005d16:	e005      	b.n	8005d24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fa39 	bl	8006190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fa4a 	bl	80061b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d122      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d11b      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0208 	mvn.w	r2, #8
 8005d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2204      	movs	r2, #4
 8005d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fa1d 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005d6a:	e005      	b.n	8005d78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fa0f 	bl	8006190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa20 	bl	80061b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d122      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d11b      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0210 	mvn.w	r2, #16
 8005da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2208      	movs	r2, #8
 8005da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f9f3 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005dbe:	e005      	b.n	8005dcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9e5 	bl	8006190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9f6 	bl	80061b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10e      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f06f 0201 	mvn.w	r2, #1
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fb fef5 	bl	8001be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e08:	2b80      	cmp	r3, #128	; 0x80
 8005e0a:	d10e      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b80      	cmp	r3, #128	; 0x80
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fd9d 	bl	8006964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d10e      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d107      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f9bb 	bl	80061cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d10e      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d107      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f06f 0220 	mvn.w	r2, #32
 8005e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fd67 	bl	8006950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e0ac      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	f200 809f 	bhi.w	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ef1 	.word	0x08005ef1
 8005ec0:	08005ff5 	.word	0x08005ff5
 8005ec4:	08005ff5 	.word	0x08005ff5
 8005ec8:	08005ff5 	.word	0x08005ff5
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005ff5 	.word	0x08005ff5
 8005ed4:	08005ff5 	.word	0x08005ff5
 8005ed8:	08005ff5 	.word	0x08005ff5
 8005edc:	08005f73 	.word	0x08005f73
 8005ee0:	08005ff5 	.word	0x08005ff5
 8005ee4:	08005ff5 	.word	0x08005ff5
 8005ee8:	08005ff5 	.word	0x08005ff5
 8005eec:	08005fb3 	.word	0x08005fb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fa12 	bl	8006320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0208 	orr.w	r2, r2, #8
 8005f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0204 	bic.w	r2, r2, #4
 8005f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6999      	ldr	r1, [r3, #24]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	619a      	str	r2, [r3, #24]
      break;
 8005f2e:	e062      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fa62 	bl	8006400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6999      	ldr	r1, [r3, #24]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	619a      	str	r2, [r3, #24]
      break;
 8005f70:	e041      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fab7 	bl	80064ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0208 	orr.w	r2, r2, #8
 8005f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69d9      	ldr	r1, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	61da      	str	r2, [r3, #28]
      break;
 8005fb0:	e021      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fb0b 	bl	80065d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69d9      	ldr	r1, [r3, #28]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	021a      	lsls	r2, r3, #8
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	61da      	str	r2, [r3, #28]
      break;
 8005ff2:	e000      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_TIM_ConfigClockSource+0x18>
 800601c:	2302      	movs	r3, #2
 800601e:	e0b3      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x180>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800603e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006046:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006058:	d03e      	beq.n	80060d8 <HAL_TIM_ConfigClockSource+0xd0>
 800605a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605e:	f200 8087 	bhi.w	8006170 <HAL_TIM_ConfigClockSource+0x168>
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006066:	f000 8085 	beq.w	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606e:	d87f      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x168>
 8006070:	2b70      	cmp	r3, #112	; 0x70
 8006072:	d01a      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0xa2>
 8006074:	2b70      	cmp	r3, #112	; 0x70
 8006076:	d87b      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x168>
 8006078:	2b60      	cmp	r3, #96	; 0x60
 800607a:	d050      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x116>
 800607c:	2b60      	cmp	r3, #96	; 0x60
 800607e:	d877      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x168>
 8006080:	2b50      	cmp	r3, #80	; 0x50
 8006082:	d03c      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0xf6>
 8006084:	2b50      	cmp	r3, #80	; 0x50
 8006086:	d873      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x168>
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d058      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x136>
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d86f      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x168>
 8006090:	2b30      	cmp	r3, #48	; 0x30
 8006092:	d064      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x156>
 8006094:	2b30      	cmp	r3, #48	; 0x30
 8006096:	d86b      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x168>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d060      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x156>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d867      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x168>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d05c      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x156>
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d05a      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80060a8:	e062      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6899      	ldr	r1, [r3, #8]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f000 fb5b 	bl	8006774 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	609a      	str	r2, [r3, #8]
      break;
 80060d6:	e04e      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	6899      	ldr	r1, [r3, #8]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f000 fb44 	bl	8006774 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060fa:	609a      	str	r2, [r3, #8]
      break;
 80060fc:	e03b      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6859      	ldr	r1, [r3, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	461a      	mov	r2, r3
 800610c:	f000 fab8 	bl	8006680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2150      	movs	r1, #80	; 0x50
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fb11 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 800611c:	e02b      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6859      	ldr	r1, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	461a      	mov	r2, r3
 800612c:	f000 fad7 	bl	80066de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2160      	movs	r1, #96	; 0x60
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fb01 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 800613c:	e01b      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	461a      	mov	r2, r3
 800614c:	f000 fa98 	bl	8006680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2140      	movs	r1, #64	; 0x40
 8006156:	4618      	mov	r0, r3
 8006158:	f000 faf1 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 800615c:	e00b      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f000 fae8 	bl	800673e <TIM_ITRx_SetConfig>
        break;
 800616e:	e002      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006170:	bf00      	nop
 8006172:	e000      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006174:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a40      	ldr	r2, [pc, #256]	; (80062f4 <TIM_Base_SetConfig+0x114>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d00f      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3d      	ldr	r2, [pc, #244]	; (80062f8 <TIM_Base_SetConfig+0x118>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00b      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3c      	ldr	r2, [pc, #240]	; (80062fc <TIM_Base_SetConfig+0x11c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d007      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3b      	ldr	r2, [pc, #236]	; (8006300 <TIM_Base_SetConfig+0x120>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a3a      	ldr	r2, [pc, #232]	; (8006304 <TIM_Base_SetConfig+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d108      	bne.n	8006232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2f      	ldr	r2, [pc, #188]	; (80062f4 <TIM_Base_SetConfig+0x114>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d027      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2c      	ldr	r2, [pc, #176]	; (80062f8 <TIM_Base_SetConfig+0x118>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d023      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2b      	ldr	r2, [pc, #172]	; (80062fc <TIM_Base_SetConfig+0x11c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d01f      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2a      	ldr	r2, [pc, #168]	; (8006300 <TIM_Base_SetConfig+0x120>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a29      	ldr	r2, [pc, #164]	; (8006304 <TIM_Base_SetConfig+0x124>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d017      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <TIM_Base_SetConfig+0x128>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a27      	ldr	r2, [pc, #156]	; (800630c <TIM_Base_SetConfig+0x12c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00f      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a26      	ldr	r2, [pc, #152]	; (8006310 <TIM_Base_SetConfig+0x130>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a25      	ldr	r2, [pc, #148]	; (8006314 <TIM_Base_SetConfig+0x134>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a24      	ldr	r2, [pc, #144]	; (8006318 <TIM_Base_SetConfig+0x138>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a23      	ldr	r2, [pc, #140]	; (800631c <TIM_Base_SetConfig+0x13c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d108      	bne.n	80062a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <TIM_Base_SetConfig+0x114>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_Base_SetConfig+0xf8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a0c      	ldr	r2, [pc, #48]	; (8006304 <TIM_Base_SetConfig+0x124>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d103      	bne.n	80062e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	615a      	str	r2, [r3, #20]
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40010400 	.word	0x40010400
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800
 8006314:	40001800 	.word	0x40001800
 8006318:	40001c00 	.word	0x40001c00
 800631c:	40002000 	.word	0x40002000

08006320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0302 	bic.w	r3, r3, #2
 8006368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a20      	ldr	r2, [pc, #128]	; (80063f8 <TIM_OC1_SetConfig+0xd8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_OC1_SetConfig+0x64>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a1f      	ldr	r2, [pc, #124]	; (80063fc <TIM_OC1_SetConfig+0xdc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d10c      	bne.n	800639e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0308 	bic.w	r3, r3, #8
 800638a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f023 0304 	bic.w	r3, r3, #4
 800639c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <TIM_OC1_SetConfig+0xd8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d003      	beq.n	80063ae <TIM_OC1_SetConfig+0x8e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a14      	ldr	r2, [pc, #80]	; (80063fc <TIM_OC1_SetConfig+0xdc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d111      	bne.n	80063d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40010400 	.word	0x40010400

08006400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f023 0210 	bic.w	r2, r3, #16
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a22      	ldr	r2, [pc, #136]	; (80064e4 <TIM_OC2_SetConfig+0xe4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_OC2_SetConfig+0x68>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a21      	ldr	r2, [pc, #132]	; (80064e8 <TIM_OC2_SetConfig+0xe8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d10d      	bne.n	8006484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800646e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <TIM_OC2_SetConfig+0xe4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC2_SetConfig+0x94>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <TIM_OC2_SetConfig+0xe8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d113      	bne.n	80064bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800649a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40010400 	.word	0x40010400

080064ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a21      	ldr	r2, [pc, #132]	; (80065cc <TIM_OC3_SetConfig+0xe0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <TIM_OC3_SetConfig+0x66>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <TIM_OC3_SetConfig+0xe4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10d      	bne.n	800656e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a16      	ldr	r2, [pc, #88]	; (80065cc <TIM_OC3_SetConfig+0xe0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_OC3_SetConfig+0x92>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <TIM_OC3_SetConfig+0xe4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d113      	bne.n	80065a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800658c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40010400 	.word	0x40010400

080065d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800661e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	031b      	lsls	r3, r3, #12
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a12      	ldr	r2, [pc, #72]	; (8006678 <TIM_OC4_SetConfig+0xa4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_OC4_SetConfig+0x68>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a11      	ldr	r2, [pc, #68]	; (800667c <TIM_OC4_SetConfig+0xa8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d109      	bne.n	8006650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	019b      	lsls	r3, r3, #6
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40010400 	.word	0x40010400

08006680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 030a 	bic.w	r3, r3, #10
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f023 0210 	bic.w	r2, r3, #16
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	031b      	lsls	r3, r3, #12
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800671a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	f043 0307 	orr.w	r3, r3, #7
 8006760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	609a      	str	r2, [r3, #8]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	021a      	lsls	r2, r3, #8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	431a      	orrs	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e05a      	b.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a21      	ldr	r2, [pc, #132]	; (8006890 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d022      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d01d      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d018      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1b      	ldr	r2, [pc, #108]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1a      	ldr	r2, [pc, #104]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00e      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a18      	ldr	r2, [pc, #96]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a17      	ldr	r2, [pc, #92]	; (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10c      	bne.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800685c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	4313      	orrs	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40010000 	.word	0x40010000
 8006894:	40000400 	.word	0x40000400
 8006898:	40000800 	.word	0x40000800
 800689c:	40000c00 	.word	0x40000c00
 80068a0:	40010400 	.word	0x40010400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40001800 	.word	0x40001800

080068ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e03d      	b.n	8006944 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e03f      	b.n	8006a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fb fc4c 	bl	800223c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2224      	movs	r2, #36	; 0x24
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fc43 	bl	8007248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d153      	bne.n	8006ad6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_UART_Transmit_DMA+0x26>
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e04c      	b.n	8006ad8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_UART_Transmit_DMA+0x38>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e045      	b.n	8006ad8 <HAL_UART_Transmit_DMA+0xc4>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	88fa      	ldrh	r2, [r7, #6]
 8006a5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	88fa      	ldrh	r2, [r7, #6]
 8006a64:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2221      	movs	r2, #33	; 0x21
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a78:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <HAL_UART_Transmit_DMA+0xcc>)
 8006a7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a80:	4a18      	ldr	r2, [pc, #96]	; (8006ae4 <HAL_UART_Transmit_DMA+0xd0>)
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a88:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <HAL_UART_Transmit_DMA+0xd4>)
 8006a8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a90:	2200      	movs	r2, #0
 8006a92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006a94:	f107 0308 	add.w	r3, r7, #8
 8006a98:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	f7fd fe1c 	bl	80046e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ab8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695a      	ldr	r2, [r3, #20]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ad0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e000      	b.n	8006ad8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006ad6:	2302      	movs	r3, #2
  }
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	08006e99 	.word	0x08006e99
 8006ae4:	08006eeb 	.word	0x08006eeb
 8006ae8:	08006f07 	.word	0x08006f07

08006aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10d      	bne.n	8006b3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <HAL_UART_IRQHandler+0x52>
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 faee 	bl	8007118 <UART_Receive_IT>
      return;
 8006b3c:	e17c      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 80b1 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x1bc>
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <HAL_UART_IRQHandler+0x70>
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80a6 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <HAL_UART_IRQHandler+0x90>
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	f043 0201 	orr.w	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <HAL_UART_IRQHandler+0xb0>
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	f043 0202 	orr.w	r2, r3, #2
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <HAL_UART_IRQHandler+0xd0>
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	f043 0204 	orr.w	r2, r3, #4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00f      	beq.n	8006be6 <HAL_UART_IRQHandler+0xfa>
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d104      	bne.n	8006bda <HAL_UART_IRQHandler+0xee>
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f043 0208 	orr.w	r2, r3, #8
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 811f 	beq.w	8006e2e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <HAL_UART_IRQHandler+0x11e>
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa87 	bl	8007118 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	bf0c      	ite	eq
 8006c18:	2301      	moveq	r3, #1
 8006c1a:	2300      	movne	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <HAL_UART_IRQHandler+0x146>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d031      	beq.n	8006c96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9c7 	bl	8006fc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d123      	bne.n	8006c8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d013      	beq.n	8006c86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	4a77      	ldr	r2, [pc, #476]	; (8006e40 <HAL_UART_IRQHandler+0x354>)
 8006c64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fd fe04 	bl	8004878 <HAL_DMA_Abort_IT>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c80:	4610      	mov	r0, r2
 8006c82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c84:	e00e      	b.n	8006ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8f0 	bl	8006e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8c:	e00a      	b.n	8006ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8ec 	bl	8006e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c94:	e006      	b.n	8006ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8e8 	bl	8006e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ca2:	e0c4      	b.n	8006e2e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca4:	bf00      	nop
    return;
 8006ca6:	e0c2      	b.n	8006e2e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	f040 80a2 	bne.w	8006df6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 809c 	beq.w	8006df6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8096 	beq.w	8006df6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d14f      	bne.n	8006d8e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006cf8:	8a3b      	ldrh	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8099 	beq.w	8006e32 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d04:	8a3a      	ldrh	r2, [r7, #16]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	f080 8093 	bcs.w	8006e32 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8a3a      	ldrh	r2, [r7, #16]
 8006d10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1c:	d02b      	beq.n	8006d76 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d2c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0210 	bic.w	r2, r2, #16
 8006d6a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fd fd11 	bl	8004798 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f87a 	bl	8006e80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d8c:	e051      	b.n	8006e32 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d047      	beq.n	8006e36 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006da6:	8a7b      	ldrh	r3, [r7, #18]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d044      	beq.n	8006e36 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dba:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0201 	bic.w	r2, r2, #1
 8006dca:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0210 	bic.w	r2, r2, #16
 8006de8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dea:	8a7b      	ldrh	r3, [r7, #18]
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f846 	bl	8006e80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006df4:	e01f      	b.n	8006e36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <HAL_UART_IRQHandler+0x326>
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f91c 	bl	8007048 <UART_Transmit_IT>
    return;
 8006e10:	e012      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00d      	beq.n	8006e38 <HAL_UART_IRQHandler+0x34c>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f95e 	bl	80070e8 <UART_EndTransmit_IT>
    return;
 8006e2c:	e004      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
    return;
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
      return;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
      return;
 8006e36:	bf00      	nop
  }
}
 8006e38:	3728      	adds	r7, #40	; 0x28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	08007021 	.word	0x08007021

08006e44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d113      	bne.n	8006edc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ec8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ed8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eda:	e002      	b.n	8006ee2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7fa fe37 	bl	8001b50 <HAL_UART_TxCpltCallback>
}
 8006ee2:	bf00      	nop
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff ffa3 	bl	8006e44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	2b80      	cmp	r3, #128	; 0x80
 8006f24:	bf0c      	ite	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	2300      	movne	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b21      	cmp	r3, #33	; 0x21
 8006f38:	d108      	bne.n	8006f4c <UART_DMAError+0x46>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f46:	68b8      	ldr	r0, [r7, #8]
 8006f48:	f000 f827 	bl	8006f9a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	bf0c      	ite	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	2300      	movne	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b22      	cmp	r3, #34	; 0x22
 8006f6c:	d108      	bne.n	8006f80 <UART_DMAError+0x7a>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f7a:	68b8      	ldr	r0, [r7, #8]
 8006f7c:	f000 f823 	bl	8006fc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	f043 0210 	orr.w	r2, r3, #16
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f8c:	68b8      	ldr	r0, [r7, #8]
 8006f8e:	f7ff ff6d 	bl	8006e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006fb0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fdc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695a      	ldr	r2, [r3, #20]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d107      	bne.n	8007006 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0210 	bic.w	r2, r2, #16
 8007004:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff ff16 	bl	8006e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b21      	cmp	r3, #33	; 0x21
 800705a:	d13e      	bne.n	80070da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007064:	d114      	bne.n	8007090 <UART_Transmit_IT+0x48>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d110      	bne.n	8007090 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007082:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	1c9a      	adds	r2, r3, #2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]
 800708e:	e008      	b.n	80070a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	1c59      	adds	r1, r3, #1
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6211      	str	r1, [r2, #32]
 800709a:	781a      	ldrb	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	4619      	mov	r1, r3
 80070b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10f      	bne.n	80070d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e000      	b.n	80070dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
  }
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7fa fd21 	bl	8001b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b22      	cmp	r3, #34	; 0x22
 800712a:	f040 8087 	bne.w	800723c <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007136:	d117      	bne.n	8007168 <UART_Receive_IT+0x50>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d113      	bne.n	8007168 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	b29a      	uxth	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007160:	1c9a      	adds	r2, r3, #2
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	629a      	str	r2, [r3, #40]	; 0x28
 8007166:	e026      	b.n	80071b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717a:	d007      	beq.n	800718c <UART_Receive_IT+0x74>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <UART_Receive_IT+0x82>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	e008      	b.n	80071ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29b      	uxth	r3, r3
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	4619      	mov	r1, r3
 80071c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d136      	bne.n	8007238 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0220 	bic.w	r2, r2, #32
 80071d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	2b01      	cmp	r3, #1
 8007208:	d10e      	bne.n	8007228 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0210 	bic.w	r2, r2, #16
 8007218:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff fe2d 	bl	8006e80 <HAL_UARTEx_RxEventCallback>
 8007226:	e002      	b.n	800722e <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff fe15 	bl	8006e58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e002      	b.n	800723e <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	e000      	b.n	800723e <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	b09f      	sub	sp, #124	; 0x7c
 800724e:	af00      	add	r7, sp, #0
 8007250:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800725c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725e:	68d9      	ldr	r1, [r3, #12]
 8007260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	ea40 0301 	orr.w	r3, r0, r1
 8007268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800726a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	431a      	orrs	r2, r3
 8007274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	431a      	orrs	r2, r3
 800727a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	4313      	orrs	r3, r2
 8007280:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800728c:	f021 010c 	bic.w	r1, r1, #12
 8007290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007296:	430b      	orrs	r3, r1
 8007298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800729a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a6:	6999      	ldr	r1, [r3, #24]
 80072a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	ea40 0301 	orr.w	r3, r0, r1
 80072b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4bc5      	ldr	r3, [pc, #788]	; (80075cc <UART_SetConfig+0x384>)
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d004      	beq.n	80072c6 <UART_SetConfig+0x7e>
 80072bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	4bc3      	ldr	r3, [pc, #780]	; (80075d0 <UART_SetConfig+0x388>)
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d103      	bne.n	80072ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072c6:	f7fe fb79 	bl	80059bc <HAL_RCC_GetPCLK2Freq>
 80072ca:	6778      	str	r0, [r7, #116]	; 0x74
 80072cc:	e002      	b.n	80072d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072ce:	f7fe fb61 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 80072d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072dc:	f040 80b6 	bne.w	800744c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e2:	461c      	mov	r4, r3
 80072e4:	f04f 0500 	mov.w	r5, #0
 80072e8:	4622      	mov	r2, r4
 80072ea:	462b      	mov	r3, r5
 80072ec:	1891      	adds	r1, r2, r2
 80072ee:	6439      	str	r1, [r7, #64]	; 0x40
 80072f0:	415b      	adcs	r3, r3
 80072f2:	647b      	str	r3, [r7, #68]	; 0x44
 80072f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072f8:	1912      	adds	r2, r2, r4
 80072fa:	eb45 0303 	adc.w	r3, r5, r3
 80072fe:	f04f 0000 	mov.w	r0, #0
 8007302:	f04f 0100 	mov.w	r1, #0
 8007306:	00d9      	lsls	r1, r3, #3
 8007308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800730c:	00d0      	lsls	r0, r2, #3
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	1911      	adds	r1, r2, r4
 8007314:	6639      	str	r1, [r7, #96]	; 0x60
 8007316:	416b      	adcs	r3, r5
 8007318:	667b      	str	r3, [r7, #100]	; 0x64
 800731a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	461a      	mov	r2, r3
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	1891      	adds	r1, r2, r2
 8007326:	63b9      	str	r1, [r7, #56]	; 0x38
 8007328:	415b      	adcs	r3, r3
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007330:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007334:	f7f8 ff4c 	bl	80001d0 <__aeabi_uldivmod>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4ba5      	ldr	r3, [pc, #660]	; (80075d4 <UART_SetConfig+0x38c>)
 800733e:	fba3 2302 	umull	r2, r3, r3, r2
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	011e      	lsls	r6, r3, #4
 8007346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007348:	461c      	mov	r4, r3
 800734a:	f04f 0500 	mov.w	r5, #0
 800734e:	4622      	mov	r2, r4
 8007350:	462b      	mov	r3, r5
 8007352:	1891      	adds	r1, r2, r2
 8007354:	6339      	str	r1, [r7, #48]	; 0x30
 8007356:	415b      	adcs	r3, r3
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
 800735a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800735e:	1912      	adds	r2, r2, r4
 8007360:	eb45 0303 	adc.w	r3, r5, r3
 8007364:	f04f 0000 	mov.w	r0, #0
 8007368:	f04f 0100 	mov.w	r1, #0
 800736c:	00d9      	lsls	r1, r3, #3
 800736e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007372:	00d0      	lsls	r0, r2, #3
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	1911      	adds	r1, r2, r4
 800737a:	65b9      	str	r1, [r7, #88]	; 0x58
 800737c:	416b      	adcs	r3, r5
 800737e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	461a      	mov	r2, r3
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	1891      	adds	r1, r2, r2
 800738c:	62b9      	str	r1, [r7, #40]	; 0x28
 800738e:	415b      	adcs	r3, r3
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007396:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800739a:	f7f8 ff19 	bl	80001d0 <__aeabi_uldivmod>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4b8c      	ldr	r3, [pc, #560]	; (80075d4 <UART_SetConfig+0x38c>)
 80073a4:	fba3 1302 	umull	r1, r3, r3, r2
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	2164      	movs	r1, #100	; 0x64
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	3332      	adds	r3, #50	; 0x32
 80073b6:	4a87      	ldr	r2, [pc, #540]	; (80075d4 <UART_SetConfig+0x38c>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073c4:	441e      	add	r6, r3
 80073c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c8:	4618      	mov	r0, r3
 80073ca:	f04f 0100 	mov.w	r1, #0
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	1894      	adds	r4, r2, r2
 80073d4:	623c      	str	r4, [r7, #32]
 80073d6:	415b      	adcs	r3, r3
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
 80073da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073de:	1812      	adds	r2, r2, r0
 80073e0:	eb41 0303 	adc.w	r3, r1, r3
 80073e4:	f04f 0400 	mov.w	r4, #0
 80073e8:	f04f 0500 	mov.w	r5, #0
 80073ec:	00dd      	lsls	r5, r3, #3
 80073ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073f2:	00d4      	lsls	r4, r2, #3
 80073f4:	4622      	mov	r2, r4
 80073f6:	462b      	mov	r3, r5
 80073f8:	1814      	adds	r4, r2, r0
 80073fa:	653c      	str	r4, [r7, #80]	; 0x50
 80073fc:	414b      	adcs	r3, r1
 80073fe:	657b      	str	r3, [r7, #84]	; 0x54
 8007400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	461a      	mov	r2, r3
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	1891      	adds	r1, r2, r2
 800740c:	61b9      	str	r1, [r7, #24]
 800740e:	415b      	adcs	r3, r3
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007416:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800741a:	f7f8 fed9 	bl	80001d0 <__aeabi_uldivmod>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4b6c      	ldr	r3, [pc, #432]	; (80075d4 <UART_SetConfig+0x38c>)
 8007424:	fba3 1302 	umull	r1, r3, r3, r2
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	2164      	movs	r1, #100	; 0x64
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	3332      	adds	r3, #50	; 0x32
 8007436:	4a67      	ldr	r2, [pc, #412]	; (80075d4 <UART_SetConfig+0x38c>)
 8007438:	fba2 2303 	umull	r2, r3, r2, r3
 800743c:	095b      	lsrs	r3, r3, #5
 800743e:	f003 0207 	and.w	r2, r3, #7
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4432      	add	r2, r6
 8007448:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800744a:	e0b9      	b.n	80075c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800744c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800744e:	461c      	mov	r4, r3
 8007450:	f04f 0500 	mov.w	r5, #0
 8007454:	4622      	mov	r2, r4
 8007456:	462b      	mov	r3, r5
 8007458:	1891      	adds	r1, r2, r2
 800745a:	6139      	str	r1, [r7, #16]
 800745c:	415b      	adcs	r3, r3
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007464:	1912      	adds	r2, r2, r4
 8007466:	eb45 0303 	adc.w	r3, r5, r3
 800746a:	f04f 0000 	mov.w	r0, #0
 800746e:	f04f 0100 	mov.w	r1, #0
 8007472:	00d9      	lsls	r1, r3, #3
 8007474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007478:	00d0      	lsls	r0, r2, #3
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	eb12 0804 	adds.w	r8, r2, r4
 8007482:	eb43 0905 	adc.w	r9, r3, r5
 8007486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4618      	mov	r0, r3
 800748c:	f04f 0100 	mov.w	r1, #0
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	008b      	lsls	r3, r1, #2
 800749a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800749e:	0082      	lsls	r2, r0, #2
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	f7f8 fe94 	bl	80001d0 <__aeabi_uldivmod>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4b49      	ldr	r3, [pc, #292]	; (80075d4 <UART_SetConfig+0x38c>)
 80074ae:	fba3 2302 	umull	r2, r3, r3, r2
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	011e      	lsls	r6, r3, #4
 80074b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b8:	4618      	mov	r0, r3
 80074ba:	f04f 0100 	mov.w	r1, #0
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	1894      	adds	r4, r2, r2
 80074c4:	60bc      	str	r4, [r7, #8]
 80074c6:	415b      	adcs	r3, r3
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074ce:	1812      	adds	r2, r2, r0
 80074d0:	eb41 0303 	adc.w	r3, r1, r3
 80074d4:	f04f 0400 	mov.w	r4, #0
 80074d8:	f04f 0500 	mov.w	r5, #0
 80074dc:	00dd      	lsls	r5, r3, #3
 80074de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074e2:	00d4      	lsls	r4, r2, #3
 80074e4:	4622      	mov	r2, r4
 80074e6:	462b      	mov	r3, r5
 80074e8:	1814      	adds	r4, r2, r0
 80074ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80074ec:	414b      	adcs	r3, r1
 80074ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f04f 0100 	mov.w	r1, #0
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	008b      	lsls	r3, r1, #2
 8007504:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007508:	0082      	lsls	r2, r0, #2
 800750a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800750e:	f7f8 fe5f 	bl	80001d0 <__aeabi_uldivmod>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4b2f      	ldr	r3, [pc, #188]	; (80075d4 <UART_SetConfig+0x38c>)
 8007518:	fba3 1302 	umull	r1, r3, r3, r2
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	2164      	movs	r1, #100	; 0x64
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	3332      	adds	r3, #50	; 0x32
 800752a:	4a2a      	ldr	r2, [pc, #168]	; (80075d4 <UART_SetConfig+0x38c>)
 800752c:	fba2 2303 	umull	r2, r3, r2, r3
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007536:	441e      	add	r6, r3
 8007538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800753a:	4618      	mov	r0, r3
 800753c:	f04f 0100 	mov.w	r1, #0
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	1894      	adds	r4, r2, r2
 8007546:	603c      	str	r4, [r7, #0]
 8007548:	415b      	adcs	r3, r3
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007550:	1812      	adds	r2, r2, r0
 8007552:	eb41 0303 	adc.w	r3, r1, r3
 8007556:	f04f 0400 	mov.w	r4, #0
 800755a:	f04f 0500 	mov.w	r5, #0
 800755e:	00dd      	lsls	r5, r3, #3
 8007560:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007564:	00d4      	lsls	r4, r2, #3
 8007566:	4622      	mov	r2, r4
 8007568:	462b      	mov	r3, r5
 800756a:	eb12 0a00 	adds.w	sl, r2, r0
 800756e:	eb43 0b01 	adc.w	fp, r3, r1
 8007572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	f04f 0100 	mov.w	r1, #0
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	008b      	lsls	r3, r1, #2
 8007586:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800758a:	0082      	lsls	r2, r0, #2
 800758c:	4650      	mov	r0, sl
 800758e:	4659      	mov	r1, fp
 8007590:	f7f8 fe1e 	bl	80001d0 <__aeabi_uldivmod>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4b0e      	ldr	r3, [pc, #56]	; (80075d4 <UART_SetConfig+0x38c>)
 800759a:	fba3 1302 	umull	r1, r3, r3, r2
 800759e:	095b      	lsrs	r3, r3, #5
 80075a0:	2164      	movs	r1, #100	; 0x64
 80075a2:	fb01 f303 	mul.w	r3, r1, r3
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	3332      	adds	r3, #50	; 0x32
 80075ac:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <UART_SetConfig+0x38c>)
 80075ae:	fba2 2303 	umull	r2, r3, r2, r3
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	f003 020f 	and.w	r2, r3, #15
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4432      	add	r2, r6
 80075be:	609a      	str	r2, [r3, #8]
}
 80075c0:	bf00      	nop
 80075c2:	377c      	adds	r7, #124	; 0x7c
 80075c4:	46bd      	mov	sp, r7
 80075c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ca:	bf00      	nop
 80075cc:	40011000 	.word	0x40011000
 80075d0:	40011400 	.word	0x40011400
 80075d4:	51eb851f 	.word	0x51eb851f

080075d8 <__NVIC_SetPriority>:
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	db0a      	blt.n	8007602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	490c      	ldr	r1, [pc, #48]	; (8007624 <__NVIC_SetPriority+0x4c>)
 80075f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075f6:	0112      	lsls	r2, r2, #4
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	440b      	add	r3, r1
 80075fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007600:	e00a      	b.n	8007618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	b2da      	uxtb	r2, r3
 8007606:	4908      	ldr	r1, [pc, #32]	; (8007628 <__NVIC_SetPriority+0x50>)
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	3b04      	subs	r3, #4
 8007610:	0112      	lsls	r2, r2, #4
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	440b      	add	r3, r1
 8007616:	761a      	strb	r2, [r3, #24]
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	e000e100 	.word	0xe000e100
 8007628:	e000ed00 	.word	0xe000ed00

0800762c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <SysTick_Handler+0x1c>)
 8007632:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007634:	f002 f93e 	bl	80098b4 <xTaskGetSchedulerState>
 8007638:	4603      	mov	r3, r0
 800763a:	2b01      	cmp	r3, #1
 800763c:	d001      	beq.n	8007642 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800763e:	f003 f823 	bl	800a688 <xPortSysTickHandler>
  }
}
 8007642:	bf00      	nop
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	e000e010 	.word	0xe000e010

0800764c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007650:	2100      	movs	r1, #0
 8007652:	f06f 0004 	mvn.w	r0, #4
 8007656:	f7ff ffbf 	bl	80075d8 <__NVIC_SetPriority>
#endif
}
 800765a:	bf00      	nop
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007666:	f3ef 8305 	mrs	r3, IPSR
 800766a:	603b      	str	r3, [r7, #0]
  return(result);
 800766c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007672:	f06f 0305 	mvn.w	r3, #5
 8007676:	607b      	str	r3, [r7, #4]
 8007678:	e00c      	b.n	8007694 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800767a:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <osKernelInitialize+0x44>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d105      	bne.n	800768e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007682:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <osKernelInitialize+0x44>)
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007688:	2300      	movs	r3, #0
 800768a:	607b      	str	r3, [r7, #4]
 800768c:	e002      	b.n	8007694 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800768e:	f04f 33ff 	mov.w	r3, #4294967295
 8007692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007694:	687b      	ldr	r3, [r7, #4]
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	2000002c 	.word	0x2000002c

080076a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ae:	f3ef 8305 	mrs	r3, IPSR
 80076b2:	603b      	str	r3, [r7, #0]
  return(result);
 80076b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80076ba:	f06f 0305 	mvn.w	r3, #5
 80076be:	607b      	str	r3, [r7, #4]
 80076c0:	e010      	b.n	80076e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076c2:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <osKernelStart+0x48>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d109      	bne.n	80076de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076ca:	f7ff ffbf 	bl	800764c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076ce:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <osKernelStart+0x48>)
 80076d0:	2202      	movs	r2, #2
 80076d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076d4:	f001 fca6 	bl	8009024 <vTaskStartScheduler>
      stat = osOK;
 80076d8:	2300      	movs	r3, #0
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	e002      	b.n	80076e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80076de:	f04f 33ff 	mov.w	r3, #4294967295
 80076e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076e4:	687b      	ldr	r3, [r7, #4]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	2000002c 	.word	0x2000002c

080076f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08e      	sub	sp, #56	; 0x38
 80076f8:	af04      	add	r7, sp, #16
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007704:	f3ef 8305 	mrs	r3, IPSR
 8007708:	617b      	str	r3, [r7, #20]
  return(result);
 800770a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800770c:	2b00      	cmp	r3, #0
 800770e:	d17e      	bne.n	800780e <osThreadNew+0x11a>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d07b      	beq.n	800780e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007716:	2380      	movs	r3, #128	; 0x80
 8007718:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800771a:	2318      	movs	r3, #24
 800771c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d045      	beq.n	80077ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <osThreadNew+0x48>
        name = attr->name;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <osThreadNew+0x6e>
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b38      	cmp	r3, #56	; 0x38
 8007754:	d805      	bhi.n	8007762 <osThreadNew+0x6e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <osThreadNew+0x72>
        return (NULL);
 8007762:	2300      	movs	r3, #0
 8007764:	e054      	b.n	8007810 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	089b      	lsrs	r3, r3, #2
 8007774:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00e      	beq.n	800779c <osThreadNew+0xa8>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	2b5b      	cmp	r3, #91	; 0x5b
 8007784:	d90a      	bls.n	800779c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800778a:	2b00      	cmp	r3, #0
 800778c:	d006      	beq.n	800779c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <osThreadNew+0xa8>
        mem = 1;
 8007796:	2301      	movs	r3, #1
 8007798:	61bb      	str	r3, [r7, #24]
 800779a:	e010      	b.n	80077be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10c      	bne.n	80077be <osThreadNew+0xca>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d108      	bne.n	80077be <osThreadNew+0xca>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <osThreadNew+0xca>
          mem = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61bb      	str	r3, [r7, #24]
 80077b8:	e001      	b.n	80077be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d110      	bne.n	80077e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077cc:	9202      	str	r2, [sp, #8]
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6a3a      	ldr	r2, [r7, #32]
 80077d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f001 fa4c 	bl	8008c78 <xTaskCreateStatic>
 80077e0:	4603      	mov	r3, r0
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	e013      	b.n	800780e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d110      	bne.n	800780e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f107 0310 	add.w	r3, r7, #16
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 fa97 	bl	8008d32 <xTaskCreate>
 8007804:	4603      	mov	r3, r0
 8007806:	2b01      	cmp	r3, #1
 8007808:	d001      	beq.n	800780e <osThreadNew+0x11a>
            hTask = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800780e:	693b      	ldr	r3, [r7, #16]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3728      	adds	r7, #40	; 0x28
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007820:	f3ef 8305 	mrs	r3, IPSR
 8007824:	60bb      	str	r3, [r7, #8]
  return(result);
 8007826:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <osDelay+0x1c>
    stat = osErrorISR;
 800782c:	f06f 0305 	mvn.w	r3, #5
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e007      	b.n	8007844 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <osDelay+0x2c>
      vTaskDelay(ticks);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fbbc 	bl	8008fbc <vTaskDelay>
    }
  }

  return (stat);
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800784e:	b580      	push	{r7, lr}
 8007850:	b08a      	sub	sp, #40	; 0x28
 8007852:	af02      	add	r7, sp, #8
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800785e:	f3ef 8305 	mrs	r3, IPSR
 8007862:	613b      	str	r3, [r7, #16]
  return(result);
 8007864:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007866:	2b00      	cmp	r3, #0
 8007868:	d175      	bne.n	8007956 <osSemaphoreNew+0x108>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d072      	beq.n	8007956 <osSemaphoreNew+0x108>
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	429a      	cmp	r2, r3
 8007876:	d86e      	bhi.n	8007956 <osSemaphoreNew+0x108>
    mem = -1;
 8007878:	f04f 33ff 	mov.w	r3, #4294967295
 800787c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d015      	beq.n	80078b0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d006      	beq.n	800789a <osSemaphoreNew+0x4c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	2b4f      	cmp	r3, #79	; 0x4f
 8007892:	d902      	bls.n	800789a <osSemaphoreNew+0x4c>
        mem = 1;
 8007894:	2301      	movs	r3, #1
 8007896:	61bb      	str	r3, [r7, #24]
 8007898:	e00c      	b.n	80078b4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d108      	bne.n	80078b4 <osSemaphoreNew+0x66>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <osSemaphoreNew+0x66>
          mem = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e001      	b.n	80078b4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d04c      	beq.n	8007956 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d128      	bne.n	8007914 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d10a      	bne.n	80078de <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2203      	movs	r2, #3
 80078ce:	9200      	str	r2, [sp, #0]
 80078d0:	2200      	movs	r2, #0
 80078d2:	2100      	movs	r1, #0
 80078d4:	2001      	movs	r0, #1
 80078d6:	f000 fa29 	bl	8007d2c <xQueueGenericCreateStatic>
 80078da:	61f8      	str	r0, [r7, #28]
 80078dc:	e005      	b.n	80078ea <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80078de:	2203      	movs	r2, #3
 80078e0:	2100      	movs	r1, #0
 80078e2:	2001      	movs	r0, #1
 80078e4:	f000 fa9a 	bl	8007e1c <xQueueGenericCreate>
 80078e8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d022      	beq.n	8007936 <osSemaphoreNew+0xe8>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d01f      	beq.n	8007936 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078f6:	2300      	movs	r3, #0
 80078f8:	2200      	movs	r2, #0
 80078fa:	2100      	movs	r1, #0
 80078fc:	69f8      	ldr	r0, [r7, #28]
 80078fe:	f000 fb55 	bl	8007fac <xQueueGenericSend>
 8007902:	4603      	mov	r3, r0
 8007904:	2b01      	cmp	r3, #1
 8007906:	d016      	beq.n	8007936 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007908:	69f8      	ldr	r0, [r7, #28]
 800790a:	f000 ffe1 	bl	80088d0 <vQueueDelete>
            hSemaphore = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	e010      	b.n	8007936 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d108      	bne.n	800792c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	461a      	mov	r2, r3
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fad7 	bl	8007ed6 <xQueueCreateCountingSemaphoreStatic>
 8007928:	61f8      	str	r0, [r7, #28]
 800792a:	e004      	b.n	8007936 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 fb08 	bl	8007f44 <xQueueCreateCountingSemaphore>
 8007934:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00c      	beq.n	8007956 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <osSemaphoreNew+0xfc>
          name = attr->name;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e001      	b.n	800794e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800794e:	6979      	ldr	r1, [r7, #20]
 8007950:	69f8      	ldr	r0, [r7, #28]
 8007952:	f001 f909 	bl	8008b68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007956:	69fb      	ldr	r3, [r7, #28]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d103      	bne.n	8007980 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007978:	f06f 0303 	mvn.w	r3, #3
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	e039      	b.n	80079f4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007980:	f3ef 8305 	mrs	r3, IPSR
 8007984:	60fb      	str	r3, [r7, #12]
  return(result);
 8007986:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007988:	2b00      	cmp	r3, #0
 800798a:	d022      	beq.n	80079d2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007992:	f06f 0303 	mvn.w	r3, #3
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e02c      	b.n	80079f4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800799e:	f107 0308 	add.w	r3, r7, #8
 80079a2:	461a      	mov	r2, r3
 80079a4:	2100      	movs	r1, #0
 80079a6:	6938      	ldr	r0, [r7, #16]
 80079a8:	f000 ff12 	bl	80087d0 <xQueueReceiveFromISR>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d003      	beq.n	80079ba <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80079b2:	f06f 0302 	mvn.w	r3, #2
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e01c      	b.n	80079f4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d019      	beq.n	80079f4 <osSemaphoreAcquire+0x94>
 80079c0:	4b0f      	ldr	r3, [pc, #60]	; (8007a00 <osSemaphoreAcquire+0xa0>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	e010      	b.n	80079f4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6938      	ldr	r0, [r7, #16]
 80079d6:	f000 fdef 	bl	80085b8 <xQueueSemaphoreTake>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d009      	beq.n	80079f4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80079e6:	f06f 0301 	mvn.w	r3, #1
 80079ea:	617b      	str	r3, [r7, #20]
 80079ec:	e002      	b.n	80079f4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80079ee:	f06f 0302 	mvn.w	r3, #2
 80079f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80079f4:	697b      	ldr	r3, [r7, #20]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	e000ed04 	.word	0xe000ed04

08007a04 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d103      	bne.n	8007a22 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007a1a:	f06f 0303 	mvn.w	r3, #3
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	e02c      	b.n	8007a7c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a22:	f3ef 8305 	mrs	r3, IPSR
 8007a26:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a28:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d01a      	beq.n	8007a64 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	4619      	mov	r1, r3
 8007a38:	6938      	ldr	r0, [r7, #16]
 8007a3a:	f000 fc50 	bl	80082de <xQueueGiveFromISR>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d003      	beq.n	8007a4c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007a44:	f06f 0302 	mvn.w	r3, #2
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	e017      	b.n	8007a7c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d014      	beq.n	8007a7c <osSemaphoreRelease+0x78>
 8007a52:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <osSemaphoreRelease+0x84>)
 8007a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	e00b      	b.n	8007a7c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a64:	2300      	movs	r3, #0
 8007a66:	2200      	movs	r2, #0
 8007a68:	2100      	movs	r1, #0
 8007a6a:	6938      	ldr	r0, [r7, #16]
 8007a6c:	f000 fa9e 	bl	8007fac <xQueueGenericSend>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d002      	beq.n	8007a7c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007a76:	f06f 0302 	mvn.w	r3, #2
 8007a7a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007a7c:	697b      	ldr	r3, [r7, #20]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a07      	ldr	r2, [pc, #28]	; (8007ab8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4a06      	ldr	r2, [pc, #24]	; (8007abc <vApplicationGetIdleTaskMemory+0x30>)
 8007aa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2280      	movs	r2, #128	; 0x80
 8007aa8:	601a      	str	r2, [r3, #0]
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20000030 	.word	0x20000030
 8007abc:	2000008c 	.word	0x2000008c

08007ac0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a07      	ldr	r2, [pc, #28]	; (8007aec <vApplicationGetTimerTaskMemory+0x2c>)
 8007ad0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <vApplicationGetTimerTaskMemory+0x30>)
 8007ad6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ade:	601a      	str	r2, [r3, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	2000028c 	.word	0x2000028c
 8007af0:	200002e8 	.word	0x200002e8

08007af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f103 0208 	add.w	r2, r3, #8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f103 0208 	add.w	r2, r3, #8
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f103 0208 	add.w	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bac:	d103      	bne.n	8007bb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e00c      	b.n	8007bd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	e002      	b.n	8007bc4 <vListInsert+0x2e>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d2f6      	bcs.n	8007bbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6892      	ldr	r2, [r2, #8]
 8007c1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6852      	ldr	r2, [r2, #4]
 8007c28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d103      	bne.n	8007c3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c86:	f002 fc6d 	bl	800a564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c92:	68f9      	ldr	r1, [r7, #12]
 8007c94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c96:	fb01 f303 	mul.w	r3, r1, r3
 8007c9a:	441a      	add	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	68f9      	ldr	r1, [r7, #12]
 8007cba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	441a      	add	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	22ff      	movs	r2, #255	; 0xff
 8007cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	22ff      	movs	r2, #255	; 0xff
 8007cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d114      	bne.n	8007d06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01a      	beq.n	8007d1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3310      	adds	r3, #16
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f001 fc25 	bl	8009538 <xTaskRemoveFromEventList>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d012      	beq.n	8007d1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <xQueueGenericReset+0xcc>)
 8007cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	e009      	b.n	8007d1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3310      	adds	r3, #16
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fef2 	bl	8007af4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3324      	adds	r3, #36	; 0x24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff feed 	bl	8007af4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d1a:	f002 fc53 	bl	800a5c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d1e:	2301      	movs	r3, #1
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08e      	sub	sp, #56	; 0x38
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <xQueueGenericCreateStatic+0x52>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <xQueueGenericCreateStatic+0x56>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <xQueueGenericCreateStatic+0x58>
 8007d82:	2300      	movs	r3, #0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	623b      	str	r3, [r7, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <xQueueGenericCreateStatic+0x7e>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <xQueueGenericCreateStatic+0x82>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <xQueueGenericCreateStatic+0x84>
 8007dae:	2300      	movs	r3, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	61fb      	str	r3, [r7, #28]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007dca:	2350      	movs	r3, #80	; 0x50
 8007dcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b50      	cmp	r3, #80	; 0x50
 8007dd2:	d00a      	beq.n	8007dea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	61bb      	str	r3, [r7, #24]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007dea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00d      	beq.n	8007e12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4613      	mov	r3, r2
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f83f 	bl	8007e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3730      	adds	r7, #48	; 0x30
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4613      	mov	r3, r2
 8007e28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	613b      	str	r3, [r7, #16]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	3350      	adds	r3, #80	; 0x50
 8007e54:	4618      	mov	r0, r3
 8007e56:	f002 fca7 	bl	800a7a8 <pvPortMalloc>
 8007e5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d011      	beq.n	8007e86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	3350      	adds	r3, #80	; 0x50
 8007e6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e74:	79fa      	ldrb	r2, [r7, #7]
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 f805 	bl	8007e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e86:	69bb      	ldr	r3, [r7, #24]
	}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e002      	b.n	8007eb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	69b8      	ldr	r0, [r7, #24]
 8007ec2:	f7ff fecb 	bl	8007c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	78fa      	ldrb	r2, [r7, #3]
 8007eca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b08a      	sub	sp, #40	; 0x28
 8007eda:	af02      	add	r7, sp, #8
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	61bb      	str	r3, [r7, #24]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d90a      	bls.n	8007f1c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	617b      	str	r3, [r7, #20]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff ff00 	bl	8007d2c <xQueueGenericCreateStatic>
 8007f2c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
	}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10a      	bne.n	8007f6a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	613b      	str	r3, [r7, #16]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d90a      	bls.n	8007f88 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60fb      	str	r3, [r7, #12]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f88:	2202      	movs	r2, #2
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff ff45 	bl	8007e1c <xQueueGenericCreate>
 8007f92:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007fa0:	697b      	ldr	r3, [r7, #20]
	}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08e      	sub	sp, #56	; 0x38
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <xQueueGenericSend+0x32>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <xQueueGenericSend+0x40>
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <xQueueGenericSend+0x44>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <xQueueGenericSend+0x46>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <xQueueGenericSend+0x60>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008008:	bf00      	nop
 800800a:	e7fe      	b.n	800800a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d103      	bne.n	800801a <xQueueGenericSend+0x6e>
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <xQueueGenericSend+0x72>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <xQueueGenericSend+0x74>
 800801e:	2300      	movs	r3, #0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <xQueueGenericSend+0x8e>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	623b      	str	r3, [r7, #32]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800803a:	f001 fc3b 	bl	80098b4 <xTaskGetSchedulerState>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <xQueueGenericSend+0x9e>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <xQueueGenericSend+0xa2>
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <xQueueGenericSend+0xa4>
 800804e:	2300      	movs	r3, #0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xQueueGenericSend+0xbe>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	61fb      	str	r3, [r7, #28]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800806a:	f002 fa7b 	bl	800a564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	429a      	cmp	r2, r3
 8008078:	d302      	bcc.n	8008080 <xQueueGenericSend+0xd4>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d129      	bne.n	80080d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008086:	f000 fc5e 	bl	8008946 <prvCopyDataToQueue>
 800808a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d010      	beq.n	80080b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	3324      	adds	r3, #36	; 0x24
 8008098:	4618      	mov	r0, r3
 800809a:	f001 fa4d 	bl	8009538 <xTaskRemoveFromEventList>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d013      	beq.n	80080cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080a4:	4b3f      	ldr	r3, [pc, #252]	; (80081a4 <xQueueGenericSend+0x1f8>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	e00a      	b.n	80080cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d007      	beq.n	80080cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080bc:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <xQueueGenericSend+0x1f8>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080cc:	f002 fa7a 	bl	800a5c4 <vPortExitCritical>
				return pdPASS;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e063      	b.n	800819c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d103      	bne.n	80080e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080da:	f002 fa73 	bl	800a5c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	e05c      	b.n	800819c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080e8:	f107 0314 	add.w	r3, r7, #20
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fa87 	bl	8009600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080f2:	2301      	movs	r3, #1
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080f6:	f002 fa65 	bl	800a5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080fa:	f000 fff9 	bl	80090f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080fe:	f002 fa31 	bl	800a564 <vPortEnterCritical>
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008108:	b25b      	sxtb	r3, r3
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810e:	d103      	bne.n	8008118 <xQueueGenericSend+0x16c>
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800811e:	b25b      	sxtb	r3, r3
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008124:	d103      	bne.n	800812e <xQueueGenericSend+0x182>
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800812e:	f002 fa49 	bl	800a5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008132:	1d3a      	adds	r2, r7, #4
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fa76 	bl	800962c <xTaskCheckForTimeOut>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d124      	bne.n	8008190 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f000 fcf5 	bl	8008b36 <prvIsQueueFull>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d018      	beq.n	8008184 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	3310      	adds	r3, #16
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f99c 	bl	8009498 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008162:	f000 fc80 	bl	8008a66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008166:	f000 ffd1 	bl	800910c <xTaskResumeAll>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f af7c 	bne.w	800806a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008172:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <xQueueGenericSend+0x1f8>)
 8008174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	e772      	b.n	800806a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008186:	f000 fc6e 	bl	8008a66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800818a:	f000 ffbf 	bl	800910c <xTaskResumeAll>
 800818e:	e76c      	b.n	800806a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008192:	f000 fc68 	bl	8008a66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008196:	f000 ffb9 	bl	800910c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800819a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800819c:	4618      	mov	r0, r3
 800819e:	3738      	adds	r7, #56	; 0x38
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b090      	sub	sp, #64	; 0x40
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d103      	bne.n	80081e4 <xQueueGenericSendFromISR+0x3c>
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <xQueueGenericSendFromISR+0x40>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e000      	b.n	80081ea <xQueueGenericSendFromISR+0x42>
 80081e8:	2300      	movs	r3, #0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10a      	bne.n	8008204 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b02      	cmp	r3, #2
 8008208:	d103      	bne.n	8008212 <xQueueGenericSendFromISR+0x6a>
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <xQueueGenericSendFromISR+0x6e>
 8008212:	2301      	movs	r3, #1
 8008214:	e000      	b.n	8008218 <xQueueGenericSendFromISR+0x70>
 8008216:	2300      	movs	r3, #0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	623b      	str	r3, [r7, #32]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008232:	f002 fa79 	bl	800a728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008236:	f3ef 8211 	mrs	r2, BASEPRI
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	61fa      	str	r2, [r7, #28]
 800824c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800824e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825a:	429a      	cmp	r2, r3
 800825c:	d302      	bcc.n	8008264 <xQueueGenericSendFromISR+0xbc>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d12f      	bne.n	80082c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800826a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800827a:	f000 fb64 	bl	8008946 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800827e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d112      	bne.n	80082ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d016      	beq.n	80082be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	3324      	adds	r3, #36	; 0x24
 8008294:	4618      	mov	r0, r3
 8008296:	f001 f94f 	bl	8009538 <xTaskRemoveFromEventList>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00e      	beq.n	80082be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00b      	beq.n	80082be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e007      	b.n	80082be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082b2:	3301      	adds	r3, #1
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	b25a      	sxtb	r2, r3
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082be:	2301      	movs	r3, #1
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80082c2:	e001      	b.n	80082c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3740      	adds	r7, #64	; 0x40
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b08e      	sub	sp, #56	; 0x38
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	623b      	str	r3, [r7, #32]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	61fb      	str	r3, [r7, #28]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <xQueueGiveFromISR+0x58>
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <xQueueGiveFromISR+0x5c>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <xQueueGiveFromISR+0x5e>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	61bb      	str	r3, [r7, #24]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008356:	f002 f9e7 	bl	800a728 <vPortValidateInterruptPriority>
	__asm volatile
 800835a:	f3ef 8211 	mrs	r2, BASEPRI
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	617a      	str	r2, [r7, #20]
 8008370:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008372:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008374:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008382:	429a      	cmp	r2, r3
 8008384:	d22b      	bcs.n	80083de <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800838c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a0:	d112      	bne.n	80083c8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d016      	beq.n	80083d8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	3324      	adds	r3, #36	; 0x24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f8c2 	bl	8009538 <xTaskRemoveFromEventList>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00e      	beq.n	80083d8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2201      	movs	r2, #1
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	e007      	b.n	80083d8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083cc:	3301      	adds	r3, #1
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	b25a      	sxtb	r2, r3
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083d8:	2301      	movs	r3, #1
 80083da:	637b      	str	r3, [r7, #52]	; 0x34
 80083dc:	e001      	b.n	80083e2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f383 8811 	msr	BASEPRI, r3
}
 80083ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3738      	adds	r7, #56	; 0x38
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08c      	sub	sp, #48	; 0x30
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <xQueueReceive+0x30>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	623b      	str	r3, [r7, #32]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d103      	bne.n	8008436 <xQueueReceive+0x3e>
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <xQueueReceive+0x42>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <xQueueReceive+0x44>
 800843a:	2300      	movs	r3, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <xQueueReceive+0x5e>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	61fb      	str	r3, [r7, #28]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008456:	f001 fa2d 	bl	80098b4 <xTaskGetSchedulerState>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <xQueueReceive+0x6e>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <xQueueReceive+0x72>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <xQueueReceive+0x74>
 800846a:	2300      	movs	r3, #0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <xQueueReceive+0x8e>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	61bb      	str	r3, [r7, #24]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008486:	f002 f86d 	bl	800a564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01f      	beq.n	80084d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800849a:	f000 fabe 	bl	8008a1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	1e5a      	subs	r2, r3, #1
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00f      	beq.n	80084ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	3310      	adds	r3, #16
 80084b2:	4618      	mov	r0, r3
 80084b4:	f001 f840 	bl	8009538 <xTaskRemoveFromEventList>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084be:	4b3d      	ldr	r3, [pc, #244]	; (80085b4 <xQueueReceive+0x1bc>)
 80084c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084ce:	f002 f879 	bl	800a5c4 <vPortExitCritical>
				return pdPASS;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e069      	b.n	80085aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d103      	bne.n	80084e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084dc:	f002 f872 	bl	800a5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084e0:	2300      	movs	r3, #0
 80084e2:	e062      	b.n	80085aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d106      	bne.n	80084f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084ea:	f107 0310 	add.w	r3, r7, #16
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 f886 	bl	8009600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084f4:	2301      	movs	r3, #1
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084f8:	f002 f864 	bl	800a5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084fc:	f000 fdf8 	bl	80090f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008500:	f002 f830 	bl	800a564 <vPortEnterCritical>
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800850a:	b25b      	sxtb	r3, r3
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d103      	bne.n	800851a <xQueueReceive+0x122>
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008520:	b25b      	sxtb	r3, r3
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	d103      	bne.n	8008530 <xQueueReceive+0x138>
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008530:	f002 f848 	bl	800a5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008534:	1d3a      	adds	r2, r7, #4
 8008536:	f107 0310 	add.w	r3, r7, #16
 800853a:	4611      	mov	r1, r2
 800853c:	4618      	mov	r0, r3
 800853e:	f001 f875 	bl	800962c <xTaskCheckForTimeOut>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d123      	bne.n	8008590 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800854a:	f000 fade 	bl	8008b0a <prvIsQueueEmpty>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d017      	beq.n	8008584 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	3324      	adds	r3, #36	; 0x24
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f000 ff9b 	bl	8009498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008564:	f000 fa7f 	bl	8008a66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008568:	f000 fdd0 	bl	800910c <xTaskResumeAll>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d189      	bne.n	8008486 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008572:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <xQueueReceive+0x1bc>)
 8008574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	e780      	b.n	8008486 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008586:	f000 fa6e 	bl	8008a66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800858a:	f000 fdbf 	bl	800910c <xTaskResumeAll>
 800858e:	e77a      	b.n	8008486 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008592:	f000 fa68 	bl	8008a66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008596:	f000 fdb9 	bl	800910c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800859a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800859c:	f000 fab5 	bl	8008b0a <prvIsQueueEmpty>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f43f af6f 	beq.w	8008486 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3730      	adds	r7, #48	; 0x30
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	e000ed04 	.word	0xe000ed04

080085b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08e      	sub	sp, #56	; 0x38
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	623b      	str	r3, [r7, #32]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80085ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	61fb      	str	r3, [r7, #28]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008608:	f001 f954 	bl	80098b4 <xTaskGetSchedulerState>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <xQueueSemaphoreTake+0x60>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <xQueueSemaphoreTake+0x64>
 8008618:	2301      	movs	r3, #1
 800861a:	e000      	b.n	800861e <xQueueSemaphoreTake+0x66>
 800861c:	2300      	movs	r3, #0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	61bb      	str	r3, [r7, #24]
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008638:	f001 ff94 	bl	800a564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	2b00      	cmp	r3, #0
 8008646:	d024      	beq.n	8008692 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	1e5a      	subs	r2, r3, #1
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008658:	f001 faa2 	bl	8009ba0 <pvTaskIncrementMutexHeldCount>
 800865c:	4602      	mov	r2, r0
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00f      	beq.n	800868a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	3310      	adds	r3, #16
 800866e:	4618      	mov	r0, r3
 8008670:	f000 ff62 	bl	8009538 <xTaskRemoveFromEventList>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800867a:	4b54      	ldr	r3, [pc, #336]	; (80087cc <xQueueSemaphoreTake+0x214>)
 800867c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800868a:	f001 ff9b 	bl	800a5c4 <vPortExitCritical>
				return pdPASS;
 800868e:	2301      	movs	r3, #1
 8008690:	e097      	b.n	80087c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d111      	bne.n	80086bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	617b      	str	r3, [r7, #20]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80086b4:	f001 ff86 	bl	800a5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e082      	b.n	80087c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086c2:	f107 030c 	add.w	r3, r7, #12
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 ff9a 	bl	8009600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086d0:	f001 ff78 	bl	800a5c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086d4:	f000 fd0c 	bl	80090f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086d8:	f001 ff44 	bl	800a564 <vPortEnterCritical>
 80086dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086e2:	b25b      	sxtb	r3, r3
 80086e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e8:	d103      	bne.n	80086f2 <xQueueSemaphoreTake+0x13a>
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086f8:	b25b      	sxtb	r3, r3
 80086fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fe:	d103      	bne.n	8008708 <xQueueSemaphoreTake+0x150>
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008708:	f001 ff5c 	bl	800a5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800870c:	463a      	mov	r2, r7
 800870e:	f107 030c 	add.w	r3, r7, #12
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f000 ff89 	bl	800962c <xTaskCheckForTimeOut>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d132      	bne.n	8008786 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008722:	f000 f9f2 	bl	8008b0a <prvIsQueueEmpty>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d026      	beq.n	800877a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008734:	f001 ff16 	bl	800a564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	4618      	mov	r0, r3
 800873e:	f001 f8d7 	bl	80098f0 <xTaskPriorityInherit>
 8008742:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008744:	f001 ff3e 	bl	800a5c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	3324      	adds	r3, #36	; 0x24
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	4611      	mov	r1, r2
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fea1 	bl	8009498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008758:	f000 f985 	bl	8008a66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800875c:	f000 fcd6 	bl	800910c <xTaskResumeAll>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	f47f af68 	bne.w	8008638 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008768:	4b18      	ldr	r3, [pc, #96]	; (80087cc <xQueueSemaphoreTake+0x214>)
 800876a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	e75e      	b.n	8008638 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800877a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800877c:	f000 f973 	bl	8008a66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008780:	f000 fcc4 	bl	800910c <xTaskResumeAll>
 8008784:	e758      	b.n	8008638 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008788:	f000 f96d 	bl	8008a66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800878c:	f000 fcbe 	bl	800910c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008790:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008792:	f000 f9ba 	bl	8008b0a <prvIsQueueEmpty>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	f43f af4d 	beq.w	8008638 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00d      	beq.n	80087c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80087a4:	f001 fede 	bl	800a564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80087a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087aa:	f000 f8b4 	bl	8008916 <prvGetDisinheritPriorityAfterTimeout>
 80087ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 f970 	bl	8009a9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80087bc:	f001 ff02 	bl	800a5c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3738      	adds	r7, #56	; 0x38
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	; 0x38
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	623b      	str	r3, [r7, #32]
}
 80087f8:	bf00      	nop
 80087fa:	e7fe      	b.n	80087fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d103      	bne.n	800880a <xQueueReceiveFromISR+0x3a>
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <xQueueReceiveFromISR+0x3e>
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <xQueueReceiveFromISR+0x40>
 800880e:	2300      	movs	r3, #0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	61fb      	str	r3, [r7, #28]
}
 8008826:	bf00      	nop
 8008828:	e7fe      	b.n	8008828 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800882a:	f001 ff7d 	bl	800a728 <vPortValidateInterruptPriority>
	__asm volatile
 800882e:	f3ef 8211 	mrs	r2, BASEPRI
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	61ba      	str	r2, [r7, #24]
 8008844:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008846:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008848:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	2b00      	cmp	r3, #0
 8008854:	d02f      	beq.n	80088b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800885c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008864:	f000 f8d9 	bl	8008a1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	1e5a      	subs	r2, r3, #1
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008870:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d112      	bne.n	80088a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d016      	beq.n	80088b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	3310      	adds	r3, #16
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fe56 	bl	8009538 <xTaskRemoveFromEventList>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00e      	beq.n	80088b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e007      	b.n	80088b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088a4:	3301      	adds	r3, #1
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	b25a      	sxtb	r2, r3
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80088b0:	2301      	movs	r3, #1
 80088b2:	637b      	str	r3, [r7, #52]	; 0x34
 80088b4:	e001      	b.n	80088ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	637b      	str	r3, [r7, #52]	; 0x34
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f383 8811 	msr	BASEPRI, r3
}
 80088c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3738      	adds	r7, #56	; 0x38
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <vQueueDelete+0x28>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	60bb      	str	r3, [r7, #8]
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f95f 	bl	8008bbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f002 f819 	bl	800a940 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800890e:	bf00      	nop
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008916:	b480      	push	{r7}
 8008918:	b085      	sub	sp, #20
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d006      	beq.n	8008934 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	e001      	b.n	8008938 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008938:	68fb      	ldr	r3, [r7, #12]
	}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b086      	sub	sp, #24
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10d      	bne.n	8008980 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d14d      	bne.n	8008a08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	4618      	mov	r0, r3
 8008972:	f001 f825 	bl	80099c0 <xTaskPriorityDisinherit>
 8008976:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	609a      	str	r2, [r3, #8]
 800897e:	e043      	b.n	8008a08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d119      	bne.n	80089ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6858      	ldr	r0, [r3, #4]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	461a      	mov	r2, r3
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	f002 f917 	bl	800abc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	441a      	add	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d32b      	bcc.n	8008a08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	605a      	str	r2, [r3, #4]
 80089b8:	e026      	b.n	8008a08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	68d8      	ldr	r0, [r3, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	461a      	mov	r2, r3
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	f002 f8fd 	bl	800abc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	425b      	negs	r3, r3
 80089d4:	441a      	add	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d207      	bcs.n	80089f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	425b      	negs	r3, r3
 80089f0:	441a      	add	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d105      	bne.n	8008a08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a10:	697b      	ldr	r3, [r7, #20]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d018      	beq.n	8008a5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	441a      	add	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d303      	bcc.n	8008a4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68d9      	ldr	r1, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	461a      	mov	r2, r3
 8008a58:	6838      	ldr	r0, [r7, #0]
 8008a5a:	f002 f8b3 	bl	800abc4 <memcpy>
	}
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a6e:	f001 fd79 	bl	800a564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a7a:	e011      	b.n	8008aa0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d012      	beq.n	8008aaa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3324      	adds	r3, #36	; 0x24
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fd55 	bl	8009538 <xTaskRemoveFromEventList>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a94:	f000 fe2c 	bl	80096f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dce9      	bgt.n	8008a7c <prvUnlockQueue+0x16>
 8008aa8:	e000      	b.n	8008aac <prvUnlockQueue+0x46>
					break;
 8008aaa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	22ff      	movs	r2, #255	; 0xff
 8008ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ab4:	f001 fd86 	bl	800a5c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ab8:	f001 fd54 	bl	800a564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ac2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ac4:	e011      	b.n	8008aea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d012      	beq.n	8008af4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3310      	adds	r3, #16
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fd30 	bl	8009538 <xTaskRemoveFromEventList>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ade:	f000 fe07 	bl	80096f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	dce9      	bgt.n	8008ac6 <prvUnlockQueue+0x60>
 8008af2:	e000      	b.n	8008af6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008af4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	22ff      	movs	r2, #255	; 0xff
 8008afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008afe:	f001 fd61 	bl	800a5c4 <vPortExitCritical>
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b12:	f001 fd27 	bl	800a564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d102      	bne.n	8008b24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	e001      	b.n	8008b28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b28:	f001 fd4c 	bl	800a5c4 <vPortExitCritical>

	return xReturn;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b3e:	f001 fd11 	bl	800a564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d102      	bne.n	8008b54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	e001      	b.n	8008b58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b58:	f001 fd34 	bl	800a5c4 <vPortExitCritical>

	return xReturn;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	e014      	b.n	8008ba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b78:	4a0f      	ldr	r2, [pc, #60]	; (8008bb8 <vQueueAddToRegistry+0x50>)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10b      	bne.n	8008b9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b84:	490c      	ldr	r1, [pc, #48]	; (8008bb8 <vQueueAddToRegistry+0x50>)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b8e:	4a0a      	ldr	r2, [pc, #40]	; (8008bb8 <vQueueAddToRegistry+0x50>)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	4413      	add	r3, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b9a:	e006      	b.n	8008baa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b07      	cmp	r3, #7
 8008ba6:	d9e7      	bls.n	8008b78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	20004f74 	.word	0x20004f74

08008bbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	e016      	b.n	8008bf8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008bca:	4a10      	ldr	r2, [pc, #64]	; (8008c0c <vQueueUnregisterQueue+0x50>)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4413      	add	r3, r2
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d10b      	bne.n	8008bf2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008bda:	4a0c      	ldr	r2, [pc, #48]	; (8008c0c <vQueueUnregisterQueue+0x50>)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2100      	movs	r1, #0
 8008be0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008be4:	4a09      	ldr	r2, [pc, #36]	; (8008c0c <vQueueUnregisterQueue+0x50>)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	4413      	add	r3, r2
 8008bec:	2200      	movs	r2, #0
 8008bee:	605a      	str	r2, [r3, #4]
				break;
 8008bf0:	e006      	b.n	8008c00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b07      	cmp	r3, #7
 8008bfc:	d9e5      	bls.n	8008bca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20004f74 	.word	0x20004f74

08008c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c20:	f001 fca0 	bl	800a564 <vPortEnterCritical>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c2a:	b25b      	sxtb	r3, r3
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d103      	bne.n	8008c3a <vQueueWaitForMessageRestricted+0x2a>
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c40:	b25b      	sxtb	r3, r3
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c46:	d103      	bne.n	8008c50 <vQueueWaitForMessageRestricted+0x40>
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c50:	f001 fcb8 	bl	800a5c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d106      	bne.n	8008c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	3324      	adds	r3, #36	; 0x24
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fc3b 	bl	80094e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c6a:	6978      	ldr	r0, [r7, #20]
 8008c6c:	f7ff fefb 	bl	8008a66 <prvUnlockQueue>
	}
 8008c70:	bf00      	nop
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08e      	sub	sp, #56	; 0x38
 8008c7c:	af04      	add	r7, sp, #16
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10a      	bne.n	8008ca2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	623b      	str	r3, [r7, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <xTaskCreateStatic+0x46>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	61fb      	str	r3, [r7, #28]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cbe:	235c      	movs	r3, #92	; 0x5c
 8008cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b5c      	cmp	r3, #92	; 0x5c
 8008cc6:	d00a      	beq.n	8008cde <xTaskCreateStatic+0x66>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	61bb      	str	r3, [r7, #24]
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01e      	beq.n	8008d24 <xTaskCreateStatic+0xac>
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01b      	beq.n	8008d24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9303      	str	r3, [sp, #12]
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	9302      	str	r3, [sp, #8]
 8008d06:	f107 0314 	add.w	r3, r7, #20
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f850 	bl	8008dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d1e:	f000 f8dd 	bl	8008edc <prvAddNewTaskToReadyList>
 8008d22:	e001      	b.n	8008d28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d28:	697b      	ldr	r3, [r7, #20]
	}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3728      	adds	r7, #40	; 0x28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b08c      	sub	sp, #48	; 0x30
 8008d36:	af04      	add	r7, sp, #16
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	603b      	str	r3, [r7, #0]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 fd2e 	bl	800a7a8 <pvPortMalloc>
 8008d4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00e      	beq.n	8008d72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d54:	205c      	movs	r0, #92	; 0x5c
 8008d56:	f001 fd27 	bl	800a7a8 <pvPortMalloc>
 8008d5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	631a      	str	r2, [r3, #48]	; 0x30
 8008d68:	e005      	b.n	8008d76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d6a:	6978      	ldr	r0, [r7, #20]
 8008d6c:	f001 fde8 	bl	800a940 <vPortFree>
 8008d70:	e001      	b.n	8008d76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d017      	beq.n	8008dac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d84:	88fa      	ldrh	r2, [r7, #6]
 8008d86:	2300      	movs	r3, #0
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	9302      	str	r3, [sp, #8]
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 f80e 	bl	8008dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008da0:	69f8      	ldr	r0, [r7, #28]
 8008da2:	f000 f89b 	bl	8008edc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008da6:	2301      	movs	r3, #1
 8008da8:	61bb      	str	r3, [r7, #24]
 8008daa:	e002      	b.n	8008db2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dac:	f04f 33ff 	mov.w	r3, #4294967295
 8008db0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008db2:	69bb      	ldr	r3, [r7, #24]
	}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	21a5      	movs	r1, #165	; 0xa5
 8008dd6:	f001 ff03 	bl	800abe0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008de4:	3b01      	subs	r3, #1
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	f023 0307 	bic.w	r3, r3, #7
 8008df2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	617b      	str	r3, [r7, #20]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01f      	beq.n	8008e5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	e012      	b.n	8008e46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	7819      	ldrb	r1, [r3, #0]
 8008e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3334      	adds	r3, #52	; 0x34
 8008e30:	460a      	mov	r2, r1
 8008e32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d006      	beq.n	8008e4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	3301      	adds	r3, #1
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	2b0f      	cmp	r3, #15
 8008e4a:	d9e9      	bls.n	8008e20 <prvInitialiseNewTask+0x64>
 8008e4c:	e000      	b.n	8008e50 <prvInitialiseNewTask+0x94>
			{
				break;
 8008e4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e58:	e003      	b.n	8008e62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	2b37      	cmp	r3, #55	; 0x37
 8008e66:	d901      	bls.n	8008e6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e68:	2337      	movs	r3, #55	; 0x37
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	3304      	adds	r3, #4
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fe56 	bl	8007b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	3318      	adds	r3, #24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe fe51 	bl	8007b34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	2200      	movs	r2, #0
 8008eac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	68f9      	ldr	r1, [r7, #12]
 8008eba:	69b8      	ldr	r0, [r7, #24]
 8008ebc:	f001 fa26 	bl	800a30c <pxPortInitialiseStack>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed2:	bf00      	nop
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ee4:	f001 fb3e 	bl	800a564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ee8:	4b2d      	ldr	r3, [pc, #180]	; (8008fa0 <prvAddNewTaskToReadyList+0xc4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3301      	adds	r3, #1
 8008eee:	4a2c      	ldr	r2, [pc, #176]	; (8008fa0 <prvAddNewTaskToReadyList+0xc4>)
 8008ef0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ef2:	4b2c      	ldr	r3, [pc, #176]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d109      	bne.n	8008f0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008efa:	4a2a      	ldr	r2, [pc, #168]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f00:	4b27      	ldr	r3, [pc, #156]	; (8008fa0 <prvAddNewTaskToReadyList+0xc4>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d110      	bne.n	8008f2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f08:	f000 fc16 	bl	8009738 <prvInitialiseTaskLists>
 8008f0c:	e00d      	b.n	8008f2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f0e:	4b26      	ldr	r3, [pc, #152]	; (8008fa8 <prvAddNewTaskToReadyList+0xcc>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f16:	4b23      	ldr	r3, [pc, #140]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d802      	bhi.n	8008f2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f24:	4a1f      	ldr	r2, [pc, #124]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f2a:	4b20      	ldr	r3, [pc, #128]	; (8008fac <prvAddNewTaskToReadyList+0xd0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <prvAddNewTaskToReadyList+0xd0>)
 8008f32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f34:	4b1d      	ldr	r3, [pc, #116]	; (8008fac <prvAddNewTaskToReadyList+0xd0>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f40:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <prvAddNewTaskToReadyList+0xd4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d903      	bls.n	8008f50 <prvAddNewTaskToReadyList+0x74>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	4a18      	ldr	r2, [pc, #96]	; (8008fb0 <prvAddNewTaskToReadyList+0xd4>)
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4a15      	ldr	r2, [pc, #84]	; (8008fb4 <prvAddNewTaskToReadyList+0xd8>)
 8008f5e:	441a      	add	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fe fdf1 	bl	8007b4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f6c:	f001 fb2a 	bl	800a5c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f70:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <prvAddNewTaskToReadyList+0xcc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00e      	beq.n	8008f96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <prvAddNewTaskToReadyList+0xc8>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d207      	bcs.n	8008f96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <prvAddNewTaskToReadyList+0xdc>)
 8008f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000bbc 	.word	0x20000bbc
 8008fa4:	200006e8 	.word	0x200006e8
 8008fa8:	20000bc8 	.word	0x20000bc8
 8008fac:	20000bd8 	.word	0x20000bd8
 8008fb0:	20000bc4 	.word	0x20000bc4
 8008fb4:	200006ec 	.word	0x200006ec
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d017      	beq.n	8008ffe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <vTaskDelay+0x60>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <vTaskDelay+0x30>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60bb      	str	r3, [r7, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fec:	f000 f880 	bl	80090f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fde8 	bl	8009bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ff8:	f000 f888 	bl	800910c <xTaskResumeAll>
 8008ffc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d107      	bne.n	8009014 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009004:	4b06      	ldr	r3, [pc, #24]	; (8009020 <vTaskDelay+0x64>)
 8009006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009014:	bf00      	nop
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000be4 	.word	0x20000be4
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800902e:	2300      	movs	r3, #0
 8009030:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009032:	463a      	mov	r2, r7
 8009034:	1d39      	adds	r1, r7, #4
 8009036:	f107 0308 	add.w	r3, r7, #8
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fd26 	bl	8007a8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	9202      	str	r2, [sp, #8]
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	2300      	movs	r3, #0
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	460a      	mov	r2, r1
 8009052:	4921      	ldr	r1, [pc, #132]	; (80090d8 <vTaskStartScheduler+0xb4>)
 8009054:	4821      	ldr	r0, [pc, #132]	; (80090dc <vTaskStartScheduler+0xb8>)
 8009056:	f7ff fe0f 	bl	8008c78 <xTaskCreateStatic>
 800905a:	4603      	mov	r3, r0
 800905c:	4a20      	ldr	r2, [pc, #128]	; (80090e0 <vTaskStartScheduler+0xbc>)
 800905e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009060:	4b1f      	ldr	r3, [pc, #124]	; (80090e0 <vTaskStartScheduler+0xbc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009068:	2301      	movs	r3, #1
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e001      	b.n	8009072 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d102      	bne.n	800907e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009078:	f000 fdfa 	bl	8009c70 <xTimerCreateTimerTask>
 800907c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d116      	bne.n	80090b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	613b      	str	r3, [r7, #16]
}
 8009096:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009098:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <vTaskStartScheduler+0xc0>)
 800909a:	f04f 32ff 	mov.w	r2, #4294967295
 800909e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <vTaskStartScheduler+0xc4>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090a6:	4b11      	ldr	r3, [pc, #68]	; (80090ec <vTaskStartScheduler+0xc8>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090ac:	f001 f9b8 	bl	800a420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090b0:	e00e      	b.n	80090d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d10a      	bne.n	80090d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	60fb      	str	r3, [r7, #12]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <vTaskStartScheduler+0xaa>
}
 80090d0:	bf00      	nop
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	0800ac38 	.word	0x0800ac38
 80090dc:	08009709 	.word	0x08009709
 80090e0:	20000be0 	.word	0x20000be0
 80090e4:	20000bdc 	.word	0x20000bdc
 80090e8:	20000bc8 	.word	0x20000bc8
 80090ec:	20000bc0 	.word	0x20000bc0

080090f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090f0:	b480      	push	{r7}
 80090f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <vTaskSuspendAll+0x18>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3301      	adds	r3, #1
 80090fa:	4a03      	ldr	r2, [pc, #12]	; (8009108 <vTaskSuspendAll+0x18>)
 80090fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090fe:	bf00      	nop
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	20000be4 	.word	0x20000be4

0800910c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009116:	2300      	movs	r3, #0
 8009118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800911a:	4b42      	ldr	r3, [pc, #264]	; (8009224 <xTaskResumeAll+0x118>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <xTaskResumeAll+0x2c>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	603b      	str	r3, [r7, #0]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009138:	f001 fa14 	bl	800a564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800913c:	4b39      	ldr	r3, [pc, #228]	; (8009224 <xTaskResumeAll+0x118>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3b01      	subs	r3, #1
 8009142:	4a38      	ldr	r2, [pc, #224]	; (8009224 <xTaskResumeAll+0x118>)
 8009144:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009146:	4b37      	ldr	r3, [pc, #220]	; (8009224 <xTaskResumeAll+0x118>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d162      	bne.n	8009214 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800914e:	4b36      	ldr	r3, [pc, #216]	; (8009228 <xTaskResumeAll+0x11c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d05e      	beq.n	8009214 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009156:	e02f      	b.n	80091b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009158:	4b34      	ldr	r3, [pc, #208]	; (800922c <xTaskResumeAll+0x120>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3318      	adds	r3, #24
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fd4f 	bl	8007c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3304      	adds	r3, #4
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fd4a 	bl	8007c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4b2d      	ldr	r3, [pc, #180]	; (8009230 <xTaskResumeAll+0x124>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d903      	bls.n	8009188 <xTaskResumeAll+0x7c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	4a2a      	ldr	r2, [pc, #168]	; (8009230 <xTaskResumeAll+0x124>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4a27      	ldr	r2, [pc, #156]	; (8009234 <xTaskResumeAll+0x128>)
 8009196:	441a      	add	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3304      	adds	r3, #4
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7fe fcd5 	bl	8007b4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4b23      	ldr	r3, [pc, #140]	; (8009238 <xTaskResumeAll+0x12c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091b2:	4b22      	ldr	r3, [pc, #136]	; (800923c <xTaskResumeAll+0x130>)
 80091b4:	2201      	movs	r2, #1
 80091b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091b8:	4b1c      	ldr	r3, [pc, #112]	; (800922c <xTaskResumeAll+0x120>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1cb      	bne.n	8009158 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091c6:	f000 fb55 	bl	8009874 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091ca:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <xTaskResumeAll+0x134>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d010      	beq.n	80091f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091d6:	f000 f847 	bl	8009268 <xTaskIncrementTick>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80091e0:	4b16      	ldr	r3, [pc, #88]	; (800923c <xTaskResumeAll+0x130>)
 80091e2:	2201      	movs	r2, #1
 80091e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f1      	bne.n	80091d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <xTaskResumeAll+0x134>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091f8:	4b10      	ldr	r3, [pc, #64]	; (800923c <xTaskResumeAll+0x130>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009204:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <xTaskResumeAll+0x138>)
 8009206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009214:	f001 f9d6 	bl	800a5c4 <vPortExitCritical>

	return xAlreadyYielded;
 8009218:	68bb      	ldr	r3, [r7, #8]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000be4 	.word	0x20000be4
 8009228:	20000bbc 	.word	0x20000bbc
 800922c:	20000b7c 	.word	0x20000b7c
 8009230:	20000bc4 	.word	0x20000bc4
 8009234:	200006ec 	.word	0x200006ec
 8009238:	200006e8 	.word	0x200006e8
 800923c:	20000bd0 	.word	0x20000bd0
 8009240:	20000bcc 	.word	0x20000bcc
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <xTaskGetTickCount+0x1c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009254:	687b      	ldr	r3, [r7, #4]
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000bc0 	.word	0x20000bc0

08009268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009272:	4b4f      	ldr	r3, [pc, #316]	; (80093b0 <xTaskIncrementTick+0x148>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f040 808f 	bne.w	800939a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800927c:	4b4d      	ldr	r3, [pc, #308]	; (80093b4 <xTaskIncrementTick+0x14c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009284:	4a4b      	ldr	r2, [pc, #300]	; (80093b4 <xTaskIncrementTick+0x14c>)
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d120      	bne.n	80092d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009290:	4b49      	ldr	r3, [pc, #292]	; (80093b8 <xTaskIncrementTick+0x150>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	603b      	str	r3, [r7, #0]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <xTaskIncrementTick+0x46>
 80092b0:	4b41      	ldr	r3, [pc, #260]	; (80093b8 <xTaskIncrementTick+0x150>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	4b41      	ldr	r3, [pc, #260]	; (80093bc <xTaskIncrementTick+0x154>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a3f      	ldr	r2, [pc, #252]	; (80093b8 <xTaskIncrementTick+0x150>)
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	4a3f      	ldr	r2, [pc, #252]	; (80093bc <xTaskIncrementTick+0x154>)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	4b3e      	ldr	r3, [pc, #248]	; (80093c0 <xTaskIncrementTick+0x158>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3301      	adds	r3, #1
 80092ca:	4a3d      	ldr	r2, [pc, #244]	; (80093c0 <xTaskIncrementTick+0x158>)
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	f000 fad1 	bl	8009874 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092d2:	4b3c      	ldr	r3, [pc, #240]	; (80093c4 <xTaskIncrementTick+0x15c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d349      	bcc.n	8009370 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092dc:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <xTaskIncrementTick+0x150>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092e6:	4b37      	ldr	r3, [pc, #220]	; (80093c4 <xTaskIncrementTick+0x15c>)
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ec:	601a      	str	r2, [r3, #0]
					break;
 80092ee:	e03f      	b.n	8009370 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f0:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <xTaskIncrementTick+0x150>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d203      	bcs.n	8009310 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009308:	4a2e      	ldr	r2, [pc, #184]	; (80093c4 <xTaskIncrementTick+0x15c>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800930e:	e02f      	b.n	8009370 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	3304      	adds	r3, #4
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fc77 	bl	8007c08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d004      	beq.n	800932c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	3318      	adds	r3, #24
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe fc6e 	bl	8007c08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009330:	4b25      	ldr	r3, [pc, #148]	; (80093c8 <xTaskIncrementTick+0x160>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d903      	bls.n	8009340 <xTaskIncrementTick+0xd8>
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	4a22      	ldr	r2, [pc, #136]	; (80093c8 <xTaskIncrementTick+0x160>)
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009344:	4613      	mov	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4a1f      	ldr	r2, [pc, #124]	; (80093cc <xTaskIncrementTick+0x164>)
 800934e:	441a      	add	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	3304      	adds	r3, #4
 8009354:	4619      	mov	r1, r3
 8009356:	4610      	mov	r0, r2
 8009358:	f7fe fbf9 	bl	8007b4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009360:	4b1b      	ldr	r3, [pc, #108]	; (80093d0 <xTaskIncrementTick+0x168>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009366:	429a      	cmp	r2, r3
 8009368:	d3b8      	bcc.n	80092dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800936a:	2301      	movs	r3, #1
 800936c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800936e:	e7b5      	b.n	80092dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009370:	4b17      	ldr	r3, [pc, #92]	; (80093d0 <xTaskIncrementTick+0x168>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009376:	4915      	ldr	r1, [pc, #84]	; (80093cc <xTaskIncrementTick+0x164>)
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d901      	bls.n	800938c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800938c:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <xTaskIncrementTick+0x16c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	e004      	b.n	80093a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800939a:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <xTaskIncrementTick+0x170>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3301      	adds	r3, #1
 80093a0:	4a0d      	ldr	r2, [pc, #52]	; (80093d8 <xTaskIncrementTick+0x170>)
 80093a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093a4:	697b      	ldr	r3, [r7, #20]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000be4 	.word	0x20000be4
 80093b4:	20000bc0 	.word	0x20000bc0
 80093b8:	20000b74 	.word	0x20000b74
 80093bc:	20000b78 	.word	0x20000b78
 80093c0:	20000bd4 	.word	0x20000bd4
 80093c4:	20000bdc 	.word	0x20000bdc
 80093c8:	20000bc4 	.word	0x20000bc4
 80093cc:	200006ec 	.word	0x200006ec
 80093d0:	200006e8 	.word	0x200006e8
 80093d4:	20000bd0 	.word	0x20000bd0
 80093d8:	20000bcc 	.word	0x20000bcc

080093dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093e2:	4b28      	ldr	r3, [pc, #160]	; (8009484 <vTaskSwitchContext+0xa8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093ea:	4b27      	ldr	r3, [pc, #156]	; (8009488 <vTaskSwitchContext+0xac>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093f0:	e041      	b.n	8009476 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80093f2:	4b25      	ldr	r3, [pc, #148]	; (8009488 <vTaskSwitchContext+0xac>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f8:	4b24      	ldr	r3, [pc, #144]	; (800948c <vTaskSwitchContext+0xb0>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	e010      	b.n	8009422 <vTaskSwitchContext+0x46>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <vTaskSwitchContext+0x40>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	607b      	str	r3, [r7, #4]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <vTaskSwitchContext+0x3e>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3b01      	subs	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	491b      	ldr	r1, [pc, #108]	; (8009490 <vTaskSwitchContext+0xb4>)
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	440b      	add	r3, r1
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0e4      	beq.n	8009400 <vTaskSwitchContext+0x24>
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4a13      	ldr	r2, [pc, #76]	; (8009490 <vTaskSwitchContext+0xb4>)
 8009442:	4413      	add	r3, r2
 8009444:	60bb      	str	r3, [r7, #8]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	605a      	str	r2, [r3, #4]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	3308      	adds	r3, #8
 8009458:	429a      	cmp	r2, r3
 800945a:	d104      	bne.n	8009466 <vTaskSwitchContext+0x8a>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	605a      	str	r2, [r3, #4]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	4a09      	ldr	r2, [pc, #36]	; (8009494 <vTaskSwitchContext+0xb8>)
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	4a06      	ldr	r2, [pc, #24]	; (800948c <vTaskSwitchContext+0xb0>)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6013      	str	r3, [r2, #0]
}
 8009476:	bf00      	nop
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20000be4 	.word	0x20000be4
 8009488:	20000bd0 	.word	0x20000bd0
 800948c:	20000bc4 	.word	0x20000bc4
 8009490:	200006ec 	.word	0x200006ec
 8009494:	200006e8 	.word	0x200006e8

08009498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	60fb      	str	r3, [r7, #12]
}
 80094ba:	bf00      	nop
 80094bc:	e7fe      	b.n	80094bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094be:	4b07      	ldr	r3, [pc, #28]	; (80094dc <vTaskPlaceOnEventList+0x44>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3318      	adds	r3, #24
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7fe fb65 	bl	8007b96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094cc:	2101      	movs	r1, #1
 80094ce:	6838      	ldr	r0, [r7, #0]
 80094d0:	f000 fb7a 	bl	8009bc8 <prvAddCurrentTaskToDelayedList>
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	200006e8 	.word	0x200006e8

080094e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10a      	bne.n	8009508 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	617b      	str	r3, [r7, #20]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <vTaskPlaceOnEventListRestricted+0x54>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3318      	adds	r3, #24
 800950e:	4619      	mov	r1, r3
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7fe fb1c 	bl	8007b4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800951c:	f04f 33ff 	mov.w	r3, #4294967295
 8009520:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	68b8      	ldr	r0, [r7, #8]
 8009526:	f000 fb4f 	bl	8009bc8 <prvAddCurrentTaskToDelayedList>
	}
 800952a:	bf00      	nop
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200006e8 	.word	0x200006e8

08009538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	60fb      	str	r3, [r7, #12]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	3318      	adds	r3, #24
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fb4d 	bl	8007c08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800956e:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <xTaskRemoveFromEventList+0xb0>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d11d      	bne.n	80095b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	3304      	adds	r3, #4
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fb44 	bl	8007c08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009584:	4b19      	ldr	r3, [pc, #100]	; (80095ec <xTaskRemoveFromEventList+0xb4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	429a      	cmp	r2, r3
 800958a:	d903      	bls.n	8009594 <xTaskRemoveFromEventList+0x5c>
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	4a16      	ldr	r2, [pc, #88]	; (80095ec <xTaskRemoveFromEventList+0xb4>)
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4a13      	ldr	r2, [pc, #76]	; (80095f0 <xTaskRemoveFromEventList+0xb8>)
 80095a2:	441a      	add	r2, r3
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4619      	mov	r1, r3
 80095aa:	4610      	mov	r0, r2
 80095ac:	f7fe facf 	bl	8007b4e <vListInsertEnd>
 80095b0:	e005      	b.n	80095be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3318      	adds	r3, #24
 80095b6:	4619      	mov	r1, r3
 80095b8:	480e      	ldr	r0, [pc, #56]	; (80095f4 <xTaskRemoveFromEventList+0xbc>)
 80095ba:	f7fe fac8 	bl	8007b4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c2:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <xTaskRemoveFromEventList+0xc0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d905      	bls.n	80095d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095cc:	2301      	movs	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095d0:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <xTaskRemoveFromEventList+0xc4>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	e001      	b.n	80095dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80095d8:	2300      	movs	r3, #0
 80095da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095dc:	697b      	ldr	r3, [r7, #20]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000be4 	.word	0x20000be4
 80095ec:	20000bc4 	.word	0x20000bc4
 80095f0:	200006ec 	.word	0x200006ec
 80095f4:	20000b7c 	.word	0x20000b7c
 80095f8:	200006e8 	.word	0x200006e8
 80095fc:	20000bd0 	.word	0x20000bd0

08009600 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <vTaskInternalSetTimeOutState+0x24>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009610:	4b05      	ldr	r3, [pc, #20]	; (8009628 <vTaskInternalSetTimeOutState+0x28>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	605a      	str	r2, [r3, #4]
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	20000bd4 	.word	0x20000bd4
 8009628:	20000bc0 	.word	0x20000bc0

0800962c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	613b      	str	r3, [r7, #16]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	60fb      	str	r3, [r7, #12]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800966e:	f000 ff79 	bl	800a564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009672:	4b1d      	ldr	r3, [pc, #116]	; (80096e8 <xTaskCheckForTimeOut+0xbc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968a:	d102      	bne.n	8009692 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]
 8009690:	e023      	b.n	80096da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	4b15      	ldr	r3, [pc, #84]	; (80096ec <xTaskCheckForTimeOut+0xc0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d007      	beq.n	80096ae <xTaskCheckForTimeOut+0x82>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d302      	bcc.n	80096ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	61fb      	str	r3, [r7, #28]
 80096ac:	e015      	b.n	80096da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d20b      	bcs.n	80096d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	1ad2      	subs	r2, r2, r3
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff ff9b 	bl	8009600 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	e004      	b.n	80096da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096d6:	2301      	movs	r3, #1
 80096d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096da:	f000 ff73 	bl	800a5c4 <vPortExitCritical>

	return xReturn;
 80096de:	69fb      	ldr	r3, [r7, #28]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000bc0 	.word	0x20000bc0
 80096ec:	20000bd4 	.word	0x20000bd4

080096f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096f4:	4b03      	ldr	r3, [pc, #12]	; (8009704 <vTaskMissedYield+0x14>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	601a      	str	r2, [r3, #0]
}
 80096fa:	bf00      	nop
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	20000bd0 	.word	0x20000bd0

08009708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009710:	f000 f852 	bl	80097b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009714:	4b06      	ldr	r3, [pc, #24]	; (8009730 <prvIdleTask+0x28>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d9f9      	bls.n	8009710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <prvIdleTask+0x2c>)
 800971e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800972c:	e7f0      	b.n	8009710 <prvIdleTask+0x8>
 800972e:	bf00      	nop
 8009730:	200006ec 	.word	0x200006ec
 8009734:	e000ed04 	.word	0xe000ed04

08009738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800973e:	2300      	movs	r3, #0
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	e00c      	b.n	800975e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4a12      	ldr	r2, [pc, #72]	; (8009798 <prvInitialiseTaskLists+0x60>)
 8009750:	4413      	add	r3, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe f9ce 	bl	8007af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3301      	adds	r3, #1
 800975c:	607b      	str	r3, [r7, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b37      	cmp	r3, #55	; 0x37
 8009762:	d9ef      	bls.n	8009744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009764:	480d      	ldr	r0, [pc, #52]	; (800979c <prvInitialiseTaskLists+0x64>)
 8009766:	f7fe f9c5 	bl	8007af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800976a:	480d      	ldr	r0, [pc, #52]	; (80097a0 <prvInitialiseTaskLists+0x68>)
 800976c:	f7fe f9c2 	bl	8007af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009770:	480c      	ldr	r0, [pc, #48]	; (80097a4 <prvInitialiseTaskLists+0x6c>)
 8009772:	f7fe f9bf 	bl	8007af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009776:	480c      	ldr	r0, [pc, #48]	; (80097a8 <prvInitialiseTaskLists+0x70>)
 8009778:	f7fe f9bc 	bl	8007af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800977c:	480b      	ldr	r0, [pc, #44]	; (80097ac <prvInitialiseTaskLists+0x74>)
 800977e:	f7fe f9b9 	bl	8007af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009782:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <prvInitialiseTaskLists+0x78>)
 8009784:	4a05      	ldr	r2, [pc, #20]	; (800979c <prvInitialiseTaskLists+0x64>)
 8009786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009788:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <prvInitialiseTaskLists+0x7c>)
 800978a:	4a05      	ldr	r2, [pc, #20]	; (80097a0 <prvInitialiseTaskLists+0x68>)
 800978c:	601a      	str	r2, [r3, #0]
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200006ec 	.word	0x200006ec
 800979c:	20000b4c 	.word	0x20000b4c
 80097a0:	20000b60 	.word	0x20000b60
 80097a4:	20000b7c 	.word	0x20000b7c
 80097a8:	20000b90 	.word	0x20000b90
 80097ac:	20000ba8 	.word	0x20000ba8
 80097b0:	20000b74 	.word	0x20000b74
 80097b4:	20000b78 	.word	0x20000b78

080097b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097be:	e019      	b.n	80097f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097c0:	f000 fed0 	bl	800a564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c4:	4b10      	ldr	r3, [pc, #64]	; (8009808 <prvCheckTasksWaitingTermination+0x50>)
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fa19 	bl	8007c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <prvCheckTasksWaitingTermination+0x54>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	4a0b      	ldr	r2, [pc, #44]	; (800980c <prvCheckTasksWaitingTermination+0x54>)
 80097de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <prvCheckTasksWaitingTermination+0x58>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	4a0a      	ldr	r2, [pc, #40]	; (8009810 <prvCheckTasksWaitingTermination+0x58>)
 80097e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097ea:	f000 feeb 	bl	800a5c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f810 	bl	8009814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097f4:	4b06      	ldr	r3, [pc, #24]	; (8009810 <prvCheckTasksWaitingTermination+0x58>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e1      	bne.n	80097c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097fc:	bf00      	nop
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20000b90 	.word	0x20000b90
 800980c:	20000bbc 	.word	0x20000bbc
 8009810:	20000ba4 	.word	0x20000ba4

08009814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009822:	2b00      	cmp	r3, #0
 8009824:	d108      	bne.n	8009838 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	4618      	mov	r0, r3
 800982c:	f001 f888 	bl	800a940 <vPortFree>
				vPortFree( pxTCB );
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 f885 	bl	800a940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009836:	e018      	b.n	800986a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800983e:	2b01      	cmp	r3, #1
 8009840:	d103      	bne.n	800984a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 f87c 	bl	800a940 <vPortFree>
	}
 8009848:	e00f      	b.n	800986a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009850:	2b02      	cmp	r3, #2
 8009852:	d00a      	beq.n	800986a <prvDeleteTCB+0x56>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	60fb      	str	r3, [r7, #12]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <prvDeleteTCB+0x54>
	}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800987a:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <prvResetNextTaskUnblockTime+0x38>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d104      	bne.n	800988e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009884:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <prvResetNextTaskUnblockTime+0x3c>)
 8009886:	f04f 32ff 	mov.w	r2, #4294967295
 800988a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800988c:	e008      	b.n	80098a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800988e:	4b07      	ldr	r3, [pc, #28]	; (80098ac <prvResetNextTaskUnblockTime+0x38>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	4a04      	ldr	r2, [pc, #16]	; (80098b0 <prvResetNextTaskUnblockTime+0x3c>)
 800989e:	6013      	str	r3, [r2, #0]
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	20000b74 	.word	0x20000b74
 80098b0:	20000bdc 	.word	0x20000bdc

080098b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098ba:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <xTaskGetSchedulerState+0x34>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098c2:	2301      	movs	r3, #1
 80098c4:	607b      	str	r3, [r7, #4]
 80098c6:	e008      	b.n	80098da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c8:	4b08      	ldr	r3, [pc, #32]	; (80098ec <xTaskGetSchedulerState+0x38>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098d0:	2302      	movs	r3, #2
 80098d2:	607b      	str	r3, [r7, #4]
 80098d4:	e001      	b.n	80098da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098d6:	2300      	movs	r3, #0
 80098d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098da:	687b      	ldr	r3, [r7, #4]
	}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20000bc8 	.word	0x20000bc8
 80098ec:	20000be4 	.word	0x20000be4

080098f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80098fc:	2300      	movs	r3, #0
 80098fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d051      	beq.n	80099aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990a:	4b2a      	ldr	r3, [pc, #168]	; (80099b4 <xTaskPriorityInherit+0xc4>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	429a      	cmp	r2, r3
 8009912:	d241      	bcs.n	8009998 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	db06      	blt.n	800992a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800991c:	4b25      	ldr	r3, [pc, #148]	; (80099b4 <xTaskPriorityInherit+0xc4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009922:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6959      	ldr	r1, [r3, #20]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4a1f      	ldr	r2, [pc, #124]	; (80099b8 <xTaskPriorityInherit+0xc8>)
 800993c:	4413      	add	r3, r2
 800993e:	4299      	cmp	r1, r3
 8009940:	d122      	bne.n	8009988 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	3304      	adds	r3, #4
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe f95e 	bl	8007c08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800994c:	4b19      	ldr	r3, [pc, #100]	; (80099b4 <xTaskPriorityInherit+0xc4>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995a:	4b18      	ldr	r3, [pc, #96]	; (80099bc <xTaskPriorityInherit+0xcc>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d903      	bls.n	800996a <xTaskPriorityInherit+0x7a>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009966:	4a15      	ldr	r2, [pc, #84]	; (80099bc <xTaskPriorityInherit+0xcc>)
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4a10      	ldr	r2, [pc, #64]	; (80099b8 <xTaskPriorityInherit+0xc8>)
 8009978:	441a      	add	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	3304      	adds	r3, #4
 800997e:	4619      	mov	r1, r3
 8009980:	4610      	mov	r0, r2
 8009982:	f7fe f8e4 	bl	8007b4e <vListInsertEnd>
 8009986:	e004      	b.n	8009992 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009988:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <xTaskPriorityInherit+0xc4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009992:	2301      	movs	r3, #1
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	e008      	b.n	80099aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800999c:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <xTaskPriorityInherit+0xc4>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d201      	bcs.n	80099aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80099a6:	2301      	movs	r3, #1
 80099a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099aa:	68fb      	ldr	r3, [r7, #12]
	}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	200006e8 	.word	0x200006e8
 80099b8:	200006ec 	.word	0x200006ec
 80099bc:	20000bc4 	.word	0x20000bc4

080099c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d056      	beq.n	8009a84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099d6:	4b2e      	ldr	r3, [pc, #184]	; (8009a90 <xTaskPriorityDisinherit+0xd0>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d00a      	beq.n	80099f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10a      	bne.n	8009a14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	60bb      	str	r3, [r7, #8]
}
 8009a10:	bf00      	nop
 8009a12:	e7fe      	b.n	8009a12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a18:	1e5a      	subs	r2, r3, #1
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d02c      	beq.n	8009a84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d128      	bne.n	8009a84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	3304      	adds	r3, #4
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe f8e6 	bl	8007c08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a54:	4b0f      	ldr	r3, [pc, #60]	; (8009a94 <xTaskPriorityDisinherit+0xd4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d903      	bls.n	8009a64 <xTaskPriorityDisinherit+0xa4>
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	4a0c      	ldr	r2, [pc, #48]	; (8009a94 <xTaskPriorityDisinherit+0xd4>)
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <xTaskPriorityDisinherit+0xd8>)
 8009a72:	441a      	add	r2, r3
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f7fe f867 	bl	8007b4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a80:	2301      	movs	r3, #1
 8009a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a84:	697b      	ldr	r3, [r7, #20]
	}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	200006e8 	.word	0x200006e8
 8009a94:	20000bc4 	.word	0x20000bc4
 8009a98:	200006ec 	.word	0x200006ec

08009a9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d06a      	beq.n	8009b8a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10a      	bne.n	8009ad2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	60fb      	str	r3, [r7, #12]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d902      	bls.n	8009ae2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	61fb      	str	r3, [r7, #28]
 8009ae0:	e002      	b.n	8009ae8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	69fa      	ldr	r2, [r7, #28]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d04b      	beq.n	8009b8a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d146      	bne.n	8009b8a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009afc:	4b25      	ldr	r3, [pc, #148]	; (8009b94 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d10a      	bne.n	8009b1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	60bb      	str	r3, [r7, #8]
}
 8009b18:	bf00      	nop
 8009b1a:	e7fe      	b.n	8009b1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	db04      	blt.n	8009b3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	6959      	ldr	r1, [r3, #20]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4a13      	ldr	r2, [pc, #76]	; (8009b98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009b4a:	4413      	add	r3, r2
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	d11c      	bne.n	8009b8a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe f857 	bl	8007c08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d903      	bls.n	8009b6e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	4a0c      	ldr	r2, [pc, #48]	; (8009b9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4a07      	ldr	r2, [pc, #28]	; (8009b98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009b7c:	441a      	add	r2, r3
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f7fd ffe2 	bl	8007b4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b8a:	bf00      	nop
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	200006e8 	.word	0x200006e8
 8009b98:	200006ec 	.word	0x200006ec
 8009b9c:	20000bc4 	.word	0x20000bc4

08009ba0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009ba4:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bb2:	3201      	adds	r2, #1
 8009bb4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009bb6:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
	}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	200006e8 	.word	0x200006e8

08009bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bd2:	4b21      	ldr	r3, [pc, #132]	; (8009c58 <prvAddCurrentTaskToDelayedList+0x90>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bd8:	4b20      	ldr	r3, [pc, #128]	; (8009c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe f812 	bl	8007c08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bea:	d10a      	bne.n	8009c02 <prvAddCurrentTaskToDelayedList+0x3a>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d007      	beq.n	8009c02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bf2:	4b1a      	ldr	r3, [pc, #104]	; (8009c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4819      	ldr	r0, [pc, #100]	; (8009c60 <prvAddCurrentTaskToDelayedList+0x98>)
 8009bfc:	f7fd ffa7 	bl	8007b4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c00:	e026      	b.n	8009c50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4413      	add	r3, r2
 8009c08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c0a:	4b14      	ldr	r3, [pc, #80]	; (8009c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d209      	bcs.n	8009c2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c1a:	4b12      	ldr	r3, [pc, #72]	; (8009c64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3304      	adds	r3, #4
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7fd ffb5 	bl	8007b96 <vListInsert>
}
 8009c2c:	e010      	b.n	8009c50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c2e:	4b0e      	ldr	r3, [pc, #56]	; (8009c68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b0a      	ldr	r3, [pc, #40]	; (8009c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3304      	adds	r3, #4
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f7fd ffab 	bl	8007b96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c40:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d202      	bcs.n	8009c50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c4a:	4a08      	ldr	r2, [pc, #32]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	6013      	str	r3, [r2, #0]
}
 8009c50:	bf00      	nop
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20000bc0 	.word	0x20000bc0
 8009c5c:	200006e8 	.word	0x200006e8
 8009c60:	20000ba8 	.word	0x20000ba8
 8009c64:	20000b78 	.word	0x20000b78
 8009c68:	20000b74 	.word	0x20000b74
 8009c6c:	20000bdc 	.word	0x20000bdc

08009c70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c7a:	f000 fb07 	bl	800a28c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c7e:	4b1c      	ldr	r3, [pc, #112]	; (8009cf0 <xTimerCreateTimerTask+0x80>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d021      	beq.n	8009cca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c8e:	1d3a      	adds	r2, r7, #4
 8009c90:	f107 0108 	add.w	r1, r7, #8
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fd ff11 	bl	8007ac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	9202      	str	r2, [sp, #8]
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	2302      	movs	r3, #2
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	2300      	movs	r3, #0
 8009cae:	460a      	mov	r2, r1
 8009cb0:	4910      	ldr	r1, [pc, #64]	; (8009cf4 <xTimerCreateTimerTask+0x84>)
 8009cb2:	4811      	ldr	r0, [pc, #68]	; (8009cf8 <xTimerCreateTimerTask+0x88>)
 8009cb4:	f7fe ffe0 	bl	8008c78 <xTaskCreateStatic>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	4a10      	ldr	r2, [pc, #64]	; (8009cfc <xTimerCreateTimerTask+0x8c>)
 8009cbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <xTimerCreateTimerTask+0x8c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	613b      	str	r3, [r7, #16]
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ce6:	697b      	ldr	r3, [r7, #20]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	20000c18 	.word	0x20000c18
 8009cf4:	0800ac40 	.word	0x0800ac40
 8009cf8:	08009e35 	.word	0x08009e35
 8009cfc:	20000c1c 	.word	0x20000c1c

08009d00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08a      	sub	sp, #40	; 0x28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	623b      	str	r3, [r7, #32]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d2e:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <xTimerGenericCommand+0x98>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d02a      	beq.n	8009d8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b05      	cmp	r3, #5
 8009d46:	dc18      	bgt.n	8009d7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d48:	f7ff fdb4 	bl	80098b4 <xTaskGetSchedulerState>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d109      	bne.n	8009d66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d52:	4b11      	ldr	r3, [pc, #68]	; (8009d98 <xTimerGenericCommand+0x98>)
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	f107 0110 	add.w	r1, r7, #16
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d5e:	f7fe f925 	bl	8007fac <xQueueGenericSend>
 8009d62:	6278      	str	r0, [r7, #36]	; 0x24
 8009d64:	e012      	b.n	8009d8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d66:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <xTimerGenericCommand+0x98>)
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	f107 0110 	add.w	r1, r7, #16
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2200      	movs	r2, #0
 8009d72:	f7fe f91b 	bl	8007fac <xQueueGenericSend>
 8009d76:	6278      	str	r0, [r7, #36]	; 0x24
 8009d78:	e008      	b.n	8009d8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d7a:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <xTimerGenericCommand+0x98>)
 8009d7c:	6818      	ldr	r0, [r3, #0]
 8009d7e:	f107 0110 	add.w	r1, r7, #16
 8009d82:	2300      	movs	r3, #0
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	f7fe fa0f 	bl	80081a8 <xQueueGenericSendFromISR>
 8009d8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3728      	adds	r7, #40	; 0x28
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000c18 	.word	0x20000c18

08009d9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da6:	4b22      	ldr	r3, [pc, #136]	; (8009e30 <prvProcessExpiredTimer+0x94>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fd ff27 	bl	8007c08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d022      	beq.n	8009e0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	699a      	ldr	r2, [r3, #24]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	18d1      	adds	r1, r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	6978      	ldr	r0, [r7, #20]
 8009dd6:	f000 f8d1 	bl	8009f7c <prvInsertTimerInActiveList>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01f      	beq.n	8009e20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009de0:	2300      	movs	r3, #0
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	2100      	movs	r1, #0
 8009dea:	6978      	ldr	r0, [r7, #20]
 8009dec:	f7ff ff88 	bl	8009d00 <xTimerGenericCommand>
 8009df0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d113      	bne.n	8009e20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	60fb      	str	r3, [r7, #12]
}
 8009e0a:	bf00      	nop
 8009e0c:	e7fe      	b.n	8009e0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e14:	f023 0301 	bic.w	r3, r3, #1
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	6978      	ldr	r0, [r7, #20]
 8009e26:	4798      	blx	r3
}
 8009e28:	bf00      	nop
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20000c10 	.word	0x20000c10

08009e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e3c:	f107 0308 	add.w	r3, r7, #8
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 f857 	bl	8009ef4 <prvGetNextExpireTime>
 8009e46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 f803 	bl	8009e58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e52:	f000 f8d5 	bl	800a000 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e56:	e7f1      	b.n	8009e3c <prvTimerTask+0x8>

08009e58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e62:	f7ff f945 	bl	80090f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e66:	f107 0308 	add.w	r3, r7, #8
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 f866 	bl	8009f3c <prvSampleTimeNow>
 8009e70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d130      	bne.n	8009eda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <prvProcessTimerOrBlockTask+0x3c>
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d806      	bhi.n	8009e94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e86:	f7ff f941 	bl	800910c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e8a:	68f9      	ldr	r1, [r7, #12]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff ff85 	bl	8009d9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e92:	e024      	b.n	8009ede <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d008      	beq.n	8009eac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e9a:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <prvProcessTimerOrBlockTask+0x90>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <prvProcessTimerOrBlockTask+0x50>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <prvProcessTimerOrBlockTask+0x52>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009eac:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <prvProcessTimerOrBlockTask+0x94>)
 8009eae:	6818      	ldr	r0, [r3, #0]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f7fe fea9 	bl	8008c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ebe:	f7ff f925 	bl	800910c <xTaskResumeAll>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ec8:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <prvProcessTimerOrBlockTask+0x98>)
 8009eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	f3bf 8f6f 	isb	sy
}
 8009ed8:	e001      	b.n	8009ede <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009eda:	f7ff f917 	bl	800910c <xTaskResumeAll>
}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20000c14 	.word	0x20000c14
 8009eec:	20000c18 	.word	0x20000c18
 8009ef0:	e000ed04 	.word	0xe000ed04

08009ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009efc:	4b0e      	ldr	r3, [pc, #56]	; (8009f38 <prvGetNextExpireTime+0x44>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <prvGetNextExpireTime+0x16>
 8009f06:	2201      	movs	r2, #1
 8009f08:	e000      	b.n	8009f0c <prvGetNextExpireTime+0x18>
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d105      	bne.n	8009f24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f18:	4b07      	ldr	r3, [pc, #28]	; (8009f38 <prvGetNextExpireTime+0x44>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	e001      	b.n	8009f28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f28:	68fb      	ldr	r3, [r7, #12]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	20000c10 	.word	0x20000c10

08009f3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f44:	f7ff f980 	bl	8009248 <xTaskGetTickCount>
 8009f48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <prvSampleTimeNow+0x3c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d205      	bcs.n	8009f60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f54:	f000 f936 	bl	800a1c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	e002      	b.n	8009f66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f66:	4a04      	ldr	r2, [pc, #16]	; (8009f78 <prvSampleTimeNow+0x3c>)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20000c20 	.word	0x20000c20

08009f7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d812      	bhi.n	8009fc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d302      	bcc.n	8009fb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	e01b      	b.n	8009fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009fb6:	4b10      	ldr	r3, [pc, #64]	; (8009ff8 <prvInsertTimerInActiveList+0x7c>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	f7fd fde8 	bl	8007b96 <vListInsert>
 8009fc6:	e012      	b.n	8009fee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d206      	bcs.n	8009fde <prvInsertTimerInActiveList+0x62>
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d302      	bcc.n	8009fde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	617b      	str	r3, [r7, #20]
 8009fdc:	e007      	b.n	8009fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fde:	4b07      	ldr	r3, [pc, #28]	; (8009ffc <prvInsertTimerInActiveList+0x80>)
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f7fd fdd4 	bl	8007b96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fee:	697b      	ldr	r3, [r7, #20]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	20000c14 	.word	0x20000c14
 8009ffc:	20000c10 	.word	0x20000c10

0800a000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a006:	e0ca      	b.n	800a19e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	da18      	bge.n	800a040 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a00e:	1d3b      	adds	r3, r7, #4
 800a010:	3304      	adds	r3, #4
 800a012:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10a      	bne.n	800a030 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	61fb      	str	r3, [r7, #28]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a036:	6850      	ldr	r0, [r2, #4]
 800a038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a03a:	6892      	ldr	r2, [r2, #8]
 800a03c:	4611      	mov	r1, r2
 800a03e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	f2c0 80aa 	blt.w	800a19c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	695b      	ldr	r3, [r3, #20]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	3304      	adds	r3, #4
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fd fdd5 	bl	8007c08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a05e:	463b      	mov	r3, r7
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff ff6b 	bl	8009f3c <prvSampleTimeNow>
 800a066:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b09      	cmp	r3, #9
 800a06c:	f200 8097 	bhi.w	800a19e <prvProcessReceivedCommands+0x19e>
 800a070:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <prvProcessReceivedCommands+0x78>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a0a1 	.word	0x0800a0a1
 800a07c:	0800a0a1 	.word	0x0800a0a1
 800a080:	0800a0a1 	.word	0x0800a0a1
 800a084:	0800a115 	.word	0x0800a115
 800a088:	0800a129 	.word	0x0800a129
 800a08c:	0800a173 	.word	0x0800a173
 800a090:	0800a0a1 	.word	0x0800a0a1
 800a094:	0800a0a1 	.word	0x0800a0a1
 800a098:	0800a115 	.word	0x0800a115
 800a09c:	0800a129 	.word	0x0800a129
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0a6:	f043 0301 	orr.w	r3, r3, #1
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	18d1      	adds	r1, r2, r3
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c0:	f7ff ff5c 	bl	8009f7c <prvInsertTimerInActiveList>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d069      	beq.n	800a19e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d05e      	beq.n	800a19e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	441a      	add	r2, r3
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f2:	f7ff fe05 	bl	8009d00 <xTimerGenericCommand>
 800a0f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d14f      	bne.n	800a19e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	61bb      	str	r3, [r7, #24]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a11a:	f023 0301 	bic.w	r3, r3, #1
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a126:	e03a      	b.n	800a19e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a12e:	f043 0301 	orr.w	r3, r3, #1
 800a132:	b2da      	uxtb	r2, r3
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	617b      	str	r3, [r7, #20]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	18d1      	adds	r1, r2, r3
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a16c:	f7ff ff06 	bl	8009f7c <prvInsertTimerInActiveList>
					break;
 800a170:	e015      	b.n	800a19e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d103      	bne.n	800a188 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a182:	f000 fbdd 	bl	800a940 <vPortFree>
 800a186:	e00a      	b.n	800a19e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	b2da      	uxtb	r2, r3
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a19a:	e000      	b.n	800a19e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a19c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a19e:	4b08      	ldr	r3, [pc, #32]	; (800a1c0 <prvProcessReceivedCommands+0x1c0>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	1d39      	adds	r1, r7, #4
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe f926 	bl	80083f8 <xQueueReceive>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f47f af2a 	bne.w	800a008 <prvProcessReceivedCommands+0x8>
	}
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	3730      	adds	r7, #48	; 0x30
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000c18 	.word	0x20000c18

0800a1c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1ca:	e048      	b.n	800a25e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1cc:	4b2d      	ldr	r3, [pc, #180]	; (800a284 <prvSwitchTimerLists+0xc0>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1d6:	4b2b      	ldr	r3, [pc, #172]	; (800a284 <prvSwitchTimerLists+0xc0>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fd fd0f 	bl	8007c08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1f8:	f003 0304 	and.w	r3, r3, #4
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d02e      	beq.n	800a25e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	4413      	add	r3, r2
 800a208:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d90e      	bls.n	800a230 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a21e:	4b19      	ldr	r3, [pc, #100]	; (800a284 <prvSwitchTimerLists+0xc0>)
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3304      	adds	r3, #4
 800a226:	4619      	mov	r1, r3
 800a228:	4610      	mov	r0, r2
 800a22a:	f7fd fcb4 	bl	8007b96 <vListInsert>
 800a22e:	e016      	b.n	800a25e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a230:	2300      	movs	r3, #0
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	2300      	movs	r3, #0
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	2100      	movs	r1, #0
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7ff fd60 	bl	8009d00 <xTimerGenericCommand>
 800a240:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	603b      	str	r3, [r7, #0]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a25e:	4b09      	ldr	r3, [pc, #36]	; (800a284 <prvSwitchTimerLists+0xc0>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1b1      	bne.n	800a1cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a268:	4b06      	ldr	r3, [pc, #24]	; (800a284 <prvSwitchTimerLists+0xc0>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a26e:	4b06      	ldr	r3, [pc, #24]	; (800a288 <prvSwitchTimerLists+0xc4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a04      	ldr	r2, [pc, #16]	; (800a284 <prvSwitchTimerLists+0xc0>)
 800a274:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a276:	4a04      	ldr	r2, [pc, #16]	; (800a288 <prvSwitchTimerLists+0xc4>)
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	6013      	str	r3, [r2, #0]
}
 800a27c:	bf00      	nop
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20000c10 	.word	0x20000c10
 800a288:	20000c14 	.word	0x20000c14

0800a28c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a292:	f000 f967 	bl	800a564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a296:	4b15      	ldr	r3, [pc, #84]	; (800a2ec <prvCheckForValidListAndQueue+0x60>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d120      	bne.n	800a2e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a29e:	4814      	ldr	r0, [pc, #80]	; (800a2f0 <prvCheckForValidListAndQueue+0x64>)
 800a2a0:	f7fd fc28 	bl	8007af4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2a4:	4813      	ldr	r0, [pc, #76]	; (800a2f4 <prvCheckForValidListAndQueue+0x68>)
 800a2a6:	f7fd fc25 	bl	8007af4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2aa:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <prvCheckForValidListAndQueue+0x6c>)
 800a2ac:	4a10      	ldr	r2, [pc, #64]	; (800a2f0 <prvCheckForValidListAndQueue+0x64>)
 800a2ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2b0:	4b12      	ldr	r3, [pc, #72]	; (800a2fc <prvCheckForValidListAndQueue+0x70>)
 800a2b2:	4a10      	ldr	r2, [pc, #64]	; (800a2f4 <prvCheckForValidListAndQueue+0x68>)
 800a2b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	4b11      	ldr	r3, [pc, #68]	; (800a300 <prvCheckForValidListAndQueue+0x74>)
 800a2bc:	4a11      	ldr	r2, [pc, #68]	; (800a304 <prvCheckForValidListAndQueue+0x78>)
 800a2be:	2110      	movs	r1, #16
 800a2c0:	200a      	movs	r0, #10
 800a2c2:	f7fd fd33 	bl	8007d2c <xQueueGenericCreateStatic>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	4a08      	ldr	r2, [pc, #32]	; (800a2ec <prvCheckForValidListAndQueue+0x60>)
 800a2ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a2cc:	4b07      	ldr	r3, [pc, #28]	; (800a2ec <prvCheckForValidListAndQueue+0x60>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d005      	beq.n	800a2e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2d4:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <prvCheckForValidListAndQueue+0x60>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	490b      	ldr	r1, [pc, #44]	; (800a308 <prvCheckForValidListAndQueue+0x7c>)
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe fc44 	bl	8008b68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2e0:	f000 f970 	bl	800a5c4 <vPortExitCritical>
}
 800a2e4:	bf00      	nop
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000c18 	.word	0x20000c18
 800a2f0:	20000be8 	.word	0x20000be8
 800a2f4:	20000bfc 	.word	0x20000bfc
 800a2f8:	20000c10 	.word	0x20000c10
 800a2fc:	20000c14 	.word	0x20000c14
 800a300:	20000cc4 	.word	0x20000cc4
 800a304:	20000c24 	.word	0x20000c24
 800a308:	0800ac48 	.word	0x0800ac48

0800a30c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3b04      	subs	r3, #4
 800a31c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3b04      	subs	r3, #4
 800a32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f023 0201 	bic.w	r2, r3, #1
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3b04      	subs	r3, #4
 800a33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a33c:	4a0c      	ldr	r2, [pc, #48]	; (800a370 <pxPortInitialiseStack+0x64>)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3b14      	subs	r3, #20
 800a346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3b04      	subs	r3, #4
 800a352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f06f 0202 	mvn.w	r2, #2
 800a35a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3b20      	subs	r3, #32
 800a360:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a362:	68fb      	ldr	r3, [r7, #12]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	0800a375 	.word	0x0800a375

0800a374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a37e:	4b12      	ldr	r3, [pc, #72]	; (800a3c8 <prvTaskExitError+0x54>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a386:	d00a      	beq.n	800a39e <prvTaskExitError+0x2a>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	60fb      	str	r3, [r7, #12]
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <prvTaskExitError+0x28>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	60bb      	str	r3, [r7, #8]
}
 800a3b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3b2:	bf00      	nop
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0fc      	beq.n	800a3b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3ba:	bf00      	nop
 800a3bc:	bf00      	nop
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	2000000c 	.word	0x2000000c
 800a3cc:	00000000 	.word	0x00000000

0800a3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3d0:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <pxCurrentTCBConst2>)
 800a3d2:	6819      	ldr	r1, [r3, #0]
 800a3d4:	6808      	ldr	r0, [r1, #0]
 800a3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3da:	f380 8809 	msr	PSP, r0
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f04f 0000 	mov.w	r0, #0
 800a3e6:	f380 8811 	msr	BASEPRI, r0
 800a3ea:	4770      	bx	lr
 800a3ec:	f3af 8000 	nop.w

0800a3f0 <pxCurrentTCBConst2>:
 800a3f0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop

0800a3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3f8:	4808      	ldr	r0, [pc, #32]	; (800a41c <prvPortStartFirstTask+0x24>)
 800a3fa:	6800      	ldr	r0, [r0, #0]
 800a3fc:	6800      	ldr	r0, [r0, #0]
 800a3fe:	f380 8808 	msr	MSP, r0
 800a402:	f04f 0000 	mov.w	r0, #0
 800a406:	f380 8814 	msr	CONTROL, r0
 800a40a:	b662      	cpsie	i
 800a40c:	b661      	cpsie	f
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	df00      	svc	0
 800a418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a41a:	bf00      	nop
 800a41c:	e000ed08 	.word	0xe000ed08

0800a420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a426:	4b46      	ldr	r3, [pc, #280]	; (800a540 <xPortStartScheduler+0x120>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a46      	ldr	r2, [pc, #280]	; (800a544 <xPortStartScheduler+0x124>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d10a      	bne.n	800a446 <xPortStartScheduler+0x26>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	613b      	str	r3, [r7, #16]
}
 800a442:	bf00      	nop
 800a444:	e7fe      	b.n	800a444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a446:	4b3e      	ldr	r3, [pc, #248]	; (800a540 <xPortStartScheduler+0x120>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a3f      	ldr	r2, [pc, #252]	; (800a548 <xPortStartScheduler+0x128>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d10a      	bne.n	800a466 <xPortStartScheduler+0x46>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	60fb      	str	r3, [r7, #12]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a466:	4b39      	ldr	r3, [pc, #228]	; (800a54c <xPortStartScheduler+0x12c>)
 800a468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	22ff      	movs	r2, #255	; 0xff
 800a476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	b2db      	uxtb	r3, r3
 800a484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	4b31      	ldr	r3, [pc, #196]	; (800a550 <xPortStartScheduler+0x130>)
 800a48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a48e:	4b31      	ldr	r3, [pc, #196]	; (800a554 <xPortStartScheduler+0x134>)
 800a490:	2207      	movs	r2, #7
 800a492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a494:	e009      	b.n	800a4aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a496:	4b2f      	ldr	r3, [pc, #188]	; (800a554 <xPortStartScheduler+0x134>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	4a2d      	ldr	r2, [pc, #180]	; (800a554 <xPortStartScheduler+0x134>)
 800a49e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4aa:	78fb      	ldrb	r3, [r7, #3]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b2:	2b80      	cmp	r3, #128	; 0x80
 800a4b4:	d0ef      	beq.n	800a496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4b6:	4b27      	ldr	r3, [pc, #156]	; (800a554 <xPortStartScheduler+0x134>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f1c3 0307 	rsb	r3, r3, #7
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d00a      	beq.n	800a4d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60bb      	str	r3, [r7, #8]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4d8:	4b1e      	ldr	r3, [pc, #120]	; (800a554 <xPortStartScheduler+0x134>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	4a1d      	ldr	r2, [pc, #116]	; (800a554 <xPortStartScheduler+0x134>)
 800a4e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4e2:	4b1c      	ldr	r3, [pc, #112]	; (800a554 <xPortStartScheduler+0x134>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4ea:	4a1a      	ldr	r2, [pc, #104]	; (800a554 <xPortStartScheduler+0x134>)
 800a4ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4f6:	4b18      	ldr	r3, [pc, #96]	; (800a558 <xPortStartScheduler+0x138>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a17      	ldr	r2, [pc, #92]	; (800a558 <xPortStartScheduler+0x138>)
 800a4fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a502:	4b15      	ldr	r3, [pc, #84]	; (800a558 <xPortStartScheduler+0x138>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a14      	ldr	r2, [pc, #80]	; (800a558 <xPortStartScheduler+0x138>)
 800a508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a50c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a50e:	f000 f8dd 	bl	800a6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a512:	4b12      	ldr	r3, [pc, #72]	; (800a55c <xPortStartScheduler+0x13c>)
 800a514:	2200      	movs	r2, #0
 800a516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a518:	f000 f8fc 	bl	800a714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <xPortStartScheduler+0x140>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a0f      	ldr	r2, [pc, #60]	; (800a560 <xPortStartScheduler+0x140>)
 800a522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a528:	f7ff ff66 	bl	800a3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a52c:	f7fe ff56 	bl	80093dc <vTaskSwitchContext>
	prvTaskExitError();
 800a530:	f7ff ff20 	bl	800a374 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	e000ed00 	.word	0xe000ed00
 800a544:	410fc271 	.word	0x410fc271
 800a548:	410fc270 	.word	0x410fc270
 800a54c:	e000e400 	.word	0xe000e400
 800a550:	20000d14 	.word	0x20000d14
 800a554:	20000d18 	.word	0x20000d18
 800a558:	e000ed20 	.word	0xe000ed20
 800a55c:	2000000c 	.word	0x2000000c
 800a560:	e000ef34 	.word	0xe000ef34

0800a564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	607b      	str	r3, [r7, #4]
}
 800a57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a57e:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <vPortEnterCritical+0x58>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3301      	adds	r3, #1
 800a584:	4a0d      	ldr	r2, [pc, #52]	; (800a5bc <vPortEnterCritical+0x58>)
 800a586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a588:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <vPortEnterCritical+0x58>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d10f      	bne.n	800a5b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a590:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <vPortEnterCritical+0x5c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	603b      	str	r3, [r7, #0]
}
 800a5ac:	bf00      	nop
 800a5ae:	e7fe      	b.n	800a5ae <vPortEnterCritical+0x4a>
	}
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	2000000c 	.word	0x2000000c
 800a5c0:	e000ed04 	.word	0xe000ed04

0800a5c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5ca:	4b12      	ldr	r3, [pc, #72]	; (800a614 <vPortExitCritical+0x50>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <vPortExitCritical+0x24>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	607b      	str	r3, [r7, #4]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a5e8:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <vPortExitCritical+0x50>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	4a09      	ldr	r2, [pc, #36]	; (800a614 <vPortExitCritical+0x50>)
 800a5f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5f2:	4b08      	ldr	r3, [pc, #32]	; (800a614 <vPortExitCritical+0x50>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <vPortExitCritical+0x42>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	f383 8811 	msr	BASEPRI, r3
}
 800a604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	2000000c 	.word	0x2000000c
	...

0800a620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a620:	f3ef 8009 	mrs	r0, PSP
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	4b15      	ldr	r3, [pc, #84]	; (800a680 <pxCurrentTCBConst>)
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	f01e 0f10 	tst.w	lr, #16
 800a630:	bf08      	it	eq
 800a632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63a:	6010      	str	r0, [r2, #0]
 800a63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a644:	f380 8811 	msr	BASEPRI, r0
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f7fe fec4 	bl	80093dc <vTaskSwitchContext>
 800a654:	f04f 0000 	mov.w	r0, #0
 800a658:	f380 8811 	msr	BASEPRI, r0
 800a65c:	bc09      	pop	{r0, r3}
 800a65e:	6819      	ldr	r1, [r3, #0]
 800a660:	6808      	ldr	r0, [r1, #0]
 800a662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a666:	f01e 0f10 	tst.w	lr, #16
 800a66a:	bf08      	it	eq
 800a66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a670:	f380 8809 	msr	PSP, r0
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	f3af 8000 	nop.w

0800a680 <pxCurrentTCBConst>:
 800a680:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a684:	bf00      	nop
 800a686:	bf00      	nop

0800a688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	607b      	str	r3, [r7, #4]
}
 800a6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6a2:	f7fe fde1 	bl	8009268 <xTaskIncrementTick>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d003      	beq.n	800a6b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6ac:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <xPortSysTickHandler+0x40>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	f383 8811 	msr	BASEPRI, r3
}
 800a6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6d0:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <vPortSetupTimerInterrupt+0x34>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6d6:	4b0b      	ldr	r3, [pc, #44]	; (800a704 <vPortSetupTimerInterrupt+0x38>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6dc:	4b0a      	ldr	r3, [pc, #40]	; (800a708 <vPortSetupTimerInterrupt+0x3c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a0a      	ldr	r2, [pc, #40]	; (800a70c <vPortSetupTimerInterrupt+0x40>)
 800a6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e6:	099b      	lsrs	r3, r3, #6
 800a6e8:	4a09      	ldr	r2, [pc, #36]	; (800a710 <vPortSetupTimerInterrupt+0x44>)
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6ee:	4b04      	ldr	r3, [pc, #16]	; (800a700 <vPortSetupTimerInterrupt+0x34>)
 800a6f0:	2207      	movs	r2, #7
 800a6f2:	601a      	str	r2, [r3, #0]
}
 800a6f4:	bf00      	nop
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	e000e010 	.word	0xe000e010
 800a704:	e000e018 	.word	0xe000e018
 800a708:	20000000 	.word	0x20000000
 800a70c:	10624dd3 	.word	0x10624dd3
 800a710:	e000e014 	.word	0xe000e014

0800a714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a724 <vPortEnableVFP+0x10>
 800a718:	6801      	ldr	r1, [r0, #0]
 800a71a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a71e:	6001      	str	r1, [r0, #0]
 800a720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a722:	bf00      	nop
 800a724:	e000ed88 	.word	0xe000ed88

0800a728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a72e:	f3ef 8305 	mrs	r3, IPSR
 800a732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b0f      	cmp	r3, #15
 800a738:	d914      	bls.n	800a764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a73a:	4a17      	ldr	r2, [pc, #92]	; (800a798 <vPortValidateInterruptPriority+0x70>)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a744:	4b15      	ldr	r3, [pc, #84]	; (800a79c <vPortValidateInterruptPriority+0x74>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	7afa      	ldrb	r2, [r7, #11]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d20a      	bcs.n	800a764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	607b      	str	r3, [r7, #4]
}
 800a760:	bf00      	nop
 800a762:	e7fe      	b.n	800a762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a764:	4b0e      	ldr	r3, [pc, #56]	; (800a7a0 <vPortValidateInterruptPriority+0x78>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a76c:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <vPortValidateInterruptPriority+0x7c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	429a      	cmp	r2, r3
 800a772:	d90a      	bls.n	800a78a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	603b      	str	r3, [r7, #0]
}
 800a786:	bf00      	nop
 800a788:	e7fe      	b.n	800a788 <vPortValidateInterruptPriority+0x60>
	}
 800a78a:	bf00      	nop
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	e000e3f0 	.word	0xe000e3f0
 800a79c:	20000d14 	.word	0x20000d14
 800a7a0:	e000ed0c 	.word	0xe000ed0c
 800a7a4:	20000d18 	.word	0x20000d18

0800a7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	; 0x28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7b4:	f7fe fc9c 	bl	80090f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7b8:	4b5b      	ldr	r3, [pc, #364]	; (800a928 <pvPortMalloc+0x180>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7c0:	f000 f920 	bl	800aa04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7c4:	4b59      	ldr	r3, [pc, #356]	; (800a92c <pvPortMalloc+0x184>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f040 8093 	bne.w	800a8f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01d      	beq.n	800a814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a7d8:	2208      	movs	r2, #8
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4413      	add	r3, r2
 800a7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d014      	beq.n	800a814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f023 0307 	bic.w	r3, r3, #7
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f003 0307 	and.w	r3, r3, #7
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <pvPortMalloc+0x6c>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	617b      	str	r3, [r7, #20]
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d06e      	beq.n	800a8f8 <pvPortMalloc+0x150>
 800a81a:	4b45      	ldr	r3, [pc, #276]	; (800a930 <pvPortMalloc+0x188>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	429a      	cmp	r2, r3
 800a822:	d869      	bhi.n	800a8f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a824:	4b43      	ldr	r3, [pc, #268]	; (800a934 <pvPortMalloc+0x18c>)
 800a826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a828:	4b42      	ldr	r3, [pc, #264]	; (800a934 <pvPortMalloc+0x18c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a82e:	e004      	b.n	800a83a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	429a      	cmp	r2, r3
 800a842:	d903      	bls.n	800a84c <pvPortMalloc+0xa4>
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1f1      	bne.n	800a830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a84c:	4b36      	ldr	r3, [pc, #216]	; (800a928 <pvPortMalloc+0x180>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a852:	429a      	cmp	r2, r3
 800a854:	d050      	beq.n	800a8f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2208      	movs	r2, #8
 800a85c:	4413      	add	r3, r2
 800a85e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	2308      	movs	r3, #8
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	429a      	cmp	r2, r3
 800a876:	d91f      	bls.n	800a8b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4413      	add	r3, r2
 800a87e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	f003 0307 	and.w	r3, r3, #7
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	613b      	str	r3, [r7, #16]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	1ad2      	subs	r2, r2, r3
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8b2:	69b8      	ldr	r0, [r7, #24]
 800a8b4:	f000 f908 	bl	800aac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8b8:	4b1d      	ldr	r3, [pc, #116]	; (800a930 <pvPortMalloc+0x188>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	4a1b      	ldr	r2, [pc, #108]	; (800a930 <pvPortMalloc+0x188>)
 800a8c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8c6:	4b1a      	ldr	r3, [pc, #104]	; (800a930 <pvPortMalloc+0x188>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	4b1b      	ldr	r3, [pc, #108]	; (800a938 <pvPortMalloc+0x190>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d203      	bcs.n	800a8da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8d2:	4b17      	ldr	r3, [pc, #92]	; (800a930 <pvPortMalloc+0x188>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a18      	ldr	r2, [pc, #96]	; (800a938 <pvPortMalloc+0x190>)
 800a8d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	4b13      	ldr	r3, [pc, #76]	; (800a92c <pvPortMalloc+0x184>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a8ee:	4b13      	ldr	r3, [pc, #76]	; (800a93c <pvPortMalloc+0x194>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	4a11      	ldr	r2, [pc, #68]	; (800a93c <pvPortMalloc+0x194>)
 800a8f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8f8:	f7fe fc08 	bl	800910c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	f003 0307 	and.w	r3, r3, #7
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00a      	beq.n	800a91c <pvPortMalloc+0x174>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	60fb      	str	r3, [r7, #12]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <pvPortMalloc+0x172>
	return pvReturn;
 800a91c:	69fb      	ldr	r3, [r7, #28]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3728      	adds	r7, #40	; 0x28
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20004924 	.word	0x20004924
 800a92c:	20004938 	.word	0x20004938
 800a930:	20004928 	.word	0x20004928
 800a934:	2000491c 	.word	0x2000491c
 800a938:	2000492c 	.word	0x2000492c
 800a93c:	20004930 	.word	0x20004930

0800a940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d04d      	beq.n	800a9ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a952:	2308      	movs	r3, #8
 800a954:	425b      	negs	r3, r3
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	4413      	add	r3, r2
 800a95a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	4b24      	ldr	r3, [pc, #144]	; (800a9f8 <vPortFree+0xb8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4013      	ands	r3, r2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <vPortFree+0x44>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	60fb      	str	r3, [r7, #12]
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00a      	beq.n	800a9a2 <vPortFree+0x62>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	60bb      	str	r3, [r7, #8]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	4b14      	ldr	r3, [pc, #80]	; (800a9f8 <vPortFree+0xb8>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d01e      	beq.n	800a9ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d11a      	bne.n	800a9ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <vPortFree+0xb8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	43db      	mvns	r3, r3
 800a9c2:	401a      	ands	r2, r3
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9c8:	f7fe fb92 	bl	80090f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <vPortFree+0xbc>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <vPortFree+0xbc>)
 800a9d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9da:	6938      	ldr	r0, [r7, #16]
 800a9dc:	f000 f874 	bl	800aac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a9e0:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <vPortFree+0xc0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	4a06      	ldr	r2, [pc, #24]	; (800aa00 <vPortFree+0xc0>)
 800a9e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a9ea:	f7fe fb8f 	bl	800910c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9ee:	bf00      	nop
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20004938 	.word	0x20004938
 800a9fc:	20004928 	.word	0x20004928
 800aa00:	20004934 	.word	0x20004934

0800aa04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa10:	4b27      	ldr	r3, [pc, #156]	; (800aab0 <prvHeapInit+0xac>)
 800aa12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00c      	beq.n	800aa38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3307      	adds	r3, #7
 800aa22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0307 	bic.w	r3, r3, #7
 800aa2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	4a1f      	ldr	r2, [pc, #124]	; (800aab0 <prvHeapInit+0xac>)
 800aa34:	4413      	add	r3, r2
 800aa36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa3c:	4a1d      	ldr	r2, [pc, #116]	; (800aab4 <prvHeapInit+0xb0>)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa42:	4b1c      	ldr	r3, [pc, #112]	; (800aab4 <prvHeapInit+0xb0>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa50:	2208      	movs	r2, #8
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	1a9b      	subs	r3, r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0307 	bic.w	r3, r3, #7
 800aa5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4a15      	ldr	r2, [pc, #84]	; (800aab8 <prvHeapInit+0xb4>)
 800aa64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa66:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <prvHeapInit+0xb4>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa6e:	4b12      	ldr	r3, [pc, #72]	; (800aab8 <prvHeapInit+0xb4>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	1ad2      	subs	r2, r2, r3
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa84:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <prvHeapInit+0xb4>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	4a0a      	ldr	r2, [pc, #40]	; (800aabc <prvHeapInit+0xb8>)
 800aa92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <prvHeapInit+0xbc>)
 800aa9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa9c:	4b09      	ldr	r3, [pc, #36]	; (800aac4 <prvHeapInit+0xc0>)
 800aa9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aaa2:	601a      	str	r2, [r3, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	20000d1c 	.word	0x20000d1c
 800aab4:	2000491c 	.word	0x2000491c
 800aab8:	20004924 	.word	0x20004924
 800aabc:	2000492c 	.word	0x2000492c
 800aac0:	20004928 	.word	0x20004928
 800aac4:	20004938 	.word	0x20004938

0800aac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aad0:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <prvInsertBlockIntoFreeList+0xac>)
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	e002      	b.n	800aadc <prvInsertBlockIntoFreeList+0x14>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d8f7      	bhi.n	800aad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d108      	bne.n	800ab0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	441a      	add	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	441a      	add	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d118      	bne.n	800ab50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b15      	ldr	r3, [pc, #84]	; (800ab78 <prvInsertBlockIntoFreeList+0xb0>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d00d      	beq.n	800ab46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	441a      	add	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	e008      	b.n	800ab58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab46:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <prvInsertBlockIntoFreeList+0xb0>)
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	e003      	b.n	800ab58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d002      	beq.n	800ab66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab66:	bf00      	nop
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	2000491c 	.word	0x2000491c
 800ab78:	20004924 	.word	0x20004924

0800ab7c <__libc_init_array>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	4d0d      	ldr	r5, [pc, #52]	; (800abb4 <__libc_init_array+0x38>)
 800ab80:	4c0d      	ldr	r4, [pc, #52]	; (800abb8 <__libc_init_array+0x3c>)
 800ab82:	1b64      	subs	r4, r4, r5
 800ab84:	10a4      	asrs	r4, r4, #2
 800ab86:	2600      	movs	r6, #0
 800ab88:	42a6      	cmp	r6, r4
 800ab8a:	d109      	bne.n	800aba0 <__libc_init_array+0x24>
 800ab8c:	4d0b      	ldr	r5, [pc, #44]	; (800abbc <__libc_init_array+0x40>)
 800ab8e:	4c0c      	ldr	r4, [pc, #48]	; (800abc0 <__libc_init_array+0x44>)
 800ab90:	f000 f82e 	bl	800abf0 <_init>
 800ab94:	1b64      	subs	r4, r4, r5
 800ab96:	10a4      	asrs	r4, r4, #2
 800ab98:	2600      	movs	r6, #0
 800ab9a:	42a6      	cmp	r6, r4
 800ab9c:	d105      	bne.n	800abaa <__libc_init_array+0x2e>
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}
 800aba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba4:	4798      	blx	r3
 800aba6:	3601      	adds	r6, #1
 800aba8:	e7ee      	b.n	800ab88 <__libc_init_array+0xc>
 800abaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800abae:	4798      	blx	r3
 800abb0:	3601      	adds	r6, #1
 800abb2:	e7f2      	b.n	800ab9a <__libc_init_array+0x1e>
 800abb4:	0800acf4 	.word	0x0800acf4
 800abb8:	0800acf4 	.word	0x0800acf4
 800abbc:	0800acf4 	.word	0x0800acf4
 800abc0:	0800acf8 	.word	0x0800acf8

0800abc4 <memcpy>:
 800abc4:	440a      	add	r2, r1
 800abc6:	4291      	cmp	r1, r2
 800abc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800abcc:	d100      	bne.n	800abd0 <memcpy+0xc>
 800abce:	4770      	bx	lr
 800abd0:	b510      	push	{r4, lr}
 800abd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abda:	4291      	cmp	r1, r2
 800abdc:	d1f9      	bne.n	800abd2 <memcpy+0xe>
 800abde:	bd10      	pop	{r4, pc}

0800abe0 <memset>:
 800abe0:	4402      	add	r2, r0
 800abe2:	4603      	mov	r3, r0
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d100      	bne.n	800abea <memset+0xa>
 800abe8:	4770      	bx	lr
 800abea:	f803 1b01 	strb.w	r1, [r3], #1
 800abee:	e7f9      	b.n	800abe4 <memset+0x4>

0800abf0 <_init>:
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	bf00      	nop
 800abf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf6:	bc08      	pop	{r3}
 800abf8:	469e      	mov	lr, r3
 800abfa:	4770      	bx	lr

0800abfc <_fini>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	bf00      	nop
 800ac00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac02:	bc08      	pop	{r3}
 800ac04:	469e      	mov	lr, r3
 800ac06:	4770      	bx	lr
