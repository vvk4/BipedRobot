
RobotController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800d010  0800d010  0001d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d154  0800d154  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d154  0800d154  0001d154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d15c  0800d15c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d15c  0800d15c  0001d15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d160  0800d160  0001d160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800d164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005220  20000084  0800d1e8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052a4  0800d1e8  000252a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000251e1  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af1  00000000  00000000  00045295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  00049d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  0004b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025037  00000000  00000000  0004cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d438  00000000  00000000  00072027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4e04  00000000  00000000  0008f45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174263  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007030  00000000  00000000  001742b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cff8 	.word	0x0800cff8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800cff8 	.word	0x0800cff8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b96e 	b.w	8000e3c <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9d08      	ldr	r5, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	468c      	mov	ip, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 8083 	bne.w	8000c8e <__udivmoddi4+0x116>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4617      	mov	r7, r2
 8000b8c:	d947      	bls.n	8000c1e <__udivmoddi4+0xa6>
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	b142      	cbz	r2, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	f1c2 0020 	rsb	r0, r2, #32
 8000b98:	fa24 f000 	lsr.w	r0, r4, r0
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	4097      	lsls	r7, r2
 8000ba0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba4:	4094      	lsls	r4, r2
 8000ba6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000baa:	0c23      	lsrs	r3, r4, #16
 8000bac:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb0:	fa1f fe87 	uxth.w	lr, r7
 8000bb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x60>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bca:	f080 8119 	bcs.w	8000e00 <__udivmoddi4+0x288>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 8116 	bls.w	8000e00 <__udivmoddi4+0x288>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be0:	fb08 3310 	mls	r3, r8, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x8c>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	f080 8105 	bcs.w	8000e04 <__udivmoddi4+0x28c>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f240 8102 	bls.w	8000e04 <__udivmoddi4+0x28c>
 8000c00:	3802      	subs	r0, #2
 8000c02:	443c      	add	r4, r7
 8000c04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c08:	eba4 040e 	sub.w	r4, r4, lr
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	b11d      	cbz	r5, 8000c18 <__udivmoddi4+0xa0>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c5 4300 	strd	r4, r3, [r5]
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xaa>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d150      	bne.n	8000ccc <__udivmoddi4+0x154>
 8000c2a:	1bcb      	subs	r3, r1, r7
 8000c2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c30:	fa1f f887 	uxth.w	r8, r7
 8000c34:	2601      	movs	r6, #1
 8000c36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c3a:	0c21      	lsrs	r1, r4, #16
 8000c3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb08 f30c 	mul.w	r3, r8, ip
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0xe4>
 8000c4c:	1879      	adds	r1, r7, r1
 8000c4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0xe2>
 8000c54:	428b      	cmp	r3, r1
 8000c56:	f200 80e9 	bhi.w	8000e2c <__udivmoddi4+0x2b4>
 8000c5a:	4684      	mov	ip, r0
 8000c5c:	1ac9      	subs	r1, r1, r3
 8000c5e:	b2a3      	uxth	r3, r4
 8000c60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c6c:	fb08 f800 	mul.w	r8, r8, r0
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x10c>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x10a>
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	f200 80d9 	bhi.w	8000e34 <__udivmoddi4+0x2bc>
 8000c82:	4618      	mov	r0, r3
 8000c84:	eba4 0408 	sub.w	r4, r4, r8
 8000c88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c8c:	e7bf      	b.n	8000c0e <__udivmoddi4+0x96>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x12e>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80b1 	beq.w	8000dfa <__udivmoddi4+0x282>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x1cc>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0x140>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80b8 	bhi.w	8000e28 <__udivmoddi4+0x2b0>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0103 	sbc.w	r1, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0a8      	beq.n	8000c18 <__udivmoddi4+0xa0>
 8000cc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd4:	4097      	lsls	r7, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cde:	40d9      	lsrs	r1, r3
 8000ce0:	4330      	orrs	r0, r6
 8000ce2:	0c03      	lsrs	r3, r0, #16
 8000ce4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce8:	fa1f f887 	uxth.w	r8, r7
 8000cec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb06 f108 	mul.w	r1, r6, r8
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x19c>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d06:	f080 808d 	bcs.w	8000e24 <__udivmoddi4+0x2ac>
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	f240 808a 	bls.w	8000e24 <__udivmoddi4+0x2ac>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	443b      	add	r3, r7
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b281      	uxth	r1, r0
 8000d18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb00 f308 	mul.w	r3, r0, r8
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x1c4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d32:	d273      	bcs.n	8000e1c <__udivmoddi4+0x2a4>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d971      	bls.n	8000e1c <__udivmoddi4+0x2a4>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4439      	add	r1, r7
 8000d3c:	1acb      	subs	r3, r1, r3
 8000d3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d42:	e778      	b.n	8000c36 <__udivmoddi4+0xbe>
 8000d44:	f1c6 0c20 	rsb	ip, r6, #32
 8000d48:	fa03 f406 	lsl.w	r4, r3, r6
 8000d4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d50:	431c      	orrs	r4, r3
 8000d52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	0c3b      	lsrs	r3, r7, #16
 8000d66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6a:	fa1f f884 	uxth.w	r8, r4
 8000d6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d76:	fb09 fa08 	mul.w	sl, r9, r8
 8000d7a:	458a      	cmp	sl, r1
 8000d7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d80:	fa00 f306 	lsl.w	r3, r0, r6
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x220>
 8000d86:	1861      	adds	r1, r4, r1
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d8c:	d248      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000d8e:	458a      	cmp	sl, r1
 8000d90:	d946      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4421      	add	r1, r4
 8000d98:	eba1 010a 	sub.w	r1, r1, sl
 8000d9c:	b2bf      	uxth	r7, r7
 8000d9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000daa:	fb00 f808 	mul.w	r8, r0, r8
 8000dae:	45b8      	cmp	r8, r7
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x24a>
 8000db2:	19e7      	adds	r7, r4, r7
 8000db4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db8:	d22e      	bcs.n	8000e18 <__udivmoddi4+0x2a0>
 8000dba:	45b8      	cmp	r8, r7
 8000dbc:	d92c      	bls.n	8000e18 <__udivmoddi4+0x2a0>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4427      	add	r7, r4
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	eba7 0708 	sub.w	r7, r7, r8
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	454f      	cmp	r7, r9
 8000dd0:	46c6      	mov	lr, r8
 8000dd2:	4649      	mov	r1, r9
 8000dd4:	d31a      	bcc.n	8000e0c <__udivmoddi4+0x294>
 8000dd6:	d017      	beq.n	8000e08 <__udivmoddi4+0x290>
 8000dd8:	b15d      	cbz	r5, 8000df2 <__udivmoddi4+0x27a>
 8000dda:	ebb3 020e 	subs.w	r2, r3, lr
 8000dde:	eb67 0701 	sbc.w	r7, r7, r1
 8000de2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de6:	40f2      	lsrs	r2, r6
 8000de8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dec:	40f7      	lsrs	r7, r6
 8000dee:	e9c5 2700 	strd	r2, r7, [r5]
 8000df2:	2600      	movs	r6, #0
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	462e      	mov	r6, r5
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	e70b      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000e00:	4606      	mov	r6, r0
 8000e02:	e6e9      	b.n	8000bd8 <__udivmoddi4+0x60>
 8000e04:	4618      	mov	r0, r3
 8000e06:	e6fd      	b.n	8000c04 <__udivmoddi4+0x8c>
 8000e08:	4543      	cmp	r3, r8
 8000e0a:	d2e5      	bcs.n	8000dd8 <__udivmoddi4+0x260>
 8000e0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e10:	eb69 0104 	sbc.w	r1, r9, r4
 8000e14:	3801      	subs	r0, #1
 8000e16:	e7df      	b.n	8000dd8 <__udivmoddi4+0x260>
 8000e18:	4608      	mov	r0, r1
 8000e1a:	e7d2      	b.n	8000dc2 <__udivmoddi4+0x24a>
 8000e1c:	4660      	mov	r0, ip
 8000e1e:	e78d      	b.n	8000d3c <__udivmoddi4+0x1c4>
 8000e20:	4681      	mov	r9, r0
 8000e22:	e7b9      	b.n	8000d98 <__udivmoddi4+0x220>
 8000e24:	4666      	mov	r6, ip
 8000e26:	e775      	b.n	8000d14 <__udivmoddi4+0x19c>
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e74a      	b.n	8000cc2 <__udivmoddi4+0x14a>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	4439      	add	r1, r7
 8000e32:	e713      	b.n	8000c5c <__udivmoddi4+0xe4>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	e724      	b.n	8000c84 <__udivmoddi4+0x10c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <SetBuzzerFRQ>:
#include "main.h"

void SetBuzzerFRQ(uint16_t Frq, uint16_t BuzzerTimer) {
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	460a      	mov	r2, r1
 8000e4a:	80fb      	strh	r3, [r7, #6]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	80bb      	strh	r3, [r7, #4]
	uint16_t Period;

	if (Frq > 54)
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	2b36      	cmp	r3, #54	; 0x36
 8000e54:	d905      	bls.n	8000e62 <SetBuzzerFRQ+0x22>
		Period = 3600000 / Frq;
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <SetBuzzerFRQ+0x60>)
 8000e5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e5e:	81fb      	strh	r3, [r7, #14]
 8000e60:	e002      	b.n	8000e68 <SetBuzzerFRQ+0x28>
	else
		Period = 0xffff;
 8000e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e66:	81fb      	strh	r3, [r7, #14]

	htim4.Instance->ARR = Period;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <SetBuzzerFRQ+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	89fa      	ldrh	r2, [r7, #14]
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (Frq)
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <SetBuzzerFRQ+0x44>
		htim4.Instance->CCR4 = Period / 2;
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <SetBuzzerFRQ+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	641a      	str	r2, [r3, #64]	; 0x40
 8000e82:	e003      	b.n	8000e8c <SetBuzzerFRQ+0x4c>
	else
		htim4.Instance->CCR4 = 0;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <SetBuzzerFRQ+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	641a      	str	r2, [r3, #64]	; 0x40

	BuzzerCnt = BuzzerTimer;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <SetBuzzerFRQ+0x68>)
 8000e8e:	88bb      	ldrh	r3, [r7, #4]
 8000e90:	8013      	strh	r3, [r2, #0]

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	0036ee80 	.word	0x0036ee80
 8000ea4:	20004c40 	.word	0x20004c40
 8000ea8:	200049cc 	.word	0x200049cc

08000eac <BuzzerOff>:

void BuzzerOff(void) {
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = 0;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <BuzzerOff+0x18>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20004c40 	.word	0x20004c40

08000ec8 <CAN_Config>:
#include "main.h"

void CAN_Config(CAN_HandleTypeDef *phcan, uint8_t FIFO_Num) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
	/*Configure the filter to receive ID frames in the specified range*/
	CAN_FilterTypeDef CAN_FilterType;
	CAN_FilterType.FilterBank = 0;                        //Filter group [0,13]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.SlaveStartFilterBank = 0; //14;             //Start from the filter group [0,27]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_FilterType.FilterIdHigh = (TILT_SENSOR_ADDR) << 5; //ID high bit to be filtered [0x0000,0xFFFF]
 8000edc:	2320      	movs	r3, #32
 8000ede:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterIdLow = 0x0000; //ID to be filtered low [0x0000,0xFFFF]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
	CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_ADDR + 1) << 5; //0xffe0;             //The high 16 bits of the filter must not match
 8000ee4:	2340      	movs	r3, #64	; 0x40
 8000ee6:	613b      	str	r3, [r7, #16]
	CAN_FilterType.FilterMaskIdLow = 0x0000; //The lower 16 bits of the filter must not match
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
	CAN_FilterType.FilterFIFOAssignment = FIFO_Num; //The filter is associated to (0=RX_FIFO0/1=RX_FIFO1)
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	61bb      	str	r3, [r7, #24]
	CAN_FilterType.FilterMode = CAN_FILTERMODE_IDLIST; //Work in identifier mask bit mode
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	623b      	str	r3, [r7, #32]
	CAN_FilterType.FilterScale = CAN_FILTERSCALE_32BIT; //The filter bit width is a single 32 bits
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterType.FilterActivation = ENABLE;             //Enable filter
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK) {
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f004 f854 	bl	8004fb0 <HAL_CAN_ConfigFilter>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <CAN_Config+0x4a>
		Error_Handler();
 8000f0e:	f001 fd5b 	bl	80029c8 <Error_Handler>
	}

	CAN_FilterType.FilterBank = 1;                        //Filter group [0,13]
 8000f12:	2301      	movs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.FilterIdHigh = (TILT_SENSOR_HIP_L_ADDR) << 5; //ID high bit to be filtered [0x0000,0xFFFF]
 8000f16:	2360      	movs	r3, #96	; 0x60
 8000f18:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_HIP_L_ADDR + 1) << 5; //0xffe0;             //The high 16 bits of the filter must not match
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	613b      	str	r3, [r7, #16]
	if (HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK) {
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f004 f843 	bl	8004fb0 <HAL_CAN_ConfigFilter>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <CAN_Config+0x6c>
		Error_Handler();
 8000f30:	f001 fd4a 	bl	80029c8 <Error_Handler>
	}

	CAN_FilterType.FilterBank = 2;                        //Filter group [0,13]
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.FilterIdHigh = (TILT_SENSOR_LOWERLEG_L_ADDR) << 5; //ID high bit to be filtered [0x0000,0xFFFF]
 8000f38:	23a0      	movs	r3, #160	; 0xa0
 8000f3a:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_LOWERLEG_L_ADDR + 1) << 5; //0xffe0;             //The high 16 bits of the filter must not match
 8000f3c:	23c0      	movs	r3, #192	; 0xc0
 8000f3e:	613b      	str	r3, [r7, #16]
	if (HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK) {
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f004 f832 	bl	8004fb0 <HAL_CAN_ConfigFilter>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <CAN_Config+0x8e>
		Error_Handler();
 8000f52:	f001 fd39 	bl	80029c8 <Error_Handler>
	}

	CAN_FilterType.FilterBank = 3;                        //Filter group [0,13]
 8000f56:	2303      	movs	r3, #3
 8000f58:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.FilterIdHigh = (TILT_SENSOR_FOOT_L_ADDR) << 5; //ID high bit to be filtered [0x0000,0xFFFF]
 8000f5a:	23e0      	movs	r3, #224	; 0xe0
 8000f5c:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_FOOT_L_ADDR + 1) << 5; //0xffe0;             //The high 16 bits of the filter must not match
 8000f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f62:	613b      	str	r3, [r7, #16]
	if (HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK) {
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f004 f820 	bl	8004fb0 <HAL_CAN_ConfigFilter>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <CAN_Config+0xb2>
		Error_Handler();
 8000f76:	f001 fd27 	bl	80029c8 <Error_Handler>
	}

	CAN_FilterType.FilterBank = 4;                        //Filter group [0,13]
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.FilterIdHigh = (TILT_SENSOR_HIP_R_ADDR) << 5; //ID high bit to be filtered [0x0000,0xFFFF]
 8000f7e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000f82:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_HIP_R_ADDR + 1) << 5; //0xffe0;             //The high 16 bits of the filter must not match
 8000f84:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f88:	613b      	str	r3, [r7, #16]
	if (HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK) {
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f004 f80d 	bl	8004fb0 <HAL_CAN_ConfigFilter>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <CAN_Config+0xd8>
		Error_Handler();
 8000f9c:	f001 fd14 	bl	80029c8 <Error_Handler>
	}

	CAN_FilterType.FilterBank = 5;                        //Filter group [0,13]
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.FilterIdHigh = (TILT_SENSOR_LOWERLEG_R_ADDR) << 5; //ID high bit to be filtered [0x0000,0xFFFF]
 8000fa4:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000fa8:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_LOWERLEG_R_ADDR + 1) << 5; //0xffe0;             //The high 16 bits of the filter must not match
 8000faa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fae:	613b      	str	r3, [r7, #16]
	if (HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK) {
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f003 fffa 	bl	8004fb0 <HAL_CAN_ConfigFilter>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <CAN_Config+0xfe>
		Error_Handler();
 8000fc2:	f001 fd01 	bl	80029c8 <Error_Handler>
	}

	CAN_FilterType.FilterBank = 6;                        //Filter group [0,13]
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.FilterIdHigh = (TILT_SENSOR_FOOT_R_ADDR) << 5; //ID high bit to be filtered [0x0000,0xFFFF]
 8000fca:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000fce:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterMaskIdHigh = (TILT_SENSOR_FOOT_R_ADDR + 1) << 5; //0xffe0;             //The high 16 bits of the filter must not match
 8000fd0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000fd4:	613b      	str	r3, [r7, #16]
	if (HAL_CAN_ConfigFilter(phcan, &CAN_FilterType) != HAL_OK) {
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f003 ffe7 	bl	8004fb0 <HAL_CAN_ConfigFilter>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <CAN_Config+0x124>
		Error_Handler();
 8000fe8:	f001 fcee 	bl	80029c8 <Error_Handler>
	 }

	 */

	/*Open the interrupt service corresponding to the CAN channel*/
	if (FIFO_Num == 0) {
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <CAN_Config+0x13e>
		if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f004 fb21 	bl	800563c <HAL_CAN_ActivateNotification>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00b      	beq.n	8001018 <CAN_Config+0x150>
				!= HAL_OK) {
			Error_Handler();
 8001000:	f001 fce2 	bl	80029c8 <Error_Handler>
 8001004:	e008      	b.n	8001018 <CAN_Config+0x150>
		}
	} else {
		if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO1_MSG_PENDING)
 8001006:	2110      	movs	r1, #16
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f004 fb17 	bl	800563c <HAL_CAN_ActivateNotification>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <CAN_Config+0x150>
				!= HAL_OK) {
			Error_Handler();
 8001014:	f001 fcd8 	bl	80029c8 <Error_Handler>
		}
	}

	/*Start CAN communication*/
	if (HAL_CAN_Start(phcan) != HAL_OK) {
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f004 f8a9 	bl	8005170 <HAL_CAN_Start>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <CAN_Config+0x160>
		Error_Handler();
 8001024:	f001 fcd0 	bl	80029c8 <Error_Handler>
	}
}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <Can_TxMessage>:

uint8_t Can_TxMessage(CAN_HandleTypeDef *phcan, uint8_t ide, uint32_t id,
		uint8_t len, uint8_t *pdata) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	461a      	mov	r2, r3
 800103c:	460b      	mov	r3, r1
 800103e:	72fb      	strb	r3, [r7, #11]
 8001040:	4613      	mov	r3, r2
 8001042:	72bb      	strb	r3, [r7, #10]
	uint32_t TxMailbox;           //Get the email number that was sent
	CAN_TxHeaderTypeDef TxHeader; //Send-header protocol information structure, used to fill parameters
	HAL_StatusTypeDef HAL_RetVal; //CAN return value
	uint16_t i = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	85fb      	strh	r3, [r7, #46]	; 0x2e
	/*Fill and send header protocol*/
	if (ide == 0) {
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d104      	bne.n	8001058 <Can_TxMessage+0x28>
		TxHeader.IDE = CAN_ID_STD;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
		TxHeader.StdId = id;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e003      	b.n	8001060 <Can_TxMessage+0x30>
	} else {
		TxHeader.IDE = CAN_ID_EXT;
 8001058:	2304      	movs	r3, #4
 800105a:	61bb      	str	r3, [r7, #24]
		TxHeader.ExtId = id;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	617b      	str	r3, [r7, #20]
	}

	TxHeader.RTR = CAN_RTR_DATA,      //The frame type of the message data frame
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
	TxHeader.DLC = len,                   //The length of the frame 8
 8001064:	7abb      	ldrb	r3, [r7, #10]
 8001066:	623b      	str	r3, [r7, #32]
	TxHeader.TransmitGlobalTime = DISABLE; //Do not capture time
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	/*Ask if CAN has a free mailbox*/
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) == 0) {
 800106e:	e009      	b.n	8001084 <Can_TxMessage+0x54>
		i++;
 8001070:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001072:	3301      	adds	r3, #1
 8001074:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (i > 0xfffe) //Timeout, sending failed
 8001076:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <Can_TxMessage+0x54>
			return 1;
 8001080:	2301      	movs	r3, #1
 8001082:	e017      	b.n	80010b4 <Can_TxMessage+0x84>
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) == 0) {
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f004 f992 	bl	80053ae <HAL_CAN_GetTxMailboxesFreeLevel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0ef      	beq.n	8001070 <Can_TxMessage+0x40>
	}

	/*Send frame*/
	HAL_RetVal = HAL_CAN_AddTxMessage(phcan, &TxHeader, pdata, &TxMailbox); //Send a frame of data
 8001090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001094:	f107 0110 	add.w	r1, r7, #16
 8001098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f004 f8ac 	bl	80051f8 <HAL_CAN_AddTxMessage>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	//printf("TxMailbox %d\r\n",TxMailbox);
	if (HAL_RetVal != HAL_OK)
 80010a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <Can_TxMessage+0x82>
		return 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <Can_TxMessage+0x84>
	return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3730      	adds	r7, #48	; 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <processCAN2Packet>:


void processCAN2Packet(CAN_HandleTypeDef *hcan) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	uint8_t Rxbuff[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_StatusTypeDef HAL_RetVal;

	HAL_RetVal = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Rxbuff); //Read a frame from channel 0 buffer
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	f107 0208 	add.w	r2, r7, #8
 80010cc:	2100      	movs	r1, #0
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f004 f9a2 	bl	8005418 <HAL_CAN_GetRxMessage>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RetVal == HAL_OK) {
 80010da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f040 82a6 	bne.w	8001630 <processCAN2Packet+0x574>
		switch (RxHeader.StdId) {
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	2b0d      	cmp	r3, #13
 80010ea:	f200 82a2 	bhi.w	8001632 <processCAN2Packet+0x576>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <processCAN2Packet+0x38>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800112d 	.word	0x0800112d
 80010f8:	080011bd 	.word	0x080011bd
 80010fc:	0800122d 	.word	0x0800122d
 8001100:	0800129f 	.word	0x0800129f
 8001104:	080012f9 	.word	0x080012f9
 8001108:	0800134d 	.word	0x0800134d
 800110c:	0800139b 	.word	0x0800139b
 8001110:	080013d1 	.word	0x080013d1
 8001114:	08001475 	.word	0x08001475
 8001118:	080014e7 	.word	0x080014e7
 800111c:	08001541 	.word	0x08001541
 8001120:	08001595 	.word	0x08001595
 8001124:	080015cd 	.word	0x080015cd
 8001128:	08001603 	.word	0x08001603
		case TILT_SENSOR_ADDR:
			Tilt1X = *(float*) Rxbuff;
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4ab0      	ldr	r2, [pc, #704]	; (80013f4 <processCAN2Packet+0x338>)
 8001134:	6013      	str	r3, [r2, #0]
			Tilt1Y = *(float*) &Rxbuff[4];
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	3304      	adds	r3, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4aae      	ldr	r2, [pc, #696]	; (80013f8 <processCAN2Packet+0x33c>)
 8001140:	6013      	str	r3, [r2, #0]
			YHipJointL=90+Tilt1Y-Tilt2Y;
 8001142:	4bad      	ldr	r3, [pc, #692]	; (80013f8 <processCAN2Packet+0x33c>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80013fc <processCAN2Packet+0x340>
 800114c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001150:	4bab      	ldr	r3, [pc, #684]	; (8001400 <processCAN2Packet+0x344>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115a:	4baa      	ldr	r3, [pc, #680]	; (8001404 <processCAN2Packet+0x348>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
			YHipJointR=90-Tilt1Y+Tilt5Y;
 8001160:	4ba5      	ldr	r3, [pc, #660]	; (80013f8 <processCAN2Packet+0x33c>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80013fc <processCAN2Packet+0x340>
 800116a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800116e:	4ba6      	ldr	r3, [pc, #664]	; (8001408 <processCAN2Packet+0x34c>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001178:	4ba4      	ldr	r3, [pc, #656]	; (800140c <processCAN2Packet+0x350>)
 800117a:	edc3 7a00 	vstr	s15, [r3]
			XHipL=90-Tilt1X+Tilt2X;
 800117e:	4b9d      	ldr	r3, [pc, #628]	; (80013f4 <processCAN2Packet+0x338>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80013fc <processCAN2Packet+0x340>
 8001188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800118c:	4ba0      	ldr	r3, [pc, #640]	; (8001410 <processCAN2Packet+0x354>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001196:	4b9f      	ldr	r3, [pc, #636]	; (8001414 <processCAN2Packet+0x358>)
 8001198:	edc3 7a00 	vstr	s15, [r3]
			XHipR=90-Tilt1X+Tilt5X;
 800119c:	4b95      	ldr	r3, [pc, #596]	; (80013f4 <processCAN2Packet+0x338>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80013fc <processCAN2Packet+0x340>
 80011a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011aa:	4b9b      	ldr	r3, [pc, #620]	; (8001418 <processCAN2Packet+0x35c>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	4b99      	ldr	r3, [pc, #612]	; (800141c <processCAN2Packet+0x360>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80011ba:	e23a      	b.n	8001632 <processCAN2Packet+0x576>
		case (TILT_SENSOR_ADDR + 1):
			Gyro1 = *(float*) Rxbuff;
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a97      	ldr	r2, [pc, #604]	; (8001420 <processCAN2Packet+0x364>)
 80011c4:	6013      	str	r3, [r2, #0]
			Gyro1Y = *(float*) &Rxbuff[4];
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	3304      	adds	r3, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a95      	ldr	r2, [pc, #596]	; (8001424 <processCAN2Packet+0x368>)
 80011d0:	6013      	str	r3, [r2, #0]
			GyroHipJointR = Gyro1Y - Gyro5Y;
 80011d2:	4b94      	ldr	r3, [pc, #592]	; (8001424 <processCAN2Packet+0x368>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	4b93      	ldr	r3, [pc, #588]	; (8001428 <processCAN2Packet+0x36c>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	4b92      	ldr	r3, [pc, #584]	; (800142c <processCAN2Packet+0x370>)
 80011e4:	edc3 7a00 	vstr	s15, [r3]
			GyroHipJointL = Gyro1Y - Gyro2Y;
 80011e8:	4b8e      	ldr	r3, [pc, #568]	; (8001424 <processCAN2Packet+0x368>)
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	4b90      	ldr	r3, [pc, #576]	; (8001430 <processCAN2Packet+0x374>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	4b8e      	ldr	r3, [pc, #568]	; (8001434 <processCAN2Packet+0x378>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
			GyroHipR = Gyro1 - Gyro5;
 80011fe:	4b88      	ldr	r3, [pc, #544]	; (8001420 <processCAN2Packet+0x364>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <processCAN2Packet+0x37c>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120e:	4b8b      	ldr	r3, [pc, #556]	; (800143c <processCAN2Packet+0x380>)
 8001210:	edc3 7a00 	vstr	s15, [r3]
			GyroHipL = Gyro1 - Gyro2;
 8001214:	4b82      	ldr	r3, [pc, #520]	; (8001420 <processCAN2Packet+0x364>)
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	4b89      	ldr	r3, [pc, #548]	; (8001440 <processCAN2Packet+0x384>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001224:	4b87      	ldr	r3, [pc, #540]	; (8001444 <processCAN2Packet+0x388>)
 8001226:	edc3 7a00 	vstr	s15, [r3]
			break;
 800122a:	e202      	b.n	8001632 <processCAN2Packet+0x576>
		case TILT_SENSOR_HIP_L_ADDR:
			Tilt2X = *(float*) Rxbuff;
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a77      	ldr	r2, [pc, #476]	; (8001410 <processCAN2Packet+0x354>)
 8001234:	6013      	str	r3, [r2, #0]
			Tilt2Y = *(float*) &Rxbuff[4];
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a70      	ldr	r2, [pc, #448]	; (8001400 <processCAN2Packet+0x344>)
 8001240:	6013      	str	r3, [r2, #0]
			YHipJointL=90+Tilt1Y-Tilt2Y;
 8001242:	4b6d      	ldr	r3, [pc, #436]	; (80013f8 <processCAN2Packet+0x33c>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013fc <processCAN2Packet+0x340>
 800124c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001250:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <processCAN2Packet+0x344>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125a:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <processCAN2Packet+0x348>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
			XHipL=90-Tilt1X+Tilt2X;
 8001260:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <processCAN2Packet+0x338>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013fc <processCAN2Packet+0x340>
 800126a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800126e:	4b68      	ldr	r3, [pc, #416]	; (8001410 <processCAN2Packet+0x354>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001278:	4b66      	ldr	r3, [pc, #408]	; (8001414 <processCAN2Packet+0x358>)
 800127a:	edc3 7a00 	vstr	s15, [r3]
			XLowerLegL=180+Tilt2X-Tilt3X;
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <processCAN2Packet+0x354>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001448 <processCAN2Packet+0x38c>
 8001288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800128c:	4b6f      	ldr	r3, [pc, #444]	; (800144c <processCAN2Packet+0x390>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001296:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <processCAN2Packet+0x394>)
 8001298:	edc3 7a00 	vstr	s15, [r3]
			break;
 800129c:	e1c9      	b.n	8001632 <processCAN2Packet+0x576>
		case (TILT_SENSOR_HIP_L_ADDR + 1):
			Gyro2 = *(float*) Rxbuff;
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a66      	ldr	r2, [pc, #408]	; (8001440 <processCAN2Packet+0x384>)
 80012a6:	6013      	str	r3, [r2, #0]
			Gyro2Y = *(float*) &Rxbuff[4];
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	3304      	adds	r3, #4
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a5f      	ldr	r2, [pc, #380]	; (8001430 <processCAN2Packet+0x374>)
 80012b2:	6013      	str	r3, [r2, #0]
			GyroHipJointL = Gyro1Y - Gyro2Y;
 80012b4:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <processCAN2Packet+0x368>)
 80012b6:	ed93 7a00 	vldr	s14, [r3]
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <processCAN2Packet+0x374>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c4:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <processCAN2Packet+0x378>)
 80012c6:	edc3 7a00 	vstr	s15, [r3]
			GyroHipL = Gyro1 - Gyro2;
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <processCAN2Packet+0x364>)
 80012cc:	ed93 7a00 	vldr	s14, [r3]
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <processCAN2Packet+0x384>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012da:	4b5a      	ldr	r3, [pc, #360]	; (8001444 <processCAN2Packet+0x388>)
 80012dc:	edc3 7a00 	vstr	s15, [r3]
			GyroLowerlegL = Gyro2 - Gyro3;
 80012e0:	4b57      	ldr	r3, [pc, #348]	; (8001440 <processCAN2Packet+0x384>)
 80012e2:	ed93 7a00 	vldr	s14, [r3]
 80012e6:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <processCAN2Packet+0x398>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <processCAN2Packet+0x39c>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012f6:	e19c      	b.n	8001632 <processCAN2Packet+0x576>
		case TILT_SENSOR_LOWERLEG_L_ADDR:
			Tilt3X = *(float*) Rxbuff;
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a53      	ldr	r2, [pc, #332]	; (800144c <processCAN2Packet+0x390>)
 8001300:	6013      	str	r3, [r2, #0]
			Tilt3Y = *(float*) &Rxbuff[4];
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	3304      	adds	r3, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a54      	ldr	r2, [pc, #336]	; (800145c <processCAN2Packet+0x3a0>)
 800130c:	6013      	str	r3, [r2, #0]
			XLowerLegL=180+Tilt2X-Tilt3X;
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <processCAN2Packet+0x354>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001448 <processCAN2Packet+0x38c>
 8001318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800131c:	4b4b      	ldr	r3, [pc, #300]	; (800144c <processCAN2Packet+0x390>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <processCAN2Packet+0x394>)
 8001328:	edc3 7a00 	vstr	s15, [r3]
			XFootL=90-Tilt3X+Tilt4X;
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <processCAN2Packet+0x390>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80013fc <processCAN2Packet+0x340>
 8001336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800133a:	4b49      	ldr	r3, [pc, #292]	; (8001460 <processCAN2Packet+0x3a4>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	4b47      	ldr	r3, [pc, #284]	; (8001464 <processCAN2Packet+0x3a8>)
 8001346:	edc3 7a00 	vstr	s15, [r3]
			break;
 800134a:	e172      	b.n	8001632 <processCAN2Packet+0x576>
		case (TILT_SENSOR_LOWERLEG_L_ADDR + 1):
			Gyro3 = *(float*) Rxbuff;
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a40      	ldr	r2, [pc, #256]	; (8001454 <processCAN2Packet+0x398>)
 8001354:	6013      	str	r3, [r2, #0]
			GyroHipL = Gyro2 - Gyro3;
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <processCAN2Packet+0x384>)
 8001358:	ed93 7a00 	vldr	s14, [r3]
 800135c:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <processCAN2Packet+0x398>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <processCAN2Packet+0x388>)
 8001368:	edc3 7a00 	vstr	s15, [r3]
			GyroLowerlegL = Gyro2 - Gyro3;
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <processCAN2Packet+0x384>)
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	4b38      	ldr	r3, [pc, #224]	; (8001454 <processCAN2Packet+0x398>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <processCAN2Packet+0x39c>)
 800137e:	edc3 7a00 	vstr	s15, [r3]
			GyroFootL = Gyro3 - Gyro4;
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <processCAN2Packet+0x398>)
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	4b37      	ldr	r3, [pc, #220]	; (8001468 <processCAN2Packet+0x3ac>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <processCAN2Packet+0x3b0>)
 8001394:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001398:	e14b      	b.n	8001632 <processCAN2Packet+0x576>
		case TILT_SENSOR_FOOT_L_ADDR:
			Tilt4X = *(float*) Rxbuff;
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <processCAN2Packet+0x3a4>)
 80013a2:	6013      	str	r3, [r2, #0]
			Tilt4Y = *(float*) &Rxbuff[4];
 80013a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a8:	3304      	adds	r3, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a30      	ldr	r2, [pc, #192]	; (8001470 <processCAN2Packet+0x3b4>)
 80013ae:	6013      	str	r3, [r2, #0]
			XFootL=90-Tilt3X+Tilt4X;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <processCAN2Packet+0x390>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013fc <processCAN2Packet+0x340>
 80013ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <processCAN2Packet+0x3a4>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <processCAN2Packet+0x3a8>)
 80013ca:	edc3 7a00 	vstr	s15, [r3]
			break;
 80013ce:	e130      	b.n	8001632 <processCAN2Packet+0x576>
		case (TILT_SENSOR_FOOT_L_ADDR + 1):
			Gyro4 = *(float*) Rxbuff;
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a24      	ldr	r2, [pc, #144]	; (8001468 <processCAN2Packet+0x3ac>)
 80013d8:	6013      	str	r3, [r2, #0]
			GyroFootL = Gyro3 - Gyro4;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <processCAN2Packet+0x398>)
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <processCAN2Packet+0x3ac>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <processCAN2Packet+0x3b0>)
 80013ec:	edc3 7a00 	vstr	s15, [r3]
			break;
 80013f0:	e11f      	b.n	8001632 <processCAN2Packet+0x576>
 80013f2:	bf00      	nop
 80013f4:	20004ff8 	.word	0x20004ff8
 80013f8:	20004c88 	.word	0x20004c88
 80013fc:	42b40000 	.word	0x42b40000
 8001400:	20004ed4 	.word	0x20004ed4
 8001404:	200049f0 	.word	0x200049f0
 8001408:	20004cf4 	.word	0x20004cf4
 800140c:	200049ec 	.word	0x200049ec
 8001410:	20004ee0 	.word	0x20004ee0
 8001414:	200049b8 	.word	0x200049b8
 8001418:	20004fac 	.word	0x20004fac
 800141c:	200049d8 	.word	0x200049d8
 8001420:	20004f98 	.word	0x20004f98
 8001424:	20004ed8 	.word	0x20004ed8
 8001428:	20004c9c 	.word	0x20004c9c
 800142c:	200049d4 	.word	0x200049d4
 8001430:	2000508c 	.word	0x2000508c
 8001434:	200049dc 	.word	0x200049dc
 8001438:	20004edc 	.word	0x20004edc
 800143c:	200049f4 	.word	0x200049f4
 8001440:	20004e6c 	.word	0x20004e6c
 8001444:	200049c4 	.word	0x200049c4
 8001448:	43340000 	.word	0x43340000
 800144c:	20004c98 	.word	0x20004c98
 8001450:	200049b4 	.word	0x200049b4
 8001454:	20004fa4 	.word	0x20004fa4
 8001458:	200049d0 	.word	0x200049d0
 800145c:	20004f48 	.word	0x20004f48
 8001460:	20004c90 	.word	0x20004c90
 8001464:	200049e4 	.word	0x200049e4
 8001468:	20004f44 	.word	0x20004f44
 800146c:	200049b0 	.word	0x200049b0
 8001470:	20004fa8 	.word	0x20004fa8
		case TILT_SENSOR_HIP_R_ADDR:
			Tilt5X = *(float*) Rxbuff;
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a70      	ldr	r2, [pc, #448]	; (800163c <processCAN2Packet+0x580>)
 800147c:	6013      	str	r3, [r2, #0]
			Tilt5Y = *(float*) &Rxbuff[4];
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	3304      	adds	r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6e      	ldr	r2, [pc, #440]	; (8001640 <processCAN2Packet+0x584>)
 8001488:	6013      	str	r3, [r2, #0]
			YHipJointR=90-Tilt1Y+Tilt5Y;
 800148a:	4b6e      	ldr	r3, [pc, #440]	; (8001644 <processCAN2Packet+0x588>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001648 <processCAN2Packet+0x58c>
 8001494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001498:	4b69      	ldr	r3, [pc, #420]	; (8001640 <processCAN2Packet+0x584>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a2:	4b6a      	ldr	r3, [pc, #424]	; (800164c <processCAN2Packet+0x590>)
 80014a4:	edc3 7a00 	vstr	s15, [r3]
			XHipR=90-Tilt1X+Tilt5X;
 80014a8:	4b69      	ldr	r3, [pc, #420]	; (8001650 <processCAN2Packet+0x594>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001648 <processCAN2Packet+0x58c>
 80014b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b6:	4b61      	ldr	r3, [pc, #388]	; (800163c <processCAN2Packet+0x580>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c0:	4b64      	ldr	r3, [pc, #400]	; (8001654 <processCAN2Packet+0x598>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
			XLowerLegR=180+Tilt5X-Tilt6X;
 80014c6:	4b5d      	ldr	r3, [pc, #372]	; (800163c <processCAN2Packet+0x580>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001658 <processCAN2Packet+0x59c>
 80014d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80014d4:	4b61      	ldr	r3, [pc, #388]	; (800165c <processCAN2Packet+0x5a0>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014de:	4b60      	ldr	r3, [pc, #384]	; (8001660 <processCAN2Packet+0x5a4>)
 80014e0:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014e4:	e0a5      	b.n	8001632 <processCAN2Packet+0x576>
		case (TILT_SENSOR_HIP_R_ADDR + 1):
			Gyro5 = *(float*) Rxbuff;
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a5d      	ldr	r2, [pc, #372]	; (8001664 <processCAN2Packet+0x5a8>)
 80014ee:	6013      	str	r3, [r2, #0]
			Gyro5Y = *(float*) &Rxbuff[4];
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	3304      	adds	r3, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5b      	ldr	r2, [pc, #364]	; (8001668 <processCAN2Packet+0x5ac>)
 80014fa:	6013      	str	r3, [r2, #0]
			GyroHipJointR = Gyro1Y - Gyro5Y;
 80014fc:	4b5b      	ldr	r3, [pc, #364]	; (800166c <processCAN2Packet+0x5b0>)
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	4b59      	ldr	r3, [pc, #356]	; (8001668 <processCAN2Packet+0x5ac>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <processCAN2Packet+0x5b4>)
 800150e:	edc3 7a00 	vstr	s15, [r3]
			GyroHipR = Gyro1 - Gyro5;
 8001512:	4b58      	ldr	r3, [pc, #352]	; (8001674 <processCAN2Packet+0x5b8>)
 8001514:	ed93 7a00 	vldr	s14, [r3]
 8001518:	4b52      	ldr	r3, [pc, #328]	; (8001664 <processCAN2Packet+0x5a8>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001522:	4b55      	ldr	r3, [pc, #340]	; (8001678 <processCAN2Packet+0x5bc>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
			GyroLowerlegR = Gyro5 - Gyro6;
 8001528:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <processCAN2Packet+0x5a8>)
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	4b53      	ldr	r3, [pc, #332]	; (800167c <processCAN2Packet+0x5c0>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	4b51      	ldr	r3, [pc, #324]	; (8001680 <processCAN2Packet+0x5c4>)
 800153a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800153e:	e078      	b.n	8001632 <processCAN2Packet+0x576>
		case TILT_SENSOR_LOWERLEG_R_ADDR:
			Tilt6X = *(float*) Rxbuff;
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a45      	ldr	r2, [pc, #276]	; (800165c <processCAN2Packet+0x5a0>)
 8001548:	6013      	str	r3, [r2, #0]
			Tilt6Y = *(float*) &Rxbuff[4];
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	3304      	adds	r3, #4
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <processCAN2Packet+0x5c8>)
 8001554:	6013      	str	r3, [r2, #0]
			XLowerLegR=180+Tilt5X-Tilt6X;
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <processCAN2Packet+0x580>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001658 <processCAN2Packet+0x59c>
 8001560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <processCAN2Packet+0x5a0>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156e:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <processCAN2Packet+0x5a4>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
			XFootR=90-Tilt6X+Tilt7X;
 8001574:	4b39      	ldr	r3, [pc, #228]	; (800165c <processCAN2Packet+0x5a0>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001648 <processCAN2Packet+0x58c>
 800157e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001582:	4b41      	ldr	r3, [pc, #260]	; (8001688 <processCAN2Packet+0x5cc>)
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <processCAN2Packet+0x5d0>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001592:	e04e      	b.n	8001632 <processCAN2Packet+0x576>
		case (TILT_SENSOR_LOWERLEG_R_ADDR + 1):
			Gyro6 = *(float*) Rxbuff;
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a38      	ldr	r2, [pc, #224]	; (800167c <processCAN2Packet+0x5c0>)
 800159c:	6013      	str	r3, [r2, #0]
			GyroLowerlegR = Gyro5 - Gyro6;
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <processCAN2Packet+0x5a8>)
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	4b35      	ldr	r3, [pc, #212]	; (800167c <processCAN2Packet+0x5c0>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <processCAN2Packet+0x5c4>)
 80015b0:	edc3 7a00 	vstr	s15, [r3]
			GyroFootR = Gyro6 - Gyro7;
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <processCAN2Packet+0x5c0>)
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <processCAN2Packet+0x5d4>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <processCAN2Packet+0x5d8>)
 80015c6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015ca:	e032      	b.n	8001632 <processCAN2Packet+0x576>
		case TILT_SENSOR_FOOT_R_ADDR:
			Tilt7X = *(float*) Rxbuff;
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <processCAN2Packet+0x5cc>)
 80015d4:	6013      	str	r3, [r2, #0]
			Tilt7Y = *(float*) &Rxbuff[4];
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	3304      	adds	r3, #4
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <processCAN2Packet+0x5dc>)
 80015e0:	6013      	str	r3, [r2, #0]
			XFootR=90-Tilt6X+Tilt7X;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <processCAN2Packet+0x5a0>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001648 <processCAN2Packet+0x58c>
 80015ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <processCAN2Packet+0x5cc>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <processCAN2Packet+0x5d0>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001600:	e017      	b.n	8001632 <processCAN2Packet+0x576>
		case (TILT_SENSOR_FOOT_R_ADDR + 1):
			Gyro7 = *(float*) Rxbuff;
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <processCAN2Packet+0x5d4>)
 800160a:	6013      	str	r3, [r2, #0]
			KGyro1 = *(uint16_t*) &Rxbuff[4];
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	3304      	adds	r3, #4
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <processCAN2Packet+0x5e0>)
 8001616:	801a      	strh	r2, [r3, #0]
			GyroFootR = Gyro6 - Gyro7;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <processCAN2Packet+0x5c0>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <processCAN2Packet+0x5d4>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <processCAN2Packet+0x5d8>)
 800162a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800162e:	e000      	b.n	8001632 <processCAN2Packet+0x576>
		}
	}
 8001630:	bf00      	nop
}
 8001632:	bf00      	nop
 8001634:	3730      	adds	r7, #48	; 0x30
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20004fac 	.word	0x20004fac
 8001640:	20004cf4 	.word	0x20004cf4
 8001644:	20004c88 	.word	0x20004c88
 8001648:	42b40000 	.word	0x42b40000
 800164c:	200049ec 	.word	0x200049ec
 8001650:	20004ff8 	.word	0x20004ff8
 8001654:	200049d8 	.word	0x200049d8
 8001658:	43340000 	.word	0x43340000
 800165c:	20004bf0 	.word	0x20004bf0
 8001660:	200049bc 	.word	0x200049bc
 8001664:	20004edc 	.word	0x20004edc
 8001668:	20004c9c 	.word	0x20004c9c
 800166c:	20004ed8 	.word	0x20004ed8
 8001670:	200049d4 	.word	0x200049d4
 8001674:	20004f98 	.word	0x20004f98
 8001678:	200049f4 	.word	0x200049f4
 800167c:	20004f9c 	.word	0x20004f9c
 8001680:	200049c8 	.word	0x200049c8
 8001684:	20004cec 	.word	0x20004cec
 8001688:	20004c8c 	.word	0x20004c8c
 800168c:	200049e8 	.word	0x200049e8
 8001690:	20005088 	.word	0x20005088
 8001694:	200049c0 	.word	0x200049c0
 8001698:	20004fa0 	.word	0x20004fa0
 800169c:	20004ce8 	.word	0x20004ce8

080016a0 <FlashWriteAll>:
#define SIZE_OF_OPTIONS_ARRAY 500

uint8_t OptionsArray[SIZE_OF_OPTIONS_ARRAY];
uint16_t CntOptions;

void FlashWriteAll(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0x00;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
	uint8_t i;
	HAL_StatusTypeDef flash_ok;

	HAL_FLASH_Unlock();
 80016aa:	f004 ff55 	bl	8006558 <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Sector = 11;
 80016ba:	230b      	movs	r3, #11
 80016bc:	613b      	str	r3, [r7, #16]

	__HAL_FLASH_CLEAR_FLAG(
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <FlashWriteAll+0x88>)
 80016c0:	22f3      	movs	r2, #243	; 0xf3
 80016c2:	60da      	str	r2, [r3, #12]
			FLASH_SR_PGPERR | FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGAERR);

	flash_ok = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80016c4:	1d3a      	adds	r2, r7, #4
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 f8a5 	bl	800681c <HAL_FLASHEx_Erase>
 80016d2:	4603      	mov	r3, r0
 80016d4:	77bb      	strb	r3, [r7, #30]

	for (i = 0; i < (SIZE_OF_OPTIONS_ARRAY / 4); i++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	77fb      	strb	r3, [r7, #31]
 80016da:	e01c      	b.n	8001716 <FlashWriteAll+0x76>
		flash_ok = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	77bb      	strb	r3, [r7, #30]
		while (flash_ok != HAL_OK)
 80016e0:	e013      	b.n	800170a <FlashWriteAll+0x6a>
			flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
			START_ADDR_USER_PAGE + i * 4,
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80016e8:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80016ec:	009b      	lsls	r3, r3, #2
			flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80016ee:	4619      	mov	r1, r3
					(uint64_t) *(uint32_t*) &OptionsArray[i * 4]);
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <FlashWriteAll+0x8c>)
 80016f6:	4413      	add	r3, r2
 80016f8:	681b      	ldr	r3, [r3, #0]
			flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80016fa:	461a      	mov	r2, r3
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	2002      	movs	r0, #2
 8001702:	f004 fed5 	bl	80064b0 <HAL_FLASH_Program>
 8001706:	4603      	mov	r3, r0
 8001708:	77bb      	strb	r3, [r7, #30]
		while (flash_ok != HAL_OK)
 800170a:	7fbb      	ldrb	r3, [r7, #30]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e8      	bne.n	80016e2 <FlashWriteAll+0x42>
	for (i = 0; i < (SIZE_OF_OPTIONS_ARRAY / 4); i++) {
 8001710:	7ffb      	ldrb	r3, [r7, #31]
 8001712:	3301      	adds	r3, #1
 8001714:	77fb      	strb	r3, [r7, #31]
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	2b7c      	cmp	r3, #124	; 0x7c
 800171a:	d9df      	bls.n	80016dc <FlashWriteAll+0x3c>
	}

	HAL_FLASH_Lock();
 800171c:	f004 ff3e 	bl	800659c <HAL_FLASH_Lock>

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023c00 	.word	0x40023c00
 800172c:	200049f8 	.word	0x200049f8

08001730 <FlashReadAll>:

void FlashReadAll(void) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < (SIZE_OF_OPTIONS_ARRAY / 4); i++) {
 8001736:	2300      	movs	r3, #0
 8001738:	80fb      	strh	r3, [r7, #6]
 800173a:	e00f      	b.n	800175c <FlashReadAll+0x2c>
		*(uint32_t*) &OptionsArray[i * 4] =
				*(__IO uint32_t*) (START_ADDR_USER_PAGE + i * 4);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001742:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4619      	mov	r1, r3
		*(uint32_t*) &OptionsArray[i * 4] =
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <FlashReadAll+0x40>)
 8001750:	4413      	add	r3, r2
				*(__IO uint32_t*) (START_ADDR_USER_PAGE + i * 4);
 8001752:	680a      	ldr	r2, [r1, #0]
		*(uint32_t*) &OptionsArray[i * 4] =
 8001754:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (SIZE_OF_OPTIONS_ARRAY / 4); i++) {
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	3301      	adds	r3, #1
 800175a:	80fb      	strh	r3, [r7, #6]
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	2b7c      	cmp	r3, #124	; 0x7c
 8001760:	d9ec      	bls.n	800173c <FlashReadAll+0xc>
	}

//	ThisAddr=*(__IO uint32_t*)(START_ADDR_USER_PAGE+FLASH_ADDR_ThisAddr);
	//KGyro=*(__IO float*)(START_ADDR_USER_PAGE+FLASH_ADDR_KGyro);

}
 8001762:	bf00      	nop
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	200049f8 	.word	0x200049f8

08001774 <OptionsArrayAddFloat>:

void OptionsArrayAddFloat(float Fl) {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	ed87 0a01 	vstr	s0, [r7, #4]
	*(float*) &OptionsArray[CntOptions] = Fl;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <OptionsArrayAddFloat+0x30>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <OptionsArrayAddFloat+0x34>)
 8001786:	4413      	add	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]
	CntOptions = CntOptions + sizeof(float);
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <OptionsArrayAddFloat+0x30>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	3304      	adds	r3, #4
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <OptionsArrayAddFloat+0x30>)
 8001796:	801a      	strh	r2, [r3, #0]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	20004bec 	.word	0x20004bec
 80017a8:	200049f8 	.word	0x200049f8

080017ac <OptionsArrayGetFloat>:

float OptionsArrayGetFloat(void) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
	float Fl = *(float*) &OptionsArray[CntOptions];
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <OptionsArrayGetFloat+0x34>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <OptionsArrayGetFloat+0x38>)
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	607b      	str	r3, [r7, #4]
	CntOptions = CntOptions + sizeof(float);
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <OptionsArrayGetFloat+0x34>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	3304      	adds	r3, #4
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <OptionsArrayGetFloat+0x34>)
 80017ca:	801a      	strh	r2, [r3, #0]
	return Fl;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	ee07 3a90 	vmov	s15, r3
}
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20004bec 	.word	0x20004bec
 80017e4:	200049f8 	.word	0x200049f8

080017e8 <OptionsToArray>:

void OptionsToArray(void) {
 80017e8:	b598      	push	{r3, r4, r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	CntOptions = 4;
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <OptionsToArray+0x60>)
 80017ee:	2204      	movs	r2, #4
 80017f0:	801a      	strh	r2, [r3, #0]

	OptionsArray[0] = 0xff;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <OptionsToArray+0x64>)
 80017f4:	22ff      	movs	r2, #255	; 0xff
 80017f6:	701a      	strb	r2, [r3, #0]
	OptionsArray[1] = 0xff;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <OptionsToArray+0x64>)
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	705a      	strb	r2, [r3, #1]

	OptionsArray[3] = TRM_OPTIONS_PACKET;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <OptionsToArray+0x64>)
 8001800:	2203      	movs	r2, #3
 8001802:	70da      	strb	r2, [r3, #3]

	OptionsArrayAddFloat((float) 1234.5678);
 8001804:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001850 <OptionsToArray+0x68>
 8001808:	f7ff ffb4 	bl	8001774 <OptionsArrayAddFloat>
	OptionsArrayAddFloat((float) 5678.9);
 800180c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001854 <OptionsToArray+0x6c>
 8001810:	f7ff ffb0 	bl	8001774 <OptionsArrayAddFloat>

	OptionsArray[2] = CntOptions - 3;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <OptionsToArray+0x60>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	3b03      	subs	r3, #3
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <OptionsToArray+0x64>)
 8001820:	709a      	strb	r2, [r3, #2]

	OptionsArray[CntOptions] = CalcCheckSumm(OptionsArray[2] + 1,
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <OptionsToArray+0x64>)
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	b29b      	uxth	r3, r3
 8001828:	3301      	adds	r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <OptionsToArray+0x60>)
 800182e:	8812      	ldrh	r2, [r2, #0]
 8001830:	4614      	mov	r4, r2
 8001832:	4909      	ldr	r1, [pc, #36]	; (8001858 <OptionsToArray+0x70>)
 8001834:	4618      	mov	r0, r3
 8001836:	f000 ffaf 	bl	8002798 <CalcCheckSumm>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <OptionsToArray+0x64>)
 8001840:	551a      	strb	r2, [r3, r4]
			&OptionsArray[2]);
}
 8001842:	bf00      	nop
 8001844:	bd98      	pop	{r3, r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	20004bec 	.word	0x20004bec
 800184c:	200049f8 	.word	0x200049f8
 8001850:	449a522b 	.word	0x449a522b
 8001854:	45b17733 	.word	0x45b17733
 8001858:	200049fa 	.word	0x200049fa

0800185c <ArrayToOptions>:

void ArrayToOptions(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
	float Tmp1, Tmp2;
	CntOptions = 4;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <ArrayToOptions+0x28>)
 8001864:	2204      	movs	r2, #4
 8001866:	801a      	strh	r2, [r3, #0]
	Tmp1 = OptionsArrayGetFloat();
 8001868:	f7ff ffa0 	bl	80017ac <OptionsArrayGetFloat>
 800186c:	ed87 0a01 	vstr	s0, [r7, #4]
	Tmp2 = OptionsArrayGetFloat();
 8001870:	f7ff ff9c 	bl	80017ac <OptionsArrayGetFloat>
 8001874:	ed87 0a00 	vstr	s0, [r7]
	asm("Nop");
 8001878:	bf00      	nop
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20004bec 	.word	0x20004bec

08001888 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800188c:	f002 fcf6 	bl	800427c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001890:	f000 f876 	bl	8001980 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001894:	f000 fed4 	bl	8002640 <MX_GPIO_Init>
	MX_DMA_Init();
 8001898:	f000 fe9c 	bl	80025d4 <MX_DMA_Init>
	MX_TIM1_Init();
 800189c:	f000 f9d0 	bl	8001c40 <MX_TIM1_Init>
	MX_TIM2_Init();
 80018a0:	f000 fac2 	bl	8001e28 <MX_TIM2_Init>
	MX_TIM3_Init();
 80018a4:	f000 fb86 	bl	8001fb4 <MX_TIM3_Init>
	MX_TIM8_Init();
 80018a8:	f000 fcda 	bl	8002260 <MX_TIM8_Init>
	MX_ADC1_Init();
 80018ac:	f000 f8d2 	bl	8001a54 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80018b0:	f000 fe5e 	bl	8002570 <MX_USART2_UART_Init>
	MX_TIM12_Init();
 80018b4:	f000 fdc8 	bl	8002448 <MX_TIM12_Init>
	MX_CAN2_Init();
 80018b8:	f000 f988 	bl	8001bcc <MX_CAN2_Init>
	MX_TIM4_Init();
 80018bc:	f000 fc42 	bl	8002144 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,SET);
	PWM_Off();
 80018c0:	f001 f888 	bl	80029d4 <PWM_Off>
	SetBuzzerFRQ(1000, 500);
 80018c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018cc:	f7ff fab8 	bl	8000e40 <SetBuzzerFRQ>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80018d0:	f007 fd2e 	bl	8009330 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of UARTTrmBinarySem */
	UARTTrmBinarySemHandle = osSemaphoreNew(1, 1, &UARTTrmBinarySem_attributes);
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <main+0xb4>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	2001      	movs	r0, #1
 80018da:	f007 fe20 	bl	800951e <osSemaphoreNew>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <main+0xb8>)
 80018e2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <main+0xbc>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4817      	ldr	r0, [pc, #92]	; (8001948 <main+0xc0>)
 80018ea:	f007 fd6b 	bl	80093c4 <osThreadNew>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a16      	ldr	r2, [pc, #88]	; (800194c <main+0xc4>)
 80018f2:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of UARTTx */
	UARTTxHandle = osThreadNew(StartUARTTx, NULL, &UARTTx_attributes);
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <main+0xc8>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4816      	ldr	r0, [pc, #88]	; (8001954 <main+0xcc>)
 80018fa:	f007 fd63 	bl	80093c4 <osThreadNew>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a15      	ldr	r2, [pc, #84]	; (8001958 <main+0xd0>)
 8001902:	6013      	str	r3, [r2, #0]

	/* creation of CANTask */
	CANTaskHandle = osThreadNew(CANEntry, NULL, &CANTask_attributes);
 8001904:	4a15      	ldr	r2, [pc, #84]	; (800195c <main+0xd4>)
 8001906:	2100      	movs	r1, #0
 8001908:	4815      	ldr	r0, [pc, #84]	; (8001960 <main+0xd8>)
 800190a:	f007 fd5b 	bl	80093c4 <osThreadNew>
 800190e:	4603      	mov	r3, r0
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <main+0xdc>)
 8001912:	6013      	str	r3, [r2, #0]

	/* creation of CfmPacket */
	CfmPacketHandle = osThreadNew(StartCfmPacket, NULL, &CfmPacket_attributes);
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <main+0xe0>)
 8001916:	2100      	movs	r1, #0
 8001918:	4814      	ldr	r0, [pc, #80]	; (800196c <main+0xe4>)
 800191a:	f007 fd53 	bl	80093c4 <osThreadNew>
 800191e:	4603      	mov	r3, r0
 8001920:	4a13      	ldr	r2, [pc, #76]	; (8001970 <main+0xe8>)
 8001922:	6013      	str	r3, [r2, #0]

	/* creation of PITask */
	PITaskHandle = osThreadNew(StartTaskPI, NULL, &PITask_attributes);
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <main+0xec>)
 8001926:	2100      	movs	r1, #0
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <main+0xf0>)
 800192a:	f007 fd4b 	bl	80093c4 <osThreadNew>
 800192e:	4603      	mov	r3, r0
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <main+0xf4>)
 8001932:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001934:	f007 fd20 	bl	8009378 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001938:	e7fe      	b.n	8001938 <main+0xb0>
 800193a:	bf00      	nop
 800193c:	0800d120 	.word	0x0800d120
 8001940:	20004f94 	.word	0x20004f94
 8001944:	0800d06c 	.word	0x0800d06c
 8001948:	08002859 	.word	0x08002859
 800194c:	20004bf4 	.word	0x20004bf4
 8001950:	0800d090 	.word	0x0800d090
 8001954:	0800287d 	.word	0x0800287d
 8001958:	20004c94 	.word	0x20004c94
 800195c:	0800d0b4 	.word	0x0800d0b4
 8001960:	080028d1 	.word	0x080028d1
 8001964:	20005090 	.word	0x20005090
 8001968:	0800d0d8 	.word	0x0800d0d8
 800196c:	080028e1 	.word	0x080028e1
 8001970:	20004ed0 	.word	0x20004ed0
 8001974:	0800d0fc 	.word	0x0800d0fc
 8001978:	08002929 	.word	0x08002929
 800197c:	20004cf8 	.word	0x20004cf8

08001980 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	; 0x50
 8001984:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	2230      	movs	r2, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f00b fb2a 	bl	800cfe8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <SystemClock_Config+0xcc>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <SystemClock_Config+0xcc>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <SystemClock_Config+0xcc>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <SystemClock_Config+0xd0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <SystemClock_Config+0xd0>)
 80019ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <SystemClock_Config+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019dc:	2301      	movs	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80019f0:	2304      	movs	r3, #4
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80019f4:	2390      	movs	r3, #144	; 0x90
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80019fc:	2304      	movs	r3, #4
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 f9e1 	bl	8006dcc <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x94>
		Error_Handler();
 8001a10:	f000 ffda 	bl	80029c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a24:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2104      	movs	r1, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 fc42 	bl	80072bc <HAL_RCC_ClockConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0xc2>
		Error_Handler();
 8001a3e:	f000 ffc3 	bl	80029c8 <Error_Handler>
	}
}
 8001a42:	bf00      	nop
 8001a44:	3750      	adds	r7, #80	; 0x50
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001a66:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a68:	4a56      	ldr	r2, [pc, #344]	; (8001bc4 <MX_ADC1_Init+0x170>)
 8001a6a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a6c:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a72:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001a78:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a84:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a92:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a94:	4a4c      	ldr	r2, [pc, #304]	; (8001bc8 <MX_ADC1_Init+0x174>)
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a98:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 8;
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001ab2:	4843      	ldr	r0, [pc, #268]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001ab4:	f002 fc24 	bl	8004300 <HAL_ADC_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001abe:	f000 ff83 	bl	80029c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001ace:	463b      	mov	r3, r7
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	483b      	ldr	r0, [pc, #236]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001ad4:	f002 fec6 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001ade:	f000 ff73 	bl	80029c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001aea:	463b      	mov	r3, r7
 8001aec:	4619      	mov	r1, r3
 8001aee:	4834      	ldr	r0, [pc, #208]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001af0:	f002 feb8 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_ADC1_Init+0xaa>
		Error_Handler();
 8001afa:	f000 ff65 	bl	80029c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001afe:	230a      	movs	r3, #10
 8001b00:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8001b02:	2303      	movs	r3, #3
 8001b04:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001b0c:	f002 feaa 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_ADC1_Init+0xc6>
		Error_Handler();
 8001b16:	f000 ff57 	bl	80029c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001b1a:	230b      	movs	r3, #11
 8001b1c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b22:	463b      	mov	r3, r7
 8001b24:	4619      	mov	r1, r3
 8001b26:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001b28:	f002 fe9c 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_ADC1_Init+0xe2>
		Error_Handler();
 8001b32:	f000 ff49 	bl	80029c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8001b36:	230c      	movs	r3, #12
 8001b38:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4619      	mov	r1, r3
 8001b42:	481f      	ldr	r0, [pc, #124]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001b44:	f002 fe8e 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_ADC1_Init+0xfe>
		Error_Handler();
 8001b4e:	f000 ff3b 	bl	80029c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001b52:	230d      	movs	r3, #13
 8001b54:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 8001b56:	2306      	movs	r3, #6
 8001b58:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001b60:	f002 fe80 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_ADC1_Init+0x11a>
		Error_Handler();
 8001b6a:	f000 ff2d 	bl	80029c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001b6e:	230e      	movs	r3, #14
 8001b70:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 8001b72:	2307      	movs	r3, #7
 8001b74:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b76:	463b      	mov	r3, r7
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4811      	ldr	r0, [pc, #68]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001b7c:	f002 fe72 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_ADC1_Init+0x136>
		Error_Handler();
 8001b86:	f000 ff1f 	bl	80029c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b92:	463b      	mov	r3, r7
 8001b94:	4619      	mov	r1, r3
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001b98:	f002 fe64 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_ADC1_Init+0x152>
		Error_Handler();
 8001ba2:	f000 ff11 	bl	80029c8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	hadc1.Instance->CR1 |= ADC_CR1_EOCIE;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <MX_ADC1_Init+0x16c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0220 	orr.w	r2, r2, #32
 8001bb4:	605a      	str	r2, [r3, #4]
	/* USER CODE END ADC1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20004cfc 	.word	0x20004cfc
 8001bc4:	40012000 	.word	0x40012000
 8001bc8:	0f000001 	.word	0x0f000001

08001bcc <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */
	//hcan2.Init.Mode = CAN_MODE_LOOPBACK;
	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <MX_CAN2_Init+0x70>)
 8001bd4:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 5;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001bd8:	2205      	movs	r2, #5
 8001bda:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001bea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bee:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001bf2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001bf6:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001c1c:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001c1e:	f003 f8cb 	bl	8004db8 <HAL_CAN_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_CAN2_Init+0x60>
		Error_Handler();
 8001c28:	f000 fece 	bl	80029c8 <Error_Handler>

	 HAL_CAN_Start(&hcan2);
	 HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	 */

	CAN_Config(&hcan2, 0);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4802      	ldr	r0, [pc, #8]	; (8001c38 <MX_CAN2_Init+0x6c>)
 8001c30:	f7ff f94a 	bl	8000ec8 <CAN_Config>

	/* USER CODE END CAN2_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20004d44 	.word	0x20004d44
 8001c3c:	40006800 	.word	0x40006800

08001c40 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b096      	sub	sp, #88	; 0x58
 8001c44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]
 8001c6e:	615a      	str	r2, [r3, #20]
 8001c70:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2220      	movs	r2, #32
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00b f9b5 	bl	800cfe8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001c7e:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001c80:	4a68      	ldr	r2, [pc, #416]	; (8001e24 <MX_TIM1_Init+0x1e4>)
 8001c82:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001c84:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b65      	ldr	r3, [pc, #404]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 7200;
 8001c90:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001c92:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001c96:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c9e:	4b60      	ldr	r3, [pc, #384]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001caa:	485d      	ldr	r0, [pc, #372]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001cac:	f005 fd34 	bl	8007718 <HAL_TIM_Base_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001cb6:	f000 fe87 	bl	80029c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001cc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4856      	ldr	r0, [pc, #344]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001cc8:	f006 f806 	bl	8007cd8 <HAL_TIM_ConfigClockSource>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0x96>
		Error_Handler();
 8001cd2:	f000 fe79 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001cd6:	4852      	ldr	r0, [pc, #328]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001cd8:	f005 fdde 	bl	8007898 <HAL_TIM_PWM_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001ce2:	f000 fe71 	bl	80029c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001cee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	484a      	ldr	r0, [pc, #296]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001cf6:	f006 fbc5 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001d00:	f000 fe62 	bl	80029c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d04:	2360      	movs	r3, #96	; 0x60
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	2200      	movs	r2, #0
 8001d26:	4619      	mov	r1, r3
 8001d28:	483d      	ldr	r0, [pc, #244]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001d2a:	f005 ff17 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001d34:	f000 fe48 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4837      	ldr	r0, [pc, #220]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001d42:	f005 ff0b 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001d4c:	f000 fe3c 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	2208      	movs	r2, #8
 8001d56:	4619      	mov	r1, r3
 8001d58:	4831      	ldr	r0, [pc, #196]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001d5a:	f005 feff 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8001d64:	f000 fe30 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	482b      	ldr	r0, [pc, #172]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001d72:	f005 fef3 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8001d7c:	f000 fe24 	bl	80029c8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d98:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	481f      	ldr	r0, [pc, #124]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001da4:	f006 fbea 	bl	800857c <HAL_TIMEx_ConfigBreakDeadTime>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0x172>
			!= HAL_OK) {
		Error_Handler();
 8001dae:	f000 fe0b 	bl	80029c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	// TIM1->CR1=0x1;
	htim1.Instance->CR1 |= TIM_CR1_CEN;
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
	htim1.Instance->BDTR |= TIM_BDTR_MOE;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
	htim1.Instance->CCER |= TIM_CCER_CC1E;
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC2E;
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0210 	orr.w	r2, r2, #16
 8001df0:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC3E;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e00:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC4E;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e10:	621a      	str	r2, [r3, #32]

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <MX_TIM1_Init+0x1e0>)
 8001e14:	f001 fb66 	bl	80034e4 <HAL_TIM_MspPostInit>

}
 8001e18:	bf00      	nop
 8001e1a:	3758      	adds	r7, #88	; 0x58
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20004f4c 	.word	0x20004f4c
 8001e24:	40010000 	.word	0x40010000

08001e28 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
 8001e54:	615a      	str	r2, [r3, #20]
 8001e56:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001e58:	4b55      	ldr	r3, [pc, #340]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b52      	ldr	r3, [pc, #328]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3600;
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001e6e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001e72:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e80:	484b      	ldr	r0, [pc, #300]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001e82:	f005 fc49 	bl	8007718 <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM2_Init+0x68>
		Error_Handler();
 8001e8c:	f000 fd9c 	bl	80029c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4844      	ldr	r0, [pc, #272]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001e9e:	f005 ff1b 	bl	8007cd8 <HAL_TIM_ConfigClockSource>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM2_Init+0x84>
		Error_Handler();
 8001ea8:	f000 fd8e 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001eac:	4840      	ldr	r0, [pc, #256]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001eae:	f005 fcf3 	bl	8007898 <HAL_TIM_PWM_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0x94>
		Error_Handler();
 8001eb8:	f000 fd86 	bl	80029c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001ec4:	f107 0320 	add.w	r3, r7, #32
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4839      	ldr	r0, [pc, #228]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001ecc:	f006 fada 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001ed6:	f000 fd77 	bl	80029c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eda:	2360      	movs	r3, #96	; 0x60
 8001edc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	482f      	ldr	r0, [pc, #188]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001ef2:	f005 fe33 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001efc:	f000 fd64 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2204      	movs	r2, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f08:	f005 fe28 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8001f12:	f000 fd59 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4824      	ldr	r0, [pc, #144]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f1e:	f005 fe1d 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8001f28:	f000 fd4e 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	220c      	movs	r2, #12
 8001f30:	4619      	mov	r1, r3
 8001f32:	481f      	ldr	r0, [pc, #124]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f34:	f005 fe12 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM2_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 8001f3e:	f000 fd43 	bl	80029c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	htim2.Instance->CR1 |= TIM_CR1_CEN;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
	htim2.Instance->BDTR |= TIM_BDTR_MOE;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0210 	orr.w	r2, r2, #16
 8001f80:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC3E;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f90:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC4E;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fa0:	621a      	str	r2, [r3, #32]

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM2_Init+0x188>)
 8001fa4:	f001 fa9e 	bl	80034e4 <HAL_TIM_MspPostInit>

}
 8001fa8:	bf00      	nop
 8001faa:	3738      	adds	r7, #56	; 0x38
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20004fb0 	.word	0x20004fb0

08001fb4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fc8:	f107 0320 	add.w	r3, r7, #32
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001fe4:	4b55      	ldr	r3, [pc, #340]	; (800213c <MX_TIM3_Init+0x188>)
 8001fe6:	4a56      	ldr	r2, [pc, #344]	; (8002140 <MX_TIM3_Init+0x18c>)
 8001fe8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001fea:	4b54      	ldr	r3, [pc, #336]	; (800213c <MX_TIM3_Init+0x188>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b52      	ldr	r3, [pc, #328]	; (800213c <MX_TIM3_Init+0x188>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3600;
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <MX_TIM3_Init+0x188>)
 8001ff8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001ffc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b4f      	ldr	r3, [pc, #316]	; (800213c <MX_TIM3_Init+0x188>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b4d      	ldr	r3, [pc, #308]	; (800213c <MX_TIM3_Init+0x188>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800200a:	484c      	ldr	r0, [pc, #304]	; (800213c <MX_TIM3_Init+0x188>)
 800200c:	f005 fb84 	bl	8007718 <HAL_TIM_Base_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0x66>
		Error_Handler();
 8002016:	f000 fcd7 	bl	80029c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002024:	4619      	mov	r1, r3
 8002026:	4845      	ldr	r0, [pc, #276]	; (800213c <MX_TIM3_Init+0x188>)
 8002028:	f005 fe56 	bl	8007cd8 <HAL_TIM_ConfigClockSource>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM3_Init+0x82>
		Error_Handler();
 8002032:	f000 fcc9 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002036:	4841      	ldr	r0, [pc, #260]	; (800213c <MX_TIM3_Init+0x188>)
 8002038:	f005 fc2e 	bl	8007898 <HAL_TIM_PWM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM3_Init+0x92>
		Error_Handler();
 8002042:	f000 fcc1 	bl	80029c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800204e:	f107 0320 	add.w	r3, r7, #32
 8002052:	4619      	mov	r1, r3
 8002054:	4839      	ldr	r0, [pc, #228]	; (800213c <MX_TIM3_Init+0x188>)
 8002056:	f006 fa15 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002060:	f000 fcb2 	bl	80029c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002064:	2360      	movs	r3, #96	; 0x60
 8002066:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	4830      	ldr	r0, [pc, #192]	; (800213c <MX_TIM3_Init+0x188>)
 800207c:	f005 fd6e 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002086:	f000 fc9f 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2204      	movs	r2, #4
 800208e:	4619      	mov	r1, r3
 8002090:	482a      	ldr	r0, [pc, #168]	; (800213c <MX_TIM3_Init+0x188>)
 8002092:	f005 fd63 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 800209c:	f000 fc94 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2208      	movs	r2, #8
 80020a4:	4619      	mov	r1, r3
 80020a6:	4825      	ldr	r0, [pc, #148]	; (800213c <MX_TIM3_Init+0x188>)
 80020a8:	f005 fd58 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM3_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 80020b2:	f000 fc89 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	220c      	movs	r2, #12
 80020ba:	4619      	mov	r1, r3
 80020bc:	481f      	ldr	r0, [pc, #124]	; (800213c <MX_TIM3_Init+0x188>)
 80020be:	f005 fd4d 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM3_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 80020c8:	f000 fc7e 	bl	80029c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	htim3.Instance->CR1 |= TIM_CR1_CEN;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <MX_TIM3_Init+0x188>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <MX_TIM3_Init+0x188>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
	htim3.Instance->BDTR |= TIM_BDTR_MOE;
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <MX_TIM3_Init+0x188>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <MX_TIM3_Init+0x188>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44
	htim3.Instance->CCER |= TIM_CCER_CC1E;
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <MX_TIM3_Init+0x188>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <MX_TIM3_Init+0x188>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	621a      	str	r2, [r3, #32]
	htim3.Instance->CCER |= TIM_CCER_CC2E;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_TIM3_Init+0x188>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_TIM3_Init+0x188>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0210 	orr.w	r2, r2, #16
 800210a:	621a      	str	r2, [r3, #32]
	htim3.Instance->CCER |= TIM_CCER_CC3E;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_TIM3_Init+0x188>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a1a      	ldr	r2, [r3, #32]
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <MX_TIM3_Init+0x188>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800211a:	621a      	str	r2, [r3, #32]
	htim3.Instance->CCER |= TIM_CCER_CC4E;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <MX_TIM3_Init+0x188>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6a1a      	ldr	r2, [r3, #32]
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_TIM3_Init+0x188>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800212a:	621a      	str	r2, [r3, #32]
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800212c:	4803      	ldr	r0, [pc, #12]	; (800213c <MX_TIM3_Init+0x188>)
 800212e:	f001 f9d9 	bl	80034e4 <HAL_TIM_MspPostInit>

}
 8002132:	bf00      	nop
 8002134:	3738      	adds	r7, #56	; 0x38
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20004ca0 	.word	0x20004ca0
 8002140:	40000400 	.word	0x40000400

08002144 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	; 0x38
 8002148:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800214a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002158:	f107 0320 	add.w	r3, r7, #32
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
 8002170:	615a      	str	r2, [r3, #20]
 8002172:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <MX_TIM4_Init+0x114>)
 8002176:	4a39      	ldr	r2, [pc, #228]	; (800225c <MX_TIM4_Init+0x118>)
 8002178:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 10;
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <MX_TIM4_Init+0x114>)
 800217c:	220a      	movs	r2, #10
 800217e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b35      	ldr	r3, [pc, #212]	; (8002258 <MX_TIM4_Init+0x114>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1800;
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <MX_TIM4_Init+0x114>)
 8002188:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800218c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218e:	4b32      	ldr	r3, [pc, #200]	; (8002258 <MX_TIM4_Init+0x114>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <MX_TIM4_Init+0x114>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800219a:	482f      	ldr	r0, [pc, #188]	; (8002258 <MX_TIM4_Init+0x114>)
 800219c:	f005 fabc 	bl	8007718 <HAL_TIM_Base_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM4_Init+0x66>
		Error_Handler();
 80021a6:	f000 fc0f 	bl	80029c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80021b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b4:	4619      	mov	r1, r3
 80021b6:	4828      	ldr	r0, [pc, #160]	; (8002258 <MX_TIM4_Init+0x114>)
 80021b8:	f005 fd8e 	bl	8007cd8 <HAL_TIM_ConfigClockSource>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM4_Init+0x82>
		Error_Handler();
 80021c2:	f000 fc01 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80021c6:	4824      	ldr	r0, [pc, #144]	; (8002258 <MX_TIM4_Init+0x114>)
 80021c8:	f005 fb66 	bl	8007898 <HAL_TIM_PWM_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM4_Init+0x92>
		Error_Handler();
 80021d2:	f000 fbf9 	bl	80029c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80021de:	f107 0320 	add.w	r3, r7, #32
 80021e2:	4619      	mov	r1, r3
 80021e4:	481c      	ldr	r0, [pc, #112]	; (8002258 <MX_TIM4_Init+0x114>)
 80021e6:	f006 f94d 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80021f0:	f000 fbea 	bl	80029c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f4:	2360      	movs	r3, #96	; 0x60
 80021f6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	220c      	movs	r2, #12
 8002208:	4619      	mov	r1, r3
 800220a:	4813      	ldr	r0, [pc, #76]	; (8002258 <MX_TIM4_Init+0x114>)
 800220c:	f005 fca6 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002216:	f000 fbd7 	bl	80029c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	htim4.Instance->CR1 |= TIM_CR1_CEN;
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_TIM4_Init+0x114>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <MX_TIM4_Init+0x114>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
	htim4.Instance->BDTR |= TIM_BDTR_MOE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <MX_TIM4_Init+0x114>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_TIM4_Init+0x114>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
	// htim4.Instance->CCER|=TIM_CCER_CC1E;
	// htim4.Instance->CCER|=TIM_CCER_CC2E;
	// htim4.Instance->CCER|=TIM_CCER_CC3E;
	htim4.Instance->CCER |= TIM_CCER_CC4E;
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MX_TIM4_Init+0x114>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <MX_TIM4_Init+0x114>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002248:	621a      	str	r2, [r3, #32]
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800224a:	4803      	ldr	r0, [pc, #12]	; (8002258 <MX_TIM4_Init+0x114>)
 800224c:	f001 f94a 	bl	80034e4 <HAL_TIM_MspPostInit>

}
 8002250:	bf00      	nop
 8002252:	3738      	adds	r7, #56	; 0x38
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20004c40 	.word	0x20004c40
 800225c:	40000800 	.word	0x40000800

08002260 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b096      	sub	sp, #88	; 0x58
 8002264:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	615a      	str	r2, [r3, #20]
 8002290:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2220      	movs	r2, #32
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f00a fea5 	bl	800cfe8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800229e:	4b68      	ldr	r3, [pc, #416]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022a0:	4a68      	ldr	r2, [pc, #416]	; (8002444 <MX_TIM8_Init+0x1e4>)
 80022a2:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80022a4:	4b66      	ldr	r3, [pc, #408]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	4b65      	ldr	r3, [pc, #404]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7200;
 80022b0:	4b63      	ldr	r3, [pc, #396]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022b2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80022b6:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80022be:	4b60      	ldr	r3, [pc, #384]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c4:	4b5e      	ldr	r3, [pc, #376]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80022ca:	485d      	ldr	r0, [pc, #372]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022cc:	f005 fa24 	bl	8007718 <HAL_TIM_Base_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM8_Init+0x7a>
		Error_Handler();
 80022d6:	f000 fb77 	bl	80029c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80022e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022e4:	4619      	mov	r1, r3
 80022e6:	4856      	ldr	r0, [pc, #344]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022e8:	f005 fcf6 	bl	8007cd8 <HAL_TIM_ConfigClockSource>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM8_Init+0x96>
		Error_Handler();
 80022f2:	f000 fb69 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80022f6:	4852      	ldr	r0, [pc, #328]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80022f8:	f005 face 	bl	8007898 <HAL_TIM_PWM_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8002302:	f000 fb61 	bl	80029c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800230e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002312:	4619      	mov	r1, r3
 8002314:	484a      	ldr	r0, [pc, #296]	; (8002440 <MX_TIM8_Init+0x1e0>)
 8002316:	f006 f8b5 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8002320:	f000 fb52 	bl	80029c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002324:	2360      	movs	r3, #96	; 0x60
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8002340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002344:	2200      	movs	r2, #0
 8002346:	4619      	mov	r1, r3
 8002348:	483d      	ldr	r0, [pc, #244]	; (8002440 <MX_TIM8_Init+0x1e0>)
 800234a:	f005 fc07 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8002354:	f000 fb38 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	2204      	movs	r2, #4
 800235e:	4619      	mov	r1, r3
 8002360:	4837      	ldr	r0, [pc, #220]	; (8002440 <MX_TIM8_Init+0x1e0>)
 8002362:	f005 fbfb 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 800236c:	f000 fb2c 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	2208      	movs	r2, #8
 8002376:	4619      	mov	r1, r3
 8002378:	4831      	ldr	r0, [pc, #196]	; (8002440 <MX_TIM8_Init+0x1e0>)
 800237a:	f005 fbef 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM8_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8002384:	f000 fb20 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8002388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238c:	220c      	movs	r2, #12
 800238e:	4619      	mov	r1, r3
 8002390:	482b      	ldr	r0, [pc, #172]	; (8002440 <MX_TIM8_Init+0x1e0>)
 8002392:	f005 fbe3 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM8_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 800239c:	f000 fb14 	bl	80029c8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023b8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	481f      	ldr	r0, [pc, #124]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80023c4:	f006 f8da 	bl	800857c <HAL_TIMEx_ConfigBreakDeadTime>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM8_Init+0x172>
			!= HAL_OK) {
		Error_Handler();
 80023ce:	f000 fafb 	bl	80029c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	htim8.Instance->CR1 |= TIM_CR1_CEN;
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
	htim8.Instance->BDTR |= TIM_BDTR_MOE;
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
	htim8.Instance->CCER |= TIM_CCER_CC1E;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6a1a      	ldr	r2, [r3, #32]
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_TIM8_Init+0x1e0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	621a      	str	r2, [r3, #32]
	htim8.Instance->CCER |= TIM_CCER_CC2E;
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MX_TIM8_Init+0x1e0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <MX_TIM8_Init+0x1e0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0210 	orr.w	r2, r2, #16
 8002410:	621a      	str	r2, [r3, #32]
	htim8.Instance->CCER |= TIM_CCER_CC3E;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MX_TIM8_Init+0x1e0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_TIM8_Init+0x1e0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002420:	621a      	str	r2, [r3, #32]
	htim8.Instance->CCER |= TIM_CCER_CC4E;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <MX_TIM8_Init+0x1e0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <MX_TIM8_Init+0x1e0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002430:	621a      	str	r2, [r3, #32]
	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8002432:	4803      	ldr	r0, [pc, #12]	; (8002440 <MX_TIM8_Init+0x1e0>)
 8002434:	f001 f856 	bl	80034e4 <HAL_TIM_MspPostInit>

}
 8002438:	bf00      	nop
 800243a:	3758      	adds	r7, #88	; 0x58
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20004bf8 	.word	0x20004bf8
 8002444:	40010400 	.word	0x40010400

08002448 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800244e:	f107 0320 	add.w	r3, r7, #32
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	611a      	str	r2, [r3, #16]
 800246a:	615a      	str	r2, [r3, #20]
 800246c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 800246e:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <MX_TIM12_Init+0x120>)
 8002470:	4a3e      	ldr	r2, [pc, #248]	; (800256c <MX_TIM12_Init+0x124>)
 8002472:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <MX_TIM12_Init+0x120>)
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <MX_TIM12_Init+0x120>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 4200;
 8002480:	4b39      	ldr	r3, [pc, #228]	; (8002568 <MX_TIM12_Init+0x120>)
 8002482:	f241 0268 	movw	r2, #4200	; 0x1068
 8002486:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002488:	4b37      	ldr	r3, [pc, #220]	; (8002568 <MX_TIM12_Init+0x120>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <MX_TIM12_Init+0x120>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 8002494:	4834      	ldr	r0, [pc, #208]	; (8002568 <MX_TIM12_Init+0x120>)
 8002496:	f005 f93f 	bl	8007718 <HAL_TIM_Base_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM12_Init+0x5c>
		Error_Handler();
 80024a0:	f000 fa92 	bl	80029c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a8:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 80024aa:	f107 0320 	add.w	r3, r7, #32
 80024ae:	4619      	mov	r1, r3
 80024b0:	482d      	ldr	r0, [pc, #180]	; (8002568 <MX_TIM12_Init+0x120>)
 80024b2:	f005 fc11 	bl	8007cd8 <HAL_TIM_ConfigClockSource>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM12_Init+0x78>
		Error_Handler();
 80024bc:	f000 fa84 	bl	80029c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 80024c0:	4829      	ldr	r0, [pc, #164]	; (8002568 <MX_TIM12_Init+0x120>)
 80024c2:	f005 f9e9 	bl	8007898 <HAL_TIM_PWM_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM12_Init+0x88>
		Error_Handler();
 80024cc:	f000 fa7c 	bl	80029c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d0:	2360      	movs	r3, #96	; 0x60
 80024d2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 3000;
 80024d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80024d8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2200      	movs	r2, #0
 80024e6:	4619      	mov	r1, r3
 80024e8:	481f      	ldr	r0, [pc, #124]	; (8002568 <MX_TIM12_Init+0x120>)
 80024ea:	f005 fb37 	bl	8007b5c <HAL_TIM_PWM_ConfigChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM12_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80024f4:	f000 fa68 	bl	80029c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */
	htim12.Instance->CR1 |= TIM_CR1_CEN;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <MX_TIM12_Init+0x120>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_TIM12_Init+0x120>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
	htim12.Instance->BDTR |= TIM_BDTR_MOE;
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_TIM12_Init+0x120>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_TIM12_Init+0x120>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
	htim12.Instance->CCER |= TIM_CCER_CC1E;
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <MX_TIM12_Init+0x120>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6a1a      	ldr	r2, [r3, #32]
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MX_TIM12_Init+0x120>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	621a      	str	r2, [r3, #32]
	htim12.Instance->CCER |= TIM_CCER_CC2E;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_TIM12_Init+0x120>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a1a      	ldr	r2, [r3, #32]
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_TIM12_Init+0x120>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0210 	orr.w	r2, r2, #16
 8002536:	621a      	str	r2, [r3, #32]
	htim12.Instance->CCER |= TIM_CCER_CC3E;
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MX_TIM12_Init+0x120>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <MX_TIM12_Init+0x120>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002546:	621a      	str	r2, [r3, #32]
	htim12.Instance->CCER |= TIM_CCER_CC4E;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <MX_TIM12_Init+0x120>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_TIM12_Init+0x120>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002556:	621a      	str	r2, [r3, #32]
	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <MX_TIM12_Init+0x120>)
 800255a:	f000 ffc3 	bl	80034e4 <HAL_TIM_MspPostInit>

}
 800255e:	bf00      	nop
 8002560:	3730      	adds	r7, #48	; 0x30
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20005040 	.word	0x20005040
 800256c:	40001800 	.word	0x40001800

08002570 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 8002576:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <MX_USART2_UART_Init+0x60>)
 8002578:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 800257c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002580:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 8002596:	220c      	movs	r2, #12
 8002598:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 80025a8:	f006 f84e 	bl	8008648 <HAL_UART_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80025b2:	f000 fa09 	bl	80029c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <MX_USART2_UART_Init+0x5c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	60da      	str	r2, [r3, #12]

	/* USER CODE END USART2_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20004ffc 	.word	0x20004ffc
 80025d0:	40004400 	.word	0x40004400

080025d4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_DMA_Init+0x68>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a16      	ldr	r2, [pc, #88]	; (800263c <MX_DMA_Init+0x68>)
 80025e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <MX_DMA_Init+0x68>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <MX_DMA_Init+0x68>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <MX_DMA_Init+0x68>)
 8002600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <MX_DMA_Init+0x68>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2105      	movs	r1, #5
 8002616:	2011      	movs	r0, #17
 8002618:	f003 fb1e 	bl	8005c58 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800261c:	2011      	movs	r0, #17
 800261e:	f003 fb37 	bl	8005c90 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2105      	movs	r1, #5
 8002626:	2038      	movs	r0, #56	; 0x38
 8002628:	f003 fb16 	bl	8005c58 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800262c:	2038      	movs	r0, #56	; 0x38
 800262e:	f003 fb2f 	bl	8005c90 <HAL_NVIC_EnableIRQ>

}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <MX_GPIO_Init+0x148>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <MX_GPIO_Init+0x148>)
 8002660:	f043 0310 	orr.w	r3, r3, #16
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b48      	ldr	r3, [pc, #288]	; (8002788 <MX_GPIO_Init+0x148>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	4b44      	ldr	r3, [pc, #272]	; (8002788 <MX_GPIO_Init+0x148>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a43      	ldr	r2, [pc, #268]	; (8002788 <MX_GPIO_Init+0x148>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <MX_GPIO_Init+0x148>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <MX_GPIO_Init+0x148>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a3c      	ldr	r2, [pc, #240]	; (8002788 <MX_GPIO_Init+0x148>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <MX_GPIO_Init+0x148>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <MX_GPIO_Init+0x148>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a35      	ldr	r2, [pc, #212]	; (8002788 <MX_GPIO_Init+0x148>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <MX_GPIO_Init+0x148>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <MX_GPIO_Init+0x148>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a2e      	ldr	r2, [pc, #184]	; (8002788 <MX_GPIO_Init+0x148>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <MX_GPIO_Init+0x148>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	4b28      	ldr	r3, [pc, #160]	; (8002788 <MX_GPIO_Init+0x148>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <MX_GPIO_Init+0x148>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b25      	ldr	r3, [pc, #148]	; (8002788 <MX_GPIO_Init+0x148>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80026fe:	2201      	movs	r2, #1
 8002700:	21ff      	movs	r1, #255	; 0xff
 8002702:	4822      	ldr	r0, [pc, #136]	; (800278c <MX_GPIO_Init+0x14c>)
 8002704:	f004 fb48 	bl	8006d98 <HAL_GPIO_WritePin>
			GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6
					| GPIO_PIN_7 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8002708:	2201      	movs	r2, #1
 800270a:	f640 7187 	movw	r1, #3975	; 0xf87
 800270e:	4820      	ldr	r0, [pc, #128]	; (8002790 <MX_GPIO_Init+0x150>)
 8002710:	f004 fb42 	bl	8006d98 <HAL_GPIO_WritePin>
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_0
					| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14,
 8002714:	2200      	movs	r2, #0
 8002716:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800271a:	481d      	ldr	r0, [pc, #116]	; (8002790 <MX_GPIO_Init+0x150>)
 800271c:	f004 fb3c 	bl	8006d98 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002720:	2200      	movs	r2, #0
 8002722:	2120      	movs	r1, #32
 8002724:	481b      	ldr	r0, [pc, #108]	; (8002794 <MX_GPIO_Init+0x154>)
 8002726:	f004 fb37 	bl	8006d98 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PE2 PE3 PE4 PE5
	 PE6 PE7 PE0 PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 800272a:	23ff      	movs	r3, #255	; 0xff
 800272c:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_0 | GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	2301      	movs	r3, #1
 8002730:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800273a:	f107 031c 	add.w	r3, r7, #28
 800273e:	4619      	mov	r1, r3
 8002740:	4812      	ldr	r0, [pc, #72]	; (800278c <MX_GPIO_Init+0x14c>)
 8002742:	f004 f98d 	bl	8006a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD0
	 PD1 PD2 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8002746:	f647 7387 	movw	r3, #32647	; 0x7f87
 800274a:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274c:	2301      	movs	r3, #1
 800274e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	4619      	mov	r1, r3
 800275e:	480c      	ldr	r0, [pc, #48]	; (8002790 <MX_GPIO_Init+0x150>)
 8002760:	f004 f97e 	bl	8006a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002764:	2320      	movs	r3, #32
 8002766:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002768:	2301      	movs	r3, #1
 800276a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	4806      	ldr	r0, [pc, #24]	; (8002794 <MX_GPIO_Init+0x154>)
 800277c:	f004 f970 	bl	8006a60 <HAL_GPIO_Init>

}
 8002780:	bf00      	nop
 8002782:	3730      	adds	r7, #48	; 0x30
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	40021000 	.word	0x40021000
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40020400 	.word	0x40020400

08002798 <CalcCheckSumm>:

/* USER CODE BEGIN 4 */

uint8_t CalcCheckSumm(uint16_t N, uint8_t *Array) {
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	80fb      	strh	r3, [r7, #6]
	uint16_t Summ = 0, j;
 80027a4:	2300      	movs	r3, #0
 80027a6:	81fb      	strh	r3, [r7, #14]

	for (j = 0; j < N; j++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	81bb      	strh	r3, [r7, #12]
 80027ac:	e00a      	b.n	80027c4 <CalcCheckSumm+0x2c>
		Summ = Summ + Array[j];
 80027ae:	89bb      	ldrh	r3, [r7, #12]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	4413      	add	r3, r2
 80027bc:	81fb      	strh	r3, [r7, #14]
	for (j = 0; j < N; j++)
 80027be:	89bb      	ldrh	r3, [r7, #12]
 80027c0:	3301      	adds	r3, #1
 80027c2:	81bb      	strh	r3, [r7, #12]
 80027c4:	89ba      	ldrh	r2, [r7, #12]
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3f0      	bcc.n	80027ae <CalcCheckSumm+0x16>

	Summ = ~Summ;
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	81fb      	strh	r3, [r7, #14]

	return (unsigned char) Summ;
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	b2db      	uxtb	r3, r3

}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	if (AdcHandle == &hadc1) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a05      	ldr	r2, [pc, #20]	; (8002804 <HAL_ADC_ConvCpltCallback+0x20>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d100      	bne.n	80027f6 <HAL_ADC_ConvCpltCallback+0x12>
		asm("Nop");
 80027f4:	bf00      	nop
	}
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20004cfc 	.word	0x20004cfc

08002808 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	if (hcan->Instance == CAN2) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d102      	bne.n	8002820 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		processCAN2Packet(hcan);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fc4e 	bl	80010bc <processCAN2Packet>
	}

}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40006800 	.word	0x40006800

0800282c <HAL_UART_TxCpltCallback>:
 ReceivePacketUART(&huart2);
 }
 }

 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

	if (huart == &huart2) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a06      	ldr	r2, [pc, #24]	; (8002850 <HAL_UART_TxCpltCallback+0x24>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d104      	bne.n	8002846 <HAL_UART_TxCpltCallback+0x1a>

		osSemaphoreRelease(UARTTrmBinarySemHandle);
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_UART_TxCpltCallback+0x28>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f006 ff47 	bl	80096d4 <osSemaphoreRelease>
	}
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20004ffc 	.word	0x20004ffc
 8002854:	20004f94 	.word	0x20004f94

08002858 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
		/*    HAL_ADC_Start(&hadc1);
		 HAL_ADC_PollForConversion(&hadc1, 100);
		 adcResult = HAL_ADC_GetValue(&hadc1);
		 HAL_ADC_Stop(&hadc1);
		 */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8002860:	2208      	movs	r2, #8
 8002862:	4904      	ldr	r1, [pc, #16]	; (8002874 <StartDefaultTask+0x1c>)
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <StartDefaultTask+0x20>)
 8002866:	f001 fecf 	bl	8004608 <HAL_ADC_Start_DMA>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,SET);

		asm("Nop");
 800286a:	bf00      	nop

		osDelay(1);
 800286c:	2001      	movs	r0, #1
 800286e:	f006 fe3b 	bl	80094e8 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8002872:	e7f5      	b.n	8002860 <StartDefaultTask+0x8>
 8002874:	20005094 	.word	0x20005094
 8002878:	20004cfc 	.word	0x20004cfc

0800287c <StartUARTTx>:
 * @brief Function implementing the UARTTx thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTTx */
void StartUARTTx(void *argument) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUARTTx */
	osStatus_t stat;

	/* Infinite loop */
	for (;;) {
		if (Starting) {
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <StartUARTTx+0x48>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <StartUARTTx+0x20>
			Starting = 0;
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <StartUARTTx+0x48>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
			osDelay(5000);
 8002892:	f241 3088 	movw	r0, #5000	; 0x1388
 8002896:	f006 fe27 	bl	80094e8 <osDelay>
 800289a:	e7f3      	b.n	8002884 <StartUARTTx+0x8>
		} else {
			stat = osSemaphoreAcquire(UARTTrmBinarySemHandle, 0);
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <StartUARTTx+0x4c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 fec4 	bl	8009630 <osSemaphoreAcquire>
 80028a8:	60f8      	str	r0, [r7, #12]
			if (stat == osOK) {
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <StartUARTTx+0x3c>
				TrmDataPacketUART(&huart2);
 80028b0:	4806      	ldr	r0, [pc, #24]	; (80028cc <StartUARTTx+0x50>)
 80028b2:	f001 fa9d 	bl	8003df0 <TrmDataPacketUART>
 80028b6:	e000      	b.n	80028ba <StartUARTTx+0x3e>
			} else
				asm("Nop");
 80028b8:	bf00      	nop

			osDelay(10);
 80028ba:	200a      	movs	r0, #10
 80028bc:	f006 fe14 	bl	80094e8 <osDelay>
		if (Starting) {
 80028c0:	e7e0      	b.n	8002884 <StartUARTTx+0x8>
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20004f94 	.word	0x20004f94
 80028cc:	20004ffc 	.word	0x20004ffc

080028d0 <CANEntry>:
 * @brief Function implementing the CANTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CANEntry */
void CANEntry(void *argument) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CANEntry */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80028d8:	2064      	movs	r0, #100	; 0x64
 80028da:	f006 fe05 	bl	80094e8 <osDelay>
 80028de:	e7fb      	b.n	80028d8 <CANEntry+0x8>

080028e0 <StartCfmPacket>:
 * @brief Function implementing the CfmPacket thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCfmPacket */
void StartCfmPacket(void *argument) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCfmPacket */
	osStatus_t stat;

	/* Infinite loop */
	for (;;) {
		if (ConfirmCMD) {
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <StartCfmPacket+0x3c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d011      	beq.n	8002914 <StartCfmPacket+0x34>
			stat = osSemaphoreAcquire(UARTTrmBinarySemHandle, 0);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <StartCfmPacket+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f006 fe9a 	bl	8009630 <osSemaphoreAcquire>
 80028fc:	60f8      	str	r0, [r7, #12]
			if (stat == osOK) {
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <StartCfmPacket+0x32>
				ConfirmCMD = 0;
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <StartCfmPacket+0x3c>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
				TrmCfmPacketUART(&huart2);
 800290a:	4806      	ldr	r0, [pc, #24]	; (8002924 <StartCfmPacket+0x44>)
 800290c:	f001 fc56 	bl	80041bc <TrmCfmPacketUART>
 8002910:	e000      	b.n	8002914 <StartCfmPacket+0x34>
			} else
				asm("Nop");
 8002912:	bf00      	nop
		}

		osDelay(1);
 8002914:	2001      	movs	r0, #1
 8002916:	f006 fde7 	bl	80094e8 <osDelay>
		if (ConfirmCMD) {
 800291a:	e7e5      	b.n	80028e8 <StartCfmPacket+0x8>
 800291c:	20005142 	.word	0x20005142
 8002920:	20004f94 	.word	0x20004f94
 8002924:	20004ffc 	.word	0x20004ffc

08002928 <StartTaskPI>:
 * @brief Function implementing the PITask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskPI */
void StartTaskPI(void *argument) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskPI */
	/* Infinite loop */
	for (;;) {
		CntSamples++;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <StartTaskPI+0x20>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <StartTaskPI+0x20>)
 8002938:	6013      	str	r3, [r2, #0]

		CalculateAngles();
 800293a:	f000 f98d 	bl	8002c58 <CalculateAngles>

		osDelay(5);
 800293e:	2005      	movs	r0, #5
 8002940:	f006 fdd2 	bl	80094e8 <osDelay>
		CntSamples++;
 8002944:	e7f4      	b.n	8002930 <StartTaskPI+0x8>
 8002946:	bf00      	nop
 8002948:	200049e0 	.word	0x200049e0

0800294c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
//	  if (htim->Instance == TIM14) {
	//   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 8);
	//}
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800295e:	f001 fcaf 	bl	80042c0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM14) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d120      	bne.n	80029ae <HAL_TIM_PeriodElapsedCallback+0x62>
		if (CntRxTimeOut) {
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00c      	beq.n	800298e <HAL_TIM_PeriodElapsedCallback+0x42>
			CntRxTimeOut--;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800297e:	801a      	strh	r2, [r3, #0]
			if (!CntRxTimeOut) {
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <HAL_TIM_PeriodElapsedCallback+0x42>
				GettingPacketRx_FL = 0;
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
			}
		}
		if (BuzzerCnt) {
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_TIM_PeriodElapsedCallback+0x62>
			BuzzerCnt--;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80029a0:	801a      	strh	r2, [r3, #0]
			if (!BuzzerCnt) {
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_PeriodElapsedCallback+0x62>
				BuzzerOff();
 80029aa:	f7fe fa7f 	bl	8000eac <BuzzerOff>
			}
		}
	}

	/* USER CODE END Callback 1 */
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40002000 	.word	0x40002000
 80029bc:	2000513e 	.word	0x2000513e
 80029c0:	20005139 	.word	0x20005139
 80029c4:	200049cc 	.word	0x200049cc

080029c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029cc:	b672      	cpsid	i
}
 80029ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029d0:	e7fe      	b.n	80029d0 <Error_Handler+0x8>
	...

080029d4 <PWM_Off>:
float BC, HLeg, Vbok;
float TargetRHipJoint, TargetRLowerLeg, TargetRHip, TargetRFoot, TargetRBottom;



void PWM_Off(void) {
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
	htim2.Instance->CCR1 = htim2.Instance->CCR2 = htim2.Instance->CCR3 =
			htim2.Instance->CCR4 = 0;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <PWM_Off+0x44>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2300      	movs	r3, #0
 80029de:	6413      	str	r3, [r2, #64]	; 0x40
	htim2.Instance->CCR1 = htim2.Instance->CCR2 = htim2.Instance->CCR3 =
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <PWM_Off+0x44>)
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80029e6:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <PWM_Off+0x44>)
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	6393      	str	r3, [r2, #56]	; 0x38
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <PWM_Off+0x44>)
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	6353      	str	r3, [r2, #52]	; 0x34
	htim3.Instance->CCR1 = htim3.Instance->CCR2 = htim3.Instance->CCR3 =
			htim3.Instance->CCR4 = 0;
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <PWM_Off+0x48>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
	htim3.Instance->CCR1 = htim3.Instance->CCR2 = htim3.Instance->CCR3 =
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <PWM_Off+0x48>)
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002a00:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <PWM_Off+0x48>)
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	6393      	str	r3, [r2, #56]	; 0x38
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <PWM_Off+0x48>)
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20004fb0 	.word	0x20004fb0
 8002a1c:	20004ca0 	.word	0x20004ca0

08002a20 <SetMotorPWM>:

void SetMotorPWM(int16_t PWM, uint16_t MotorNum) {
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	460a      	mov	r2, r1
 8002a2a:	80fb      	strh	r3, [r7, #6]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	80bb      	strh	r3, [r7, #4]

	if (PWM > MAX_PWM)
 8002a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a34:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	dd02      	ble.n	8002a42 <SetMotorPWM+0x22>
		PWM = MAX_PWM;
 8002a3c:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002a40:	80fb      	strh	r3, [r7, #6]
	if (PWM < -MAX_PWM)
 8002a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a46:	4a7e      	ldr	r2, [pc, #504]	; (8002c40 <SetMotorPWM+0x220>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	da02      	bge.n	8002a52 <SetMotorPWM+0x32>
		PWM = -MAX_PWM;
 8002a4c:	f24f 2354 	movw	r3, #62036	; 0xf254
 8002a50:	80fb      	strh	r3, [r7, #6]

	switch (MotorNum) {
 8002a52:	88bb      	ldrh	r3, [r7, #4]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	2b07      	cmp	r3, #7
 8002a58:	f200 80ec 	bhi.w	8002c34 <SetMotorPWM+0x214>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <SetMotorPWM+0x44>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a85 	.word	0x08002a85
 8002a68:	08002ab7 	.word	0x08002ab7
 8002a6c:	08002ae9 	.word	0x08002ae9
 8002a70:	08002b1b 	.word	0x08002b1b
 8002a74:	08002b4d 	.word	0x08002b4d
 8002a78:	08002b87 	.word	0x08002b87
 8002a7c:	08002bc1 	.word	0x08002bc1
 8002a80:	08002bfb 	.word	0x08002bfb
	case MOTOR_L1:
		if (PWM >= 0) {
 8002a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db09      	blt.n	8002aa0 <SetMotorPWM+0x80>
			htim2.Instance->CCR1 = PWM;
 8002a8c:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <SetMotorPWM+0x224>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = 0;
 8002a96:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <SetMotorPWM+0x224>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			htim2.Instance->CCR1 = 0;
			htim2.Instance->CCR2 = -PWM;
		}
		break;
 8002a9e:	e0c9      	b.n	8002c34 <SetMotorPWM+0x214>
			htim2.Instance->CCR1 = 0;
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <SetMotorPWM+0x224>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = -PWM;
 8002aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aac:	425a      	negs	r2, r3
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <SetMotorPWM+0x224>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002ab4:	e0be      	b.n	8002c34 <SetMotorPWM+0x214>
	case MOTOR_L2:
		if (PWM >= 0) {
 8002ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db09      	blt.n	8002ad2 <SetMotorPWM+0xb2>
			htim2.Instance->CCR3 = PWM;
 8002abe:	4b61      	ldr	r3, [pc, #388]	; (8002c44 <SetMotorPWM+0x224>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 = 0;
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <SetMotorPWM+0x224>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2200      	movs	r2, #0
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
		} else {
			htim2.Instance->CCR3 = 0;
			htim2.Instance->CCR4 = -PWM;
		}
		break;
 8002ad0:	e0b0      	b.n	8002c34 <SetMotorPWM+0x214>
			htim2.Instance->CCR3 = 0;
 8002ad2:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <SetMotorPWM+0x224>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 = -PWM;
 8002ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ade:	425a      	negs	r2, r3
 8002ae0:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <SetMotorPWM+0x224>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002ae6:	e0a5      	b.n	8002c34 <SetMotorPWM+0x214>
	case MOTOR_L3:
		if (PWM >= 0) {
 8002ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db09      	blt.n	8002b04 <SetMotorPWM+0xe4>
			htim3.Instance->CCR1 = PWM;
 8002af0:	4b55      	ldr	r3, [pc, #340]	; (8002c48 <SetMotorPWM+0x228>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 = 0;
 8002afa:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <SetMotorPWM+0x228>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			htim3.Instance->CCR1 = 0;
			htim3.Instance->CCR2 = -PWM;
		}
		break;
 8002b02:	e097      	b.n	8002c34 <SetMotorPWM+0x214>
			htim3.Instance->CCR1 = 0;
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <SetMotorPWM+0x228>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 = -PWM;
 8002b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b10:	425a      	negs	r2, r3
 8002b12:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <SetMotorPWM+0x228>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002b18:	e08c      	b.n	8002c34 <SetMotorPWM+0x214>
	case MOTOR_L4:
		if (PWM >= 0) {
 8002b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db09      	blt.n	8002b36 <SetMotorPWM+0x116>
			htim3.Instance->CCR3 = PWM;
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <SetMotorPWM+0x228>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4 = 0;
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <SetMotorPWM+0x228>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
		} else {
			htim3.Instance->CCR3 = 0;
			htim3.Instance->CCR4 = -PWM;
		}
		break;
 8002b34:	e07e      	b.n	8002c34 <SetMotorPWM+0x214>
			htim3.Instance->CCR3 = 0;
 8002b36:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <SetMotorPWM+0x228>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4 = -PWM;
 8002b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b42:	425a      	negs	r2, r3
 8002b44:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <SetMotorPWM+0x228>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002b4a:	e073      	b.n	8002c34 <SetMotorPWM+0x214>
	case MOTOR_R1:
		PWM = PWM << 1;
 8002b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	80fb      	strh	r3, [r7, #6]
		if (PWM >= 0) {
 8002b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db09      	blt.n	8002b70 <SetMotorPWM+0x150>
			htim8.Instance->CCR3 = PWM;
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <SetMotorPWM+0x22c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b64:	63da      	str	r2, [r3, #60]	; 0x3c
			htim8.Instance->CCR4 = 0;
 8002b66:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <SetMotorPWM+0x22c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
		} else {
			htim8.Instance->CCR3 = 0;
			htim8.Instance->CCR4 = -PWM;
		}
		break;
 8002b6e:	e061      	b.n	8002c34 <SetMotorPWM+0x214>
			htim8.Instance->CCR3 = 0;
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <SetMotorPWM+0x22c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	63da      	str	r2, [r3, #60]	; 0x3c
			htim8.Instance->CCR4 = -PWM;
 8002b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b7c:	425a      	negs	r2, r3
 8002b7e:	4b33      	ldr	r3, [pc, #204]	; (8002c4c <SetMotorPWM+0x22c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002b84:	e056      	b.n	8002c34 <SetMotorPWM+0x214>
	case MOTOR_R2:
		PWM = PWM << 1;
 8002b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	80fb      	strh	r3, [r7, #6]
		if (PWM >= 0) {
 8002b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db09      	blt.n	8002baa <SetMotorPWM+0x18a>
			htim8.Instance->CCR1 = PWM;
 8002b96:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <SetMotorPWM+0x22c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 = 0;
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <SetMotorPWM+0x22c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			htim8.Instance->CCR1 = 0;
			htim8.Instance->CCR2 = -PWM;
		}
		break;
 8002ba8:	e044      	b.n	8002c34 <SetMotorPWM+0x214>
			htim8.Instance->CCR1 = 0;
 8002baa:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <SetMotorPWM+0x22c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 = -PWM;
 8002bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb6:	425a      	negs	r2, r3
 8002bb8:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <SetMotorPWM+0x22c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002bbe:	e039      	b.n	8002c34 <SetMotorPWM+0x214>
	case MOTOR_R3:
		PWM = PWM << 1;
 8002bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	80fb      	strh	r3, [r7, #6]
		if (PWM >= 0) {
 8002bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db09      	blt.n	8002be4 <SetMotorPWM+0x1c4>
			htim1.Instance->CCR3 = PWM;
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <SetMotorPWM+0x230>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c
			htim1.Instance->CCR4 = 0;
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <SetMotorPWM+0x230>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
		} else {
			htim1.Instance->CCR3 = 0;
			htim1.Instance->CCR4 = -PWM;
		}
		break;
 8002be2:	e027      	b.n	8002c34 <SetMotorPWM+0x214>
			htim1.Instance->CCR3 = 0;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <SetMotorPWM+0x230>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c
			htim1.Instance->CCR4 = -PWM;
 8002bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf0:	425a      	negs	r2, r3
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <SetMotorPWM+0x230>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002bf8:	e01c      	b.n	8002c34 <SetMotorPWM+0x214>
	case MOTOR_R4:
		PWM = PWM << 1;
 8002bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	80fb      	strh	r3, [r7, #6]
		if (PWM >= 0) {
 8002c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db09      	blt.n	8002c1e <SetMotorPWM+0x1fe>
			htim1.Instance->CCR1 = PWM;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <SetMotorPWM+0x230>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 = 0;
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <SetMotorPWM+0x230>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			htim1.Instance->CCR1 = 0;
			htim1.Instance->CCR2 = -PWM;
		}
		break;
 8002c1c:	e009      	b.n	8002c32 <SetMotorPWM+0x212>
			htim1.Instance->CCR1 = 0;
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <SetMotorPWM+0x230>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 = -PWM;
 8002c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2a:	425a      	negs	r2, r3
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <SetMotorPWM+0x230>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002c32:	bf00      	nop

	}
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	fffff254 	.word	0xfffff254
 8002c44:	20004fb0 	.word	0x20004fb0
 8002c48:	20004ca0 	.word	0x20004ca0
 8002c4c:	20004bf8 	.word	0x20004bf8
 8002c50:	20004f4c 	.word	0x20004f4c
 8002c54:	00000000 	.word	0x00000000

08002c58 <CalculateAngles>:


void CalculateAngles(void) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0

	float BD, Alfa1, Alfa2, HLegTemp;

	BC = -80;
 8002c5e:	4bc8      	ldr	r3, [pc, #800]	; (8002f80 <CalculateAngles+0x328>)
 8002c60:	4ac8      	ldr	r2, [pc, #800]	; (8002f84 <CalculateAngles+0x32c>)
 8002c62:	601a      	str	r2, [r3, #0]
	HLeg = 530;
 8002c64:	4bc8      	ldr	r3, [pc, #800]	; (8002f88 <CalculateAngles+0x330>)
 8002c66:	4ac9      	ldr	r2, [pc, #804]	; (8002f8c <CalculateAngles+0x334>)
 8002c68:	601a      	str	r2, [r3, #0]
	Vbok = 120;
 8002c6a:	4bc9      	ldr	r3, [pc, #804]	; (8002f90 <CalculateAngles+0x338>)
 8002c6c:	4ac9      	ldr	r2, [pc, #804]	; (8002f94 <CalculateAngles+0x33c>)
 8002c6e:	601a      	str	r2, [r3, #0]

	HLegTemp = HLeg;
 8002c70:	4bc5      	ldr	r3, [pc, #788]	; (8002f88 <CalculateAngles+0x330>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]

	HLeg = HLeg * HLeg + Vbok * Vbok;
 8002c76:	4bc4      	ldr	r3, [pc, #784]	; (8002f88 <CalculateAngles+0x330>)
 8002c78:	ed93 7a00 	vldr	s14, [r3]
 8002c7c:	4bc2      	ldr	r3, [pc, #776]	; (8002f88 <CalculateAngles+0x330>)
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c86:	4bc2      	ldr	r3, [pc, #776]	; (8002f90 <CalculateAngles+0x338>)
 8002c88:	edd3 6a00 	vldr	s13, [r3]
 8002c8c:	4bc0      	ldr	r3, [pc, #768]	; (8002f90 <CalculateAngles+0x338>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9a:	4bbb      	ldr	r3, [pc, #748]	; (8002f88 <CalculateAngles+0x330>)
 8002c9c:	edc3 7a00 	vstr	s15, [r3]
	HLeg = sqrt(HLeg);
 8002ca0:	4bb9      	ldr	r3, [pc, #740]	; (8002f88 <CalculateAngles+0x330>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fbf7 	bl	8000498 <__aeabi_f2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	ec43 2b10 	vmov	d0, r2, r3
 8002cb2:	f009 fe05 	bl	800c8c0 <sqrt>
 8002cb6:	ec53 2b10 	vmov	r2, r3, d0
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7fd fef3 	bl	8000aa8 <__aeabi_d2f>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4ab0      	ldr	r2, [pc, #704]	; (8002f88 <CalculateAngles+0x330>)
 8002cc6:	6013      	str	r3, [r2, #0]

	TargetRHipJoint = HLegTemp / HLeg;
 8002cc8:	4baf      	ldr	r3, [pc, #700]	; (8002f88 <CalculateAngles+0x330>)
 8002cca:	ed93 7a00 	vldr	s14, [r3]
 8002cce:	edd7 6a03 	vldr	s13, [r7, #12]
 8002cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd6:	4bb0      	ldr	r3, [pc, #704]	; (8002f98 <CalculateAngles+0x340>)
 8002cd8:	edc3 7a00 	vstr	s15, [r3]
	if (Vbok > 0) {
 8002cdc:	4bac      	ldr	r3, [pc, #688]	; (8002f90 <CalculateAngles+0x338>)
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	dd29      	ble.n	8002d40 <CalculateAngles+0xe8>
		TargetRHipJoint = acos(TargetRHipJoint) * 57.296;
 8002cec:	4baa      	ldr	r3, [pc, #680]	; (8002f98 <CalculateAngles+0x340>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fbd1 	bl	8000498 <__aeabi_f2d>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	ec43 2b10 	vmov	d0, r2, r3
 8002cfe:	f009 fda5 	bl	800c84c <acos>
 8002d02:	ec51 0b10 	vmov	r0, r1, d0
 8002d06:	a39c      	add	r3, pc, #624	; (adr r3, 8002f78 <CalculateAngles+0x320>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc1c 	bl	8000548 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f7fd fec6 	bl	8000aa8 <__aeabi_d2f>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a9e      	ldr	r2, [pc, #632]	; (8002f98 <CalculateAngles+0x340>)
 8002d20:	6013      	str	r3, [r2, #0]
		TargetRBottom = TargetRHipJoint;
 8002d22:	4b9d      	ldr	r3, [pc, #628]	; (8002f98 <CalculateAngles+0x340>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a9d      	ldr	r2, [pc, #628]	; (8002f9c <CalculateAngles+0x344>)
 8002d28:	6013      	str	r3, [r2, #0]
		TargetRHipJoint = TargetRHipJoint + 90;
 8002d2a:	4b9b      	ldr	r3, [pc, #620]	; (8002f98 <CalculateAngles+0x340>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002fa0 <CalculateAngles+0x348>
 8002d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d38:	4b97      	ldr	r3, [pc, #604]	; (8002f98 <CalculateAngles+0x340>)
 8002d3a:	edc3 7a00 	vstr	s15, [r3]
 8002d3e:	e02c      	b.n	8002d9a <CalculateAngles+0x142>
	} else {
		TargetRHipJoint = acos(TargetRHipJoint) * 57.296;
 8002d40:	4b95      	ldr	r3, [pc, #596]	; (8002f98 <CalculateAngles+0x340>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fba7 	bl	8000498 <__aeabi_f2d>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	ec43 2b10 	vmov	d0, r2, r3
 8002d52:	f009 fd7b 	bl	800c84c <acos>
 8002d56:	ec51 0b10 	vmov	r0, r1, d0
 8002d5a:	a387      	add	r3, pc, #540	; (adr r3, 8002f78 <CalculateAngles+0x320>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fbf2 	bl	8000548 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fd fe9c 	bl	8000aa8 <__aeabi_d2f>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4a89      	ldr	r2, [pc, #548]	; (8002f98 <CalculateAngles+0x340>)
 8002d74:	6013      	str	r3, [r2, #0]
		TargetRBottom = -TargetRHipJoint;
 8002d76:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <CalculateAngles+0x340>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	eef1 7a67 	vneg.f32	s15, s15
 8002d80:	4b86      	ldr	r3, [pc, #536]	; (8002f9c <CalculateAngles+0x344>)
 8002d82:	edc3 7a00 	vstr	s15, [r3]
		TargetRHipJoint = 90 - TargetRHipJoint;
 8002d86:	4b84      	ldr	r3, [pc, #528]	; (8002f98 <CalculateAngles+0x340>)
 8002d88:	edd3 7a00 	vldr	s15, [r3]
 8002d8c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002fa0 <CalculateAngles+0x348>
 8002d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d94:	4b80      	ldr	r3, [pc, #512]	; (8002f98 <CalculateAngles+0x340>)
 8002d96:	edc3 7a00 	vstr	s15, [r3]
	}

	BD = (float) BC * (float) BC + (float) HLeg * (float) HLeg;
 8002d9a:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <CalculateAngles+0x328>)
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	4b77      	ldr	r3, [pc, #476]	; (8002f80 <CalculateAngles+0x328>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002daa:	4b77      	ldr	r3, [pc, #476]	; (8002f88 <CalculateAngles+0x330>)
 8002dac:	edd3 6a00 	vldr	s13, [r3]
 8002db0:	4b75      	ldr	r3, [pc, #468]	; (8002f88 <CalculateAngles+0x330>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	edc7 7a02 	vstr	s15, [r7, #8]
	BD = sqrt(BD);
 8002dc2:	68b8      	ldr	r0, [r7, #8]
 8002dc4:	f7fd fb68 	bl	8000498 <__aeabi_f2d>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	ec43 2b10 	vmov	d0, r2, r3
 8002dd0:	f009 fd76 	bl	800c8c0 <sqrt>
 8002dd4:	ec53 2b10 	vmov	r2, r3, d0
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7fd fe64 	bl	8000aa8 <__aeabi_d2f>
 8002de0:	4603      	mov	r3, r0
 8002de2:	60bb      	str	r3, [r7, #8]
	Alfa1 = HLeg / BD;
 8002de4:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <CalculateAngles+0x330>)
 8002de6:	edd3 6a00 	vldr	s13, [r3]
 8002dea:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df2:	edc7 7a01 	vstr	s15, [r7, #4]
	Alfa1 = acos(Alfa1) * 57.296;
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd fb4e 	bl	8000498 <__aeabi_f2d>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	ec43 2b10 	vmov	d0, r2, r3
 8002e04:	f009 fd22 	bl	800c84c <acos>
 8002e08:	ec51 0b10 	vmov	r0, r1, d0
 8002e0c:	a35a      	add	r3, pc, #360	; (adr r3, 8002f78 <CalculateAngles+0x320>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f7fd fb99 	bl	8000548 <__aeabi_dmul>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f7fd fe43 	bl	8000aa8 <__aeabi_d2f>
 8002e22:	4603      	mov	r3, r0
 8002e24:	607b      	str	r3, [r7, #4]

	Alfa2 = ( LLowerLeg *  LLowerLeg + BD * BD
 8002e26:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <CalculateAngles+0x34c>)
 8002e28:	ed93 7a00 	vldr	s14, [r3]
 8002e2c:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <CalculateAngles+0x34c>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
			-  LHip *  LHip)
 8002e42:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <CalculateAngles+0x350>)
 8002e44:	edd3 6a00 	vldr	s13, [r3]
 8002e48:	4b57      	ldr	r3, [pc, #348]	; (8002fa8 <CalculateAngles+0x350>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e52:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ ((float) 2 *  LLowerLeg * BD);
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <CalculateAngles+0x34c>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e64:	ee27 7a27 	vmul.f32	s14, s14, s15
	Alfa2 = ( LLowerLeg *  LLowerLeg + BD * BD
 8002e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e6c:	edc7 7a00 	vstr	s15, [r7]
	Alfa2 = acos(Alfa2) * 57.296;
 8002e70:	6838      	ldr	r0, [r7, #0]
 8002e72:	f7fd fb11 	bl	8000498 <__aeabi_f2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	ec43 2b10 	vmov	d0, r2, r3
 8002e7e:	f009 fce5 	bl	800c84c <acos>
 8002e82:	ec51 0b10 	vmov	r0, r1, d0
 8002e86:	a33c      	add	r3, pc, #240	; (adr r3, 8002f78 <CalculateAngles+0x320>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fb5c 	bl	8000548 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f7fd fe06 	bl	8000aa8 <__aeabi_d2f>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	603b      	str	r3, [r7, #0]

	TargetRLowerLeg = ( LLowerLeg *  LLowerLeg
 8002ea0:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <CalculateAngles+0x34c>)
 8002ea2:	ed93 7a00 	vldr	s14, [r3]
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <CalculateAngles+0x34c>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee27 7a27 	vmul.f32	s14, s14, s15
			+  LHip *  LHip - BD * BD)
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <CalculateAngles+0x350>)
 8002eb2:	edd3 6a00 	vldr	s13, [r3]
 8002eb6:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <CalculateAngles+0x350>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ec8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ecc:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ ((float) 2 *  LLowerLeg *  LHip);
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <CalculateAngles+0x34c>)
 8002ed2:	edd3 7a00 	vldr	s15, [r3]
 8002ed6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002eda:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <CalculateAngles+0x350>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	TargetRLowerLeg = ( LLowerLeg *  LLowerLeg
 8002ee8:	4b30      	ldr	r3, [pc, #192]	; (8002fac <CalculateAngles+0x354>)
 8002eea:	edc3 7a00 	vstr	s15, [r3]
	TargetRLowerLeg = acos(TargetRLowerLeg) * 57.296;
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <CalculateAngles+0x354>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fad0 	bl	8000498 <__aeabi_f2d>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	ec43 2b10 	vmov	d0, r2, r3
 8002f00:	f009 fca4 	bl	800c84c <acos>
 8002f04:	ec51 0b10 	vmov	r0, r1, d0
 8002f08:	a31b      	add	r3, pc, #108	; (adr r3, 8002f78 <CalculateAngles+0x320>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f7fd fb1b 	bl	8000548 <__aeabi_dmul>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f7fd fdc5 	bl	8000aa8 <__aeabi_d2f>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <CalculateAngles+0x354>)
 8002f22:	6013      	str	r3, [r2, #0]

	if (BC < 0)
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <CalculateAngles+0x328>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	d541      	bpl.n	8002fb8 <CalculateAngles+0x360>
		TargetRHip = 180 - (180 - TargetRLowerLeg - Alfa2 + (90 - Alfa1)) + 90;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <CalculateAngles+0x354>)
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002fb4 <CalculateAngles+0x35c>
 8002f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f42:	edd7 7a00 	vldr	s15, [r7]
 8002f46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f4a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002fa0 <CalculateAngles+0x348>
 8002f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002fb4 <CalculateAngles+0x35c>
 8002f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f62:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002fa0 <CalculateAngles+0x348>
 8002f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <CalculateAngles+0x358>)
 8002f6c:	edc3 7a00 	vstr	s15, [r3]
 8002f70:	e038      	b.n	8002fe4 <CalculateAngles+0x38c>
 8002f72:	bf00      	nop
 8002f74:	f3af 8000 	nop.w
 8002f78:	53f7ced9 	.word	0x53f7ced9
 8002f7c:	404ca5e3 	.word	0x404ca5e3
 8002f80:	200050d4 	.word	0x200050d4
 8002f84:	c2a00000 	.word	0xc2a00000
 8002f88:	200050d0 	.word	0x200050d0
 8002f8c:	44048000 	.word	0x44048000
 8002f90:	200050e4 	.word	0x200050e4
 8002f94:	42f00000 	.word	0x42f00000
 8002f98:	200050e8 	.word	0x200050e8
 8002f9c:	200050e0 	.word	0x200050e0
 8002fa0:	42b40000 	.word	0x42b40000
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	200050d8 	.word	0x200050d8
 8002fb0:	200050ec 	.word	0x200050ec
 8002fb4:	43340000 	.word	0x43340000
	else
		TargetRHip = 180 - Alfa1 - (180 - TargetRLowerLeg - Alfa2);
 8002fb8:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002fb4 <CalculateAngles+0x35c>
 8002fbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fc4:	4b54      	ldr	r3, [pc, #336]	; (8003118 <CalculateAngles+0x4c0>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	eddf 6a54 	vldr	s13, [pc, #336]	; 800311c <CalculateAngles+0x4c4>
 8002fce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fd2:	edd7 7a00 	vldr	s15, [r7]
 8002fd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <CalculateAngles+0x4c8>)
 8002fe0:	edc3 7a00 	vstr	s15, [r3]

	if (BC < 0)
 8002fe4:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <CalculateAngles+0x4cc>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff2:	d50d      	bpl.n	8003010 <CalculateAngles+0x3b8>
		TargetRFoot = 90 - Alfa1 - Alfa2;
 8002ff4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003128 <CalculateAngles+0x4d0>
 8002ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003000:	edd7 7a00 	vldr	s15, [r7]
 8003004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003008:	4b48      	ldr	r3, [pc, #288]	; (800312c <CalculateAngles+0x4d4>)
 800300a:	edc3 7a00 	vstr	s15, [r3]
 800300e:	e00c      	b.n	800302a <CalculateAngles+0x3d2>
	else
		TargetRFoot = 90 + Alfa1 - Alfa2;
 8003010:	edd7 7a01 	vldr	s15, [r7, #4]
 8003014:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003128 <CalculateAngles+0x4d0>
 8003018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800301c:	edd7 7a00 	vldr	s15, [r7]
 8003020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003024:	4b41      	ldr	r3, [pc, #260]	; (800312c <CalculateAngles+0x4d4>)
 8003026:	edc3 7a00 	vstr	s15, [r3]

	if ((TargetRFoot - (int) TargetRFoot) >= 0.5) {
 800302a:	4b40      	ldr	r3, [pc, #256]	; (800312c <CalculateAngles+0x4d4>)
 800302c:	ed93 7a00 	vldr	s14, [r3]
 8003030:	4b3e      	ldr	r3, [pc, #248]	; (800312c <CalculateAngles+0x4d4>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	db0e      	blt.n	800306e <CalculateAngles+0x416>
		TargetRFoot = (int) TargetRFoot + 1;
 8003050:	4b36      	ldr	r3, [pc, #216]	; (800312c <CalculateAngles+0x4d4>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800305a:	ee17 3a90 	vmov	r3, s15
 800305e:	3301      	adds	r3, #1
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003068:	4b30      	ldr	r3, [pc, #192]	; (800312c <CalculateAngles+0x4d4>)
 800306a:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((TargetRLowerLeg - (int) TargetRLowerLeg) >= 0.5) {
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <CalculateAngles+0x4c0>)
 8003070:	ed93 7a00 	vldr	s14, [r3]
 8003074:	4b28      	ldr	r3, [pc, #160]	; (8003118 <CalculateAngles+0x4c0>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800307e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800308a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	db0e      	blt.n	80030b2 <CalculateAngles+0x45a>
		TargetRLowerLeg = (int) TargetRLowerLeg + 1;
 8003094:	4b20      	ldr	r3, [pc, #128]	; (8003118 <CalculateAngles+0x4c0>)
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800309e:	ee17 3a90 	vmov	r3, s15
 80030a2:	3301      	adds	r3, #1
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <CalculateAngles+0x4c0>)
 80030ae:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((TargetRHip - (int) TargetRHip) >= 0.5) {
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <CalculateAngles+0x4c8>)
 80030b4:	ed93 7a00 	vldr	s14, [r3]
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <CalculateAngles+0x4c8>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	db0e      	blt.n	80030f6 <CalculateAngles+0x49e>
		TargetRHip = (int) TargetRHip + 1;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <CalculateAngles+0x4c8>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e2:	ee17 3a90 	vmov	r3, s15
 80030e6:	3301      	adds	r3, #1
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <CalculateAngles+0x4c8>)
 80030f2:	edc3 7a00 	vstr	s15, [r3]
	}

	TargetRHip = TargetRHip - 90;
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <CalculateAngles+0x4c8>)
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003128 <CalculateAngles+0x4d0>
 8003100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <CalculateAngles+0x4c8>)
 8003106:	edc3 7a00 	vstr	s15, [r3]

	HLeg = HLegTemp;
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <CalculateAngles+0x4d8>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6013      	str	r3, [r2, #0]

}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	200050d8 	.word	0x200050d8
 800311c:	43340000 	.word	0x43340000
 8003120:	200050ec 	.word	0x200050ec
 8003124:	200050d4 	.word	0x200050d4
 8003128:	42b40000 	.word	0x42b40000
 800312c:	200050dc 	.word	0x200050dc
 8003130:	200050d0 	.word	0x200050d0

08003134 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_MspInit+0x54>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a11      	ldr	r2, [pc, #68]	; (8003188 <HAL_MspInit+0x54>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_MspInit+0x54>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_MspInit+0x54>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HAL_MspInit+0x54>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_MspInit+0x54>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	210f      	movs	r1, #15
 8003176:	f06f 0001 	mvn.w	r0, #1
 800317a:	f002 fd6d 	bl	8005c58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a3f      	ldr	r2, [pc, #252]	; (80032a8 <HAL_ADC_MspInit+0x11c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d178      	bne.n	80032a0 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a3d      	ldr	r2, [pc, #244]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a36      	ldr	r2, [pc, #216]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_ADC_MspInit+0x120>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003202:	233f      	movs	r3, #63	; 0x3f
 8003204:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003206:	2303      	movs	r3, #3
 8003208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	4826      	ldr	r0, [pc, #152]	; (80032b0 <HAL_ADC_MspInit+0x124>)
 8003216:	f003 fc23 	bl	8006a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800321a:	2330      	movs	r3, #48	; 0x30
 800321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321e:	2303      	movs	r3, #3
 8003220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	4619      	mov	r1, r3
 800322c:	4821      	ldr	r0, [pc, #132]	; (80032b4 <HAL_ADC_MspInit+0x128>)
 800322e:	f003 fc17 	bl	8006a60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003232:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 8003234:	4a21      	ldr	r2, [pc, #132]	; (80032bc <HAL_ADC_MspInit+0x130>)
 8003236:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003238:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 800323a:	2200      	movs	r2, #0
 800323c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800323e:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 800324c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003250:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 8003254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003258:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 800325c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003260:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 8003264:	2200      	movs	r2, #0
 8003266:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 8003270:	2200      	movs	r2, #0
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003274:	4810      	ldr	r0, [pc, #64]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 8003276:	f002 fd19 	bl	8005cac <HAL_DMA_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8003280:	f7ff fba2 	bl	80029c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
 800328a:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <HAL_ADC_MspInit+0x12c>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003290:	2200      	movs	r2, #0
 8003292:	2105      	movs	r1, #5
 8003294:	2012      	movs	r0, #18
 8003296:	f002 fcdf 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800329a:	2012      	movs	r0, #18
 800329c:	f002 fcf8 	bl	8005c90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032a0:	bf00      	nop
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40012000 	.word	0x40012000
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020800 	.word	0x40020800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	20004ee4 	.word	0x20004ee4
 80032bc:	40026410 	.word	0x40026410

080032c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <HAL_CAN_MspInit+0xd0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d152      	bne.n	8003388 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 80032ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a23      	ldr	r2, [pc, #140]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 8003308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_CAN_MspInit+0xd4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003336:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800333a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003344:	2303      	movs	r3, #3
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003348:	2309      	movs	r3, #9
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4619      	mov	r1, r3
 8003352:	4811      	ldr	r0, [pc, #68]	; (8003398 <HAL_CAN_MspInit+0xd8>)
 8003354:	f003 fb84 	bl	8006a60 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	2105      	movs	r1, #5
 800335c:	203f      	movs	r0, #63	; 0x3f
 800335e:	f002 fc7b 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8003362:	203f      	movs	r0, #63	; 0x3f
 8003364:	f002 fc94 	bl	8005c90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003368:	2200      	movs	r2, #0
 800336a:	2105      	movs	r1, #5
 800336c:	2040      	movs	r0, #64	; 0x40
 800336e:	f002 fc73 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003372:	2040      	movs	r0, #64	; 0x40
 8003374:	f002 fc8c 	bl	8005c90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8003378:	2200      	movs	r2, #0
 800337a:	2105      	movs	r1, #5
 800337c:	2041      	movs	r0, #65	; 0x41
 800337e:	f002 fc6b 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003382:	2041      	movs	r0, #65	; 0x41
 8003384:	f002 fc84 	bl	8005c90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003388:	bf00      	nop
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40006800 	.word	0x40006800
 8003394:	40023800 	.word	0x40023800
 8003398:	40020400 	.word	0x40020400

0800339c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a48      	ldr	r2, [pc, #288]	; (80034cc <HAL_TIM_Base_MspInit+0x130>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d116      	bne.n	80033dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	4a46      	ldr	r2, [pc, #280]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6453      	str	r3, [r2, #68]	; 0x44
 80033be:	4b44      	ldr	r3, [pc, #272]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2105      	movs	r1, #5
 80033ce:	2019      	movs	r0, #25
 80033d0:	f002 fc42 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033d4:	2019      	movs	r0, #25
 80033d6:	f002 fc5b 	bl	8005c90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80033da:	e072      	b.n	80034c2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d116      	bne.n	8003414 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a38      	ldr	r2, [pc, #224]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	2105      	movs	r1, #5
 8003406:	201c      	movs	r0, #28
 8003408:	f002 fc26 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800340c:	201c      	movs	r0, #28
 800340e:	f002 fc3f 	bl	8005c90 <HAL_NVIC_EnableIRQ>
}
 8003412:	e056      	b.n	80034c2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <HAL_TIM_Base_MspInit+0x138>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10e      	bne.n	800343c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]
}
 800343a:	e042      	b.n	80034c2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_TIM_Base_MspInit+0x13c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10e      	bne.n	8003464 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6413      	str	r3, [r2, #64]	; 0x40
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
}
 8003462:	e02e      	b.n	80034c2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <HAL_TIM_Base_MspInit+0x140>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d116      	bne.n	800349c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	6453      	str	r3, [r2, #68]	; 0x44
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	202d      	movs	r0, #45	; 0x2d
 8003490:	f002 fbe2 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003494:	202d      	movs	r0, #45	; 0x2d
 8003496:	f002 fbfb 	bl	8005c90 <HAL_NVIC_EnableIRQ>
}
 800349a:	e012      	b.n	80034c2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <HAL_TIM_Base_MspInit+0x144>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10d      	bne.n	80034c2 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80034b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b4:	6413      	str	r3, [r2, #64]	; 0x40
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_TIM_Base_MspInit+0x134>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
}
 80034c2:	bf00      	nop
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40010400 	.word	0x40010400
 80034e0:	40001800 	.word	0x40001800

080034e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08e      	sub	sp, #56	; 0x38
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a7d      	ldr	r2, [pc, #500]	; (80036f8 <HAL_TIM_MspPostInit+0x214>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d11f      	bne.n	8003546 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	4b7c      	ldr	r3, [pc, #496]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a7b      	ldr	r2, [pc, #492]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 8003510:	f043 0310 	orr.w	r3, r3, #16
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b79      	ldr	r3, [pc, #484]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003522:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003530:	2300      	movs	r3, #0
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003534:	2301      	movs	r3, #1
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353c:	4619      	mov	r1, r3
 800353e:	4870      	ldr	r0, [pc, #448]	; (8003700 <HAL_TIM_MspPostInit+0x21c>)
 8003540:	f003 fa8e 	bl	8006a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003544:	e0d3      	b.n	80036ee <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d11e      	bne.n	800358e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	4b69      	ldr	r3, [pc, #420]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4a68      	ldr	r2, [pc, #416]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6313      	str	r3, [r2, #48]	; 0x30
 8003560:	4b66      	ldr	r3, [pc, #408]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800356c:	230f      	movs	r3, #15
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	2300      	movs	r3, #0
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800357c:	2301      	movs	r3, #1
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003584:	4619      	mov	r1, r3
 8003586:	485f      	ldr	r0, [pc, #380]	; (8003704 <HAL_TIM_MspPostInit+0x220>)
 8003588:	f003 fa6a 	bl	8006a60 <HAL_GPIO_Init>
}
 800358c:	e0af      	b.n	80036ee <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a5d      	ldr	r2, [pc, #372]	; (8003708 <HAL_TIM_MspPostInit+0x224>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d13c      	bne.n	8003612 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	4b57      	ldr	r3, [pc, #348]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	4a56      	ldr	r2, [pc, #344]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6313      	str	r3, [r2, #48]	; 0x30
 80035a8:	4b54      	ldr	r3, [pc, #336]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	4a4f      	ldr	r2, [pc, #316]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 80035be:	f043 0302 	orr.w	r3, r3, #2
 80035c2:	6313      	str	r3, [r2, #48]	; 0x30
 80035c4:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035d0:	23c0      	movs	r3, #192	; 0xc0
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035dc:	2300      	movs	r3, #0
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035e0:	2302      	movs	r3, #2
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e8:	4619      	mov	r1, r3
 80035ea:	4846      	ldr	r0, [pc, #280]	; (8003704 <HAL_TIM_MspPostInit+0x220>)
 80035ec:	f003 fa38 	bl	8006a60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035f0:	2303      	movs	r3, #3
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003600:	2302      	movs	r3, #2
 8003602:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003608:	4619      	mov	r1, r3
 800360a:	4840      	ldr	r0, [pc, #256]	; (800370c <HAL_TIM_MspPostInit+0x228>)
 800360c:	f003 fa28 	bl	8006a60 <HAL_GPIO_Init>
}
 8003610:	e06d      	b.n	80036ee <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM4)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a3e      	ldr	r2, [pc, #248]	; (8003710 <HAL_TIM_MspPostInit+0x22c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d11f      	bne.n	800365c <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	4a35      	ldr	r2, [pc, #212]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 8003626:	f043 0308 	orr.w	r3, r3, #8
 800362a:	6313      	str	r3, [r2, #48]	; 0x30
 800362c:	4b33      	ldr	r3, [pc, #204]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363e:	2302      	movs	r3, #2
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003646:	2300      	movs	r3, #0
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800364a:	2302      	movs	r3, #2
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800364e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003652:	4619      	mov	r1, r3
 8003654:	482f      	ldr	r0, [pc, #188]	; (8003714 <HAL_TIM_MspPostInit+0x230>)
 8003656:	f003 fa03 	bl	8006a60 <HAL_GPIO_Init>
}
 800365a:	e048      	b.n	80036ee <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM8)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2d      	ldr	r2, [pc, #180]	; (8003718 <HAL_TIM_MspPostInit+0x234>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d11f      	bne.n	80036a6 <HAL_TIM_MspPostInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4a23      	ldr	r2, [pc, #140]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 8003670:	f043 0304 	orr.w	r3, r3, #4
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b21      	ldr	r3, [pc, #132]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003682:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	2302      	movs	r3, #2
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	2300      	movs	r3, #0
 8003692:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003694:	2303      	movs	r3, #3
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369c:	4619      	mov	r1, r3
 800369e:	481f      	ldr	r0, [pc, #124]	; (800371c <HAL_TIM_MspPostInit+0x238>)
 80036a0:	f003 f9de 	bl	8006a60 <HAL_GPIO_Init>
}
 80036a4:	e023      	b.n	80036ee <HAL_TIM_MspPostInit+0x20a>
  else if(htim->Instance==TIM12)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_TIM_MspPostInit+0x23c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d11e      	bne.n	80036ee <HAL_TIM_MspPostInit+0x20a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b0:	2300      	movs	r3, #0
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	6313      	str	r3, [r2, #48]	; 0x30
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_TIM_MspPostInit+0x218>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80036de:	2309      	movs	r3, #9
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e6:	4619      	mov	r1, r3
 80036e8:	4808      	ldr	r0, [pc, #32]	; (800370c <HAL_TIM_MspPostInit+0x228>)
 80036ea:	f003 f9b9 	bl	8006a60 <HAL_GPIO_Init>
}
 80036ee:	bf00      	nop
 80036f0:	3738      	adds	r7, #56	; 0x38
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40023800 	.word	0x40023800
 8003700:	40021000 	.word	0x40021000
 8003704:	40020000 	.word	0x40020000
 8003708:	40000400 	.word	0x40000400
 800370c:	40020400 	.word	0x40020400
 8003710:	40000800 	.word	0x40000800
 8003714:	40020c00 	.word	0x40020c00
 8003718:	40010400 	.word	0x40010400
 800371c:	40020800 	.word	0x40020800
 8003720:	40001800 	.word	0x40001800

08003724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a34      	ldr	r2, [pc, #208]	; (8003814 <HAL_UART_MspInit+0xf0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d161      	bne.n	800380a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <HAL_UART_MspInit+0xf4>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a32      	ldr	r2, [pc, #200]	; (8003818 <HAL_UART_MspInit+0xf4>)
 8003750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
 8003756:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_UART_MspInit+0xf4>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_UART_MspInit+0xf4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a2b      	ldr	r2, [pc, #172]	; (8003818 <HAL_UART_MspInit+0xf4>)
 800376c:	f043 0308 	orr.w	r3, r3, #8
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_UART_MspInit+0xf4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800377e:	2360      	movs	r3, #96	; 0x60
 8003780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800378e:	2307      	movs	r3, #7
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	4619      	mov	r1, r3
 8003798:	4820      	ldr	r0, [pc, #128]	; (800381c <HAL_UART_MspInit+0xf8>)
 800379a:	f003 f961 	bl	8006a60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037a0:	4a20      	ldr	r2, [pc, #128]	; (8003824 <HAL_UART_MspInit+0x100>)
 80037a2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80037a4:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b2:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037be:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037da:	2200      	movs	r2, #0
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037de:	4810      	ldr	r0, [pc, #64]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037e0:	f002 fa64 	bl	8005cac <HAL_DMA_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80037ea:	f7ff f8ed 	bl	80029c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037f2:	635a      	str	r2, [r3, #52]	; 0x34
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <HAL_UART_MspInit+0xfc>)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2105      	movs	r1, #5
 80037fe:	2026      	movs	r0, #38	; 0x26
 8003800:	f002 fa2a 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003804:	2026      	movs	r0, #38	; 0x26
 8003806:	f002 fa43 	bl	8005c90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40004400 	.word	0x40004400
 8003818:	40023800 	.word	0x40023800
 800381c:	40020c00 	.word	0x40020c00
 8003820:	20004e70 	.word	0x20004e70
 8003824:	400260a0 	.word	0x400260a0

08003828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8003838:	2200      	movs	r2, #0
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	202d      	movs	r0, #45	; 0x2d
 800383e:	f002 fa0b 	bl	8005c58 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003842:	202d      	movs	r0, #45	; 0x2d
 8003844:	f002 fa24 	bl	8005c90 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <HAL_InitTick+0xa4>)
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_InitTick+0xa4>)
 8003852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003856:	6413      	str	r3, [r2, #64]	; 0x40
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_InitTick+0xa4>)
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003864:	f107 0210 	add.w	r2, r7, #16
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f003 ff20 	bl	80076b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003874:	f003 fef6 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
 8003878:	4603      	mov	r3, r0
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <HAL_InitTick+0xa8>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	3b01      	subs	r3, #1
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_InitTick+0xac>)
 800388e:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <HAL_InitTick+0xb0>)
 8003890:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_InitTick+0xac>)
 8003894:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003898:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800389a:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <HAL_InitTick+0xac>)
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_InitTick+0xac>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_InitTick+0xac>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80038ac:	4809      	ldr	r0, [pc, #36]	; (80038d4 <HAL_InitTick+0xac>)
 80038ae:	f003 ff33 	bl	8007718 <HAL_TIM_Base_Init>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80038b8:	4806      	ldr	r0, [pc, #24]	; (80038d4 <HAL_InitTick+0xac>)
 80038ba:	f003 ff7d 	bl	80077b8 <HAL_TIM_Base_Start_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	e000      	b.n	80038c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3730      	adds	r7, #48	; 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	431bde83 	.word	0x431bde83
 80038d4:	200050f0 	.word	0x200050f0
 80038d8:	40002000 	.word	0x40002000

080038dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <NMI_Handler+0x4>

080038e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <HardFault_Handler+0x4>

080038e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <MemManage_Handler+0x4>

080038ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038f2:	e7fe      	b.n	80038f2 <BusFault_Handler+0x4>

080038f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <UsageFault_Handler+0x4>

080038fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <DMA1_Stream6_IRQHandler+0x10>)
 800390e:	f002 fb65 	bl	8005fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20004e70 	.word	0x20004e70

0800391c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <ADC_IRQHandler+0x10>)
 8003922:	f000 fd30 	bl	8004386 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20004cfc 	.word	0x20004cfc

08003930 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003936:	f004 f808 	bl	800794a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20004f4c 	.word	0x20004f4c

08003944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <TIM2_IRQHandler+0x10>)
 800394a:	f003 fffe 	bl	800794a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20004fb0 	.word	0x20004fb0

08003958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
//	ReceivePacketUART(&huart2);

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800395c:	480b      	ldr	r0, [pc, #44]	; (800398c <USART2_IRQHandler+0x34>)
 800395e:	f004 ff2d 	bl	80087bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  ReceivePacketUART(&huart2);
 8003962:	480a      	ldr	r0, [pc, #40]	; (800398c <USART2_IRQHandler+0x34>)
 8003964:	f000 f860 	bl	8003a28 <ReceivePacketUART>

  if (!(huart2.Instance->CR1 & USART_CR1_RXNEIE))
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <USART2_IRQHandler+0x34>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d107      	bne.n	8003986 <USART2_IRQHandler+0x2e>
	huart2.Instance->CR1|= USART_CR1_RXNEIE;
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <USART2_IRQHandler+0x34>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <USART2_IRQHandler+0x34>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0220 	orr.w	r2, r2, #32
 8003984:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20004ffc 	.word	0x20004ffc

08003990 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003994:	4803      	ldr	r0, [pc, #12]	; (80039a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8003996:	f003 ffd8 	bl	800794a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800399a:	4803      	ldr	r0, [pc, #12]	; (80039a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800399c:	f003 ffd5 	bl	800794a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20004bf8 	.word	0x20004bf8
 80039a8:	200050f0 	.word	0x200050f0

080039ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <DMA2_Stream0_IRQHandler+0x10>)
 80039b2:	f002 fb13 	bl	8005fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,RESET);
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //светодиод
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20004ee4 	.word	0x20004ee4

080039c0 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <CAN2_TX_IRQHandler+0x10>)
 80039c6:	f001 fe5f 	bl	8005688 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20004d44 	.word	0x20004d44

080039d4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80039d8:	4802      	ldr	r0, [pc, #8]	; (80039e4 <CAN2_RX0_IRQHandler+0x10>)
 80039da:	f001 fe55 	bl	8005688 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20004d44 	.word	0x20004d44

080039e8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <CAN2_RX1_IRQHandler+0x10>)
 80039ee:	f001 fe4b 	bl	8005688 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20004d44 	.word	0x20004d44

080039fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <SystemInit+0x28>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <SystemInit+0x28>)
 8003a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <SystemInit+0x28>)
 8003a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a16:	609a      	str	r2, [r3, #8]
#endif
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <ReceivePacketUART>:
uint8_t GettingPacketRx_FL, BtPrev_Rc, RecArray[SIZE_OF_RECARRAY],
		PacketReceived_FL, ConfirmCMD;

void ProcessUARTCmd(void);

void ReceivePacketUART(UART_HandleTypeDef *huart) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	uint8_t Bt;

	if (huart->Instance->SR & USART_SR_RXNE) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d058      	beq.n	8003af0 <ReceivePacketUART+0xc8>
		Bt = (uint8_t) huart->Instance->DR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	73fb      	strb	r3, [r7, #15]

		CntRxTimeOut = 500;
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <ReceivePacketUART+0xd0>)
 8003a48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a4c:	801a      	strh	r2, [r3, #0]

		if (!GettingPacketRx_FL) {
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <ReceivePacketUART+0xd4>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d114      	bne.n	8003a80 <ReceivePacketUART+0x58>
			if ((BtPrev_Rc == 0xff) && (Bt == 0xff)) {
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <ReceivePacketUART+0xd8>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2bff      	cmp	r3, #255	; 0xff
 8003a5c:	d10c      	bne.n	8003a78 <ReceivePacketUART+0x50>
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2bff      	cmp	r3, #255	; 0xff
 8003a62:	d109      	bne.n	8003a78 <ReceivePacketUART+0x50>
				BtPrev_Rc = 0;
 8003a64:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <ReceivePacketUART+0xd8>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
				GettingPacketRx_FL = 1;
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <ReceivePacketUART+0xd4>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
				CntRec_Rc = 0;
 8003a70:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <ReceivePacketUART+0xdc>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8003a76:	e03b      	b.n	8003af0 <ReceivePacketUART+0xc8>
				BtPrev_Rc = Bt;
 8003a78:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <ReceivePacketUART+0xd8>)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	7013      	strb	r3, [r2, #0]
}
 8003a7e:	e037      	b.n	8003af0 <ReceivePacketUART+0xc8>
			if (CntRec_Rc > (SIZE_OF_RECARRAY - 1))
 8003a80:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <ReceivePacketUART+0xdc>)
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	2bf9      	cmp	r3, #249	; 0xf9
 8003a86:	d903      	bls.n	8003a90 <ReceivePacketUART+0x68>
				GettingPacketRx_FL = 0;
 8003a88:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <ReceivePacketUART+0xd4>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
}
 8003a8e:	e02f      	b.n	8003af0 <ReceivePacketUART+0xc8>
				RecArray[CntRec_Rc] = Bt;
 8003a90:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <ReceivePacketUART+0xdc>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <ReceivePacketUART+0xe0>)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	5453      	strb	r3, [r2, r1]
				CntRec_Rc++;
 8003a9c:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <ReceivePacketUART+0xdc>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <ReceivePacketUART+0xdc>)
 8003aa6:	801a      	strh	r2, [r3, #0]
				if (CntRec_Rc > (RecArray[0] + 1)) {
 8003aa8:	4b16      	ldr	r3, [pc, #88]	; (8003b04 <ReceivePacketUART+0xdc>)
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <ReceivePacketUART+0xe0>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dd1b      	ble.n	8003af0 <ReceivePacketUART+0xc8>
					GettingPacketRx_FL = 0;
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <ReceivePacketUART+0xd4>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
					if (CalcCheckSumm(RecArray[0] + 1, RecArray)
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <ReceivePacketUART+0xe0>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	490f      	ldr	r1, [pc, #60]	; (8003b08 <ReceivePacketUART+0xe0>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fe64 	bl	8002798 <CalcCheckSumm>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4619      	mov	r1, r3
							!= RecArray[RecArray[0] + 1]) {
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <ReceivePacketUART+0xe0>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <ReceivePacketUART+0xe0>)
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
					if (CalcCheckSumm(RecArray[0] + 1, RecArray)
 8003ade:	4299      	cmp	r1, r3
 8003ae0:	d001      	beq.n	8003ae6 <ReceivePacketUART+0xbe>
						asm("Nop");
 8003ae2:	bf00      	nop
}
 8003ae4:	e004      	b.n	8003af0 <ReceivePacketUART+0xc8>
						PacketReceived_FL = 1;
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <ReceivePacketUART+0xe4>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
						ProcessUARTCmd();
 8003aec:	f000 f810 	bl	8003b10 <ProcessUARTCmd>
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	2000513e 	.word	0x2000513e
 8003afc:	20005139 	.word	0x20005139
 8003b00:	2000513a 	.word	0x2000513a
 8003b04:	20005140 	.word	0x20005140
 8003b08:	20005144 	.word	0x20005144
 8003b0c:	20005138 	.word	0x20005138

08003b10 <ProcessUARTCmd>:

void ProcessUARTCmd(void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af02      	add	r7, sp, #8
	uint8_t Cmd = RecArray[1];
 8003b16:	4baf      	ldr	r3, [pc, #700]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte;
	int16_t PWM;

	if (!PacketReceived_FL)
 8003b1c:	4bae      	ldr	r3, [pc, #696]	; (8003dd8 <ProcessUARTCmd+0x2c8>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8152 	beq.w	8003dca <ProcessUARTCmd+0x2ba>
		return;

	PacketReceived_FL = 0;
 8003b26:	4bac      	ldr	r3, [pc, #688]	; (8003dd8 <ProcessUARTCmd+0x2c8>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]

	CntPacket++;
 8003b2c:	4bab      	ldr	r3, [pc, #684]	; (8003ddc <ProcessUARTCmd+0x2cc>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	4ba9      	ldr	r3, [pc, #676]	; (8003ddc <ProcessUARTCmd+0x2cc>)
 8003b36:	801a      	strh	r2, [r3, #0]

	ConfirmCMD = 1;
 8003b38:	4ba9      	ldr	r3, [pc, #676]	; (8003de0 <ProcessUARTCmd+0x2d0>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]

	switch (Cmd) {
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	2b13      	cmp	r3, #19
 8003b44:	f200 8142 	bhi.w	8003dcc <ProcessUARTCmd+0x2bc>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <ProcessUARTCmd+0x40>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003ba1 	.word	0x08003ba1
 8003b54:	08003bb9 	.word	0x08003bb9
 8003b58:	08003bd1 	.word	0x08003bd1
 8003b5c:	08003be9 	.word	0x08003be9
 8003b60:	08003c01 	.word	0x08003c01
 8003b64:	08003c19 	.word	0x08003c19
 8003b68:	08003c31 	.word	0x08003c31
 8003b6c:	08003c49 	.word	0x08003c49
 8003b70:	08003c61 	.word	0x08003c61
 8003b74:	08003c79 	.word	0x08003c79
 8003b78:	08003c9d 	.word	0x08003c9d
 8003b7c:	08003cc1 	.word	0x08003cc1
 8003b80:	08003ce5 	.word	0x08003ce5
 8003b84:	08003d09 	.word	0x08003d09
 8003b88:	08003d2d 	.word	0x08003d2d
 8003b8c:	08003d51 	.word	0x08003d51
 8003b90:	08003d75 	.word	0x08003d75
 8003b94:	08003d99 	.word	0x08003d99
 8003b98:	08003dad 	.word	0x08003dad
 8003b9c:	08003dc3 	.word	0x08003dc3
	case SET_ADDR:
		RecArray[9] = 3;
 8003ba0:	4b8c      	ldr	r3, [pc, #560]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	725a      	strb	r2, [r3, #9]
		Can_TxMessage(&hcan2, 0, SET_ADDR_CAN, 8, &RecArray[2]);
 8003ba6:	4b8f      	ldr	r3, [pc, #572]	; (8003de4 <ProcessUARTCmd+0x2d4>)
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2308      	movs	r3, #8
 8003bac:	22fe      	movs	r2, #254	; 0xfe
 8003bae:	2100      	movs	r1, #0
 8003bb0:	488d      	ldr	r0, [pc, #564]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003bb2:	f7fd fa3d 	bl	8001030 <Can_TxMessage>
		break;
 8003bb6:	e109      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case CALIBR1:
		Byte = 1;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_ADDR, 1, &Byte);
 8003bbc:	1cfb      	adds	r3, r7, #3
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f240 1201 	movw	r2, #257	; 0x101
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4887      	ldr	r0, [pc, #540]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003bca:	f7fd fa31 	bl	8001030 <Can_TxMessage>
		break;
 8003bce:	e0fd      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case CALIBR2:
		Byte = 1;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_HIP_L_ADDR, 1, &Byte);
 8003bd4:	1cfb      	adds	r3, r7, #3
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f240 1203 	movw	r2, #259	; 0x103
 8003bde:	2100      	movs	r1, #0
 8003be0:	4881      	ldr	r0, [pc, #516]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003be2:	f7fd fa25 	bl	8001030 <Can_TxMessage>
		break;
 8003be6:	e0f1      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case CALIBR3:
		Byte = 1;
 8003be8:	2301      	movs	r3, #1
 8003bea:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_LOWERLEG_L_ADDR, 1, &Byte);
 8003bec:	1cfb      	adds	r3, r7, #3
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f240 1205 	movw	r2, #261	; 0x105
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	487b      	ldr	r0, [pc, #492]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003bfa:	f7fd fa19 	bl	8001030 <Can_TxMessage>
		break;
 8003bfe:	e0e5      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case CALIBR4:
		Byte = 1;
 8003c00:	2301      	movs	r3, #1
 8003c02:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_FOOT_L_ADDR, 1, &Byte);
 8003c04:	1cfb      	adds	r3, r7, #3
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f240 1207 	movw	r2, #263	; 0x107
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4875      	ldr	r0, [pc, #468]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003c12:	f7fd fa0d 	bl	8001030 <Can_TxMessage>
		break;
 8003c16:	e0d9      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case CALIBR5:
		Byte = 1;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_HIP_R_ADDR, 1, &Byte);
 8003c1c:	1cfb      	adds	r3, r7, #3
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2301      	movs	r3, #1
 8003c22:	f240 1209 	movw	r2, #265	; 0x109
 8003c26:	2100      	movs	r1, #0
 8003c28:	486f      	ldr	r0, [pc, #444]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003c2a:	f7fd fa01 	bl	8001030 <Can_TxMessage>
		break;
 8003c2e:	e0cd      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case CALIBR6:
		Byte = 1;
 8003c30:	2301      	movs	r3, #1
 8003c32:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_LOWERLEG_R_ADDR, 1, &Byte);
 8003c34:	1cfb      	adds	r3, r7, #3
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f240 120b 	movw	r2, #267	; 0x10b
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4869      	ldr	r0, [pc, #420]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003c42:	f7fd f9f5 	bl	8001030 <Can_TxMessage>
		break;
 8003c46:	e0c1      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case CALIBR7:
		Byte = 1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	70fb      	strb	r3, [r7, #3]
		Can_TxMessage(&hcan2, 0, 0x100 + TILT_SENSOR_FOOT_R_ADDR, 1, &Byte);
 8003c4c:	1cfb      	adds	r3, r7, #3
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2301      	movs	r3, #1
 8003c52:	f240 120d 	movw	r2, #269	; 0x10d
 8003c56:	2100      	movs	r1, #0
 8003c58:	4863      	ldr	r0, [pc, #396]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003c5a:	f7fd f9e9 	bl	8001030 <Can_TxMessage>
		break;
 8003c5e:	e0b5      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_KGYRO:
		RecArray[9] = 4;
 8003c60:	4b5c      	ldr	r3, [pc, #368]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003c62:	2204      	movs	r2, #4
 8003c64:	725a      	strb	r2, [r3, #9]
		Can_TxMessage(&hcan2, 0, SET_ADDR_CAN, 8, &RecArray[2]);
 8003c66:	4b5f      	ldr	r3, [pc, #380]	; (8003de4 <ProcessUARTCmd+0x2d4>)
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	22fe      	movs	r2, #254	; 0xfe
 8003c6e:	2100      	movs	r1, #0
 8003c70:	485d      	ldr	r0, [pc, #372]	; (8003de8 <ProcessUARTCmd+0x2d8>)
 8003c72:	f7fd f9dd 	bl	8001030 <Can_TxMessage>
		break;
 8003c76:	e0a9      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_PWM_Motor_L1:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8003c78:	4b56      	ldr	r3, [pc, #344]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003c7a:	78db      	ldrb	r3, [r3, #3]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	4b54      	ldr	r3, [pc, #336]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003c84:	789b      	ldrb	r3, [r3, #2]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_L1);
 8003c8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fec3 	bl	8002a20 <SetMotorPWM>
		break;
 8003c9a:	e097      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_PWM_Motor_L2:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8003c9c:	4b4d      	ldr	r3, [pc, #308]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003c9e:	78db      	ldrb	r3, [r3, #3]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003ca8:	789b      	ldrb	r3, [r3, #2]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_L2);
 8003cb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe feb1 	bl	8002a20 <SetMotorPWM>
		break;
 8003cbe:	e085      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_PWM_Motor_L3:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8003cc0:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	4b42      	ldr	r3, [pc, #264]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003ccc:	789b      	ldrb	r3, [r3, #2]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_L3);
 8003cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cda:	2103      	movs	r1, #3
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fe9f 	bl	8002a20 <SetMotorPWM>
		break;
 8003ce2:	e073      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_PWM_Motor_L4:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003ce6:	78db      	ldrb	r3, [r3, #3]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003cf0:	789b      	ldrb	r3, [r3, #2]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_L4);
 8003cfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cfe:	2104      	movs	r1, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fe8d 	bl	8002a20 <SetMotorPWM>
		break;
 8003d06:	e061      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_PWM_Motor_R1:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003d0a:	78db      	ldrb	r3, [r3, #3]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003d14:	789b      	ldrb	r3, [r3, #2]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_R1);
 8003d1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d22:	2105      	movs	r1, #5
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fe7b 	bl	8002a20 <SetMotorPWM>
		break;
 8003d2a:	e04f      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_PWM_Motor_R2:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8003d2c:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003d2e:	78db      	ldrb	r3, [r3, #3]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003d38:	789b      	ldrb	r3, [r3, #2]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_R2);
 8003d42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d46:	2106      	movs	r1, #6
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fe69 	bl	8002a20 <SetMotorPWM>
		break;
 8003d4e:	e03d      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_PWM_Motor_R3:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003d52:	78db      	ldrb	r3, [r3, #3]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003d5c:	789b      	ldrb	r3, [r3, #2]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_R3);
 8003d66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d6a:	2107      	movs	r1, #7
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fe57 	bl	8002a20 <SetMotorPWM>
		break;
 8003d72:	e02b      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case SET_PWM_Motor_R4:
		PWM = (RecArray[3] << 8) + RecArray[2];
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003d76:	78db      	ldrb	r3, [r3, #3]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <ProcessUARTCmd+0x2c4>)
 8003d80:	789b      	ldrb	r3, [r3, #2]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	80bb      	strh	r3, [r7, #4]
		SetMotorPWM(PWM, MOTOR_R4);
 8003d8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d8e:	2108      	movs	r1, #8
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe fe45 	bl	8002a20 <SetMotorPWM>
		break;
 8003d96:	e019      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case GET_OPTIONS:
		FlashReadAll();
 8003d98:	f7fd fcca 	bl	8001730 <FlashReadAll>
		ArrayToOptions();
 8003d9c:	f7fd fd5e 	bl	800185c <ArrayToOptions>
		SetBuzzerFRQ(1000, 50);
 8003da0:	2132      	movs	r1, #50	; 0x32
 8003da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003da6:	f7fd f84b 	bl	8000e40 <SetBuzzerFRQ>
		break;
 8003daa:	e00f      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case WRITE_OPTIONS:
		OptionsToArray();
 8003dac:	f7fd fd1c 	bl	80017e8 <OptionsToArray>
		FlashWriteAll();
 8003db0:	f7fd fc76 	bl	80016a0 <FlashWriteAll>
		SetBuzzerFRQ(1000, 500);
 8003db4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dbc:	f7fd f840 	bl	8000e40 <SetBuzzerFRQ>
		break;
 8003dc0:	e004      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
	case CLEAR_ALL:
		CntSamples=0;
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <ProcessUARTCmd+0x2dc>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
		break;
 8003dc8:	e000      	b.n	8003dcc <ProcessUARTCmd+0x2bc>
		return;
 8003dca:	bf00      	nop

	}
}
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20005144 	.word	0x20005144
 8003dd8:	20005138 	.word	0x20005138
 8003ddc:	2000513c 	.word	0x2000513c
 8003de0:	20005142 	.word	0x20005142
 8003de4:	20005146 	.word	0x20005146
 8003de8:	20004d44 	.word	0x20004d44
 8003dec:	200049e0 	.word	0x200049e0

08003df0 <TrmDataPacketUART>:

void TrmDataPacketUART(UART_HandleTypeDef *huart) {
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	uint16_t Cnt = 4;
 8003df8:	2304      	movs	r3, #4
 8003dfa:	81fb      	strh	r3, [r7, #14]

	UART2TransmittArray[0] = 0xff;
 8003dfc:	4b90      	ldr	r3, [pc, #576]	; (8004040 <TrmDataPacketUART+0x250>)
 8003dfe:	22ff      	movs	r2, #255	; 0xff
 8003e00:	701a      	strb	r2, [r3, #0]
	UART2TransmittArray[1] = 0xff;
 8003e02:	4b8f      	ldr	r3, [pc, #572]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e04:	22ff      	movs	r2, #255	; 0xff
 8003e06:	705a      	strb	r2, [r3, #1]
	UART2TransmittArray[3] = TRM_DATA_PACKET; //CMD
 8003e08:	4b8d      	ldr	r3, [pc, #564]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	70da      	strb	r2, [r3, #3]

	*(uint32_t*) &UART2TransmittArray[Cnt] = CntSamples;
 8003e0e:	89fb      	ldrh	r3, [r7, #14]
 8003e10:	4a8b      	ldr	r2, [pc, #556]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e12:	4413      	add	r3, r2
 8003e14:	4a8b      	ldr	r2, [pc, #556]	; (8004044 <TrmDataPacketUART+0x254>)
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(uint32_t);
 8003e1a:	89fb      	ldrh	r3, [r7, #14]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt1X;
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	4a87      	ldr	r2, [pc, #540]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e24:	4413      	add	r3, r2
 8003e26:	4a88      	ldr	r2, [pc, #544]	; (8004048 <TrmDataPacketUART+0x258>)
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003e2c:	89fb      	ldrh	r3, [r7, #14]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt1Y;
 8003e32:	89fb      	ldrh	r3, [r7, #14]
 8003e34:	4a82      	ldr	r2, [pc, #520]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e36:	4413      	add	r3, r2
 8003e38:	4a84      	ldr	r2, [pc, #528]	; (800404c <TrmDataPacketUART+0x25c>)
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003e3e:	89fb      	ldrh	r3, [r7, #14]
 8003e40:	3304      	adds	r3, #4
 8003e42:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro1;
 8003e44:	89fb      	ldrh	r3, [r7, #14]
 8003e46:	4a7e      	ldr	r2, [pc, #504]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	4a81      	ldr	r2, [pc, #516]	; (8004050 <TrmDataPacketUART+0x260>)
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	3304      	adds	r3, #4
 8003e54:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt2X;
 8003e56:	89fb      	ldrh	r3, [r7, #14]
 8003e58:	4a79      	ldr	r2, [pc, #484]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4a7d      	ldr	r2, [pc, #500]	; (8004054 <TrmDataPacketUART+0x264>)
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003e62:	89fb      	ldrh	r3, [r7, #14]
 8003e64:	3304      	adds	r3, #4
 8003e66:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt2Y;
 8003e68:	89fb      	ldrh	r3, [r7, #14]
 8003e6a:	4a75      	ldr	r2, [pc, #468]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4a7a      	ldr	r2, [pc, #488]	; (8004058 <TrmDataPacketUART+0x268>)
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	3304      	adds	r3, #4
 8003e78:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro2;
 8003e7a:	89fb      	ldrh	r3, [r7, #14]
 8003e7c:	4a70      	ldr	r2, [pc, #448]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	4a76      	ldr	r2, [pc, #472]	; (800405c <TrmDataPacketUART+0x26c>)
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003e86:	89fb      	ldrh	r3, [r7, #14]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt3X;
 8003e8c:	89fb      	ldrh	r3, [r7, #14]
 8003e8e:	4a6c      	ldr	r2, [pc, #432]	; (8004040 <TrmDataPacketUART+0x250>)
 8003e90:	4413      	add	r3, r2
 8003e92:	4a73      	ldr	r2, [pc, #460]	; (8004060 <TrmDataPacketUART+0x270>)
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003e98:	89fb      	ldrh	r3, [r7, #14]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt3Y;
 8003e9e:	89fb      	ldrh	r3, [r7, #14]
 8003ea0:	4a67      	ldr	r2, [pc, #412]	; (8004040 <TrmDataPacketUART+0x250>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a6f      	ldr	r2, [pc, #444]	; (8004064 <TrmDataPacketUART+0x274>)
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003eaa:	89fb      	ldrh	r3, [r7, #14]
 8003eac:	3304      	adds	r3, #4
 8003eae:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro3;
 8003eb0:	89fb      	ldrh	r3, [r7, #14]
 8003eb2:	4a63      	ldr	r2, [pc, #396]	; (8004040 <TrmDataPacketUART+0x250>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	4a6c      	ldr	r2, [pc, #432]	; (8004068 <TrmDataPacketUART+0x278>)
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003ebc:	89fb      	ldrh	r3, [r7, #14]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt4X;
 8003ec2:	89fb      	ldrh	r3, [r7, #14]
 8003ec4:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <TrmDataPacketUART+0x250>)
 8003ec6:	4413      	add	r3, r2
 8003ec8:	4a68      	ldr	r2, [pc, #416]	; (800406c <TrmDataPacketUART+0x27c>)
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003ece:	89fb      	ldrh	r3, [r7, #14]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt4Y;
 8003ed4:	89fb      	ldrh	r3, [r7, #14]
 8003ed6:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <TrmDataPacketUART+0x250>)
 8003ed8:	4413      	add	r3, r2
 8003eda:	4a65      	ldr	r2, [pc, #404]	; (8004070 <TrmDataPacketUART+0x280>)
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003ee0:	89fb      	ldrh	r3, [r7, #14]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro4;
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
 8003ee8:	4a55      	ldr	r2, [pc, #340]	; (8004040 <TrmDataPacketUART+0x250>)
 8003eea:	4413      	add	r3, r2
 8003eec:	4a61      	ldr	r2, [pc, #388]	; (8004074 <TrmDataPacketUART+0x284>)
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003ef2:	89fb      	ldrh	r3, [r7, #14]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt5X;
 8003ef8:	89fb      	ldrh	r3, [r7, #14]
 8003efa:	4a51      	ldr	r2, [pc, #324]	; (8004040 <TrmDataPacketUART+0x250>)
 8003efc:	4413      	add	r3, r2
 8003efe:	4a5e      	ldr	r2, [pc, #376]	; (8004078 <TrmDataPacketUART+0x288>)
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f04:	89fb      	ldrh	r3, [r7, #14]
 8003f06:	3304      	adds	r3, #4
 8003f08:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt5Y;
 8003f0a:	89fb      	ldrh	r3, [r7, #14]
 8003f0c:	4a4c      	ldr	r2, [pc, #304]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f0e:	4413      	add	r3, r2
 8003f10:	4a5a      	ldr	r2, [pc, #360]	; (800407c <TrmDataPacketUART+0x28c>)
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro5;
 8003f1c:	89fb      	ldrh	r3, [r7, #14]
 8003f1e:	4a48      	ldr	r2, [pc, #288]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f20:	4413      	add	r3, r2
 8003f22:	4a57      	ldr	r2, [pc, #348]	; (8004080 <TrmDataPacketUART+0x290>)
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f28:	89fb      	ldrh	r3, [r7, #14]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt6X;
 8003f2e:	89fb      	ldrh	r3, [r7, #14]
 8003f30:	4a43      	ldr	r2, [pc, #268]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f32:	4413      	add	r3, r2
 8003f34:	4a53      	ldr	r2, [pc, #332]	; (8004084 <TrmDataPacketUART+0x294>)
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt6Y;
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	4a3f      	ldr	r2, [pc, #252]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f44:	4413      	add	r3, r2
 8003f46:	4a50      	ldr	r2, [pc, #320]	; (8004088 <TrmDataPacketUART+0x298>)
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f4c:	89fb      	ldrh	r3, [r7, #14]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro6;
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f56:	4413      	add	r3, r2
 8003f58:	4a4c      	ldr	r2, [pc, #304]	; (800408c <TrmDataPacketUART+0x29c>)
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f5e:	89fb      	ldrh	r3, [r7, #14]
 8003f60:	3304      	adds	r3, #4
 8003f62:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = Tilt7X;
 8003f64:	89fb      	ldrh	r3, [r7, #14]
 8003f66:	4a36      	ldr	r2, [pc, #216]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	4a49      	ldr	r2, [pc, #292]	; (8004090 <TrmDataPacketUART+0x2a0>)
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	3304      	adds	r3, #4
 8003f74:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Tilt7Y;
 8003f76:	89fb      	ldrh	r3, [r7, #14]
 8003f78:	4a31      	ldr	r2, [pc, #196]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4a45      	ldr	r2, [pc, #276]	; (8004094 <TrmDataPacketUART+0x2a4>)
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	3304      	adds	r3, #4
 8003f86:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = Gyro7;
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	4a42      	ldr	r2, [pc, #264]	; (8004098 <TrmDataPacketUART+0x2a8>)
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003f94:	89fb      	ldrh	r3, [r7, #14]
 8003f96:	3304      	adds	r3, #4
 8003f98:	81fb      	strh	r3, [r7, #14]

	*(uint16_t*) &UART2TransmittArray[Cnt] = KGyro1;
 8003f9a:	89fb      	ldrh	r3, [r7, #14]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TrmDataPacketUART+0x250>)
 8003f9e:	4413      	add	r3, r2
 8003fa0:	4a3e      	ldr	r2, [pc, #248]	; (800409c <TrmDataPacketUART+0x2ac>)
 8003fa2:	8812      	ldrh	r2, [r2, #0]
 8003fa4:	801a      	strh	r2, [r3, #0]
	Cnt = Cnt + sizeof(uint16_t);
 8003fa6:	89fb      	ldrh	r3, [r7, #14]
 8003fa8:	3302      	adds	r3, #2
 8003faa:	81fb      	strh	r3, [r7, #14]

	*(float*) &UART2TransmittArray[Cnt] = GyroHipJointR;
 8003fac:	89fb      	ldrh	r3, [r7, #14]
 8003fae:	4a24      	ldr	r2, [pc, #144]	; (8004040 <TrmDataPacketUART+0x250>)
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4a3b      	ldr	r2, [pc, #236]	; (80040a0 <TrmDataPacketUART+0x2b0>)
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003fb8:	89fb      	ldrh	r3, [r7, #14]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = GyroHipJointL;
 8003fbe:	89fb      	ldrh	r3, [r7, #14]
 8003fc0:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <TrmDataPacketUART+0x250>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a37      	ldr	r2, [pc, #220]	; (80040a4 <TrmDataPacketUART+0x2b4>)
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003fca:	89fb      	ldrh	r3, [r7, #14]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = GyroHipR;
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <TrmDataPacketUART+0x250>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	4a34      	ldr	r2, [pc, #208]	; (80040a8 <TrmDataPacketUART+0x2b8>)
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003fdc:	89fb      	ldrh	r3, [r7, #14]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = GyroHipL;
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	; (8004040 <TrmDataPacketUART+0x250>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a30      	ldr	r2, [pc, #192]	; (80040ac <TrmDataPacketUART+0x2bc>)
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = GyroLowerlegR;
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <TrmDataPacketUART+0x250>)
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <TrmDataPacketUART+0x2c0>)
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8004000:	89fb      	ldrh	r3, [r7, #14]
 8004002:	3304      	adds	r3, #4
 8004004:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = GyroLowerlegL;
 8004006:	89fb      	ldrh	r3, [r7, #14]
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <TrmDataPacketUART+0x250>)
 800400a:	4413      	add	r3, r2
 800400c:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <TrmDataPacketUART+0x2c4>)
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8004012:	89fb      	ldrh	r3, [r7, #14]
 8004014:	3304      	adds	r3, #4
 8004016:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = GyroFootR;
 8004018:	89fb      	ldrh	r3, [r7, #14]
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <TrmDataPacketUART+0x250>)
 800401c:	4413      	add	r3, r2
 800401e:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <TrmDataPacketUART+0x2c8>)
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8004024:	89fb      	ldrh	r3, [r7, #14]
 8004026:	3304      	adds	r3, #4
 8004028:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = GyroFootL;
 800402a:	89fb      	ldrh	r3, [r7, #14]
 800402c:	4a04      	ldr	r2, [pc, #16]	; (8004040 <TrmDataPacketUART+0x250>)
 800402e:	4413      	add	r3, r2
 8004030:	4a22      	ldr	r2, [pc, #136]	; (80040bc <TrmDataPacketUART+0x2cc>)
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8004036:	89fb      	ldrh	r3, [r7, #14]
 8004038:	3304      	adds	r3, #4
 800403a:	81fb      	strh	r3, [r7, #14]
 800403c:	e040      	b.n	80040c0 <TrmDataPacketUART+0x2d0>
 800403e:	bf00      	nop
 8004040:	20004d6c 	.word	0x20004d6c
 8004044:	200049e0 	.word	0x200049e0
 8004048:	20004ff8 	.word	0x20004ff8
 800404c:	20004c88 	.word	0x20004c88
 8004050:	20004f98 	.word	0x20004f98
 8004054:	20004ee0 	.word	0x20004ee0
 8004058:	20004ed4 	.word	0x20004ed4
 800405c:	20004e6c 	.word	0x20004e6c
 8004060:	20004c98 	.word	0x20004c98
 8004064:	20004f48 	.word	0x20004f48
 8004068:	20004fa4 	.word	0x20004fa4
 800406c:	20004c90 	.word	0x20004c90
 8004070:	20004fa8 	.word	0x20004fa8
 8004074:	20004f44 	.word	0x20004f44
 8004078:	20004fac 	.word	0x20004fac
 800407c:	20004cf4 	.word	0x20004cf4
 8004080:	20004edc 	.word	0x20004edc
 8004084:	20004bf0 	.word	0x20004bf0
 8004088:	20004cec 	.word	0x20004cec
 800408c:	20004f9c 	.word	0x20004f9c
 8004090:	20004c8c 	.word	0x20004c8c
 8004094:	20004fa0 	.word	0x20004fa0
 8004098:	20005088 	.word	0x20005088
 800409c:	20004ce8 	.word	0x20004ce8
 80040a0:	200049d4 	.word	0x200049d4
 80040a4:	200049dc 	.word	0x200049dc
 80040a8:	200049f4 	.word	0x200049f4
 80040ac:	200049c4 	.word	0x200049c4
 80040b0:	200049c8 	.word	0x200049c8
 80040b4:	200049d0 	.word	0x200049d0
 80040b8:	200049c0 	.word	0x200049c0
 80040bc:	200049b0 	.word	0x200049b0

	*(float*) &UART2TransmittArray[Cnt] = YHipJointR;
 80040c0:	89fb      	ldrh	r3, [r7, #14]
 80040c2:	4a34      	ldr	r2, [pc, #208]	; (8004194 <TrmDataPacketUART+0x3a4>)
 80040c4:	4413      	add	r3, r2
 80040c6:	4a34      	ldr	r2, [pc, #208]	; (8004198 <TrmDataPacketUART+0x3a8>)
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 80040cc:	89fb      	ldrh	r3, [r7, #14]
 80040ce:	3304      	adds	r3, #4
 80040d0:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = YHipJointL;
 80040d2:	89fb      	ldrh	r3, [r7, #14]
 80040d4:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <TrmDataPacketUART+0x3a4>)
 80040d6:	4413      	add	r3, r2
 80040d8:	4a30      	ldr	r2, [pc, #192]	; (800419c <TrmDataPacketUART+0x3ac>)
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 80040de:	89fb      	ldrh	r3, [r7, #14]
 80040e0:	3304      	adds	r3, #4
 80040e2:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = XHipR;
 80040e4:	89fb      	ldrh	r3, [r7, #14]
 80040e6:	4a2b      	ldr	r2, [pc, #172]	; (8004194 <TrmDataPacketUART+0x3a4>)
 80040e8:	4413      	add	r3, r2
 80040ea:	4a2d      	ldr	r2, [pc, #180]	; (80041a0 <TrmDataPacketUART+0x3b0>)
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 80040f0:	89fb      	ldrh	r3, [r7, #14]
 80040f2:	3304      	adds	r3, #4
 80040f4:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = XHipL;
 80040f6:	89fb      	ldrh	r3, [r7, #14]
 80040f8:	4a26      	ldr	r2, [pc, #152]	; (8004194 <TrmDataPacketUART+0x3a4>)
 80040fa:	4413      	add	r3, r2
 80040fc:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <TrmDataPacketUART+0x3b4>)
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	3304      	adds	r3, #4
 8004106:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = XLowerLegR;
 8004108:	89fb      	ldrh	r3, [r7, #14]
 800410a:	4a22      	ldr	r2, [pc, #136]	; (8004194 <TrmDataPacketUART+0x3a4>)
 800410c:	4413      	add	r3, r2
 800410e:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <TrmDataPacketUART+0x3b8>)
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8004114:	89fb      	ldrh	r3, [r7, #14]
 8004116:	3304      	adds	r3, #4
 8004118:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = XLowerLegL;
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <TrmDataPacketUART+0x3a4>)
 800411e:	4413      	add	r3, r2
 8004120:	4a22      	ldr	r2, [pc, #136]	; (80041ac <TrmDataPacketUART+0x3bc>)
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8004126:	89fb      	ldrh	r3, [r7, #14]
 8004128:	3304      	adds	r3, #4
 800412a:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = XFootR;
 800412c:	89fb      	ldrh	r3, [r7, #14]
 800412e:	4a19      	ldr	r2, [pc, #100]	; (8004194 <TrmDataPacketUART+0x3a4>)
 8004130:	4413      	add	r3, r2
 8004132:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <TrmDataPacketUART+0x3c0>)
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 8004138:	89fb      	ldrh	r3, [r7, #14]
 800413a:	3304      	adds	r3, #4
 800413c:	81fb      	strh	r3, [r7, #14]
	*(float*) &UART2TransmittArray[Cnt] = XFootL;
 800413e:	89fb      	ldrh	r3, [r7, #14]
 8004140:	4a14      	ldr	r2, [pc, #80]	; (8004194 <TrmDataPacketUART+0x3a4>)
 8004142:	4413      	add	r3, r2
 8004144:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <TrmDataPacketUART+0x3c4>)
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	601a      	str	r2, [r3, #0]
	Cnt = Cnt + sizeof(float);
 800414a:	89fb      	ldrh	r3, [r7, #14]
 800414c:	3304      	adds	r3, #4
 800414e:	81fb      	strh	r3, [r7, #14]



	UART2TransmittArray[2] = Cnt - 3;
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3b03      	subs	r3, #3
 8004156:	b2da      	uxtb	r2, r3
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <TrmDataPacketUART+0x3a4>)
 800415a:	709a      	strb	r2, [r3, #2]

	UART2TransmittArray[Cnt] = CalcCheckSumm(UART2TransmittArray[2] + 1,
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <TrmDataPacketUART+0x3a4>)
 800415e:	789b      	ldrb	r3, [r3, #2]
 8004160:	b29b      	uxth	r3, r3
 8004162:	3301      	adds	r3, #1
 8004164:	b29b      	uxth	r3, r3
 8004166:	89fc      	ldrh	r4, [r7, #14]
 8004168:	4913      	ldr	r1, [pc, #76]	; (80041b8 <TrmDataPacketUART+0x3c8>)
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fb14 	bl	8002798 <CalcCheckSumm>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <TrmDataPacketUART+0x3a4>)
 8004176:	551a      	strb	r2, [r3, r4]
			&UART2TransmittArray[2]);

	HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
			UART2TransmittArray[2] + 4);
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <TrmDataPacketUART+0x3a4>)
 800417a:	789b      	ldrb	r3, [r3, #2]
 800417c:	b29b      	uxth	r3, r3
	HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
 800417e:	3304      	adds	r3, #4
 8004180:	b29b      	uxth	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <TrmDataPacketUART+0x3a4>)
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f004 faac 	bl	80086e4 <HAL_UART_Transmit_DMA>

}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bd90      	pop	{r4, r7, pc}
 8004194:	20004d6c 	.word	0x20004d6c
 8004198:	200049ec 	.word	0x200049ec
 800419c:	200049f0 	.word	0x200049f0
 80041a0:	200049d8 	.word	0x200049d8
 80041a4:	200049b8 	.word	0x200049b8
 80041a8:	200049bc 	.word	0x200049bc
 80041ac:	200049b4 	.word	0x200049b4
 80041b0:	200049e8 	.word	0x200049e8
 80041b4:	200049e4 	.word	0x200049e4
 80041b8:	20004d6e 	.word	0x20004d6e

080041bc <TrmCfmPacketUART>:

void TrmCfmPacketUART(UART_HandleTypeDef *huart) {
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	uint16_t Cnt = 4;
 80041c4:	2304      	movs	r3, #4
 80041c6:	81fb      	strh	r3, [r7, #14]

	UART2TransmittArray[0] = 0xff;
 80041c8:	4b15      	ldr	r3, [pc, #84]	; (8004220 <TrmCfmPacketUART+0x64>)
 80041ca:	22ff      	movs	r2, #255	; 0xff
 80041cc:	701a      	strb	r2, [r3, #0]
	UART2TransmittArray[1] = 0xff;
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <TrmCfmPacketUART+0x64>)
 80041d0:	22ff      	movs	r2, #255	; 0xff
 80041d2:	705a      	strb	r2, [r3, #1]
	UART2TransmittArray[3] = TRM_CFM_PACKET; //CMD
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <TrmCfmPacketUART+0x64>)
 80041d6:	2202      	movs	r2, #2
 80041d8:	70da      	strb	r2, [r3, #3]

	UART2TransmittArray[2] = Cnt - 3;
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	3b03      	subs	r3, #3
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <TrmCfmPacketUART+0x64>)
 80041e4:	709a      	strb	r2, [r3, #2]

	UART2TransmittArray[Cnt] = CalcCheckSumm(UART2TransmittArray[2] + 1,
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <TrmCfmPacketUART+0x64>)
 80041e8:	789b      	ldrb	r3, [r3, #2]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	89fc      	ldrh	r4, [r7, #14]
 80041f2:	490c      	ldr	r1, [pc, #48]	; (8004224 <TrmCfmPacketUART+0x68>)
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe facf 	bl	8002798 <CalcCheckSumm>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <TrmCfmPacketUART+0x64>)
 8004200:	551a      	strb	r2, [r3, r4]
			&UART2TransmittArray[2]);

	HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
			UART2TransmittArray[2] + 4);
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <TrmCfmPacketUART+0x64>)
 8004204:	789b      	ldrb	r3, [r3, #2]
 8004206:	b29b      	uxth	r3, r3
	HAL_UART_Transmit_DMA(huart, (uint8_t*) UART2TransmittArray,
 8004208:	3304      	adds	r3, #4
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	4904      	ldr	r1, [pc, #16]	; (8004220 <TrmCfmPacketUART+0x64>)
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f004 fa67 	bl	80086e4 <HAL_UART_Transmit_DMA>

}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}
 800421e:	bf00      	nop
 8004220:	20004d6c 	.word	0x20004d6c
 8004224:	20004d6e 	.word	0x20004d6e

08004228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004260 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800422c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800422e:	e003      	b.n	8004238 <LoopCopyDataInit>

08004230 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004232:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004234:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004236:	3104      	adds	r1, #4

08004238 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004238:	480b      	ldr	r0, [pc, #44]	; (8004268 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800423c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800423e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004240:	d3f6      	bcc.n	8004230 <CopyDataInit>
  ldr  r2, =_sbss
 8004242:	4a0b      	ldr	r2, [pc, #44]	; (8004270 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004244:	e002      	b.n	800424c <LoopFillZerobss>

08004246 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004246:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004248:	f842 3b04 	str.w	r3, [r2], #4

0800424c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800424e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004250:	d3f9      	bcc.n	8004246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004252:	f7ff fbd3 	bl	80039fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004256:	f008 fe95 	bl	800cf84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800425a:	f7fd fb15 	bl	8001888 <main>
  bx  lr    
 800425e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004260:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004264:	0800d164 	.word	0x0800d164
  ldr  r0, =_sdata
 8004268:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800426c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8004270:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8004274:	200052a4 	.word	0x200052a4

08004278 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004278:	e7fe      	b.n	8004278 <CAN1_RX0_IRQHandler>
	...

0800427c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004280:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <HAL_Init+0x40>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <HAL_Init+0x40>)
 8004286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800428a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_Init+0x40>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_Init+0x40>)
 8004292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <HAL_Init+0x40>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <HAL_Init+0x40>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a4:	2003      	movs	r0, #3
 80042a6:	f001 fccc 	bl	8005c42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042aa:	2000      	movs	r0, #0
 80042ac:	f7ff fabc 	bl	8003828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042b0:	f7fe ff40 	bl	8003134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023c00 	.word	0x40023c00

080042c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_IncTick+0x20>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_IncTick+0x24>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4413      	add	r3, r2
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_IncTick+0x24>)
 80042d2:	6013      	str	r3, [r2, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000014 	.word	0x20000014
 80042e4:	20005240 	.word	0x20005240

080042e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return uwTick;
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_GetTick+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20005240 	.word	0x20005240

08004300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e033      	b.n	800437e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fe ff34 	bl	800318c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d118      	bne.n	8004370 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004346:	f023 0302 	bic.w	r3, r3, #2
 800434a:	f043 0202 	orr.w	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fba8 	bl	8004aa8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
 800436e:	e001      	b.n	8004374 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d049      	beq.n	800445c <HAL_ADC_IRQHandler+0xd6>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d046      	beq.n	800445c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d12b      	bne.n	800444c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d127      	bne.n	800444c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004406:	2b00      	cmp	r3, #0
 8004408:	d006      	beq.n	8004418 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004414:	2b00      	cmp	r3, #0
 8004416:	d119      	bne.n	800444c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0220 	bic.w	r2, r2, #32
 8004426:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fe f9c9 	bl	80027e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f06f 0212 	mvn.w	r2, #18
 800445a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	2b80      	cmp	r3, #128	; 0x80
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d057      	beq.n	800453e <HAL_ADC_IRQHandler+0x1b8>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d054      	beq.n	800453e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	d105      	bne.n	80044ac <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d139      	bne.n	800452e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d12b      	bne.n	800452e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d124      	bne.n	800452e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11d      	bne.n	800452e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d119      	bne.n	800452e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004508:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fc38 	bl	8004da4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 020c 	mvn.w	r2, #12
 800453c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	bf0c      	ite	eq
 8004562:	2301      	moveq	r3, #1
 8004564:	2300      	movne	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d017      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x21a>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10d      	bne.n	80045a0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f953 	bl	800483c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f06f 0201 	mvn.w	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <HAL_ADC_IRQHandler+0x27a>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d012      	beq.n	8004600 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f043 0202 	orr.w	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0220 	mvn.w	r2, #32
 80045ee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f92d 	bl	8004850 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0220 	mvn.w	r2, #32
 80045fe:	601a      	str	r2, [r3, #0]
  }
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_ADC_Start_DMA+0x1e>
 8004622:	2302      	movs	r3, #2
 8004624:	e0e9      	b.n	80047fa <HAL_ADC_Start_DMA+0x1f2>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d018      	beq.n	800466e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800464c:	4b6d      	ldr	r3, [pc, #436]	; (8004804 <HAL_ADC_Start_DMA+0x1fc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a6d      	ldr	r2, [pc, #436]	; (8004808 <HAL_ADC_Start_DMA+0x200>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	0c9a      	lsrs	r2, r3, #18
 8004658:	4613      	mov	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4413      	add	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004660:	e002      	b.n	8004668 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3b01      	subs	r3, #1
 8004666:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f9      	bne.n	8004662 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467c:	d107      	bne.n	800468e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	f040 80a1 	bne.w	80047e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d106      	bne.n	80046ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f023 0206 	bic.w	r2, r3, #6
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
 80046ea:	e002      	b.n	80046f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046fa:	4b44      	ldr	r3, [pc, #272]	; (800480c <HAL_ADC_Start_DMA+0x204>)
 80046fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	4a43      	ldr	r2, [pc, #268]	; (8004810 <HAL_ADC_Start_DMA+0x208>)
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	4a42      	ldr	r2, [pc, #264]	; (8004814 <HAL_ADC_Start_DMA+0x20c>)
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	4a41      	ldr	r2, [pc, #260]	; (8004818 <HAL_ADC_Start_DMA+0x210>)
 8004714:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800471e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800472e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	334c      	adds	r3, #76	; 0x4c
 800474a:	4619      	mov	r1, r3
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f001 fb5a 	bl	8005e08 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2b00      	cmp	r3, #0
 800475e:	d12a      	bne.n	80047b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2d      	ldr	r2, [pc, #180]	; (800481c <HAL_ADC_Start_DMA+0x214>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d015      	beq.n	8004796 <HAL_ADC_Start_DMA+0x18e>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2c      	ldr	r2, [pc, #176]	; (8004820 <HAL_ADC_Start_DMA+0x218>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d105      	bne.n	8004780 <HAL_ADC_Start_DMA+0x178>
 8004774:	4b25      	ldr	r3, [pc, #148]	; (800480c <HAL_ADC_Start_DMA+0x204>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a27      	ldr	r2, [pc, #156]	; (8004824 <HAL_ADC_Start_DMA+0x21c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d136      	bne.n	80047f8 <HAL_ADC_Start_DMA+0x1f0>
 800478a:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_ADC_Start_DMA+0x204>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	d130      	bne.n	80047f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d129      	bne.n	80047f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	e020      	b.n	80047f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a18      	ldr	r2, [pc, #96]	; (800481c <HAL_ADC_Start_DMA+0x214>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d11b      	bne.n	80047f8 <HAL_ADC_Start_DMA+0x1f0>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d114      	bne.n	80047f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	e00b      	b.n	80047f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f043 0210 	orr.w	r2, r3, #16
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	2000000c 	.word	0x2000000c
 8004808:	431bde83 	.word	0x431bde83
 800480c:	40012300 	.word	0x40012300
 8004810:	08004ca1 	.word	0x08004ca1
 8004814:	08004d5b 	.word	0x08004d5b
 8004818:	08004d77 	.word	0x08004d77
 800481c:	40012000 	.word	0x40012000
 8004820:	40012100 	.word	0x40012100
 8004824:	40012200 	.word	0x40012200

08004828 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x1c>
 800487c:	2302      	movs	r3, #2
 800487e:	e105      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x228>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b09      	cmp	r3, #9
 800488e:	d925      	bls.n	80048dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	3b1e      	subs	r3, #30
 80048a6:	2207      	movs	r2, #7
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43da      	mvns	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	400a      	ands	r2, r1
 80048b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4618      	mov	r0, r3
 80048c8:	4603      	mov	r3, r0
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	4403      	add	r3, r0
 80048ce:	3b1e      	subs	r3, #30
 80048d0:	409a      	lsls	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	e022      	b.n	8004922 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6919      	ldr	r1, [r3, #16]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	2207      	movs	r2, #7
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43da      	mvns	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	400a      	ands	r2, r1
 80048fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6919      	ldr	r1, [r3, #16]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	4618      	mov	r0, r3
 8004912:	4603      	mov	r3, r0
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4403      	add	r3, r0
 8004918:	409a      	lsls	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b06      	cmp	r3, #6
 8004928:	d824      	bhi.n	8004974 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	3b05      	subs	r3, #5
 800493c:	221f      	movs	r2, #31
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43da      	mvns	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	400a      	ands	r2, r1
 800494a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	4618      	mov	r0, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	3b05      	subs	r3, #5
 8004966:	fa00 f203 	lsl.w	r2, r0, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	635a      	str	r2, [r3, #52]	; 0x34
 8004972:	e04c      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b0c      	cmp	r3, #12
 800497a:	d824      	bhi.n	80049c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	3b23      	subs	r3, #35	; 0x23
 800498e:	221f      	movs	r2, #31
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43da      	mvns	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	400a      	ands	r2, r1
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4618      	mov	r0, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	3b23      	subs	r3, #35	; 0x23
 80049b8:	fa00 f203 	lsl.w	r2, r0, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
 80049c4:	e023      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	3b41      	subs	r3, #65	; 0x41
 80049d8:	221f      	movs	r2, #31
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43da      	mvns	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	400a      	ands	r2, r1
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4618      	mov	r0, r3
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	3b41      	subs	r3, #65	; 0x41
 8004a02:	fa00 f203 	lsl.w	r2, r0, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a0e:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <HAL_ADC_ConfigChannel+0x234>)
 8004a10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a21      	ldr	r2, [pc, #132]	; (8004a9c <HAL_ADC_ConfigChannel+0x238>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d109      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x1cc>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b12      	cmp	r3, #18
 8004a22:	d105      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_ADC_ConfigChannel+0x238>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d123      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x21e>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d003      	beq.n	8004a4a <HAL_ADC_ConfigChannel+0x1e6>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b11      	cmp	r3, #17
 8004a48:	d11b      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d111      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <HAL_ADC_ConfigChannel+0x23c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <HAL_ADC_ConfigChannel+0x240>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	0c9a      	lsrs	r2, r3, #18
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a74:	e002      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f9      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40012300 	.word	0x40012300
 8004a9c:	40012000 	.word	0x40012000
 8004aa0:	2000000c 	.word	0x2000000c
 8004aa4:	431bde83 	.word	0x431bde83

08004aa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ab0:	4b79      	ldr	r3, [pc, #484]	; (8004c98 <ADC_Init+0x1f0>)
 8004ab2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	021a      	lsls	r2, r3, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <ADC_Init+0x1f4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d022      	beq.n	8004b86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6899      	ldr	r1, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6899      	ldr	r1, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	e00f      	b.n	8004ba6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ba4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0202 	bic.w	r2, r2, #2
 8004bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6899      	ldr	r1, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7e1b      	ldrb	r3, [r3, #24]
 8004bc0:	005a      	lsls	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	035a      	lsls	r2, r3, #13
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	e007      	b.n	8004c1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	051a      	lsls	r2, r3, #20
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6899      	ldr	r1, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c5e:	025a      	lsls	r2, r3, #9
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	029a      	lsls	r2, r3, #10
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40012300 	.word	0x40012300
 8004c9c:	0f000001 	.word	0x0f000001

08004ca0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d13c      	bne.n	8004d34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d12b      	bne.n	8004d2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d127      	bne.n	8004d2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d006      	beq.n	8004cf8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d119      	bne.n	8004d2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0220 	bic.w	r2, r2, #32
 8004d06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f043 0201 	orr.w	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7fd fd59 	bl	80027e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d32:	e00e      	b.n	8004d52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fd85 	bl	8004850 <HAL_ADC_ErrorCallback>
}
 8004d46:	e004      	b.n	8004d52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4798      	blx	r3
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff fd5d 	bl	8004828 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2240      	movs	r2, #64	; 0x40
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f043 0204 	orr.w	r2, r3, #4
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff fd5a 	bl	8004850 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e0ed      	b.n	8004fa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fe fa72 	bl	80032c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0202 	bic.w	r2, r2, #2
 8004dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dec:	f7ff fa7c 	bl	80042e8 <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004df2:	e012      	b.n	8004e1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004df4:	f7ff fa78 	bl	80042e8 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b0a      	cmp	r3, #10
 8004e00:	d90b      	bls.n	8004e1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2205      	movs	r2, #5
 8004e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e0c5      	b.n	8004fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e38:	f7ff fa56 	bl	80042e8 <HAL_GetTick>
 8004e3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e3e:	e012      	b.n	8004e66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e40:	f7ff fa52 	bl	80042e8 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b0a      	cmp	r3, #10
 8004e4c:	d90b      	bls.n	8004e66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2205      	movs	r2, #5
 8004e5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e09f      	b.n	8004fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0e5      	beq.n	8004e40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7e1b      	ldrb	r3, [r3, #24]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d108      	bne.n	8004e8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e007      	b.n	8004e9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7e5b      	ldrb	r3, [r3, #25]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d108      	bne.n	8004eb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e007      	b.n	8004ec8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	7e9b      	ldrb	r3, [r3, #26]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d108      	bne.n	8004ee2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0220 	orr.w	r2, r2, #32
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e007      	b.n	8004ef2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0220 	bic.w	r2, r2, #32
 8004ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7edb      	ldrb	r3, [r3, #27]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d108      	bne.n	8004f0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0210 	bic.w	r2, r2, #16
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e007      	b.n	8004f1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0210 	orr.w	r2, r2, #16
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7f1b      	ldrb	r3, [r3, #28]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d108      	bne.n	8004f36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e007      	b.n	8004f46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0208 	bic.w	r2, r2, #8
 8004f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7f5b      	ldrb	r3, [r3, #29]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d108      	bne.n	8004f60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0204 	orr.w	r2, r2, #4
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e007      	b.n	8004f70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	ea42 0103 	orr.w	r1, r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d003      	beq.n	8004fd6 <HAL_CAN_ConfigFilter+0x26>
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	f040 80be 	bne.w	8005152 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004fd6:	4b65      	ldr	r3, [pc, #404]	; (800516c <HAL_CAN_ConfigFilter+0x1bc>)
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fe0:	f043 0201 	orr.w	r2, r3, #1
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ff0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	431a      	orrs	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2201      	movs	r2, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	43db      	mvns	r3, r3
 8005028:	401a      	ands	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d123      	bne.n	8005080 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	43db      	mvns	r3, r3
 8005042:	401a      	ands	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800505a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3248      	adds	r2, #72	; 0x48
 8005060:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005074:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	3348      	adds	r3, #72	; 0x48
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	440b      	add	r3, r1
 800507e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d122      	bne.n	80050ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	431a      	orrs	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80050a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	3248      	adds	r2, #72	; 0x48
 80050ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	3348      	adds	r3, #72	; 0x48
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	440b      	add	r3, r1
 80050cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	43db      	mvns	r3, r3
 80050e0:	401a      	ands	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80050e8:	e007      	b.n	80050fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	43db      	mvns	r3, r3
 800510c:	401a      	ands	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005114:	e007      	b.n	8005126 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	431a      	orrs	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	431a      	orrs	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005144:	f023 0201 	bic.w	r2, r3, #1
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e006      	b.n	8005160 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
  }
}
 8005160:	4618      	mov	r0, r3
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40006400 	.word	0x40006400

08005170 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d12e      	bne.n	80051e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800519c:	f7ff f8a4 	bl	80042e8 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80051a2:	e012      	b.n	80051ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051a4:	f7ff f8a0 	bl	80042e8 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b0a      	cmp	r3, #10
 80051b0:	d90b      	bls.n	80051ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2205      	movs	r2, #5
 80051c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e012      	b.n	80051f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e5      	bne.n	80051a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e006      	b.n	80051f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d003      	beq.n	8005224 <HAL_CAN_AddTxMessage+0x2c>
 800521c:	7ffb      	ldrb	r3, [r7, #31]
 800521e:	2b02      	cmp	r3, #2
 8005220:	f040 80b8 	bne.w	8005394 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a0 	beq.w	8005384 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	0e1b      	lsrs	r3, r3, #24
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d907      	bls.n	8005264 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e09e      	b.n	80053a2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005264:	2201      	movs	r2, #1
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	409a      	lsls	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	6809      	ldr	r1, [r1, #0]
 8005284:	431a      	orrs	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	3318      	adds	r3, #24
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	440b      	add	r3, r1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e00f      	b.n	80052b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800529c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80052a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3318      	adds	r3, #24
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	440b      	add	r3, r1
 80052b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	3318      	adds	r3, #24
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	440b      	add	r3, r1
 80052c2:	3304      	adds	r3, #4
 80052c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	7d1b      	ldrb	r3, [r3, #20]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d111      	bne.n	80052f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3318      	adds	r3, #24
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4413      	add	r3, r2
 80052da:	3304      	adds	r3, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	6811      	ldr	r1, [r2, #0]
 80052e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3318      	adds	r3, #24
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	440b      	add	r3, r1
 80052ee:	3304      	adds	r3, #4
 80052f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3307      	adds	r3, #7
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	061a      	lsls	r2, r3, #24
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3306      	adds	r3, #6
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3305      	adds	r3, #5
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	4313      	orrs	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	3204      	adds	r2, #4
 8005312:	7812      	ldrb	r2, [r2, #0]
 8005314:	4610      	mov	r0, r2
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	ea43 0200 	orr.w	r2, r3, r0
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	440b      	add	r3, r1
 8005324:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005328:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3303      	adds	r3, #3
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	061a      	lsls	r2, r3, #24
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3302      	adds	r3, #2
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3301      	adds	r3, #1
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	4313      	orrs	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	4610      	mov	r0, r2
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	6811      	ldr	r1, [r2, #0]
 8005350:	ea43 0200 	orr.w	r2, r3, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	440b      	add	r3, r1
 800535a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800535e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	3318      	adds	r3, #24
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	4413      	add	r3, r2
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6811      	ldr	r1, [r2, #0]
 8005372:	f043 0201 	orr.w	r2, r3, #1
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	3318      	adds	r3, #24
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	440b      	add	r3, r1
 800537e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e00e      	b.n	80053a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e006      	b.n	80053a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3724      	adds	r7, #36	; 0x24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80053c2:	7afb      	ldrb	r3, [r7, #11]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d002      	beq.n	80053ce <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d11d      	bne.n	800540a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3301      	adds	r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800540a:	68fb      	ldr	r3, [r7, #12]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800542c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d003      	beq.n	800543c <HAL_CAN_GetRxMessage+0x24>
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	2b02      	cmp	r3, #2
 8005438:	f040 80f3 	bne.w	8005622 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10e      	bne.n	8005460 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d116      	bne.n	800547e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0e7      	b.n	8005630 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e0d8      	b.n	8005630 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	331b      	adds	r3, #27
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	4413      	add	r3, r2
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0204 	and.w	r2, r3, #4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10c      	bne.n	80054b6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	331b      	adds	r3, #27
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	4413      	add	r3, r2
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	0d5b      	lsrs	r3, r3, #21
 80054ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e00b      	b.n	80054ce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	331b      	adds	r3, #27
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	4413      	add	r3, r2
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	331b      	adds	r3, #27
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	4413      	add	r3, r2
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0202 	and.w	r2, r3, #2
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	331b      	adds	r3, #27
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	4413      	add	r3, r2
 80054f0:	3304      	adds	r3, #4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 020f 	and.w	r2, r3, #15
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	331b      	adds	r3, #27
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	4413      	add	r3, r2
 8005508:	3304      	adds	r3, #4
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	b2da      	uxtb	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	331b      	adds	r3, #27
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	4413      	add	r3, r2
 8005520:	3304      	adds	r3, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	4413      	add	r3, r2
 8005536:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	4413      	add	r3, r2
 800554c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	0a1a      	lsrs	r2, r3, #8
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	4413      	add	r3, r2
 8005566:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	0c1a      	lsrs	r2, r3, #16
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	3302      	adds	r3, #2
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	0e1a      	lsrs	r2, r3, #24
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	3303      	adds	r3, #3
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4413      	add	r3, r2
 800559a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	3304      	adds	r3, #4
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0a1a      	lsrs	r2, r3, #8
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3305      	adds	r3, #5
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	0c1a      	lsrs	r2, r3, #16
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	3306      	adds	r3, #6
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	0e1a      	lsrs	r2, r3, #24
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	3307      	adds	r3, #7
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d108      	bne.n	800560e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0220 	orr.w	r2, r2, #32
 800560a:	60da      	str	r2, [r3, #12]
 800560c:	e007      	b.n	800561e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0220 	orr.w	r2, r2, #32
 800561c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e006      	b.n	8005630 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800564c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d002      	beq.n	800565a <HAL_CAN_ActivateNotification+0x1e>
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d109      	bne.n	800566e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6959      	ldr	r1, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e006      	b.n	800567c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
  }
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d07c      	beq.n	80057c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d023      	beq.n	8005720 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f983 	bl	80059f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80056f0:	e016      	b.n	8005720 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	e00c      	b.n	8005720 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	e002      	b.n	8005720 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f989 	bl	8005a32 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d024      	beq.n	8005774 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005732:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f963 	bl	8005a0a <HAL_CAN_TxMailbox1CompleteCallback>
 8005744:	e016      	b.n	8005774 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574c:	2b00      	cmp	r3, #0
 800574e:	d004      	beq.n	800575a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
 8005758:	e00c      	b.n	8005774 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
 800576c:	e002      	b.n	8005774 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f969 	bl	8005a46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d024      	beq.n	80057c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005786:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f943 	bl	8005a1e <HAL_CAN_TxMailbox2CompleteCallback>
 8005798:	e016      	b.n	80057c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
 80057ac:	e00c      	b.n	80057c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
 80057c0:	e002      	b.n	80057c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f949 	bl	8005a5a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2210      	movs	r2, #16
 80057ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d006      	beq.n	800580e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2208      	movs	r2, #8
 8005806:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f930 	bl	8005a6e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d009      	beq.n	800582c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc ffee 	bl	8002808 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005846:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2210      	movs	r2, #16
 800584e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d006      	beq.n	8005872 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2208      	movs	r2, #8
 800586a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f912 	bl	8005a96 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f8f9 	bl	8005a82 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d006      	beq.n	80058b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2210      	movs	r2, #16
 80058aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f8fc 	bl	8005aaa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2208      	movs	r2, #8
 80058cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8f5 	bl	8005abe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d07b      	beq.n	80059d6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d072      	beq.n	80059ce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	f043 0302 	orr.w	r3, r3, #2
 800591e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	f043 0304 	orr.w	r3, r3, #4
 800593a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005942:	2b00      	cmp	r3, #0
 8005944:	d043      	beq.n	80059ce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800594c:	2b00      	cmp	r3, #0
 800594e:	d03e      	beq.n	80059ce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005956:	2b60      	cmp	r3, #96	; 0x60
 8005958:	d02b      	beq.n	80059b2 <HAL_CAN_IRQHandler+0x32a>
 800595a:	2b60      	cmp	r3, #96	; 0x60
 800595c:	d82e      	bhi.n	80059bc <HAL_CAN_IRQHandler+0x334>
 800595e:	2b50      	cmp	r3, #80	; 0x50
 8005960:	d022      	beq.n	80059a8 <HAL_CAN_IRQHandler+0x320>
 8005962:	2b50      	cmp	r3, #80	; 0x50
 8005964:	d82a      	bhi.n	80059bc <HAL_CAN_IRQHandler+0x334>
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d019      	beq.n	800599e <HAL_CAN_IRQHandler+0x316>
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d826      	bhi.n	80059bc <HAL_CAN_IRQHandler+0x334>
 800596e:	2b30      	cmp	r3, #48	; 0x30
 8005970:	d010      	beq.n	8005994 <HAL_CAN_IRQHandler+0x30c>
 8005972:	2b30      	cmp	r3, #48	; 0x30
 8005974:	d822      	bhi.n	80059bc <HAL_CAN_IRQHandler+0x334>
 8005976:	2b10      	cmp	r3, #16
 8005978:	d002      	beq.n	8005980 <HAL_CAN_IRQHandler+0x2f8>
 800597a:	2b20      	cmp	r3, #32
 800597c:	d005      	beq.n	800598a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800597e:	e01d      	b.n	80059bc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	f043 0308 	orr.w	r3, r3, #8
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005988:	e019      	b.n	80059be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	f043 0310 	orr.w	r3, r3, #16
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005992:	e014      	b.n	80059be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	f043 0320 	orr.w	r3, r3, #32
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800599c:	e00f      	b.n	80059be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059a6:	e00a      	b.n	80059be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059b0:	e005      	b.n	80059be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80059ba:	e000      	b.n	80059be <HAL_CAN_IRQHandler+0x336>
            break;
 80059bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80059cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2204      	movs	r2, #4
 80059d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f872 	bl	8005ad2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80059ee:	bf00      	nop
 80059f0:	3728      	adds	r7, #40	; 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005af8:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <__NVIC_SetPriorityGrouping+0x44>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b04:	4013      	ands	r3, r2
 8005b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b1a:	4a04      	ldr	r2, [pc, #16]	; (8005b2c <__NVIC_SetPriorityGrouping+0x44>)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	60d3      	str	r3, [r2, #12]
}
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	e000ed00 	.word	0xe000ed00

08005b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <__NVIC_GetPriorityGrouping+0x18>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	0a1b      	lsrs	r3, r3, #8
 8005b3a:	f003 0307 	and.w	r3, r3, #7
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	e000ed00 	.word	0xe000ed00

08005b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	db0b      	blt.n	8005b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	f003 021f 	and.w	r2, r3, #31
 8005b64:	4907      	ldr	r1, [pc, #28]	; (8005b84 <__NVIC_EnableIRQ+0x38>)
 8005b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	e000e100 	.word	0xe000e100

08005b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	db0a      	blt.n	8005bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	490c      	ldr	r1, [pc, #48]	; (8005bd4 <__NVIC_SetPriority+0x4c>)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	0112      	lsls	r2, r2, #4
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	440b      	add	r3, r1
 8005bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bb0:	e00a      	b.n	8005bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	4908      	ldr	r1, [pc, #32]	; (8005bd8 <__NVIC_SetPriority+0x50>)
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	3b04      	subs	r3, #4
 8005bc0:	0112      	lsls	r2, r2, #4
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	761a      	strb	r2, [r3, #24]
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	e000e100 	.word	0xe000e100
 8005bd8:	e000ed00 	.word	0xe000ed00

08005bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	; 0x24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f1c3 0307 	rsb	r3, r3, #7
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	bf28      	it	cs
 8005bfa:	2304      	movcs	r3, #4
 8005bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	3304      	adds	r3, #4
 8005c02:	2b06      	cmp	r3, #6
 8005c04:	d902      	bls.n	8005c0c <NVIC_EncodePriority+0x30>
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	3b03      	subs	r3, #3
 8005c0a:	e000      	b.n	8005c0e <NVIC_EncodePriority+0x32>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c10:	f04f 32ff 	mov.w	r2, #4294967295
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	401a      	ands	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c24:	f04f 31ff 	mov.w	r1, #4294967295
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2e:	43d9      	mvns	r1, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c34:	4313      	orrs	r3, r2
         );
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3724      	adds	r7, #36	; 0x24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff ff4c 	bl	8005ae8 <__NVIC_SetPriorityGrouping>
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c6a:	f7ff ff61 	bl	8005b30 <__NVIC_GetPriorityGrouping>
 8005c6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	6978      	ldr	r0, [r7, #20]
 8005c76:	f7ff ffb1 	bl	8005bdc <NVIC_EncodePriority>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff ff80 	bl	8005b88 <__NVIC_SetPriority>
}
 8005c88:	bf00      	nop
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff ff54 	bl	8005b4c <__NVIC_EnableIRQ>
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005cb8:	f7fe fb16 	bl	80042e8 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e099      	b.n	8005dfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ce8:	e00f      	b.n	8005d0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cea:	f7fe fafd 	bl	80042e8 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b05      	cmp	r3, #5
 8005cf6:	d908      	bls.n	8005d0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2203      	movs	r2, #3
 8005d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e078      	b.n	8005dfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e8      	bne.n	8005cea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4b38      	ldr	r3, [pc, #224]	; (8005e04 <HAL_DMA_Init+0x158>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d107      	bne.n	8005d74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0307 	bic.w	r3, r3, #7
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d117      	bne.n	8005dce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00e      	beq.n	8005dce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fb01 	bl	80063b8 <DMA_CheckFifoParam>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2240      	movs	r2, #64	; 0x40
 8005dc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e016      	b.n	8005dfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fab8 	bl	800634c <DMA_CalcBaseAndBitshift>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de4:	223f      	movs	r2, #63	; 0x3f
 8005de6:	409a      	lsls	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	f010803f 	.word	0xf010803f

08005e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_DMA_Start_IT+0x26>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e040      	b.n	8005eb0 <HAL_DMA_Start_IT+0xa8>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d12f      	bne.n	8005ea2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2202      	movs	r2, #2
 8005e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fa4a 	bl	80062f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e60:	223f      	movs	r2, #63	; 0x3f
 8005e62:	409a      	lsls	r2, r3
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0216 	orr.w	r2, r2, #22
 8005e76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0208 	orr.w	r2, r2, #8
 8005e8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e005      	b.n	8005eae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ec6:	f7fe fa0f 	bl	80042e8 <HAL_GetTick>
 8005eca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d008      	beq.n	8005eea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2280      	movs	r2, #128	; 0x80
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e052      	b.n	8005f90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0216 	bic.w	r2, r2, #22
 8005ef8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <HAL_DMA_Abort+0x62>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0208 	bic.w	r2, r2, #8
 8005f28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f3a:	e013      	b.n	8005f64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f3c:	f7fe f9d4 	bl	80042e8 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d90c      	bls.n	8005f64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e015      	b.n	8005f90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e4      	bne.n	8005f3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	223f      	movs	r2, #63	; 0x3f
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d004      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e00c      	b.n	8005fd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2205      	movs	r2, #5
 8005fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fe8:	4b92      	ldr	r3, [pc, #584]	; (8006234 <HAL_DMA_IRQHandler+0x258>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a92      	ldr	r2, [pc, #584]	; (8006238 <HAL_DMA_IRQHandler+0x25c>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	0a9b      	lsrs	r3, r3, #10
 8005ff4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006006:	2208      	movs	r2, #8
 8006008:	409a      	lsls	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4013      	ands	r3, r2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01a      	beq.n	8006048 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0204 	bic.w	r2, r2, #4
 800602e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006034:	2208      	movs	r2, #8
 8006036:	409a      	lsls	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006040:	f043 0201 	orr.w	r2, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604c:	2201      	movs	r2, #1
 800604e:	409a      	lsls	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d012      	beq.n	800607e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606a:	2201      	movs	r2, #1
 800606c:	409a      	lsls	r2, r3
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006076:	f043 0202 	orr.w	r2, r3, #2
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006082:	2204      	movs	r2, #4
 8006084:	409a      	lsls	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d012      	beq.n	80060b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a0:	2204      	movs	r2, #4
 80060a2:	409a      	lsls	r2, r3
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	f043 0204 	orr.w	r2, r3, #4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b8:	2210      	movs	r2, #16
 80060ba:	409a      	lsls	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d043      	beq.n	800614c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d03c      	beq.n	800614c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d6:	2210      	movs	r2, #16
 80060d8:	409a      	lsls	r2, r3
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d018      	beq.n	800611e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d108      	bne.n	800610c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d024      	beq.n	800614c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
 800610a:	e01f      	b.n	800614c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01b      	beq.n	800614c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
 800611c:	e016      	b.n	800614c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d107      	bne.n	800613c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0208 	bic.w	r2, r2, #8
 800613a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	2220      	movs	r2, #32
 8006152:	409a      	lsls	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 808e 	beq.w	800627a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8086 	beq.w	800627a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006172:	2220      	movs	r2, #32
 8006174:	409a      	lsls	r2, r3
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b05      	cmp	r3, #5
 8006184:	d136      	bne.n	80061f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0216 	bic.w	r2, r2, #22
 8006194:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695a      	ldr	r2, [r3, #20]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <HAL_DMA_IRQHandler+0x1da>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0208 	bic.w	r2, r2, #8
 80061c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ca:	223f      	movs	r2, #63	; 0x3f
 80061cc:	409a      	lsls	r2, r3
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d07d      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
        }
        return;
 80061f2:	e078      	b.n	80062e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01c      	beq.n	800623c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d108      	bne.n	8006222 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006214:	2b00      	cmp	r3, #0
 8006216:	d030      	beq.n	800627a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
 8006220:	e02b      	b.n	800627a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d027      	beq.n	800627a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
 8006232:	e022      	b.n	800627a <HAL_DMA_IRQHandler+0x29e>
 8006234:	2000000c 	.word	0x2000000c
 8006238:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0210 	bic.w	r2, r2, #16
 8006258:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627e:	2b00      	cmp	r3, #0
 8006280:	d032      	beq.n	80062e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d022      	beq.n	80062d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2205      	movs	r2, #5
 8006292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60bb      	str	r3, [r7, #8]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d307      	bcc.n	80062c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f2      	bne.n	80062a6 <HAL_DMA_IRQHandler+0x2ca>
 80062c0:	e000      	b.n	80062c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80062c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
 80062e4:	e000      	b.n	80062e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80062e6:	bf00      	nop
    }
  }
}
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop

080062f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800630c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d108      	bne.n	8006330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800632e:	e007      	b.n	8006340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	60da      	str	r2, [r3, #12]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	3b10      	subs	r3, #16
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <DMA_CalcBaseAndBitshift+0x64>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	091b      	lsrs	r3, r3, #4
 8006364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006366:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <DMA_CalcBaseAndBitshift+0x68>)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b03      	cmp	r3, #3
 8006378:	d909      	bls.n	800638e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	1d1a      	adds	r2, r3, #4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	659a      	str	r2, [r3, #88]	; 0x58
 800638c:	e007      	b.n	800639e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	aaaaaaab 	.word	0xaaaaaaab
 80063b4:	0800d148 	.word	0x0800d148

080063b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d11f      	bne.n	8006412 <DMA_CheckFifoParam+0x5a>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d856      	bhi.n	8006486 <DMA_CheckFifoParam+0xce>
 80063d8:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <DMA_CheckFifoParam+0x28>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	08006403 	.word	0x08006403
 80063e8:	080063f1 	.word	0x080063f1
 80063ec:	08006487 	.word	0x08006487
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d046      	beq.n	800648a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006400:	e043      	b.n	800648a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800640a:	d140      	bne.n	800648e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006410:	e03d      	b.n	800648e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641a:	d121      	bne.n	8006460 <DMA_CheckFifoParam+0xa8>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b03      	cmp	r3, #3
 8006420:	d837      	bhi.n	8006492 <DMA_CheckFifoParam+0xda>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <DMA_CheckFifoParam+0x70>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	08006439 	.word	0x08006439
 800642c:	0800643f 	.word	0x0800643f
 8006430:	08006439 	.word	0x08006439
 8006434:	08006451 	.word	0x08006451
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e030      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d025      	beq.n	8006496 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800644e:	e022      	b.n	8006496 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006458:	d11f      	bne.n	800649a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800645e:	e01c      	b.n	800649a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d903      	bls.n	800646e <DMA_CheckFifoParam+0xb6>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d003      	beq.n	8006474 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800646c:	e018      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	73fb      	strb	r3, [r7, #15]
      break;
 8006472:	e015      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
      break;
 8006484:	e00b      	b.n	800649e <DMA_CheckFifoParam+0xe6>
      break;
 8006486:	bf00      	nop
 8006488:	e00a      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
      break;
 800648a:	bf00      	nop
 800648c:	e008      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
      break;
 800648e:	bf00      	nop
 8006490:	e006      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
      break;
 8006492:	bf00      	nop
 8006494:	e004      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
      break;
 8006496:	bf00      	nop
 8006498:	e002      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
      break;
 800649e:	bf00      	nop
    }
  } 
  
  return status; 
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop

080064b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80064c2:	4b23      	ldr	r3, [pc, #140]	; (8006550 <HAL_FLASH_Program+0xa0>)
 80064c4:	7e1b      	ldrb	r3, [r3, #24]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_FLASH_Program+0x1e>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e03b      	b.n	8006546 <HAL_FLASH_Program+0x96>
 80064ce:	4b20      	ldr	r3, [pc, #128]	; (8006550 <HAL_FLASH_Program+0xa0>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064d8:	f000 f870 	bl	80065bc <FLASH_WaitForLastOperation>
 80064dc:	4603      	mov	r3, r0
 80064de:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d12b      	bne.n	800653e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d105      	bne.n	80064f8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80064ec:	783b      	ldrb	r3, [r7, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	68b8      	ldr	r0, [r7, #8]
 80064f2:	f000 f91b 	bl	800672c <FLASH_Program_Byte>
 80064f6:	e016      	b.n	8006526 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d105      	bne.n	800650a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80064fe:	883b      	ldrh	r3, [r7, #0]
 8006500:	4619      	mov	r1, r3
 8006502:	68b8      	ldr	r0, [r7, #8]
 8006504:	f000 f8ee 	bl	80066e4 <FLASH_Program_HalfWord>
 8006508:	e00d      	b.n	8006526 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d105      	bne.n	800651c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	68b8      	ldr	r0, [r7, #8]
 8006516:	f000 f8c3 	bl	80066a0 <FLASH_Program_Word>
 800651a:	e004      	b.n	8006526 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800651c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006520:	68b8      	ldr	r0, [r7, #8]
 8006522:	f000 f88b 	bl	800663c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006526:	f24c 3050 	movw	r0, #50000	; 0xc350
 800652a:	f000 f847 	bl	80065bc <FLASH_WaitForLastOperation>
 800652e:	4603      	mov	r3, r0
 8006530:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <HAL_FLASH_Program+0xa4>)
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <HAL_FLASH_Program+0xa4>)
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800653e:	4b04      	ldr	r3, [pc, #16]	; (8006550 <HAL_FLASH_Program+0xa0>)
 8006540:	2200      	movs	r2, #0
 8006542:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20005244 	.word	0x20005244
 8006554:	40023c00 	.word	0x40023c00

08006558 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <HAL_FLASH_Unlock+0x38>)
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	da0b      	bge.n	8006582 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <HAL_FLASH_Unlock+0x38>)
 800656c:	4a09      	ldr	r2, [pc, #36]	; (8006594 <HAL_FLASH_Unlock+0x3c>)
 800656e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <HAL_FLASH_Unlock+0x38>)
 8006572:	4a09      	ldr	r2, [pc, #36]	; (8006598 <HAL_FLASH_Unlock+0x40>)
 8006574:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_FLASH_Unlock+0x38>)
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	da01      	bge.n	8006582 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006582:	79fb      	ldrb	r3, [r7, #7]
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40023c00 	.word	0x40023c00
 8006594:	45670123 	.word	0x45670123
 8006598:	cdef89ab 	.word	0xcdef89ab

0800659c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_FLASH_Lock+0x1c>)
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <HAL_FLASH_Lock+0x1c>)
 80065a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	40023c00 	.word	0x40023c00

080065bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <FLASH_WaitForLastOperation+0x78>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80065ce:	f7fd fe8b 	bl	80042e8 <HAL_GetTick>
 80065d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80065d4:	e010      	b.n	80065f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d00c      	beq.n	80065f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <FLASH_WaitForLastOperation+0x38>
 80065e4:	f7fd fe80 	bl	80042e8 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d201      	bcs.n	80065f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e019      	b.n	800662c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80065f8:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <FLASH_WaitForLastOperation+0x7c>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e8      	bne.n	80065d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006604:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <FLASH_WaitForLastOperation+0x7c>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <FLASH_WaitForLastOperation+0x7c>)
 8006612:	2201      	movs	r2, #1
 8006614:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <FLASH_WaitForLastOperation+0x7c>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006622:	f000 f8a5 	bl	8006770 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
  
}  
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	20005244 	.word	0x20005244
 8006638:	40023c00 	.word	0x40023c00

0800663c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006648:	4b14      	ldr	r3, [pc, #80]	; (800669c <FLASH_Program_DoubleWord+0x60>)
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	4a13      	ldr	r2, [pc, #76]	; (800669c <FLASH_Program_DoubleWord+0x60>)
 800664e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006654:	4b11      	ldr	r3, [pc, #68]	; (800669c <FLASH_Program_DoubleWord+0x60>)
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	4a10      	ldr	r2, [pc, #64]	; (800669c <FLASH_Program_DoubleWord+0x60>)
 800665a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800665e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006660:	4b0e      	ldr	r3, [pc, #56]	; (800669c <FLASH_Program_DoubleWord+0x60>)
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	4a0d      	ldr	r2, [pc, #52]	; (800669c <FLASH_Program_DoubleWord+0x60>)
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006672:	f3bf 8f6f 	isb	sy
}
 8006676:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	000a      	movs	r2, r1
 8006686:	2300      	movs	r3, #0
 8006688:	68f9      	ldr	r1, [r7, #12]
 800668a:	3104      	adds	r1, #4
 800668c:	4613      	mov	r3, r2
 800668e:	600b      	str	r3, [r1, #0]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40023c00 	.word	0x40023c00

080066a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <FLASH_Program_Word+0x40>)
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	4a0c      	ldr	r2, [pc, #48]	; (80066e0 <FLASH_Program_Word+0x40>)
 80066b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80066b6:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <FLASH_Program_Word+0x40>)
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <FLASH_Program_Word+0x40>)
 80066bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80066c2:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <FLASH_Program_Word+0x40>)
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	4a06      	ldr	r2, [pc, #24]	; (80066e0 <FLASH_Program_Word+0x40>)
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	601a      	str	r2, [r3, #0]
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40023c00 	.word	0x40023c00

080066e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066f0:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <FLASH_Program_HalfWord+0x44>)
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	4a0c      	ldr	r2, [pc, #48]	; (8006728 <FLASH_Program_HalfWord+0x44>)
 80066f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <FLASH_Program_HalfWord+0x44>)
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	4a09      	ldr	r2, [pc, #36]	; (8006728 <FLASH_Program_HalfWord+0x44>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <FLASH_Program_HalfWord+0x44>)
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	4a06      	ldr	r2, [pc, #24]	; (8006728 <FLASH_Program_HalfWord+0x44>)
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	887a      	ldrh	r2, [r7, #2]
 8006718:	801a      	strh	r2, [r3, #0]
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40023c00 	.word	0x40023c00

0800672c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <FLASH_Program_Byte+0x40>)
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	4a0b      	ldr	r2, [pc, #44]	; (800676c <FLASH_Program_Byte+0x40>)
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <FLASH_Program_Byte+0x40>)
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <FLASH_Program_Byte+0x40>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800674c:	4b07      	ldr	r3, [pc, #28]	; (800676c <FLASH_Program_Byte+0x40>)
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	4a06      	ldr	r2, [pc, #24]	; (800676c <FLASH_Program_Byte+0x40>)
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	701a      	strb	r2, [r3, #0]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40023c00 	.word	0x40023c00

08006770 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006774:	4b27      	ldr	r3, [pc, #156]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006780:	4b25      	ldr	r3, [pc, #148]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f043 0310 	orr.w	r3, r3, #16
 8006788:	4a23      	ldr	r2, [pc, #140]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 800678a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800678c:	4b21      	ldr	r3, [pc, #132]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 800678e:	2210      	movs	r2, #16
 8006790:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006792:	4b20      	ldr	r3, [pc, #128]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800679e:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f043 0308 	orr.w	r3, r3, #8
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 80067a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80067aa:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 80067ac:	2220      	movs	r2, #32
 80067ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80067b0:	4b18      	ldr	r3, [pc, #96]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f043 0304 	orr.w	r3, r3, #4
 80067c4:	4a14      	ldr	r2, [pc, #80]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 80067c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80067c8:	4b12      	ldr	r3, [pc, #72]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 80067ca:	2240      	movs	r2, #64	; 0x40
 80067cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80067ce:	4b11      	ldr	r3, [pc, #68]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d008      	beq.n	80067ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80067da:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f043 0302 	orr.w	r3, r3, #2
 80067e2:	4a0d      	ldr	r2, [pc, #52]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 80067e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 80067e8:	2280      	movs	r2, #128	; 0x80
 80067ea:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80067ec:	4b09      	ldr	r3, [pc, #36]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	4a05      	ldr	r2, [pc, #20]	; (8006818 <FLASH_SetErrorCode+0xa8>)
 8006802:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006804:	4b03      	ldr	r3, [pc, #12]	; (8006814 <FLASH_SetErrorCode+0xa4>)
 8006806:	2202      	movs	r2, #2
 8006808:	60da      	str	r2, [r3, #12]
  }
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	40023c00 	.word	0x40023c00
 8006818:	20005244 	.word	0x20005244

0800681c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800682e:	4b31      	ldr	r3, [pc, #196]	; (80068f4 <HAL_FLASHEx_Erase+0xd8>)
 8006830:	7e1b      	ldrb	r3, [r3, #24]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <HAL_FLASHEx_Erase+0x1e>
 8006836:	2302      	movs	r3, #2
 8006838:	e058      	b.n	80068ec <HAL_FLASHEx_Erase+0xd0>
 800683a:	4b2e      	ldr	r3, [pc, #184]	; (80068f4 <HAL_FLASHEx_Erase+0xd8>)
 800683c:	2201      	movs	r2, #1
 800683e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006840:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006844:	f7ff feba 	bl	80065bc <FLASH_WaitForLastOperation>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d148      	bne.n	80068e4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d115      	bne.n	800688e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f000 f844 	bl	80068fc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006874:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006878:	f7ff fea0 	bl	80065bc <FLASH_WaitForLastOperation>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006880:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <HAL_FLASHEx_Erase+0xdc>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	4a1c      	ldr	r2, [pc, #112]	; (80068f8 <HAL_FLASHEx_Erase+0xdc>)
 8006886:	f023 0304 	bic.w	r3, r3, #4
 800688a:	6113      	str	r3, [r2, #16]
 800688c:	e028      	b.n	80068e0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	60bb      	str	r3, [r7, #8]
 8006894:	e01c      	b.n	80068d0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	4619      	mov	r1, r3
 800689e:	68b8      	ldr	r0, [r7, #8]
 80068a0:	f000 f850 	bl	8006944 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068a8:	f7ff fe88 	bl	80065bc <FLASH_WaitForLastOperation>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80068b0:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <HAL_FLASHEx_Erase+0xdc>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	4a10      	ldr	r2, [pc, #64]	; (80068f8 <HAL_FLASHEx_Erase+0xdc>)
 80068b6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80068ba:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	601a      	str	r2, [r3, #0]
          break;
 80068c8:	e00a      	b.n	80068e0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	3301      	adds	r3, #1
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d3da      	bcc.n	8006896 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80068e0:	f000 f878 	bl	80069d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068e4:	4b03      	ldr	r3, [pc, #12]	; (80068f4 <HAL_FLASHEx_Erase+0xd8>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	761a      	strb	r2, [r3, #24]

  return status;
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20005244 	.word	0x20005244
 80068f8:	40023c00 	.word	0x40023c00

080068fc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	6039      	str	r1, [r7, #0]
 8006906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006908:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <FLASH_MassErase+0x44>)
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	4a0c      	ldr	r2, [pc, #48]	; (8006940 <FLASH_MassErase+0x44>)
 800690e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006912:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006914:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <FLASH_MassErase+0x44>)
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <FLASH_MassErase+0x44>)
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <FLASH_MassErase+0x44>)
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	4313      	orrs	r3, r2
 800692a:	4a05      	ldr	r2, [pc, #20]	; (8006940 <FLASH_MassErase+0x44>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006930:	6113      	str	r3, [r2, #16]
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40023c00 	.word	0x40023c00

08006944 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e010      	b.n	8006982 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d103      	bne.n	800696e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	e009      	b.n	8006982 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d103      	bne.n	800697c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e002      	b.n	8006982 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800697c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006980:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006982:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	4a12      	ldr	r2, [pc, #72]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800698e:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	490f      	ldr	r1, [pc, #60]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800699a:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	4a0c      	ldr	r2, [pc, #48]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 80069a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80069a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80069a6:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	4313      	orrs	r3, r2
 80069b0:	4a07      	ldr	r2, [pc, #28]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 80069b2:	f043 0302 	orr.w	r3, r3, #2
 80069b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <FLASH_Erase_Sector+0x8c>)
 80069be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c2:	6113      	str	r3, [r2, #16]
}
 80069c4:	bf00      	nop
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	40023c00 	.word	0x40023c00

080069d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80069d8:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <FLASH_FlushCaches+0x88>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d017      	beq.n	8006a14 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80069e4:	4b1d      	ldr	r3, [pc, #116]	; (8006a5c <FLASH_FlushCaches+0x88>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1c      	ldr	r2, [pc, #112]	; (8006a5c <FLASH_FlushCaches+0x88>)
 80069ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80069f0:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <FLASH_FlushCaches+0x88>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <FLASH_FlushCaches+0x88>)
 80069f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	4b17      	ldr	r3, [pc, #92]	; (8006a5c <FLASH_FlushCaches+0x88>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a06:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a08:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a12:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006a14:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006a20:	4b0e      	ldr	r3, [pc, #56]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0d      	ldr	r2, [pc, #52]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a2a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a07      	ldr	r2, [pc, #28]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a42:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a04      	ldr	r2, [pc, #16]	; (8006a5c <FLASH_FlushCaches+0x88>)
 8006a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a4e:	6013      	str	r3, [r2, #0]
  }
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40023c00 	.word	0x40023c00

08006a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b089      	sub	sp, #36	; 0x24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	e16b      	b.n	8006d54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	f040 815a 	bne.w	8006d4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d005      	beq.n	8006ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d130      	bne.n	8006b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	2203      	movs	r2, #3
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	43db      	mvns	r3, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ae8:	2201      	movs	r2, #1
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	4013      	ands	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	091b      	lsrs	r3, r3, #4
 8006afe:	f003 0201 	and.w	r2, r3, #1
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d017      	beq.n	8006b50 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	43db      	mvns	r3, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4013      	ands	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d123      	bne.n	8006ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	08da      	lsrs	r2, r3, #3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3208      	adds	r2, #8
 8006b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	220f      	movs	r2, #15
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	08da      	lsrs	r2, r3, #3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3208      	adds	r2, #8
 8006b9e:	69b9      	ldr	r1, [r7, #24]
 8006ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	2203      	movs	r2, #3
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f003 0203 	and.w	r2, r3, #3
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 80b4 	beq.w	8006d4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	4b60      	ldr	r3, [pc, #384]	; (8006d6c <HAL_GPIO_Init+0x30c>)
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	4a5f      	ldr	r2, [pc, #380]	; (8006d6c <HAL_GPIO_Init+0x30c>)
 8006bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8006bf6:	4b5d      	ldr	r3, [pc, #372]	; (8006d6c <HAL_GPIO_Init+0x30c>)
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c02:	4a5b      	ldr	r2, [pc, #364]	; (8006d70 <HAL_GPIO_Init+0x310>)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	089b      	lsrs	r3, r3, #2
 8006c08:	3302      	adds	r3, #2
 8006c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	220f      	movs	r2, #15
 8006c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	4013      	ands	r3, r2
 8006c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a52      	ldr	r2, [pc, #328]	; (8006d74 <HAL_GPIO_Init+0x314>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d02b      	beq.n	8006c86 <HAL_GPIO_Init+0x226>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a51      	ldr	r2, [pc, #324]	; (8006d78 <HAL_GPIO_Init+0x318>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d025      	beq.n	8006c82 <HAL_GPIO_Init+0x222>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a50      	ldr	r2, [pc, #320]	; (8006d7c <HAL_GPIO_Init+0x31c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01f      	beq.n	8006c7e <HAL_GPIO_Init+0x21e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a4f      	ldr	r2, [pc, #316]	; (8006d80 <HAL_GPIO_Init+0x320>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d019      	beq.n	8006c7a <HAL_GPIO_Init+0x21a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a4e      	ldr	r2, [pc, #312]	; (8006d84 <HAL_GPIO_Init+0x324>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <HAL_GPIO_Init+0x216>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a4d      	ldr	r2, [pc, #308]	; (8006d88 <HAL_GPIO_Init+0x328>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00d      	beq.n	8006c72 <HAL_GPIO_Init+0x212>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a4c      	ldr	r2, [pc, #304]	; (8006d8c <HAL_GPIO_Init+0x32c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d007      	beq.n	8006c6e <HAL_GPIO_Init+0x20e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a4b      	ldr	r2, [pc, #300]	; (8006d90 <HAL_GPIO_Init+0x330>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d101      	bne.n	8006c6a <HAL_GPIO_Init+0x20a>
 8006c66:	2307      	movs	r3, #7
 8006c68:	e00e      	b.n	8006c88 <HAL_GPIO_Init+0x228>
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	e00c      	b.n	8006c88 <HAL_GPIO_Init+0x228>
 8006c6e:	2306      	movs	r3, #6
 8006c70:	e00a      	b.n	8006c88 <HAL_GPIO_Init+0x228>
 8006c72:	2305      	movs	r3, #5
 8006c74:	e008      	b.n	8006c88 <HAL_GPIO_Init+0x228>
 8006c76:	2304      	movs	r3, #4
 8006c78:	e006      	b.n	8006c88 <HAL_GPIO_Init+0x228>
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e004      	b.n	8006c88 <HAL_GPIO_Init+0x228>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e002      	b.n	8006c88 <HAL_GPIO_Init+0x228>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <HAL_GPIO_Init+0x228>
 8006c86:	2300      	movs	r3, #0
 8006c88:	69fa      	ldr	r2, [r7, #28]
 8006c8a:	f002 0203 	and.w	r2, r2, #3
 8006c8e:	0092      	lsls	r2, r2, #2
 8006c90:	4093      	lsls	r3, r2
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c98:	4935      	ldr	r1, [pc, #212]	; (8006d70 <HAL_GPIO_Init+0x310>)
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	089b      	lsrs	r3, r3, #2
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ca6:	4b3b      	ldr	r3, [pc, #236]	; (8006d94 <HAL_GPIO_Init+0x334>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	43db      	mvns	r3, r3
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006cca:	4a32      	ldr	r2, [pc, #200]	; (8006d94 <HAL_GPIO_Init+0x334>)
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006cd0:	4b30      	ldr	r3, [pc, #192]	; (8006d94 <HAL_GPIO_Init+0x334>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006cf4:	4a27      	ldr	r2, [pc, #156]	; (8006d94 <HAL_GPIO_Init+0x334>)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cfa:	4b26      	ldr	r3, [pc, #152]	; (8006d94 <HAL_GPIO_Init+0x334>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4013      	ands	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d1e:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <HAL_GPIO_Init+0x334>)
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d24:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <HAL_GPIO_Init+0x334>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	4013      	ands	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d48:	4a12      	ldr	r2, [pc, #72]	; (8006d94 <HAL_GPIO_Init+0x334>)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	3301      	adds	r3, #1
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	f67f ae90 	bls.w	8006a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	3724      	adds	r7, #36	; 0x24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	40013800 	.word	0x40013800
 8006d74:	40020000 	.word	0x40020000
 8006d78:	40020400 	.word	0x40020400
 8006d7c:	40020800 	.word	0x40020800
 8006d80:	40020c00 	.word	0x40020c00
 8006d84:	40021000 	.word	0x40021000
 8006d88:	40021400 	.word	0x40021400
 8006d8c:	40021800 	.word	0x40021800
 8006d90:	40021c00 	.word	0x40021c00
 8006d94:	40013c00 	.word	0x40013c00

08006d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	807b      	strh	r3, [r7, #2]
 8006da4:	4613      	mov	r3, r2
 8006da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006da8:	787b      	ldrb	r3, [r7, #1]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dae:	887a      	ldrh	r2, [r7, #2]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006db4:	e003      	b.n	8006dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006db6:	887b      	ldrh	r3, [r7, #2]
 8006db8:	041a      	lsls	r2, r3, #16
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	619a      	str	r2, [r3, #24]
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
	...

08006dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e264      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d075      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dea:	4ba3      	ldr	r3, [pc, #652]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 030c 	and.w	r3, r3, #12
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d00c      	beq.n	8006e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006df6:	4ba0      	ldr	r3, [pc, #640]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d112      	bne.n	8006e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e02:	4b9d      	ldr	r3, [pc, #628]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e0e:	d10b      	bne.n	8006e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e10:	4b99      	ldr	r3, [pc, #612]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d05b      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x108>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d157      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e23f      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e30:	d106      	bne.n	8006e40 <HAL_RCC_OscConfig+0x74>
 8006e32:	4b91      	ldr	r3, [pc, #580]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a90      	ldr	r2, [pc, #576]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	e01d      	b.n	8006e7c <HAL_RCC_OscConfig+0xb0>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e48:	d10c      	bne.n	8006e64 <HAL_RCC_OscConfig+0x98>
 8006e4a:	4b8b      	ldr	r3, [pc, #556]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a8a      	ldr	r2, [pc, #552]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	4b88      	ldr	r3, [pc, #544]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a87      	ldr	r2, [pc, #540]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	e00b      	b.n	8006e7c <HAL_RCC_OscConfig+0xb0>
 8006e64:	4b84      	ldr	r3, [pc, #528]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a83      	ldr	r2, [pc, #524]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	4b81      	ldr	r3, [pc, #516]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a80      	ldr	r2, [pc, #512]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d013      	beq.n	8006eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e84:	f7fd fa30 	bl	80042e8 <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e8c:	f7fd fa2c 	bl	80042e8 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b64      	cmp	r3, #100	; 0x64
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e204      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9e:	4b76      	ldr	r3, [pc, #472]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0xc0>
 8006eaa:	e014      	b.n	8006ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eac:	f7fd fa1c 	bl	80042e8 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eb4:	f7fd fa18 	bl	80042e8 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b64      	cmp	r3, #100	; 0x64
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e1f0      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ec6:	4b6c      	ldr	r3, [pc, #432]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f0      	bne.n	8006eb4 <HAL_RCC_OscConfig+0xe8>
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d063      	beq.n	8006faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ee2:	4b65      	ldr	r3, [pc, #404]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eee:	4b62      	ldr	r3, [pc, #392]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d11c      	bne.n	8006f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006efa:	4b5f      	ldr	r3, [pc, #380]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d116      	bne.n	8006f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f06:	4b5c      	ldr	r3, [pc, #368]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_RCC_OscConfig+0x152>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d001      	beq.n	8006f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e1c4      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f1e:	4b56      	ldr	r3, [pc, #344]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4952      	ldr	r1, [pc, #328]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f32:	e03a      	b.n	8006faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d020      	beq.n	8006f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f3c:	4b4f      	ldr	r3, [pc, #316]	; (800707c <HAL_RCC_OscConfig+0x2b0>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f42:	f7fd f9d1 	bl	80042e8 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f4a:	f7fd f9cd 	bl	80042e8 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e1a5      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f5c:	4b46      	ldr	r3, [pc, #280]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f68:	4b43      	ldr	r3, [pc, #268]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	4940      	ldr	r1, [pc, #256]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]
 8006f7c:	e015      	b.n	8006faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f7e:	4b3f      	ldr	r3, [pc, #252]	; (800707c <HAL_RCC_OscConfig+0x2b0>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fd f9b0 	bl	80042e8 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f8c:	f7fd f9ac 	bl	80042e8 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e184      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f9e:	4b36      	ldr	r3, [pc, #216]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d030      	beq.n	8007018 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d016      	beq.n	8006fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fbe:	4b30      	ldr	r3, [pc, #192]	; (8007080 <HAL_RCC_OscConfig+0x2b4>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc4:	f7fd f990 	bl	80042e8 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fcc:	f7fd f98c 	bl	80042e8 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e164      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fde:	4b26      	ldr	r3, [pc, #152]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8006fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f0      	beq.n	8006fcc <HAL_RCC_OscConfig+0x200>
 8006fea:	e015      	b.n	8007018 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fec:	4b24      	ldr	r3, [pc, #144]	; (8007080 <HAL_RCC_OscConfig+0x2b4>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff2:	f7fd f979 	bl	80042e8 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ffa:	f7fd f975 	bl	80042e8 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e14d      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800700c:	4b1a      	ldr	r3, [pc, #104]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 800700e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f0      	bne.n	8006ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80a0 	beq.w	8007166 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10f      	bne.n	8007056 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	4a0e      	ldr	r2, [pc, #56]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8007040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007044:	6413      	str	r3, [r2, #64]	; 0x40
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <HAL_RCC_OscConfig+0x2ac>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007056:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <HAL_RCC_OscConfig+0x2b8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705e:	2b00      	cmp	r3, #0
 8007060:	d121      	bne.n	80070a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007062:	4b08      	ldr	r3, [pc, #32]	; (8007084 <HAL_RCC_OscConfig+0x2b8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a07      	ldr	r2, [pc, #28]	; (8007084 <HAL_RCC_OscConfig+0x2b8>)
 8007068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800706c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800706e:	f7fd f93b 	bl	80042e8 <HAL_GetTick>
 8007072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007074:	e011      	b.n	800709a <HAL_RCC_OscConfig+0x2ce>
 8007076:	bf00      	nop
 8007078:	40023800 	.word	0x40023800
 800707c:	42470000 	.word	0x42470000
 8007080:	42470e80 	.word	0x42470e80
 8007084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007088:	f7fd f92e 	bl	80042e8 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e106      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709a:	4b85      	ldr	r3, [pc, #532]	; (80072b0 <HAL_RCC_OscConfig+0x4e4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f0      	beq.n	8007088 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d106      	bne.n	80070bc <HAL_RCC_OscConfig+0x2f0>
 80070ae:	4b81      	ldr	r3, [pc, #516]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	4a80      	ldr	r2, [pc, #512]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	6713      	str	r3, [r2, #112]	; 0x70
 80070ba:	e01c      	b.n	80070f6 <HAL_RCC_OscConfig+0x32a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	d10c      	bne.n	80070de <HAL_RCC_OscConfig+0x312>
 80070c4:	4b7b      	ldr	r3, [pc, #492]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c8:	4a7a      	ldr	r2, [pc, #488]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070ca:	f043 0304 	orr.w	r3, r3, #4
 80070ce:	6713      	str	r3, [r2, #112]	; 0x70
 80070d0:	4b78      	ldr	r3, [pc, #480]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d4:	4a77      	ldr	r2, [pc, #476]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	6713      	str	r3, [r2, #112]	; 0x70
 80070dc:	e00b      	b.n	80070f6 <HAL_RCC_OscConfig+0x32a>
 80070de:	4b75      	ldr	r3, [pc, #468]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	4a74      	ldr	r2, [pc, #464]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	6713      	str	r3, [r2, #112]	; 0x70
 80070ea:	4b72      	ldr	r3, [pc, #456]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	4a71      	ldr	r2, [pc, #452]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80070f0:	f023 0304 	bic.w	r3, r3, #4
 80070f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d015      	beq.n	800712a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fe:	f7fd f8f3 	bl	80042e8 <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007104:	e00a      	b.n	800711c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007106:	f7fd f8ef 	bl	80042e8 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f241 3288 	movw	r2, #5000	; 0x1388
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e0c5      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711c:	4b65      	ldr	r3, [pc, #404]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 800711e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0ee      	beq.n	8007106 <HAL_RCC_OscConfig+0x33a>
 8007128:	e014      	b.n	8007154 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712a:	f7fd f8dd 	bl	80042e8 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007130:	e00a      	b.n	8007148 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007132:	f7fd f8d9 	bl	80042e8 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e0af      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007148:	4b5a      	ldr	r3, [pc, #360]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 800714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ee      	bne.n	8007132 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800715a:	4b56      	ldr	r3, [pc, #344]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	4a55      	ldr	r2, [pc, #340]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 8007160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 809b 	beq.w	80072a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007170:	4b50      	ldr	r3, [pc, #320]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 030c 	and.w	r3, r3, #12
 8007178:	2b08      	cmp	r3, #8
 800717a:	d05c      	beq.n	8007236 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d141      	bne.n	8007208 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007184:	4b4c      	ldr	r3, [pc, #304]	; (80072b8 <HAL_RCC_OscConfig+0x4ec>)
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718a:	f7fd f8ad 	bl	80042e8 <HAL_GetTick>
 800718e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007192:	f7fd f8a9 	bl	80042e8 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e081      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071a4:	4b43      	ldr	r3, [pc, #268]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f0      	bne.n	8007192 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	69da      	ldr	r2, [r3, #28]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	431a      	orrs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	019b      	lsls	r3, r3, #6
 80071c0:	431a      	orrs	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	3b01      	subs	r3, #1
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	061b      	lsls	r3, r3, #24
 80071d4:	4937      	ldr	r1, [pc, #220]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071da:	4b37      	ldr	r3, [pc, #220]	; (80072b8 <HAL_RCC_OscConfig+0x4ec>)
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e0:	f7fd f882 	bl	80042e8 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071e8:	f7fd f87e 	bl	80042e8 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e056      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071fa:	4b2e      	ldr	r3, [pc, #184]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0x41c>
 8007206:	e04e      	b.n	80072a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007208:	4b2b      	ldr	r3, [pc, #172]	; (80072b8 <HAL_RCC_OscConfig+0x4ec>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800720e:	f7fd f86b 	bl	80042e8 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007216:	f7fd f867 	bl	80042e8 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e03f      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007228:	4b22      	ldr	r3, [pc, #136]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1f0      	bne.n	8007216 <HAL_RCC_OscConfig+0x44a>
 8007234:	e037      	b.n	80072a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e032      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007242:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <HAL_RCC_OscConfig+0x4e8>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d028      	beq.n	80072a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d121      	bne.n	80072a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007268:	429a      	cmp	r2, r3
 800726a:	d11a      	bne.n	80072a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007272:	4013      	ands	r3, r2
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007278:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800727a:	4293      	cmp	r3, r2
 800727c:	d111      	bne.n	80072a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	3b01      	subs	r3, #1
 800728c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800728e:	429a      	cmp	r2, r3
 8007290:	d107      	bne.n	80072a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800729e:	429a      	cmp	r2, r3
 80072a0:	d001      	beq.n	80072a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40007000 	.word	0x40007000
 80072b4:	40023800 	.word	0x40023800
 80072b8:	42470060 	.word	0x42470060

080072bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0cc      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072d0:	4b68      	ldr	r3, [pc, #416]	; (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d90c      	bls.n	80072f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072de:	4b65      	ldr	r3, [pc, #404]	; (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e6:	4b63      	ldr	r3, [pc, #396]	; (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0b8      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d020      	beq.n	8007346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007310:	4b59      	ldr	r3, [pc, #356]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	4a58      	ldr	r2, [pc, #352]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800731a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007328:	4b53      	ldr	r3, [pc, #332]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4a52      	ldr	r2, [pc, #328]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007334:	4b50      	ldr	r3, [pc, #320]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	494d      	ldr	r1, [pc, #308]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007342:	4313      	orrs	r3, r2
 8007344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d044      	beq.n	80073dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d107      	bne.n	800736a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735a:	4b47      	ldr	r3, [pc, #284]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d119      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e07f      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d003      	beq.n	800737a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007376:	2b03      	cmp	r3, #3
 8007378:	d107      	bne.n	800738a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737a:	4b3f      	ldr	r3, [pc, #252]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e06f      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800738a:	4b3b      	ldr	r3, [pc, #236]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e067      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800739a:	4b37      	ldr	r3, [pc, #220]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f023 0203 	bic.w	r2, r3, #3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4934      	ldr	r1, [pc, #208]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073ac:	f7fc ff9c 	bl	80042e8 <HAL_GetTick>
 80073b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b2:	e00a      	b.n	80073ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073b4:	f7fc ff98 	bl	80042e8 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e04f      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ca:	4b2b      	ldr	r3, [pc, #172]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 020c 	and.w	r2, r3, #12
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	429a      	cmp	r2, r3
 80073da:	d1eb      	bne.n	80073b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073dc:	4b25      	ldr	r3, [pc, #148]	; (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d20c      	bcs.n	8007404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ea:	4b22      	ldr	r3, [pc, #136]	; (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f2:	4b20      	ldr	r3, [pc, #128]	; (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d001      	beq.n	8007404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e032      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007410:	4b19      	ldr	r3, [pc, #100]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4916      	ldr	r1, [pc, #88]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800741e:	4313      	orrs	r3, r2
 8007420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d009      	beq.n	8007442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	490e      	ldr	r1, [pc, #56]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800743e:	4313      	orrs	r3, r2
 8007440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007442:	f000 f821 	bl	8007488 <HAL_RCC_GetSysClockFreq>
 8007446:	4602      	mov	r2, r0
 8007448:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	091b      	lsrs	r3, r3, #4
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	490a      	ldr	r1, [pc, #40]	; (800747c <HAL_RCC_ClockConfig+0x1c0>)
 8007454:	5ccb      	ldrb	r3, [r1, r3]
 8007456:	fa22 f303 	lsr.w	r3, r2, r3
 800745a:	4a09      	ldr	r2, [pc, #36]	; (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800745c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <HAL_RCC_ClockConfig+0x1c8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f7fc f9e0 	bl	8003828 <HAL_InitTick>

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40023c00 	.word	0x40023c00
 8007478:	40023800 	.word	0x40023800
 800747c:	0800d130 	.word	0x0800d130
 8007480:	2000000c 	.word	0x2000000c
 8007484:	20000010 	.word	0x20000010

08007488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	2300      	movs	r3, #0
 800749a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074a0:	4b67      	ldr	r3, [pc, #412]	; (8007640 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 030c 	and.w	r3, r3, #12
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d00d      	beq.n	80074c8 <HAL_RCC_GetSysClockFreq+0x40>
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	f200 80bd 	bhi.w	800762c <HAL_RCC_GetSysClockFreq+0x1a4>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <HAL_RCC_GetSysClockFreq+0x34>
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d003      	beq.n	80074c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80074ba:	e0b7      	b.n	800762c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074bc:	4b61      	ldr	r3, [pc, #388]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80074be:	60bb      	str	r3, [r7, #8]
       break;
 80074c0:	e0b7      	b.n	8007632 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074c2:	4b61      	ldr	r3, [pc, #388]	; (8007648 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80074c4:	60bb      	str	r3, [r7, #8]
      break;
 80074c6:	e0b4      	b.n	8007632 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074c8:	4b5d      	ldr	r3, [pc, #372]	; (8007640 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074d2:	4b5b      	ldr	r3, [pc, #364]	; (8007640 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d04d      	beq.n	800757a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074de:	4b58      	ldr	r3, [pc, #352]	; (8007640 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	099b      	lsrs	r3, r3, #6
 80074e4:	461a      	mov	r2, r3
 80074e6:	f04f 0300 	mov.w	r3, #0
 80074ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074ee:	f04f 0100 	mov.w	r1, #0
 80074f2:	ea02 0800 	and.w	r8, r2, r0
 80074f6:	ea03 0901 	and.w	r9, r3, r1
 80074fa:	4640      	mov	r0, r8
 80074fc:	4649      	mov	r1, r9
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	f04f 0300 	mov.w	r3, #0
 8007506:	014b      	lsls	r3, r1, #5
 8007508:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800750c:	0142      	lsls	r2, r0, #5
 800750e:	4610      	mov	r0, r2
 8007510:	4619      	mov	r1, r3
 8007512:	ebb0 0008 	subs.w	r0, r0, r8
 8007516:	eb61 0109 	sbc.w	r1, r1, r9
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	018b      	lsls	r3, r1, #6
 8007524:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007528:	0182      	lsls	r2, r0, #6
 800752a:	1a12      	subs	r2, r2, r0
 800752c:	eb63 0301 	sbc.w	r3, r3, r1
 8007530:	f04f 0000 	mov.w	r0, #0
 8007534:	f04f 0100 	mov.w	r1, #0
 8007538:	00d9      	lsls	r1, r3, #3
 800753a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800753e:	00d0      	lsls	r0, r2, #3
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	eb12 0208 	adds.w	r2, r2, r8
 8007548:	eb43 0309 	adc.w	r3, r3, r9
 800754c:	f04f 0000 	mov.w	r0, #0
 8007550:	f04f 0100 	mov.w	r1, #0
 8007554:	0259      	lsls	r1, r3, #9
 8007556:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800755a:	0250      	lsls	r0, r2, #9
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4610      	mov	r0, r2
 8007562:	4619      	mov	r1, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	461a      	mov	r2, r3
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	f7f9 faec 	bl	8000b48 <__aeabi_uldivmod>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4613      	mov	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e04a      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800757a:	4b31      	ldr	r3, [pc, #196]	; (8007640 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	099b      	lsrs	r3, r3, #6
 8007580:	461a      	mov	r2, r3
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	f240 10ff 	movw	r0, #511	; 0x1ff
 800758a:	f04f 0100 	mov.w	r1, #0
 800758e:	ea02 0400 	and.w	r4, r2, r0
 8007592:	ea03 0501 	and.w	r5, r3, r1
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	f04f 0300 	mov.w	r3, #0
 80075a2:	014b      	lsls	r3, r1, #5
 80075a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80075a8:	0142      	lsls	r2, r0, #5
 80075aa:	4610      	mov	r0, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	1b00      	subs	r0, r0, r4
 80075b0:	eb61 0105 	sbc.w	r1, r1, r5
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	018b      	lsls	r3, r1, #6
 80075be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075c2:	0182      	lsls	r2, r0, #6
 80075c4:	1a12      	subs	r2, r2, r0
 80075c6:	eb63 0301 	sbc.w	r3, r3, r1
 80075ca:	f04f 0000 	mov.w	r0, #0
 80075ce:	f04f 0100 	mov.w	r1, #0
 80075d2:	00d9      	lsls	r1, r3, #3
 80075d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075d8:	00d0      	lsls	r0, r2, #3
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	1912      	adds	r2, r2, r4
 80075e0:	eb45 0303 	adc.w	r3, r5, r3
 80075e4:	f04f 0000 	mov.w	r0, #0
 80075e8:	f04f 0100 	mov.w	r1, #0
 80075ec:	0299      	lsls	r1, r3, #10
 80075ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80075f2:	0290      	lsls	r0, r2, #10
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4610      	mov	r0, r2
 80075fa:	4619      	mov	r1, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	461a      	mov	r2, r3
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	f7f9 faa0 	bl	8000b48 <__aeabi_uldivmod>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4613      	mov	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	3301      	adds	r3, #1
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	fbb2 f3f3 	udiv	r3, r2, r3
 8007628:	60bb      	str	r3, [r7, #8]
      break;
 800762a:	e002      	b.n	8007632 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800762e:	60bb      	str	r3, [r7, #8]
      break;
 8007630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007632:	68bb      	ldr	r3, [r7, #8]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800763e:	bf00      	nop
 8007640:	40023800 	.word	0x40023800
 8007644:	00f42400 	.word	0x00f42400
 8007648:	007a1200 	.word	0x007a1200

0800764c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007650:	4b03      	ldr	r3, [pc, #12]	; (8007660 <HAL_RCC_GetHCLKFreq+0x14>)
 8007652:	681b      	ldr	r3, [r3, #0]
}
 8007654:	4618      	mov	r0, r3
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	2000000c 	.word	0x2000000c

08007664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007668:	f7ff fff0 	bl	800764c <HAL_RCC_GetHCLKFreq>
 800766c:	4602      	mov	r2, r0
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	0a9b      	lsrs	r3, r3, #10
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	4903      	ldr	r1, [pc, #12]	; (8007688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800767a:	5ccb      	ldrb	r3, [r1, r3]
 800767c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007680:	4618      	mov	r0, r3
 8007682:	bd80      	pop	{r7, pc}
 8007684:	40023800 	.word	0x40023800
 8007688:	0800d140 	.word	0x0800d140

0800768c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007690:	f7ff ffdc 	bl	800764c <HAL_RCC_GetHCLKFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	0b5b      	lsrs	r3, r3, #13
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	4903      	ldr	r1, [pc, #12]	; (80076b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40023800 	.word	0x40023800
 80076b0:	0800d140 	.word	0x0800d140

080076b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	220f      	movs	r2, #15
 80076c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076c4:	4b12      	ldr	r3, [pc, #72]	; (8007710 <HAL_RCC_GetClockConfig+0x5c>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0203 	and.w	r2, r3, #3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <HAL_RCC_GetClockConfig+0x5c>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <HAL_RCC_GetClockConfig+0x5c>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80076e8:	4b09      	ldr	r3, [pc, #36]	; (8007710 <HAL_RCC_GetClockConfig+0x5c>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	08db      	lsrs	r3, r3, #3
 80076ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076f6:	4b07      	ldr	r3, [pc, #28]	; (8007714 <HAL_RCC_GetClockConfig+0x60>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0207 	and.w	r2, r3, #7
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	601a      	str	r2, [r3, #0]
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	40023800 	.word	0x40023800
 8007714:	40023c00 	.word	0x40023c00

08007718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e041      	b.n	80077ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fb fe2c 	bl	800339c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f000 fbaa 	bl	8007eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d001      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e04e      	b.n	800786e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a23      	ldr	r2, [pc, #140]	; (800787c <HAL_TIM_Base_Start_IT+0xc4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d022      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x80>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fa:	d01d      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x80>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a1f      	ldr	r2, [pc, #124]	; (8007880 <HAL_TIM_Base_Start_IT+0xc8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d018      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x80>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a1e      	ldr	r2, [pc, #120]	; (8007884 <HAL_TIM_Base_Start_IT+0xcc>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d013      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x80>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1c      	ldr	r2, [pc, #112]	; (8007888 <HAL_TIM_Base_Start_IT+0xd0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00e      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x80>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a1b      	ldr	r2, [pc, #108]	; (800788c <HAL_TIM_Base_Start_IT+0xd4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d009      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x80>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a19      	ldr	r2, [pc, #100]	; (8007890 <HAL_TIM_Base_Start_IT+0xd8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d004      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x80>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a18      	ldr	r2, [pc, #96]	; (8007894 <HAL_TIM_Base_Start_IT+0xdc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d111      	bne.n	800785c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b06      	cmp	r3, #6
 8007848:	d010      	beq.n	800786c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f042 0201 	orr.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800785a:	e007      	b.n	800786c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0201 	orr.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40010000 	.word	0x40010000
 8007880:	40000400 	.word	0x40000400
 8007884:	40000800 	.word	0x40000800
 8007888:	40000c00 	.word	0x40000c00
 800788c:	40010400 	.word	0x40010400
 8007890:	40014000 	.word	0x40014000
 8007894:	40001800 	.word	0x40001800

08007898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e041      	b.n	800792e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f839 	bl	8007936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f000 faea 	bl	8007eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d122      	bne.n	80079a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b02      	cmp	r3, #2
 800796c:	d11b      	bne.n	80079a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f06f 0202 	mvn.w	r2, #2
 8007976:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa71 	bl	8007e74 <HAL_TIM_IC_CaptureCallback>
 8007992:	e005      	b.n	80079a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fa63 	bl	8007e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa74 	bl	8007e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d122      	bne.n	80079fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d11b      	bne.n	80079fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f06f 0204 	mvn.w	r2, #4
 80079ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa47 	bl	8007e74 <HAL_TIM_IC_CaptureCallback>
 80079e6:	e005      	b.n	80079f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa39 	bl	8007e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa4a 	bl	8007e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d122      	bne.n	8007a4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d11b      	bne.n	8007a4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f06f 0208 	mvn.w	r2, #8
 8007a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2204      	movs	r2, #4
 8007a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa1d 	bl	8007e74 <HAL_TIM_IC_CaptureCallback>
 8007a3a:	e005      	b.n	8007a48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa0f 	bl	8007e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa20 	bl	8007e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	2b10      	cmp	r3, #16
 8007a5a:	d122      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 0310 	and.w	r3, r3, #16
 8007a66:	2b10      	cmp	r3, #16
 8007a68:	d11b      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f06f 0210 	mvn.w	r2, #16
 8007a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2208      	movs	r2, #8
 8007a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f9f3 	bl	8007e74 <HAL_TIM_IC_CaptureCallback>
 8007a8e:	e005      	b.n	8007a9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f9e5 	bl	8007e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f9f6 	bl	8007e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d10e      	bne.n	8007ace <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d107      	bne.n	8007ace <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f06f 0201 	mvn.w	r2, #1
 8007ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7fa ff3f 	bl	800294c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad8:	2b80      	cmp	r3, #128	; 0x80
 8007ada:	d10e      	bne.n	8007afa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae6:	2b80      	cmp	r3, #128	; 0x80
 8007ae8:	d107      	bne.n	8007afa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fd9d 	bl	8008634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d10e      	bne.n	8007b26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b40      	cmp	r3, #64	; 0x40
 8007b14:	d107      	bne.n	8007b26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f9bb 	bl	8007e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d10e      	bne.n	8007b52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d107      	bne.n	8007b52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f06f 0220 	mvn.w	r2, #32
 8007b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fd67 	bl	8008620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e0ac      	b.n	8007cd0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b0c      	cmp	r3, #12
 8007b82:	f200 809f 	bhi.w	8007cc4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007bc1 	.word	0x08007bc1
 8007b90:	08007cc5 	.word	0x08007cc5
 8007b94:	08007cc5 	.word	0x08007cc5
 8007b98:	08007cc5 	.word	0x08007cc5
 8007b9c:	08007c01 	.word	0x08007c01
 8007ba0:	08007cc5 	.word	0x08007cc5
 8007ba4:	08007cc5 	.word	0x08007cc5
 8007ba8:	08007cc5 	.word	0x08007cc5
 8007bac:	08007c43 	.word	0x08007c43
 8007bb0:	08007cc5 	.word	0x08007cc5
 8007bb4:	08007cc5 	.word	0x08007cc5
 8007bb8:	08007cc5 	.word	0x08007cc5
 8007bbc:	08007c83 	.word	0x08007c83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68b9      	ldr	r1, [r7, #8]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fa12 	bl	8007ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0208 	orr.w	r2, r2, #8
 8007bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0204 	bic.w	r2, r2, #4
 8007bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6999      	ldr	r1, [r3, #24]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	619a      	str	r2, [r3, #24]
      break;
 8007bfe:	e062      	b.n	8007cc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fa62 	bl	80080d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6999      	ldr	r1, [r3, #24]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	021a      	lsls	r2, r3, #8
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	619a      	str	r2, [r3, #24]
      break;
 8007c40:	e041      	b.n	8007cc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fab7 	bl	80081bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69da      	ldr	r2, [r3, #28]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f042 0208 	orr.w	r2, r2, #8
 8007c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69da      	ldr	r2, [r3, #28]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0204 	bic.w	r2, r2, #4
 8007c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69d9      	ldr	r1, [r3, #28]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	61da      	str	r2, [r3, #28]
      break;
 8007c80:	e021      	b.n	8007cc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fb0b 	bl	80082a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69d9      	ldr	r1, [r3, #28]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	021a      	lsls	r2, r3, #8
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	61da      	str	r2, [r3, #28]
      break;
 8007cc2:	e000      	b.n	8007cc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007cc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_TIM_ConfigClockSource+0x18>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e0b3      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x180>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d28:	d03e      	beq.n	8007da8 <HAL_TIM_ConfigClockSource+0xd0>
 8007d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2e:	f200 8087 	bhi.w	8007e40 <HAL_TIM_ConfigClockSource+0x168>
 8007d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d36:	f000 8085 	beq.w	8007e44 <HAL_TIM_ConfigClockSource+0x16c>
 8007d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3e:	d87f      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x168>
 8007d40:	2b70      	cmp	r3, #112	; 0x70
 8007d42:	d01a      	beq.n	8007d7a <HAL_TIM_ConfigClockSource+0xa2>
 8007d44:	2b70      	cmp	r3, #112	; 0x70
 8007d46:	d87b      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x168>
 8007d48:	2b60      	cmp	r3, #96	; 0x60
 8007d4a:	d050      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x116>
 8007d4c:	2b60      	cmp	r3, #96	; 0x60
 8007d4e:	d877      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x168>
 8007d50:	2b50      	cmp	r3, #80	; 0x50
 8007d52:	d03c      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0xf6>
 8007d54:	2b50      	cmp	r3, #80	; 0x50
 8007d56:	d873      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x168>
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d058      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x136>
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	d86f      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x168>
 8007d60:	2b30      	cmp	r3, #48	; 0x30
 8007d62:	d064      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x156>
 8007d64:	2b30      	cmp	r3, #48	; 0x30
 8007d66:	d86b      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x168>
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d060      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x156>
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d867      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x168>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d05c      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x156>
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	d05a      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d78:	e062      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	6899      	ldr	r1, [r3, #8]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f000 fb5b 	bl	8008444 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	609a      	str	r2, [r3, #8]
      break;
 8007da6:	e04e      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	6899      	ldr	r1, [r3, #8]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f000 fb44 	bl	8008444 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dca:	609a      	str	r2, [r3, #8]
      break;
 8007dcc:	e03b      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6859      	ldr	r1, [r3, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f000 fab8 	bl	8008350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2150      	movs	r1, #80	; 0x50
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fb11 	bl	800840e <TIM_ITRx_SetConfig>
      break;
 8007dec:	e02b      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6859      	ldr	r1, [r3, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f000 fad7 	bl	80083ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2160      	movs	r1, #96	; 0x60
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fb01 	bl	800840e <TIM_ITRx_SetConfig>
      break;
 8007e0c:	e01b      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	6859      	ldr	r1, [r3, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f000 fa98 	bl	8008350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2140      	movs	r1, #64	; 0x40
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 faf1 	bl	800840e <TIM_ITRx_SetConfig>
      break;
 8007e2c:	e00b      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f000 fae8 	bl	800840e <TIM_ITRx_SetConfig>
        break;
 8007e3e:	e002      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a40      	ldr	r2, [pc, #256]	; (8007fc4 <TIM_Base_SetConfig+0x114>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d013      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ece:	d00f      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a3d      	ldr	r2, [pc, #244]	; (8007fc8 <TIM_Base_SetConfig+0x118>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a3c      	ldr	r2, [pc, #240]	; (8007fcc <TIM_Base_SetConfig+0x11c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d007      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a3b      	ldr	r2, [pc, #236]	; (8007fd0 <TIM_Base_SetConfig+0x120>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a3a      	ldr	r2, [pc, #232]	; (8007fd4 <TIM_Base_SetConfig+0x124>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d108      	bne.n	8007f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a2f      	ldr	r2, [pc, #188]	; (8007fc4 <TIM_Base_SetConfig+0x114>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d02b      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f10:	d027      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a2c      	ldr	r2, [pc, #176]	; (8007fc8 <TIM_Base_SetConfig+0x118>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d023      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a2b      	ldr	r2, [pc, #172]	; (8007fcc <TIM_Base_SetConfig+0x11c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01f      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a2a      	ldr	r2, [pc, #168]	; (8007fd0 <TIM_Base_SetConfig+0x120>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d01b      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a29      	ldr	r2, [pc, #164]	; (8007fd4 <TIM_Base_SetConfig+0x124>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d017      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a28      	ldr	r2, [pc, #160]	; (8007fd8 <TIM_Base_SetConfig+0x128>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d013      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a27      	ldr	r2, [pc, #156]	; (8007fdc <TIM_Base_SetConfig+0x12c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00f      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a26      	ldr	r2, [pc, #152]	; (8007fe0 <TIM_Base_SetConfig+0x130>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00b      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a25      	ldr	r2, [pc, #148]	; (8007fe4 <TIM_Base_SetConfig+0x134>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d007      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a24      	ldr	r2, [pc, #144]	; (8007fe8 <TIM_Base_SetConfig+0x138>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d003      	beq.n	8007f62 <TIM_Base_SetConfig+0xb2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a23      	ldr	r2, [pc, #140]	; (8007fec <TIM_Base_SetConfig+0x13c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d108      	bne.n	8007f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a0a      	ldr	r2, [pc, #40]	; (8007fc4 <TIM_Base_SetConfig+0x114>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d003      	beq.n	8007fa8 <TIM_Base_SetConfig+0xf8>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a0c      	ldr	r2, [pc, #48]	; (8007fd4 <TIM_Base_SetConfig+0x124>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d103      	bne.n	8007fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	615a      	str	r2, [r3, #20]
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40010000 	.word	0x40010000
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40010400 	.word	0x40010400
 8007fd8:	40014000 	.word	0x40014000
 8007fdc:	40014400 	.word	0x40014400
 8007fe0:	40014800 	.word	0x40014800
 8007fe4:	40001800 	.word	0x40001800
 8007fe8:	40001c00 	.word	0x40001c00
 8007fec:	40002000 	.word	0x40002000

08007ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f023 0201 	bic.w	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 0302 	bic.w	r3, r3, #2
 8008038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a20      	ldr	r2, [pc, #128]	; (80080c8 <TIM_OC1_SetConfig+0xd8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_OC1_SetConfig+0x64>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a1f      	ldr	r2, [pc, #124]	; (80080cc <TIM_OC1_SetConfig+0xdc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d10c      	bne.n	800806e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f023 0308 	bic.w	r3, r3, #8
 800805a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f023 0304 	bic.w	r3, r3, #4
 800806c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a15      	ldr	r2, [pc, #84]	; (80080c8 <TIM_OC1_SetConfig+0xd8>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d003      	beq.n	800807e <TIM_OC1_SetConfig+0x8e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a14      	ldr	r2, [pc, #80]	; (80080cc <TIM_OC1_SetConfig+0xdc>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d111      	bne.n	80080a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800808c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4313      	orrs	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	621a      	str	r2, [r3, #32]
}
 80080bc:	bf00      	nop
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40010400 	.word	0x40010400

080080d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f023 0210 	bic.w	r2, r3, #16
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f023 0320 	bic.w	r3, r3, #32
 800811a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a22      	ldr	r2, [pc, #136]	; (80081b4 <TIM_OC2_SetConfig+0xe4>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d003      	beq.n	8008138 <TIM_OC2_SetConfig+0x68>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a21      	ldr	r2, [pc, #132]	; (80081b8 <TIM_OC2_SetConfig+0xe8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d10d      	bne.n	8008154 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800813e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a17      	ldr	r2, [pc, #92]	; (80081b4 <TIM_OC2_SetConfig+0xe4>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_OC2_SetConfig+0x94>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a16      	ldr	r2, [pc, #88]	; (80081b8 <TIM_OC2_SetConfig+0xe8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d113      	bne.n	800818c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800816a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40010000 	.word	0x40010000
 80081b8:	40010400 	.word	0x40010400

080081bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a21      	ldr	r2, [pc, #132]	; (800829c <TIM_OC3_SetConfig+0xe0>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d003      	beq.n	8008222 <TIM_OC3_SetConfig+0x66>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a20      	ldr	r2, [pc, #128]	; (80082a0 <TIM_OC3_SetConfig+0xe4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d10d      	bne.n	800823e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800823c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a16      	ldr	r2, [pc, #88]	; (800829c <TIM_OC3_SetConfig+0xe0>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d003      	beq.n	800824e <TIM_OC3_SetConfig+0x92>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a15      	ldr	r2, [pc, #84]	; (80082a0 <TIM_OC3_SetConfig+0xe4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d113      	bne.n	8008276 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800825c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4313      	orrs	r3, r2
 8008274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	621a      	str	r2, [r3, #32]
}
 8008290:	bf00      	nop
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	40010000 	.word	0x40010000
 80082a0:	40010400 	.word	0x40010400

080082a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	021b      	lsls	r3, r3, #8
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	031b      	lsls	r3, r3, #12
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a12      	ldr	r2, [pc, #72]	; (8008348 <TIM_OC4_SetConfig+0xa4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d003      	beq.n	800830c <TIM_OC4_SetConfig+0x68>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a11      	ldr	r2, [pc, #68]	; (800834c <TIM_OC4_SetConfig+0xa8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d109      	bne.n	8008320 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	019b      	lsls	r3, r3, #6
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	40010000 	.word	0x40010000
 800834c:	40010400 	.word	0x40010400

08008350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	f023 0201 	bic.w	r2, r3, #1
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800837a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f023 030a 	bic.w	r3, r3, #10
 800838c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	621a      	str	r2, [r3, #32]
}
 80083a2:	bf00      	nop
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b087      	sub	sp, #28
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f023 0210 	bic.w	r2, r3, #16
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	031b      	lsls	r3, r3, #12
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	621a      	str	r2, [r3, #32]
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4313      	orrs	r3, r2
 800842c:	f043 0307 	orr.w	r3, r3, #7
 8008430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	609a      	str	r2, [r3, #8]
}
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800845e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	021a      	lsls	r2, r3, #8
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	431a      	orrs	r2, r3
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4313      	orrs	r3, r2
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	609a      	str	r2, [r3, #8]
}
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008494:	2b01      	cmp	r3, #1
 8008496:	d101      	bne.n	800849c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008498:	2302      	movs	r3, #2
 800849a:	e05a      	b.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a21      	ldr	r2, [pc, #132]	; (8008560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d022      	beq.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e8:	d01d      	beq.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1d      	ldr	r2, [pc, #116]	; (8008564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d018      	beq.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a1b      	ldr	r2, [pc, #108]	; (8008568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1a      	ldr	r2, [pc, #104]	; (800856c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00e      	beq.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a18      	ldr	r2, [pc, #96]	; (8008570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d009      	beq.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a17      	ldr	r2, [pc, #92]	; (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a15      	ldr	r2, [pc, #84]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d10c      	bne.n	8008540 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800852c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	4313      	orrs	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40010000 	.word	0x40010000
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40010400 	.word	0x40010400
 8008574:	40014000 	.word	0x40014000
 8008578:	40001800 	.word	0x40001800

0800857c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008594:	2302      	movs	r3, #2
 8008596:	e03d      	b.n	8008614 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e03f      	b.n	80086da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7fb f858 	bl	8003724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2224      	movs	r2, #36	; 0x24
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800868a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fc43 	bl	8008f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	695a      	ldr	r2, [r3, #20]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	d153      	bne.n	80087a6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <HAL_UART_Transmit_DMA+0x26>
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e04c      	b.n	80087a8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_UART_Transmit_DMA+0x38>
 8008718:	2302      	movs	r3, #2
 800871a:	e045      	b.n	80087a8 <HAL_UART_Transmit_DMA+0xc4>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	88fa      	ldrh	r2, [r7, #6]
 800872e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2221      	movs	r2, #33	; 0x21
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008748:	4a19      	ldr	r2, [pc, #100]	; (80087b0 <HAL_UART_Transmit_DMA+0xcc>)
 800874a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	4a18      	ldr	r2, [pc, #96]	; (80087b4 <HAL_UART_Transmit_DMA+0xd0>)
 8008752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008758:	4a17      	ldr	r2, [pc, #92]	; (80087b8 <HAL_UART_Transmit_DMA+0xd4>)
 800875a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	2200      	movs	r2, #0
 8008762:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008764:	f107 0308 	add.w	r3, r7, #8
 8008768:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	6819      	ldr	r1, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3304      	adds	r3, #4
 8008778:	461a      	mov	r2, r3
 800877a:	88fb      	ldrh	r3, [r7, #6]
 800877c:	f7fd fb44 	bl	8005e08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008788:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	695a      	ldr	r2, [r3, #20]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087a0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e000      	b.n	80087a8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80087a6:	2302      	movs	r3, #2
  }
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	08008b69 	.word	0x08008b69
 80087b4:	08008bbb 	.word	0x08008bbb
 80087b8:	08008bd7 	.word	0x08008bd7

080087bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	; 0x28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80087dc:	2300      	movs	r3, #0
 80087de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10d      	bne.n	800880e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d008      	beq.n	800880e <HAL_UART_IRQHandler+0x52>
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 faee 	bl	8008de8 <UART_Receive_IT>
      return;
 800880c:	e17c      	b.n	8008b08 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 80b1 	beq.w	8008978 <HAL_UART_IRQHandler+0x1bc>
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d105      	bne.n	800882c <HAL_UART_IRQHandler+0x70>
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 80a6 	beq.w	8008978 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <HAL_UART_IRQHandler+0x90>
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883c:	2b00      	cmp	r3, #0
 800883e:	d005      	beq.n	800884c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008844:	f043 0201 	orr.w	r2, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <HAL_UART_IRQHandler+0xb0>
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	f043 0202 	orr.w	r2, r3, #2
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <HAL_UART_IRQHandler+0xd0>
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	f043 0204 	orr.w	r2, r3, #4
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00f      	beq.n	80088b6 <HAL_UART_IRQHandler+0xfa>
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <HAL_UART_IRQHandler+0xee>
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d005      	beq.n	80088b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	f043 0208 	orr.w	r2, r3, #8
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 811f 	beq.w	8008afe <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <HAL_UART_IRQHandler+0x11e>
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fa87 	bl	8008de8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	bf0c      	ite	eq
 80088e8:	2301      	moveq	r3, #1
 80088ea:	2300      	movne	r3, #0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	f003 0308 	and.w	r3, r3, #8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <HAL_UART_IRQHandler+0x146>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d031      	beq.n	8008966 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f9c7 	bl	8008c96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d123      	bne.n	800895e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	695a      	ldr	r2, [r3, #20]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008924:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d013      	beq.n	8008956 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	4a77      	ldr	r2, [pc, #476]	; (8008b10 <HAL_UART_IRQHandler+0x354>)
 8008934:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd fb2c 	bl	8005f98 <HAL_DMA_Abort_IT>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008954:	e00e      	b.n	8008974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f8f0 	bl	8008b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	e00a      	b.n	8008974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8ec 	bl	8008b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	e006      	b.n	8008974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f8e8 	bl	8008b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008972:	e0c4      	b.n	8008afe <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	bf00      	nop
    return;
 8008976:	e0c2      	b.n	8008afe <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897c:	2b01      	cmp	r3, #1
 800897e:	f040 80a2 	bne.w	8008ac6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 809c 	beq.w	8008ac6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	f003 0310 	and.w	r3, r3, #16
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8096 	beq.w	8008ac6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ba:	2b40      	cmp	r3, #64	; 0x40
 80089bc:	d14f      	bne.n	8008a5e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80089c8:	8a3b      	ldrh	r3, [r7, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 8099 	beq.w	8008b02 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089d4:	8a3a      	ldrh	r2, [r7, #16]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	f080 8093 	bcs.w	8008b02 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	8a3a      	ldrh	r2, [r7, #16]
 80089e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ec:	d02b      	beq.n	8008a46 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089fc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	695a      	ldr	r2, [r3, #20]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0201 	bic.w	r2, r2, #1
 8008a0c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695a      	ldr	r2, [r3, #20]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a1c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2220      	movs	r2, #32
 8008a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0210 	bic.w	r2, r2, #16
 8008a3a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fd fa39 	bl	8005eb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f87a 	bl	8008b50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008a5c:	e051      	b.n	8008b02 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d047      	beq.n	8008b06 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008a76:	8a7b      	ldrh	r3, [r7, #18]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d044      	beq.n	8008b06 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a8a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695a      	ldr	r2, [r3, #20]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0201 	bic.w	r2, r2, #1
 8008a9a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0210 	bic.w	r2, r2, #16
 8008ab8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008aba:	8a7b      	ldrh	r3, [r7, #18]
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f846 	bl	8008b50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008ac4:	e01f      	b.n	8008b06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d008      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x326>
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f91c 	bl	8008d18 <UART_Transmit_IT>
    return;
 8008ae0:	e012      	b.n	8008b08 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00d      	beq.n	8008b08 <HAL_UART_IRQHandler+0x34c>
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d008      	beq.n	8008b08 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f95e 	bl	8008db8 <UART_EndTransmit_IT>
    return;
 8008afc:	e004      	b.n	8008b08 <HAL_UART_IRQHandler+0x34c>
    return;
 8008afe:	bf00      	nop
 8008b00:	e002      	b.n	8008b08 <HAL_UART_IRQHandler+0x34c>
      return;
 8008b02:	bf00      	nop
 8008b04:	e000      	b.n	8008b08 <HAL_UART_IRQHandler+0x34c>
      return;
 8008b06:	bf00      	nop
  }
}
 8008b08:	3728      	adds	r7, #40	; 0x28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	08008cf1 	.word	0x08008cf1

08008b14 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d113      	bne.n	8008bac <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b98:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008baa:	e002      	b.n	8008bb2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7f9 fe3d 	bl	800282c <HAL_UART_TxCpltCallback>
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff ffa3 	bl	8008b14 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf2:	2b80      	cmp	r3, #128	; 0x80
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	2300      	movne	r3, #0
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b21      	cmp	r3, #33	; 0x21
 8008c08:	d108      	bne.n	8008c1c <UART_DMAError+0x46>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d005      	beq.n	8008c1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2200      	movs	r2, #0
 8008c14:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c16:	68b8      	ldr	r0, [r7, #8]
 8008c18:	f000 f827 	bl	8008c6a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c26:	2b40      	cmp	r3, #64	; 0x40
 8008c28:	bf0c      	ite	eq
 8008c2a:	2301      	moveq	r3, #1
 8008c2c:	2300      	movne	r3, #0
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b22      	cmp	r3, #34	; 0x22
 8008c3c:	d108      	bne.n	8008c50 <UART_DMAError+0x7a>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d005      	beq.n	8008c50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2200      	movs	r2, #0
 8008c48:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c4a:	68b8      	ldr	r0, [r7, #8]
 8008c4c:	f000 f823 	bl	8008c96 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	f043 0210 	orr.w	r2, r3, #16
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c5c:	68b8      	ldr	r0, [r7, #8]
 8008c5e:	f7ff ff6d 	bl	8008b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c62:	bf00      	nop
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008c80:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008c8a:	bf00      	nop
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	695a      	ldr	r2, [r3, #20]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0201 	bic.w	r2, r2, #1
 8008cbc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d107      	bne.n	8008cd6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f022 0210 	bic.w	r2, r2, #16
 8008cd4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff ff16 	bl	8008b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b21      	cmp	r3, #33	; 0x21
 8008d2a:	d13e      	bne.n	8008daa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d34:	d114      	bne.n	8008d60 <UART_Transmit_IT+0x48>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d110      	bne.n	8008d60 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	1c9a      	adds	r2, r3, #2
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	621a      	str	r2, [r3, #32]
 8008d5e:	e008      	b.n	8008d72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	1c59      	adds	r1, r3, #1
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	6211      	str	r1, [r2, #32]
 8008d6a:	781a      	ldrb	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10f      	bne.n	8008da6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008da4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e000      	b.n	8008dac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008daa:	2302      	movs	r3, #2
  }
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7f9 fd27 	bl	800282c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b22      	cmp	r3, #34	; 0x22
 8008dfa:	f040 8087 	bne.w	8008f0c <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e06:	d117      	bne.n	8008e38 <UART_Receive_IT+0x50>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d113      	bne.n	8008e38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e18:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e30:	1c9a      	adds	r2, r3, #2
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	629a      	str	r2, [r3, #40]	; 0x28
 8008e36:	e026      	b.n	8008e86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4a:	d007      	beq.n	8008e5c <UART_Receive_IT+0x74>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10a      	bne.n	8008e6a <UART_Receive_IT+0x82>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	701a      	strb	r2, [r3, #0]
 8008e68:	e008      	b.n	8008e7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	4619      	mov	r1, r3
 8008e94:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d136      	bne.n	8008f08 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0220 	bic.w	r2, r2, #32
 8008ea8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695a      	ldr	r2, [r3, #20]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0201 	bic.w	r2, r2, #1
 8008ec8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d10e      	bne.n	8008ef8 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0210 	bic.w	r2, r2, #16
 8008ee8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff fe2d 	bl	8008b50 <HAL_UARTEx_RxEventCallback>
 8008ef6:	e002      	b.n	8008efe <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff fe15 	bl	8008b28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	e002      	b.n	8008f0e <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e000      	b.n	8008f0e <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008f0c:	2302      	movs	r3, #2
  }
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	b09f      	sub	sp, #124	; 0x7c
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2e:	68d9      	ldr	r1, [r3, #12]
 8008f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	ea40 0301 	orr.w	r3, r0, r1
 8008f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f5c:	f021 010c 	bic.w	r1, r1, #12
 8008f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f66:	430b      	orrs	r3, r1
 8008f68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f76:	6999      	ldr	r1, [r3, #24]
 8008f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	ea40 0301 	orr.w	r3, r0, r1
 8008f80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	4bc5      	ldr	r3, [pc, #788]	; (800929c <UART_SetConfig+0x384>)
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d004      	beq.n	8008f96 <UART_SetConfig+0x7e>
 8008f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	4bc3      	ldr	r3, [pc, #780]	; (80092a0 <UART_SetConfig+0x388>)
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d103      	bne.n	8008f9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f96:	f7fe fb79 	bl	800768c <HAL_RCC_GetPCLK2Freq>
 8008f9a:	6778      	str	r0, [r7, #116]	; 0x74
 8008f9c:	e002      	b.n	8008fa4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f9e:	f7fe fb61 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
 8008fa2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fac:	f040 80b6 	bne.w	800911c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb2:	461c      	mov	r4, r3
 8008fb4:	f04f 0500 	mov.w	r5, #0
 8008fb8:	4622      	mov	r2, r4
 8008fba:	462b      	mov	r3, r5
 8008fbc:	1891      	adds	r1, r2, r2
 8008fbe:	6439      	str	r1, [r7, #64]	; 0x40
 8008fc0:	415b      	adcs	r3, r3
 8008fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fc8:	1912      	adds	r2, r2, r4
 8008fca:	eb45 0303 	adc.w	r3, r5, r3
 8008fce:	f04f 0000 	mov.w	r0, #0
 8008fd2:	f04f 0100 	mov.w	r1, #0
 8008fd6:	00d9      	lsls	r1, r3, #3
 8008fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fdc:	00d0      	lsls	r0, r2, #3
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	1911      	adds	r1, r2, r4
 8008fe4:	6639      	str	r1, [r7, #96]	; 0x60
 8008fe6:	416b      	adcs	r3, r5
 8008fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8008fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f04f 0300 	mov.w	r3, #0
 8008ff4:	1891      	adds	r1, r2, r2
 8008ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ff8:	415b      	adcs	r3, r3
 8008ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009000:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009004:	f7f7 fda0 	bl	8000b48 <__aeabi_uldivmod>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	4ba5      	ldr	r3, [pc, #660]	; (80092a4 <UART_SetConfig+0x38c>)
 800900e:	fba3 2302 	umull	r2, r3, r3, r2
 8009012:	095b      	lsrs	r3, r3, #5
 8009014:	011e      	lsls	r6, r3, #4
 8009016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009018:	461c      	mov	r4, r3
 800901a:	f04f 0500 	mov.w	r5, #0
 800901e:	4622      	mov	r2, r4
 8009020:	462b      	mov	r3, r5
 8009022:	1891      	adds	r1, r2, r2
 8009024:	6339      	str	r1, [r7, #48]	; 0x30
 8009026:	415b      	adcs	r3, r3
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
 800902a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800902e:	1912      	adds	r2, r2, r4
 8009030:	eb45 0303 	adc.w	r3, r5, r3
 8009034:	f04f 0000 	mov.w	r0, #0
 8009038:	f04f 0100 	mov.w	r1, #0
 800903c:	00d9      	lsls	r1, r3, #3
 800903e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009042:	00d0      	lsls	r0, r2, #3
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	1911      	adds	r1, r2, r4
 800904a:	65b9      	str	r1, [r7, #88]	; 0x58
 800904c:	416b      	adcs	r3, r5
 800904e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	461a      	mov	r2, r3
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	1891      	adds	r1, r2, r2
 800905c:	62b9      	str	r1, [r7, #40]	; 0x28
 800905e:	415b      	adcs	r3, r3
 8009060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009066:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800906a:	f7f7 fd6d 	bl	8000b48 <__aeabi_uldivmod>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4b8c      	ldr	r3, [pc, #560]	; (80092a4 <UART_SetConfig+0x38c>)
 8009074:	fba3 1302 	umull	r1, r3, r3, r2
 8009078:	095b      	lsrs	r3, r3, #5
 800907a:	2164      	movs	r1, #100	; 0x64
 800907c:	fb01 f303 	mul.w	r3, r1, r3
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	3332      	adds	r3, #50	; 0x32
 8009086:	4a87      	ldr	r2, [pc, #540]	; (80092a4 <UART_SetConfig+0x38c>)
 8009088:	fba2 2303 	umull	r2, r3, r2, r3
 800908c:	095b      	lsrs	r3, r3, #5
 800908e:	005b      	lsls	r3, r3, #1
 8009090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009094:	441e      	add	r6, r3
 8009096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009098:	4618      	mov	r0, r3
 800909a:	f04f 0100 	mov.w	r1, #0
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	1894      	adds	r4, r2, r2
 80090a4:	623c      	str	r4, [r7, #32]
 80090a6:	415b      	adcs	r3, r3
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
 80090aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090ae:	1812      	adds	r2, r2, r0
 80090b0:	eb41 0303 	adc.w	r3, r1, r3
 80090b4:	f04f 0400 	mov.w	r4, #0
 80090b8:	f04f 0500 	mov.w	r5, #0
 80090bc:	00dd      	lsls	r5, r3, #3
 80090be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090c2:	00d4      	lsls	r4, r2, #3
 80090c4:	4622      	mov	r2, r4
 80090c6:	462b      	mov	r3, r5
 80090c8:	1814      	adds	r4, r2, r0
 80090ca:	653c      	str	r4, [r7, #80]	; 0x50
 80090cc:	414b      	adcs	r3, r1
 80090ce:	657b      	str	r3, [r7, #84]	; 0x54
 80090d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	461a      	mov	r2, r3
 80090d6:	f04f 0300 	mov.w	r3, #0
 80090da:	1891      	adds	r1, r2, r2
 80090dc:	61b9      	str	r1, [r7, #24]
 80090de:	415b      	adcs	r3, r3
 80090e0:	61fb      	str	r3, [r7, #28]
 80090e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80090ea:	f7f7 fd2d 	bl	8000b48 <__aeabi_uldivmod>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4b6c      	ldr	r3, [pc, #432]	; (80092a4 <UART_SetConfig+0x38c>)
 80090f4:	fba3 1302 	umull	r1, r3, r3, r2
 80090f8:	095b      	lsrs	r3, r3, #5
 80090fa:	2164      	movs	r1, #100	; 0x64
 80090fc:	fb01 f303 	mul.w	r3, r1, r3
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	3332      	adds	r3, #50	; 0x32
 8009106:	4a67      	ldr	r2, [pc, #412]	; (80092a4 <UART_SetConfig+0x38c>)
 8009108:	fba2 2303 	umull	r2, r3, r2, r3
 800910c:	095b      	lsrs	r3, r3, #5
 800910e:	f003 0207 	and.w	r2, r3, #7
 8009112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4432      	add	r2, r6
 8009118:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800911a:	e0b9      	b.n	8009290 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800911c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800911e:	461c      	mov	r4, r3
 8009120:	f04f 0500 	mov.w	r5, #0
 8009124:	4622      	mov	r2, r4
 8009126:	462b      	mov	r3, r5
 8009128:	1891      	adds	r1, r2, r2
 800912a:	6139      	str	r1, [r7, #16]
 800912c:	415b      	adcs	r3, r3
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009134:	1912      	adds	r2, r2, r4
 8009136:	eb45 0303 	adc.w	r3, r5, r3
 800913a:	f04f 0000 	mov.w	r0, #0
 800913e:	f04f 0100 	mov.w	r1, #0
 8009142:	00d9      	lsls	r1, r3, #3
 8009144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009148:	00d0      	lsls	r0, r2, #3
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	eb12 0804 	adds.w	r8, r2, r4
 8009152:	eb43 0905 	adc.w	r9, r3, r5
 8009156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	4618      	mov	r0, r3
 800915c:	f04f 0100 	mov.w	r1, #0
 8009160:	f04f 0200 	mov.w	r2, #0
 8009164:	f04f 0300 	mov.w	r3, #0
 8009168:	008b      	lsls	r3, r1, #2
 800916a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800916e:	0082      	lsls	r2, r0, #2
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fce8 	bl	8000b48 <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4b49      	ldr	r3, [pc, #292]	; (80092a4 <UART_SetConfig+0x38c>)
 800917e:	fba3 2302 	umull	r2, r3, r3, r2
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	011e      	lsls	r6, r3, #4
 8009186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009188:	4618      	mov	r0, r3
 800918a:	f04f 0100 	mov.w	r1, #0
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	1894      	adds	r4, r2, r2
 8009194:	60bc      	str	r4, [r7, #8]
 8009196:	415b      	adcs	r3, r3
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800919e:	1812      	adds	r2, r2, r0
 80091a0:	eb41 0303 	adc.w	r3, r1, r3
 80091a4:	f04f 0400 	mov.w	r4, #0
 80091a8:	f04f 0500 	mov.w	r5, #0
 80091ac:	00dd      	lsls	r5, r3, #3
 80091ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091b2:	00d4      	lsls	r4, r2, #3
 80091b4:	4622      	mov	r2, r4
 80091b6:	462b      	mov	r3, r5
 80091b8:	1814      	adds	r4, r2, r0
 80091ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80091bc:	414b      	adcs	r3, r1
 80091be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f04f 0100 	mov.w	r1, #0
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	008b      	lsls	r3, r1, #2
 80091d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091d8:	0082      	lsls	r2, r0, #2
 80091da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80091de:	f7f7 fcb3 	bl	8000b48 <__aeabi_uldivmod>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4b2f      	ldr	r3, [pc, #188]	; (80092a4 <UART_SetConfig+0x38c>)
 80091e8:	fba3 1302 	umull	r1, r3, r3, r2
 80091ec:	095b      	lsrs	r3, r3, #5
 80091ee:	2164      	movs	r1, #100	; 0x64
 80091f0:	fb01 f303 	mul.w	r3, r1, r3
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	3332      	adds	r3, #50	; 0x32
 80091fa:	4a2a      	ldr	r2, [pc, #168]	; (80092a4 <UART_SetConfig+0x38c>)
 80091fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009200:	095b      	lsrs	r3, r3, #5
 8009202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009206:	441e      	add	r6, r3
 8009208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800920a:	4618      	mov	r0, r3
 800920c:	f04f 0100 	mov.w	r1, #0
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	1894      	adds	r4, r2, r2
 8009216:	603c      	str	r4, [r7, #0]
 8009218:	415b      	adcs	r3, r3
 800921a:	607b      	str	r3, [r7, #4]
 800921c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009220:	1812      	adds	r2, r2, r0
 8009222:	eb41 0303 	adc.w	r3, r1, r3
 8009226:	f04f 0400 	mov.w	r4, #0
 800922a:	f04f 0500 	mov.w	r5, #0
 800922e:	00dd      	lsls	r5, r3, #3
 8009230:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009234:	00d4      	lsls	r4, r2, #3
 8009236:	4622      	mov	r2, r4
 8009238:	462b      	mov	r3, r5
 800923a:	eb12 0a00 	adds.w	sl, r2, r0
 800923e:	eb43 0b01 	adc.w	fp, r3, r1
 8009242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	f04f 0100 	mov.w	r1, #0
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	008b      	lsls	r3, r1, #2
 8009256:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800925a:	0082      	lsls	r2, r0, #2
 800925c:	4650      	mov	r0, sl
 800925e:	4659      	mov	r1, fp
 8009260:	f7f7 fc72 	bl	8000b48 <__aeabi_uldivmod>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <UART_SetConfig+0x38c>)
 800926a:	fba3 1302 	umull	r1, r3, r3, r2
 800926e:	095b      	lsrs	r3, r3, #5
 8009270:	2164      	movs	r1, #100	; 0x64
 8009272:	fb01 f303 	mul.w	r3, r1, r3
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	011b      	lsls	r3, r3, #4
 800927a:	3332      	adds	r3, #50	; 0x32
 800927c:	4a09      	ldr	r2, [pc, #36]	; (80092a4 <UART_SetConfig+0x38c>)
 800927e:	fba2 2303 	umull	r2, r3, r2, r3
 8009282:	095b      	lsrs	r3, r3, #5
 8009284:	f003 020f 	and.w	r2, r3, #15
 8009288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4432      	add	r2, r6
 800928e:	609a      	str	r2, [r3, #8]
}
 8009290:	bf00      	nop
 8009292:	377c      	adds	r7, #124	; 0x7c
 8009294:	46bd      	mov	sp, r7
 8009296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929a:	bf00      	nop
 800929c:	40011000 	.word	0x40011000
 80092a0:	40011400 	.word	0x40011400
 80092a4:	51eb851f 	.word	0x51eb851f

080092a8 <__NVIC_SetPriority>:
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	6039      	str	r1, [r7, #0]
 80092b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	db0a      	blt.n	80092d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	490c      	ldr	r1, [pc, #48]	; (80092f4 <__NVIC_SetPriority+0x4c>)
 80092c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092c6:	0112      	lsls	r2, r2, #4
 80092c8:	b2d2      	uxtb	r2, r2
 80092ca:	440b      	add	r3, r1
 80092cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092d0:	e00a      	b.n	80092e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	4908      	ldr	r1, [pc, #32]	; (80092f8 <__NVIC_SetPriority+0x50>)
 80092d8:	79fb      	ldrb	r3, [r7, #7]
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	3b04      	subs	r3, #4
 80092e0:	0112      	lsls	r2, r2, #4
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	440b      	add	r3, r1
 80092e6:	761a      	strb	r2, [r3, #24]
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	e000e100 	.word	0xe000e100
 80092f8:	e000ed00 	.word	0xe000ed00

080092fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009300:	4b05      	ldr	r3, [pc, #20]	; (8009318 <SysTick_Handler+0x1c>)
 8009302:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009304:	f002 f93e 	bl	800b584 <xTaskGetSchedulerState>
 8009308:	4603      	mov	r3, r0
 800930a:	2b01      	cmp	r3, #1
 800930c:	d001      	beq.n	8009312 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800930e:	f003 f823 	bl	800c358 <xPortSysTickHandler>
  }
}
 8009312:	bf00      	nop
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	e000e010 	.word	0xe000e010

0800931c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800931c:	b580      	push	{r7, lr}
 800931e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009320:	2100      	movs	r1, #0
 8009322:	f06f 0004 	mvn.w	r0, #4
 8009326:	f7ff ffbf 	bl	80092a8 <__NVIC_SetPriority>
#endif
}
 800932a:	bf00      	nop
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009336:	f3ef 8305 	mrs	r3, IPSR
 800933a:	603b      	str	r3, [r7, #0]
  return(result);
 800933c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009342:	f06f 0305 	mvn.w	r3, #5
 8009346:	607b      	str	r3, [r7, #4]
 8009348:	e00c      	b.n	8009364 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800934a:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <osKernelInitialize+0x44>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d105      	bne.n	800935e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009352:	4b08      	ldr	r3, [pc, #32]	; (8009374 <osKernelInitialize+0x44>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009358:	2300      	movs	r3, #0
 800935a:	607b      	str	r3, [r7, #4]
 800935c:	e002      	b.n	8009364 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800935e:	f04f 33ff 	mov.w	r3, #4294967295
 8009362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009364:	687b      	ldr	r3, [r7, #4]
}
 8009366:	4618      	mov	r0, r3
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	200000a0 	.word	0x200000a0

08009378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800937e:	f3ef 8305 	mrs	r3, IPSR
 8009382:	603b      	str	r3, [r7, #0]
  return(result);
 8009384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <osKernelStart+0x1a>
    stat = osErrorISR;
 800938a:	f06f 0305 	mvn.w	r3, #5
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	e010      	b.n	80093b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009392:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <osKernelStart+0x48>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d109      	bne.n	80093ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800939a:	f7ff ffbf 	bl	800931c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800939e:	4b08      	ldr	r3, [pc, #32]	; (80093c0 <osKernelStart+0x48>)
 80093a0:	2202      	movs	r2, #2
 80093a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093a4:	f001 fca6 	bl	800acf4 <vTaskStartScheduler>
      stat = osOK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	607b      	str	r3, [r7, #4]
 80093ac:	e002      	b.n	80093b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80093ae:	f04f 33ff 	mov.w	r3, #4294967295
 80093b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093b4:	687b      	ldr	r3, [r7, #4]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	200000a0 	.word	0x200000a0

080093c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08e      	sub	sp, #56	; 0x38
 80093c8:	af04      	add	r7, sp, #16
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093d4:	f3ef 8305 	mrs	r3, IPSR
 80093d8:	617b      	str	r3, [r7, #20]
  return(result);
 80093da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d17e      	bne.n	80094de <osThreadNew+0x11a>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d07b      	beq.n	80094de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80093e6:	2380      	movs	r3, #128	; 0x80
 80093e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093ea:	2318      	movs	r3, #24
 80093ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80093f2:	f04f 33ff 	mov.w	r3, #4294967295
 80093f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d045      	beq.n	800948a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <osThreadNew+0x48>
        name = attr->name;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d008      	beq.n	8009432 <osThreadNew+0x6e>
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	2b38      	cmp	r3, #56	; 0x38
 8009424:	d805      	bhi.n	8009432 <osThreadNew+0x6e>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <osThreadNew+0x72>
        return (NULL);
 8009432:	2300      	movs	r3, #0
 8009434:	e054      	b.n	80094e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	089b      	lsrs	r3, r3, #2
 8009444:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <osThreadNew+0xa8>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	2b5b      	cmp	r3, #91	; 0x5b
 8009454:	d90a      	bls.n	800946c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800945a:	2b00      	cmp	r3, #0
 800945c:	d006      	beq.n	800946c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <osThreadNew+0xa8>
        mem = 1;
 8009466:	2301      	movs	r3, #1
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	e010      	b.n	800948e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10c      	bne.n	800948e <osThreadNew+0xca>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d108      	bne.n	800948e <osThreadNew+0xca>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <osThreadNew+0xca>
          mem = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	e001      	b.n	800948e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d110      	bne.n	80094b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800949c:	9202      	str	r2, [sp, #8]
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6a3a      	ldr	r2, [r7, #32]
 80094a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f001 fa4c 	bl	800a948 <xTaskCreateStatic>
 80094b0:	4603      	mov	r3, r0
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	e013      	b.n	80094de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d110      	bne.n	80094de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	b29a      	uxth	r2, r3
 80094c0:	f107 0310 	add.w	r3, r7, #16
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f001 fa97 	bl	800aa02 <xTaskCreate>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d001      	beq.n	80094de <osThreadNew+0x11a>
            hTask = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80094de:	693b      	ldr	r3, [r7, #16]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3728      	adds	r7, #40	; 0x28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094f0:	f3ef 8305 	mrs	r3, IPSR
 80094f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <osDelay+0x1c>
    stat = osErrorISR;
 80094fc:	f06f 0305 	mvn.w	r3, #5
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	e007      	b.n	8009514 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009504:	2300      	movs	r3, #0
 8009506:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <osDelay+0x2c>
      vTaskDelay(ticks);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 fbbc 	bl	800ac8c <vTaskDelay>
    }
  }

  return (stat);
 8009514:	68fb      	ldr	r3, [r7, #12]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800951e:	b580      	push	{r7, lr}
 8009520:	b08a      	sub	sp, #40	; 0x28
 8009522:	af02      	add	r7, sp, #8
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800952e:	f3ef 8305 	mrs	r3, IPSR
 8009532:	613b      	str	r3, [r7, #16]
  return(result);
 8009534:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009536:	2b00      	cmp	r3, #0
 8009538:	d175      	bne.n	8009626 <osSemaphoreNew+0x108>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d072      	beq.n	8009626 <osSemaphoreNew+0x108>
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	429a      	cmp	r2, r3
 8009546:	d86e      	bhi.n	8009626 <osSemaphoreNew+0x108>
    mem = -1;
 8009548:	f04f 33ff 	mov.w	r3, #4294967295
 800954c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d015      	beq.n	8009580 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d006      	beq.n	800956a <osSemaphoreNew+0x4c>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	2b4f      	cmp	r3, #79	; 0x4f
 8009562:	d902      	bls.n	800956a <osSemaphoreNew+0x4c>
        mem = 1;
 8009564:	2301      	movs	r3, #1
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	e00c      	b.n	8009584 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d108      	bne.n	8009584 <osSemaphoreNew+0x66>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d104      	bne.n	8009584 <osSemaphoreNew+0x66>
          mem = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	e001      	b.n	8009584 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958a:	d04c      	beq.n	8009626 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d128      	bne.n	80095e4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d10a      	bne.n	80095ae <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	2203      	movs	r2, #3
 800959e:	9200      	str	r2, [sp, #0]
 80095a0:	2200      	movs	r2, #0
 80095a2:	2100      	movs	r1, #0
 80095a4:	2001      	movs	r0, #1
 80095a6:	f000 fa29 	bl	80099fc <xQueueGenericCreateStatic>
 80095aa:	61f8      	str	r0, [r7, #28]
 80095ac:	e005      	b.n	80095ba <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80095ae:	2203      	movs	r2, #3
 80095b0:	2100      	movs	r1, #0
 80095b2:	2001      	movs	r0, #1
 80095b4:	f000 fa9a 	bl	8009aec <xQueueGenericCreate>
 80095b8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d022      	beq.n	8009606 <osSemaphoreNew+0xe8>
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01f      	beq.n	8009606 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80095c6:	2300      	movs	r3, #0
 80095c8:	2200      	movs	r2, #0
 80095ca:	2100      	movs	r1, #0
 80095cc:	69f8      	ldr	r0, [r7, #28]
 80095ce:	f000 fb55 	bl	8009c7c <xQueueGenericSend>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d016      	beq.n	8009606 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80095d8:	69f8      	ldr	r0, [r7, #28]
 80095da:	f000 ffe1 	bl	800a5a0 <vQueueDelete>
            hSemaphore = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	61fb      	str	r3, [r7, #28]
 80095e2:	e010      	b.n	8009606 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d108      	bne.n	80095fc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	461a      	mov	r2, r3
 80095f0:	68b9      	ldr	r1, [r7, #8]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 fad7 	bl	8009ba6 <xQueueCreateCountingSemaphoreStatic>
 80095f8:	61f8      	str	r0, [r7, #28]
 80095fa:	e004      	b.n	8009606 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 fb08 	bl	8009c14 <xQueueCreateCountingSemaphore>
 8009604:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00c      	beq.n	8009626 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	e001      	b.n	800961e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800961e:	6979      	ldr	r1, [r7, #20]
 8009620:	69f8      	ldr	r0, [r7, #28]
 8009622:	f001 f909 	bl	800a838 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009626:	69fb      	ldr	r3, [r7, #28]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3720      	adds	r7, #32
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800963e:	2300      	movs	r3, #0
 8009640:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d103      	bne.n	8009650 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009648:	f06f 0303 	mvn.w	r3, #3
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	e039      	b.n	80096c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009650:	f3ef 8305 	mrs	r3, IPSR
 8009654:	60fb      	str	r3, [r7, #12]
  return(result);
 8009656:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009658:	2b00      	cmp	r3, #0
 800965a:	d022      	beq.n	80096a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009662:	f06f 0303 	mvn.w	r3, #3
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	e02c      	b.n	80096c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800966a:	2300      	movs	r3, #0
 800966c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800966e:	f107 0308 	add.w	r3, r7, #8
 8009672:	461a      	mov	r2, r3
 8009674:	2100      	movs	r1, #0
 8009676:	6938      	ldr	r0, [r7, #16]
 8009678:	f000 ff12 	bl	800a4a0 <xQueueReceiveFromISR>
 800967c:	4603      	mov	r3, r0
 800967e:	2b01      	cmp	r3, #1
 8009680:	d003      	beq.n	800968a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009682:	f06f 0302 	mvn.w	r3, #2
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	e01c      	b.n	80096c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d019      	beq.n	80096c4 <osSemaphoreAcquire+0x94>
 8009690:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <osSemaphoreAcquire+0xa0>)
 8009692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	e010      	b.n	80096c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6938      	ldr	r0, [r7, #16]
 80096a6:	f000 fdef 	bl	800a288 <xQueueSemaphoreTake>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d009      	beq.n	80096c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80096b6:	f06f 0301 	mvn.w	r3, #1
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	e002      	b.n	80096c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80096be:	f06f 0302 	mvn.w	r3, #2
 80096c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80096c4:	697b      	ldr	r3, [r7, #20]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	e000ed04 	.word	0xe000ed04

080096d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d103      	bne.n	80096f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80096ea:	f06f 0303 	mvn.w	r3, #3
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e02c      	b.n	800974c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f2:	f3ef 8305 	mrs	r3, IPSR
 80096f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80096f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d01a      	beq.n	8009734 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80096fe:	2300      	movs	r3, #0
 8009700:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	4619      	mov	r1, r3
 8009708:	6938      	ldr	r0, [r7, #16]
 800970a:	f000 fc50 	bl	8009fae <xQueueGiveFromISR>
 800970e:	4603      	mov	r3, r0
 8009710:	2b01      	cmp	r3, #1
 8009712:	d003      	beq.n	800971c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009714:	f06f 0302 	mvn.w	r3, #2
 8009718:	617b      	str	r3, [r7, #20]
 800971a:	e017      	b.n	800974c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d014      	beq.n	800974c <osSemaphoreRelease+0x78>
 8009722:	4b0d      	ldr	r3, [pc, #52]	; (8009758 <osSemaphoreRelease+0x84>)
 8009724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	e00b      	b.n	800974c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009734:	2300      	movs	r3, #0
 8009736:	2200      	movs	r2, #0
 8009738:	2100      	movs	r1, #0
 800973a:	6938      	ldr	r0, [r7, #16]
 800973c:	f000 fa9e 	bl	8009c7c <xQueueGenericSend>
 8009740:	4603      	mov	r3, r0
 8009742:	2b01      	cmp	r3, #1
 8009744:	d002      	beq.n	800974c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009746:	f06f 0302 	mvn.w	r3, #2
 800974a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800974c:	697b      	ldr	r3, [r7, #20]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4a07      	ldr	r2, [pc, #28]	; (8009788 <vApplicationGetIdleTaskMemory+0x2c>)
 800976c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	4a06      	ldr	r2, [pc, #24]	; (800978c <vApplicationGetIdleTaskMemory+0x30>)
 8009772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2280      	movs	r2, #128	; 0x80
 8009778:	601a      	str	r2, [r3, #0]
}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	200000a4 	.word	0x200000a4
 800978c:	20000100 	.word	0x20000100

08009790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a07      	ldr	r2, [pc, #28]	; (80097bc <vApplicationGetTimerTaskMemory+0x2c>)
 80097a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	4a06      	ldr	r2, [pc, #24]	; (80097c0 <vApplicationGetTimerTaskMemory+0x30>)
 80097a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097ae:	601a      	str	r2, [r3, #0]
}
 80097b0:	bf00      	nop
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	20000300 	.word	0x20000300
 80097c0:	2000035c 	.word	0x2000035c

080097c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f103 0208 	add.w	r2, r3, #8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f04f 32ff 	mov.w	r2, #4294967295
 80097dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f103 0208 	add.w	r2, r3, #8
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f103 0208 	add.w	r2, r3, #8
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800981e:	b480      	push	{r7}
 8009820:	b085      	sub	sp, #20
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	601a      	str	r2, [r3, #0]
}
 800985a:	bf00      	nop
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009866:	b480      	push	{r7}
 8009868:	b085      	sub	sp, #20
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987c:	d103      	bne.n	8009886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e00c      	b.n	80098a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3308      	adds	r3, #8
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	e002      	b.n	8009894 <vListInsert+0x2e>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	429a      	cmp	r2, r3
 800989e:	d2f6      	bcs.n	800988e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	601a      	str	r2, [r3, #0]
}
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6892      	ldr	r2, [r2, #8]
 80098ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6852      	ldr	r2, [r2, #4]
 80098f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	429a      	cmp	r2, r3
 8009902:	d103      	bne.n	800990c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	1e5a      	subs	r2, r3, #1
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10a      	bne.n	8009956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009952:	bf00      	nop
 8009954:	e7fe      	b.n	8009954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009956:	f002 fc6d 	bl	800c234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009962:	68f9      	ldr	r1, [r7, #12]
 8009964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009966:	fb01 f303 	mul.w	r3, r1, r3
 800996a:	441a      	add	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009986:	3b01      	subs	r3, #1
 8009988:	68f9      	ldr	r1, [r7, #12]
 800998a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800998c:	fb01 f303 	mul.w	r3, r1, r3
 8009990:	441a      	add	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	22ff      	movs	r2, #255	; 0xff
 800999a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	22ff      	movs	r2, #255	; 0xff
 80099a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d114      	bne.n	80099d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d01a      	beq.n	80099ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3310      	adds	r3, #16
 80099b8:	4618      	mov	r0, r3
 80099ba:	f001 fc25 	bl	800b208 <xTaskRemoveFromEventList>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d012      	beq.n	80099ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099c4:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <xQueueGenericReset+0xcc>)
 80099c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	e009      	b.n	80099ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3310      	adds	r3, #16
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff fef2 	bl	80097c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3324      	adds	r3, #36	; 0x24
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff feed 	bl	80097c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099ea:	f002 fc53 	bl	800c294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099ee:	2301      	movs	r3, #1
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	e000ed04 	.word	0xe000ed04

080099fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08e      	sub	sp, #56	; 0x38
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10a      	bne.n	8009a26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10a      	bne.n	8009a42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a3e:	bf00      	nop
 8009a40:	e7fe      	b.n	8009a40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <xQueueGenericCreateStatic+0x52>
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <xQueueGenericCreateStatic+0x56>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e000      	b.n	8009a54 <xQueueGenericCreateStatic+0x58>
 8009a52:	2300      	movs	r3, #0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	623b      	str	r3, [r7, #32]
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <xQueueGenericCreateStatic+0x7e>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <xQueueGenericCreateStatic+0x82>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <xQueueGenericCreateStatic+0x84>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	61fb      	str	r3, [r7, #28]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a9a:	2350      	movs	r3, #80	; 0x50
 8009a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b50      	cmp	r3, #80	; 0x50
 8009aa2:	d00a      	beq.n	8009aba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	61bb      	str	r3, [r7, #24]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009aba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00d      	beq.n	8009ae2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 f83f 	bl	8009b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3730      	adds	r7, #48	; 0x30
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08a      	sub	sp, #40	; 0x28
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	4613      	mov	r3, r2
 8009af8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10a      	bne.n	8009b16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	613b      	str	r3, [r7, #16]
}
 8009b12:	bf00      	nop
 8009b14:	e7fe      	b.n	8009b14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
 8009b1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	3350      	adds	r3, #80	; 0x50
 8009b24:	4618      	mov	r0, r3
 8009b26:	f002 fca7 	bl	800c478 <pvPortMalloc>
 8009b2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d011      	beq.n	8009b56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	3350      	adds	r3, #80	; 0x50
 8009b3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b44:	79fa      	ldrb	r2, [r7, #7]
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 f805 	bl	8009b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b56:	69bb      	ldr	r3, [r7, #24]
	}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d103      	bne.n	8009b7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e002      	b.n	8009b82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b8e:	2101      	movs	r1, #1
 8009b90:	69b8      	ldr	r0, [r7, #24]
 8009b92:	f7ff fecb 	bl	800992c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	78fa      	ldrb	r2, [r7, #3]
 8009b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b9e:	bf00      	nop
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b08a      	sub	sp, #40	; 0x28
 8009baa:	af02      	add	r7, sp, #8
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10a      	bne.n	8009bce <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	61bb      	str	r3, [r7, #24]
}
 8009bca:	bf00      	nop
 8009bcc:	e7fe      	b.n	8009bcc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d90a      	bls.n	8009bec <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	617b      	str	r3, [r7, #20]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009bec:	2302      	movs	r3, #2
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7ff ff00 	bl	80099fc <xQueueGenericCreateStatic>
 8009bfc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c0a:	69fb      	ldr	r3, [r7, #28]
	}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3720      	adds	r7, #32
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10a      	bne.n	8009c3a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	613b      	str	r3, [r7, #16]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d90a      	bls.n	8009c58 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	60fb      	str	r3, [r7, #12]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c58:	2202      	movs	r2, #2
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff ff45 	bl	8009aec <xQueueGenericCreate>
 8009c62:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c70:	697b      	ldr	r3, [r7, #20]
	}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08e      	sub	sp, #56	; 0x38
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xQueueGenericSend+0x32>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d103      	bne.n	8009cbc <xQueueGenericSend+0x40>
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <xQueueGenericSend+0x44>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e000      	b.n	8009cc2 <xQueueGenericSend+0x46>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <xQueueGenericSend+0x60>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cd8:	bf00      	nop
 8009cda:	e7fe      	b.n	8009cda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d103      	bne.n	8009cea <xQueueGenericSend+0x6e>
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d101      	bne.n	8009cee <xQueueGenericSend+0x72>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e000      	b.n	8009cf0 <xQueueGenericSend+0x74>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10a      	bne.n	8009d0a <xQueueGenericSend+0x8e>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	623b      	str	r3, [r7, #32]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d0a:	f001 fc3b 	bl	800b584 <xTaskGetSchedulerState>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d102      	bne.n	8009d1a <xQueueGenericSend+0x9e>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d101      	bne.n	8009d1e <xQueueGenericSend+0xa2>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e000      	b.n	8009d20 <xQueueGenericSend+0xa4>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <xQueueGenericSend+0xbe>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	61fb      	str	r3, [r7, #28]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d3a:	f002 fa7b 	bl	800c234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d302      	bcc.n	8009d50 <xQueueGenericSend+0xd4>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d129      	bne.n	8009da4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d56:	f000 fc5e 	bl	800a616 <prvCopyDataToQueue>
 8009d5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d010      	beq.n	8009d86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d66:	3324      	adds	r3, #36	; 0x24
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f001 fa4d 	bl	800b208 <xTaskRemoveFromEventList>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d013      	beq.n	8009d9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d74:	4b3f      	ldr	r3, [pc, #252]	; (8009e74 <xQueueGenericSend+0x1f8>)
 8009d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	e00a      	b.n	8009d9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d007      	beq.n	8009d9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d8c:	4b39      	ldr	r3, [pc, #228]	; (8009e74 <xQueueGenericSend+0x1f8>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d9c:	f002 fa7a 	bl	800c294 <vPortExitCritical>
				return pdPASS;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e063      	b.n	8009e6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009daa:	f002 fa73 	bl	800c294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	e05c      	b.n	8009e6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d106      	bne.n	8009dc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009db8:	f107 0314 	add.w	r3, r7, #20
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 fa87 	bl	800b2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dc6:	f002 fa65 	bl	800c294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dca:	f000 fff9 	bl	800adc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dce:	f002 fa31 	bl	800c234 <vPortEnterCritical>
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dd8:	b25b      	sxtb	r3, r3
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dde:	d103      	bne.n	8009de8 <xQueueGenericSend+0x16c>
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dee:	b25b      	sxtb	r3, r3
 8009df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df4:	d103      	bne.n	8009dfe <xQueueGenericSend+0x182>
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dfe:	f002 fa49 	bl	800c294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e02:	1d3a      	adds	r2, r7, #4
 8009e04:	f107 0314 	add.w	r3, r7, #20
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 fa76 	bl	800b2fc <xTaskCheckForTimeOut>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d124      	bne.n	8009e60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e18:	f000 fcf5 	bl	800a806 <prvIsQueueFull>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d018      	beq.n	8009e54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	3310      	adds	r3, #16
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 f99c 	bl	800b168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e32:	f000 fc80 	bl	800a736 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e36:	f000 ffd1 	bl	800addc <xTaskResumeAll>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f47f af7c 	bne.w	8009d3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e42:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <xQueueGenericSend+0x1f8>)
 8009e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	e772      	b.n	8009d3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e56:	f000 fc6e 	bl	800a736 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e5a:	f000 ffbf 	bl	800addc <xTaskResumeAll>
 8009e5e:	e76c      	b.n	8009d3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e62:	f000 fc68 	bl	800a736 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e66:	f000 ffb9 	bl	800addc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3738      	adds	r7, #56	; 0x38
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	e000ed04 	.word	0xe000ed04

08009e78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b090      	sub	sp, #64	; 0x40
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <xQueueGenericSendFromISR+0x3c>
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <xQueueGenericSendFromISR+0x40>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e000      	b.n	8009eba <xQueueGenericSendFromISR+0x42>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10a      	bne.n	8009ed4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ed0:	bf00      	nop
 8009ed2:	e7fe      	b.n	8009ed2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d103      	bne.n	8009ee2 <xQueueGenericSendFromISR+0x6a>
 8009eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d101      	bne.n	8009ee6 <xQueueGenericSendFromISR+0x6e>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e000      	b.n	8009ee8 <xQueueGenericSendFromISR+0x70>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	623b      	str	r3, [r7, #32]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f02:	f002 fa79 	bl	800c3f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f06:	f3ef 8211 	mrs	r2, BASEPRI
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	61fa      	str	r2, [r7, #28]
 8009f1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d302      	bcc.n	8009f34 <xQueueGenericSendFromISR+0xbc>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d12f      	bne.n	8009f94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	68b9      	ldr	r1, [r7, #8]
 8009f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f4a:	f000 fb64 	bl	800a616 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f56:	d112      	bne.n	8009f7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d016      	beq.n	8009f8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	3324      	adds	r3, #36	; 0x24
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 f94f 	bl	800b208 <xTaskRemoveFromEventList>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00e      	beq.n	8009f8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00b      	beq.n	8009f8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e007      	b.n	8009f8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f82:	3301      	adds	r3, #1
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	b25a      	sxtb	r2, r3
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f92:	e001      	b.n	8009f98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f94:	2300      	movs	r3, #0
 8009f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3740      	adds	r7, #64	; 0x40
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b08e      	sub	sp, #56	; 0x38
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	623b      	str	r3, [r7, #32]
}
 8009fd4:	bf00      	nop
 8009fd6:	e7fe      	b.n	8009fd6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00a      	beq.n	8009ff6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	61fb      	str	r3, [r7, #28]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d103      	bne.n	800a006 <xQueueGiveFromISR+0x58>
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <xQueueGiveFromISR+0x5c>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueGiveFromISR+0x5e>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	61bb      	str	r3, [r7, #24]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a026:	f002 f9e7 	bl	800c3f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a02a:	f3ef 8211 	mrs	r2, BASEPRI
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	617a      	str	r2, [r7, #20]
 800a040:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a042:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a044:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a052:	429a      	cmp	r2, r3
 800a054:	d22b      	bcs.n	800a0ae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a05c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a068:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a070:	d112      	bne.n	800a098 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	2b00      	cmp	r3, #0
 800a078:	d016      	beq.n	800a0a8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	3324      	adds	r3, #36	; 0x24
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 f8c2 	bl	800b208 <xTaskRemoveFromEventList>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00e      	beq.n	800a0a8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00b      	beq.n	800a0a8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2201      	movs	r2, #1
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	e007      	b.n	800a0a8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a09c:	3301      	adds	r3, #1
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	b25a      	sxtb	r2, r3
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ac:	e001      	b.n	800a0b2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f383 8811 	msr	BASEPRI, r3
}
 800a0bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3738      	adds	r7, #56	; 0x38
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08c      	sub	sp, #48	; 0x30
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10a      	bne.n	800a0f8 <xQueueReceive+0x30>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	623b      	str	r3, [r7, #32]
}
 800a0f4:	bf00      	nop
 800a0f6:	e7fe      	b.n	800a0f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d103      	bne.n	800a106 <xQueueReceive+0x3e>
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <xQueueReceive+0x42>
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <xQueueReceive+0x44>
 800a10a:	2300      	movs	r3, #0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10a      	bne.n	800a126 <xQueueReceive+0x5e>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	61fb      	str	r3, [r7, #28]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a126:	f001 fa2d 	bl	800b584 <xTaskGetSchedulerState>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <xQueueReceive+0x6e>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <xQueueReceive+0x72>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <xQueueReceive+0x74>
 800a13a:	2300      	movs	r3, #0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <xQueueReceive+0x8e>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	61bb      	str	r3, [r7, #24]
}
 800a152:	bf00      	nop
 800a154:	e7fe      	b.n	800a154 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a156:	f002 f86d 	bl	800c234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	d01f      	beq.n	800a1a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a16a:	f000 fabe 	bl	800a6ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	1e5a      	subs	r2, r3, #1
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00f      	beq.n	800a19e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	3310      	adds	r3, #16
 800a182:	4618      	mov	r0, r3
 800a184:	f001 f840 	bl	800b208 <xTaskRemoveFromEventList>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d007      	beq.n	800a19e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a18e:	4b3d      	ldr	r3, [pc, #244]	; (800a284 <xQueueReceive+0x1bc>)
 800a190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a19e:	f002 f879 	bl	800c294 <vPortExitCritical>
				return pdPASS;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e069      	b.n	800a27a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1ac:	f002 f872 	bl	800c294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	e062      	b.n	800a27a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d106      	bne.n	800a1c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1ba:	f107 0310 	add.w	r3, r7, #16
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f001 f886 	bl	800b2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1c8:	f002 f864 	bl	800c294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1cc:	f000 fdf8 	bl	800adc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1d0:	f002 f830 	bl	800c234 <vPortEnterCritical>
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1da:	b25b      	sxtb	r3, r3
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e0:	d103      	bne.n	800a1ea <xQueueReceive+0x122>
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1f0:	b25b      	sxtb	r3, r3
 800a1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f6:	d103      	bne.n	800a200 <xQueueReceive+0x138>
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a200:	f002 f848 	bl	800c294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a204:	1d3a      	adds	r2, r7, #4
 800a206:	f107 0310 	add.w	r3, r7, #16
 800a20a:	4611      	mov	r1, r2
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 f875 	bl	800b2fc <xTaskCheckForTimeOut>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d123      	bne.n	800a260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a21a:	f000 fade 	bl	800a7da <prvIsQueueEmpty>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d017      	beq.n	800a254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	3324      	adds	r3, #36	; 0x24
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	4611      	mov	r1, r2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 ff9b 	bl	800b168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a234:	f000 fa7f 	bl	800a736 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a238:	f000 fdd0 	bl	800addc <xTaskResumeAll>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d189      	bne.n	800a156 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a242:	4b10      	ldr	r3, [pc, #64]	; (800a284 <xQueueReceive+0x1bc>)
 800a244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	e780      	b.n	800a156 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a256:	f000 fa6e 	bl	800a736 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a25a:	f000 fdbf 	bl	800addc <xTaskResumeAll>
 800a25e:	e77a      	b.n	800a156 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a262:	f000 fa68 	bl	800a736 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a266:	f000 fdb9 	bl	800addc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a26c:	f000 fab5 	bl	800a7da <prvIsQueueEmpty>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	f43f af6f 	beq.w	800a156 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3730      	adds	r7, #48	; 0x30
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	e000ed04 	.word	0xe000ed04

0800a288 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08e      	sub	sp, #56	; 0x38
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a292:	2300      	movs	r3, #0
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10a      	bne.n	800a2ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	623b      	str	r3, [r7, #32]
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	61fb      	str	r3, [r7, #28]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2d8:	f001 f954 	bl	800b584 <xTaskGetSchedulerState>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <xQueueSemaphoreTake+0x60>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <xQueueSemaphoreTake+0x64>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <xQueueSemaphoreTake+0x66>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	61bb      	str	r3, [r7, #24]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a308:	f001 ff94 	bl	800c234 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a310:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	2b00      	cmp	r3, #0
 800a316:	d024      	beq.n	800a362 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	1e5a      	subs	r2, r3, #1
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d104      	bne.n	800a332 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a328:	f001 faa2 	bl	800b870 <pvTaskIncrementMutexHeldCount>
 800a32c:	4602      	mov	r2, r0
 800a32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a330:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00f      	beq.n	800a35a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	3310      	adds	r3, #16
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 ff62 	bl	800b208 <xTaskRemoveFromEventList>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d007      	beq.n	800a35a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a34a:	4b54      	ldr	r3, [pc, #336]	; (800a49c <xQueueSemaphoreTake+0x214>)
 800a34c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a35a:	f001 ff9b 	bl	800c294 <vPortExitCritical>
				return pdPASS;
 800a35e:	2301      	movs	r3, #1
 800a360:	e097      	b.n	800a492 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d111      	bne.n	800a38c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00a      	beq.n	800a384 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	617b      	str	r3, [r7, #20]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a384:	f001 ff86 	bl	800c294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a388:	2300      	movs	r3, #0
 800a38a:	e082      	b.n	800a492 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a392:	f107 030c 	add.w	r3, r7, #12
 800a396:	4618      	mov	r0, r3
 800a398:	f000 ff9a 	bl	800b2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3a0:	f001 ff78 	bl	800c294 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3a4:	f000 fd0c 	bl	800adc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3a8:	f001 ff44 	bl	800c234 <vPortEnterCritical>
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3b2:	b25b      	sxtb	r3, r3
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b8:	d103      	bne.n	800a3c2 <xQueueSemaphoreTake+0x13a>
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3c8:	b25b      	sxtb	r3, r3
 800a3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ce:	d103      	bne.n	800a3d8 <xQueueSemaphoreTake+0x150>
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3d8:	f001 ff5c 	bl	800c294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3dc:	463a      	mov	r2, r7
 800a3de:	f107 030c 	add.w	r3, r7, #12
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 ff89 	bl	800b2fc <xTaskCheckForTimeOut>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d132      	bne.n	800a456 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f2:	f000 f9f2 	bl	800a7da <prvIsQueueEmpty>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d026      	beq.n	800a44a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d109      	bne.n	800a418 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a404:	f001 ff16 	bl	800c234 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f001 f8d7 	bl	800b5c0 <xTaskPriorityInherit>
 800a412:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a414:	f001 ff3e 	bl	800c294 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	3324      	adds	r3, #36	; 0x24
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	4611      	mov	r1, r2
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fea1 	bl	800b168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a428:	f000 f985 	bl	800a736 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a42c:	f000 fcd6 	bl	800addc <xTaskResumeAll>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	f47f af68 	bne.w	800a308 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a438:	4b18      	ldr	r3, [pc, #96]	; (800a49c <xQueueSemaphoreTake+0x214>)
 800a43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	e75e      	b.n	800a308 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a44a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a44c:	f000 f973 	bl	800a736 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a450:	f000 fcc4 	bl	800addc <xTaskResumeAll>
 800a454:	e758      	b.n	800a308 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a458:	f000 f96d 	bl	800a736 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a45c:	f000 fcbe 	bl	800addc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a462:	f000 f9ba 	bl	800a7da <prvIsQueueEmpty>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f43f af4d 	beq.w	800a308 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00d      	beq.n	800a490 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a474:	f001 fede 	bl	800c234 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a47a:	f000 f8b4 	bl	800a5e6 <prvGetDisinheritPriorityAfterTimeout>
 800a47e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a486:	4618      	mov	r0, r3
 800a488:	f001 f970 	bl	800b76c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a48c:	f001 ff02 	bl	800c294 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a492:	4618      	mov	r0, r3
 800a494:	3738      	adds	r7, #56	; 0x38
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	e000ed04 	.word	0xe000ed04

0800a4a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08e      	sub	sp, #56	; 0x38
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10a      	bne.n	800a4cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	623b      	str	r3, [r7, #32]
}
 800a4c8:	bf00      	nop
 800a4ca:	e7fe      	b.n	800a4ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d103      	bne.n	800a4da <xQueueReceiveFromISR+0x3a>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <xQueueReceiveFromISR+0x3e>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <xQueueReceiveFromISR+0x40>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	61fb      	str	r3, [r7, #28]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4fa:	f001 ff7d 	bl	800c3f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a4fe:	f3ef 8211 	mrs	r2, BASEPRI
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	61ba      	str	r2, [r7, #24]
 800a514:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a516:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a518:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	2b00      	cmp	r3, #0
 800a524:	d02f      	beq.n	800a586 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a530:	68b9      	ldr	r1, [r7, #8]
 800a532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a534:	f000 f8d9 	bl	800a6ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	1e5a      	subs	r2, r3, #1
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a540:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a548:	d112      	bne.n	800a570 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d016      	beq.n	800a580 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	3310      	adds	r3, #16
 800a556:	4618      	mov	r0, r3
 800a558:	f000 fe56 	bl	800b208 <xTaskRemoveFromEventList>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00e      	beq.n	800a580 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00b      	beq.n	800a580 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	e007      	b.n	800a580 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a574:	3301      	adds	r3, #1
 800a576:	b2db      	uxtb	r3, r3
 800a578:	b25a      	sxtb	r2, r3
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a580:	2301      	movs	r3, #1
 800a582:	637b      	str	r3, [r7, #52]	; 0x34
 800a584:	e001      	b.n	800a58a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a586:	2300      	movs	r3, #0
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	f383 8811 	msr	BASEPRI, r3
}
 800a594:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3738      	adds	r7, #56	; 0x38
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10a      	bne.n	800a5c8 <vQueueDelete+0x28>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	60bb      	str	r3, [r7, #8]
}
 800a5c4:	bf00      	nop
 800a5c6:	e7fe      	b.n	800a5c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f000 f95f 	bl	800a88c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d102      	bne.n	800a5de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f002 f819 	bl	800c610 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5de:	bf00      	nop
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b085      	sub	sp, #20
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d006      	beq.n	800a604 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	e001      	b.n	800a608 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a608:	68fb      	ldr	r3, [r7, #12]
	}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b086      	sub	sp, #24
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a622:	2300      	movs	r3, #0
 800a624:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10d      	bne.n	800a650 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d14d      	bne.n	800a6d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	4618      	mov	r0, r3
 800a642:	f001 f825 	bl	800b690 <xTaskPriorityDisinherit>
 800a646:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	609a      	str	r2, [r3, #8]
 800a64e:	e043      	b.n	800a6d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d119      	bne.n	800a68a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6858      	ldr	r0, [r3, #4]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	461a      	mov	r2, r3
 800a660:	68b9      	ldr	r1, [r7, #8]
 800a662:	f002 fcb3 	bl	800cfcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66e:	441a      	add	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d32b      	bcc.n	800a6d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	605a      	str	r2, [r3, #4]
 800a688:	e026      	b.n	800a6d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68d8      	ldr	r0, [r3, #12]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a692:	461a      	mov	r2, r3
 800a694:	68b9      	ldr	r1, [r7, #8]
 800a696:	f002 fc99 	bl	800cfcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	68da      	ldr	r2, [r3, #12]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	425b      	negs	r3, r3
 800a6a4:	441a      	add	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d207      	bcs.n	800a6c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	425b      	negs	r3, r3
 800a6c0:	441a      	add	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d105      	bne.n	800a6d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6e0:	697b      	ldr	r3, [r7, #20]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b082      	sub	sp, #8
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d018      	beq.n	800a72e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68da      	ldr	r2, [r3, #12]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a704:	441a      	add	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68da      	ldr	r2, [r3, #12]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	429a      	cmp	r2, r3
 800a714:	d303      	bcc.n	800a71e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68d9      	ldr	r1, [r3, #12]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	461a      	mov	r2, r3
 800a728:	6838      	ldr	r0, [r7, #0]
 800a72a:	f002 fc4f 	bl	800cfcc <memcpy>
	}
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a73e:	f001 fd79 	bl	800c234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a748:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a74a:	e011      	b.n	800a770 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	2b00      	cmp	r3, #0
 800a752:	d012      	beq.n	800a77a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	3324      	adds	r3, #36	; 0x24
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 fd55 	bl	800b208 <xTaskRemoveFromEventList>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a764:	f000 fe2c 	bl	800b3c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a774:	2b00      	cmp	r3, #0
 800a776:	dce9      	bgt.n	800a74c <prvUnlockQueue+0x16>
 800a778:	e000      	b.n	800a77c <prvUnlockQueue+0x46>
					break;
 800a77a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	22ff      	movs	r2, #255	; 0xff
 800a780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a784:	f001 fd86 	bl	800c294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a788:	f001 fd54 	bl	800c234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a792:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a794:	e011      	b.n	800a7ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d012      	beq.n	800a7c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3310      	adds	r3, #16
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fd30 	bl	800b208 <xTaskRemoveFromEventList>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7ae:	f000 fe07 	bl	800b3c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	dce9      	bgt.n	800a796 <prvUnlockQueue+0x60>
 800a7c2:	e000      	b.n	800a7c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	22ff      	movs	r2, #255	; 0xff
 800a7ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a7ce:	f001 fd61 	bl	800c294 <vPortExitCritical>
}
 800a7d2:	bf00      	nop
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7e2:	f001 fd27 	bl	800c234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d102      	bne.n	800a7f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	e001      	b.n	800a7f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f8:	f001 fd4c 	bl	800c294 <vPortExitCritical>

	return xReturn;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a80e:	f001 fd11 	bl	800c234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d102      	bne.n	800a824 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a81e:	2301      	movs	r3, #1
 800a820:	60fb      	str	r3, [r7, #12]
 800a822:	e001      	b.n	800a828 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a824:	2300      	movs	r3, #0
 800a826:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a828:	f001 fd34 	bl	800c294 <vPortExitCritical>

	return xReturn;
 800a82c:	68fb      	ldr	r3, [r7, #12]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a842:	2300      	movs	r3, #0
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	e014      	b.n	800a872 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a848:	4a0f      	ldr	r2, [pc, #60]	; (800a888 <vQueueAddToRegistry+0x50>)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10b      	bne.n	800a86c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a854:	490c      	ldr	r1, [pc, #48]	; (800a888 <vQueueAddToRegistry+0x50>)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a85e:	4a0a      	ldr	r2, [pc, #40]	; (800a888 <vQueueAddToRegistry+0x50>)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	00db      	lsls	r3, r3, #3
 800a864:	4413      	add	r3, r2
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a86a:	e006      	b.n	800a87a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3301      	adds	r3, #1
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b07      	cmp	r3, #7
 800a876:	d9e7      	bls.n	800a848 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	20005264 	.word	0x20005264

0800a88c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e016      	b.n	800a8c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a89a:	4a10      	ldr	r2, [pc, #64]	; (800a8dc <vQueueUnregisterQueue+0x50>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d10b      	bne.n	800a8c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a8aa:	4a0c      	ldr	r2, [pc, #48]	; (800a8dc <vQueueUnregisterQueue+0x50>)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a8b4:	4a09      	ldr	r2, [pc, #36]	; (800a8dc <vQueueUnregisterQueue+0x50>)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	00db      	lsls	r3, r3, #3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	2200      	movs	r2, #0
 800a8be:	605a      	str	r2, [r3, #4]
				break;
 800a8c0:	e006      	b.n	800a8d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b07      	cmp	r3, #7
 800a8cc:	d9e5      	bls.n	800a89a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a8ce:	bf00      	nop
 800a8d0:	bf00      	nop
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	20005264 	.word	0x20005264

0800a8e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8f0:	f001 fca0 	bl	800c234 <vPortEnterCritical>
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8fa:	b25b      	sxtb	r3, r3
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d103      	bne.n	800a90a <vQueueWaitForMessageRestricted+0x2a>
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a910:	b25b      	sxtb	r3, r3
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a916:	d103      	bne.n	800a920 <vQueueWaitForMessageRestricted+0x40>
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a920:	f001 fcb8 	bl	800c294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d106      	bne.n	800a93a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	3324      	adds	r3, #36	; 0x24
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 fc3b 	bl	800b1b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a93a:	6978      	ldr	r0, [r7, #20]
 800a93c:	f7ff fefb 	bl	800a736 <prvUnlockQueue>
	}
 800a940:	bf00      	nop
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08e      	sub	sp, #56	; 0x38
 800a94c:	af04      	add	r7, sp, #16
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	623b      	str	r3, [r7, #32]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10a      	bne.n	800a98e <xTaskCreateStatic+0x46>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	61fb      	str	r3, [r7, #28]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a98e:	235c      	movs	r3, #92	; 0x5c
 800a990:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2b5c      	cmp	r3, #92	; 0x5c
 800a996:	d00a      	beq.n	800a9ae <xTaskCreateStatic+0x66>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	61bb      	str	r3, [r7, #24]
}
 800a9aa:	bf00      	nop
 800a9ac:	e7fe      	b.n	800a9ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d01e      	beq.n	800a9f4 <xTaskCreateStatic+0xac>
 800a9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01b      	beq.n	800a9f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	9303      	str	r3, [sp, #12]
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	9302      	str	r3, [sp, #8]
 800a9d6:	f107 0314 	add.w	r3, r7, #20
 800a9da:	9301      	str	r3, [sp, #4]
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	68b9      	ldr	r1, [r7, #8]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 f850 	bl	800aa8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9ee:	f000 f8dd 	bl	800abac <prvAddNewTaskToReadyList>
 800a9f2:	e001      	b.n	800a9f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9f8:	697b      	ldr	r3, [r7, #20]
	}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3728      	adds	r7, #40	; 0x28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b08c      	sub	sp, #48	; 0x30
 800aa06:	af04      	add	r7, sp, #16
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	603b      	str	r3, [r7, #0]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa12:	88fb      	ldrh	r3, [r7, #6]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 fd2e 	bl	800c478 <pvPortMalloc>
 800aa1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00e      	beq.n	800aa42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa24:	205c      	movs	r0, #92	; 0x5c
 800aa26:	f001 fd27 	bl	800c478 <pvPortMalloc>
 800aa2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30
 800aa38:	e005      	b.n	800aa46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa3a:	6978      	ldr	r0, [r7, #20]
 800aa3c:	f001 fde8 	bl	800c610 <vPortFree>
 800aa40:	e001      	b.n	800aa46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d017      	beq.n	800aa7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa54:	88fa      	ldrh	r2, [r7, #6]
 800aa56:	2300      	movs	r3, #0
 800aa58:	9303      	str	r3, [sp, #12]
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	9302      	str	r3, [sp, #8]
 800aa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	68b9      	ldr	r1, [r7, #8]
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 f80e 	bl	800aa8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa70:	69f8      	ldr	r0, [r7, #28]
 800aa72:	f000 f89b 	bl	800abac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa76:	2301      	movs	r3, #1
 800aa78:	61bb      	str	r3, [r7, #24]
 800aa7a:	e002      	b.n	800aa82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa82:	69bb      	ldr	r3, [r7, #24]
	}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3720      	adds	r7, #32
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b088      	sub	sp, #32
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	21a5      	movs	r1, #165	; 0xa5
 800aaa6:	f002 fa9f 	bl	800cfe8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aab4:	3b01      	subs	r3, #1
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	f023 0307 	bic.w	r3, r3, #7
 800aac2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00a      	beq.n	800aae4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	617b      	str	r3, [r7, #20]
}
 800aae0:	bf00      	nop
 800aae2:	e7fe      	b.n	800aae2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d01f      	beq.n	800ab2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaea:	2300      	movs	r3, #0
 800aaec:	61fb      	str	r3, [r7, #28]
 800aaee:	e012      	b.n	800ab16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	7819      	ldrb	r1, [r3, #0]
 800aaf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	4413      	add	r3, r2
 800aafe:	3334      	adds	r3, #52	; 0x34
 800ab00:	460a      	mov	r2, r1
 800ab02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	4413      	add	r3, r2
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d006      	beq.n	800ab1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	3301      	adds	r3, #1
 800ab14:	61fb      	str	r3, [r7, #28]
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	2b0f      	cmp	r3, #15
 800ab1a:	d9e9      	bls.n	800aaf0 <prvInitialiseNewTask+0x64>
 800ab1c:	e000      	b.n	800ab20 <prvInitialiseNewTask+0x94>
			{
				break;
 800ab1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab28:	e003      	b.n	800ab32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	2b37      	cmp	r3, #55	; 0x37
 800ab36:	d901      	bls.n	800ab3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab38:	2337      	movs	r3, #55	; 0x37
 800ab3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	3304      	adds	r3, #4
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fe fe56 	bl	8009804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	3318      	adds	r3, #24
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fe fe51 	bl	8009804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	68f9      	ldr	r1, [r7, #12]
 800ab8a:	69b8      	ldr	r0, [r7, #24]
 800ab8c:	f001 fa26 	bl	800bfdc <pxPortInitialiseStack>
 800ab90:	4602      	mov	r2, r0
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aba2:	bf00      	nop
 800aba4:	3720      	adds	r7, #32
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abb4:	f001 fb3e 	bl	800c234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abb8:	4b2d      	ldr	r3, [pc, #180]	; (800ac70 <prvAddNewTaskToReadyList+0xc4>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3301      	adds	r3, #1
 800abbe:	4a2c      	ldr	r2, [pc, #176]	; (800ac70 <prvAddNewTaskToReadyList+0xc4>)
 800abc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abc2:	4b2c      	ldr	r3, [pc, #176]	; (800ac74 <prvAddNewTaskToReadyList+0xc8>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d109      	bne.n	800abde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abca:	4a2a      	ldr	r2, [pc, #168]	; (800ac74 <prvAddNewTaskToReadyList+0xc8>)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abd0:	4b27      	ldr	r3, [pc, #156]	; (800ac70 <prvAddNewTaskToReadyList+0xc4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d110      	bne.n	800abfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abd8:	f000 fc16 	bl	800b408 <prvInitialiseTaskLists>
 800abdc:	e00d      	b.n	800abfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abde:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <prvAddNewTaskToReadyList+0xcc>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d109      	bne.n	800abfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abe6:	4b23      	ldr	r3, [pc, #140]	; (800ac74 <prvAddNewTaskToReadyList+0xc8>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d802      	bhi.n	800abfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abf4:	4a1f      	ldr	r2, [pc, #124]	; (800ac74 <prvAddNewTaskToReadyList+0xc8>)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abfa:	4b20      	ldr	r3, [pc, #128]	; (800ac7c <prvAddNewTaskToReadyList+0xd0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3301      	adds	r3, #1
 800ac00:	4a1e      	ldr	r2, [pc, #120]	; (800ac7c <prvAddNewTaskToReadyList+0xd0>)
 800ac02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac04:	4b1d      	ldr	r3, [pc, #116]	; (800ac7c <prvAddNewTaskToReadyList+0xd0>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <prvAddNewTaskToReadyList+0xd4>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d903      	bls.n	800ac20 <prvAddNewTaskToReadyList+0x74>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	4a18      	ldr	r2, [pc, #96]	; (800ac80 <prvAddNewTaskToReadyList+0xd4>)
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac24:	4613      	mov	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4a15      	ldr	r2, [pc, #84]	; (800ac84 <prvAddNewTaskToReadyList+0xd8>)
 800ac2e:	441a      	add	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	3304      	adds	r3, #4
 800ac34:	4619      	mov	r1, r3
 800ac36:	4610      	mov	r0, r2
 800ac38:	f7fe fdf1 	bl	800981e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac3c:	f001 fb2a 	bl	800c294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac40:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <prvAddNewTaskToReadyList+0xcc>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00e      	beq.n	800ac66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac48:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <prvAddNewTaskToReadyList+0xc8>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d207      	bcs.n	800ac66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac56:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <prvAddNewTaskToReadyList+0xdc>)
 800ac58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac66:	bf00      	nop
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20000c30 	.word	0x20000c30
 800ac74:	2000075c 	.word	0x2000075c
 800ac78:	20000c3c 	.word	0x20000c3c
 800ac7c:	20000c4c 	.word	0x20000c4c
 800ac80:	20000c38 	.word	0x20000c38
 800ac84:	20000760 	.word	0x20000760
 800ac88:	e000ed04 	.word	0xe000ed04

0800ac8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d017      	beq.n	800acce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac9e:	4b13      	ldr	r3, [pc, #76]	; (800acec <vTaskDelay+0x60>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <vTaskDelay+0x30>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	60bb      	str	r3, [r7, #8]
}
 800acb8:	bf00      	nop
 800acba:	e7fe      	b.n	800acba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800acbc:	f000 f880 	bl	800adc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800acc0:	2100      	movs	r1, #0
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fde8 	bl	800b898 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acc8:	f000 f888 	bl	800addc <xTaskResumeAll>
 800accc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d107      	bne.n	800ace4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <vTaskDelay+0x64>)
 800acd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ace4:	bf00      	nop
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20000c58 	.word	0x20000c58
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b08a      	sub	sp, #40	; 0x28
 800acf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad02:	463a      	mov	r2, r7
 800ad04:	1d39      	adds	r1, r7, #4
 800ad06:	f107 0308 	add.w	r3, r7, #8
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fd26 	bl	800975c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	9202      	str	r2, [sp, #8]
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	460a      	mov	r2, r1
 800ad22:	4921      	ldr	r1, [pc, #132]	; (800ada8 <vTaskStartScheduler+0xb4>)
 800ad24:	4821      	ldr	r0, [pc, #132]	; (800adac <vTaskStartScheduler+0xb8>)
 800ad26:	f7ff fe0f 	bl	800a948 <xTaskCreateStatic>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	4a20      	ldr	r2, [pc, #128]	; (800adb0 <vTaskStartScheduler+0xbc>)
 800ad2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad30:	4b1f      	ldr	r3, [pc, #124]	; (800adb0 <vTaskStartScheduler+0xbc>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	617b      	str	r3, [r7, #20]
 800ad3c:	e001      	b.n	800ad42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d102      	bne.n	800ad4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad48:	f000 fdfa 	bl	800b940 <xTimerCreateTimerTask>
 800ad4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d116      	bne.n	800ad82 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	613b      	str	r3, [r7, #16]
}
 800ad66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad68:	4b12      	ldr	r3, [pc, #72]	; (800adb4 <vTaskStartScheduler+0xc0>)
 800ad6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad70:	4b11      	ldr	r3, [pc, #68]	; (800adb8 <vTaskStartScheduler+0xc4>)
 800ad72:	2201      	movs	r2, #1
 800ad74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad76:	4b11      	ldr	r3, [pc, #68]	; (800adbc <vTaskStartScheduler+0xc8>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad7c:	f001 f9b8 	bl	800c0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad80:	e00e      	b.n	800ada0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad88:	d10a      	bne.n	800ada0 <vTaskStartScheduler+0xac>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	60fb      	str	r3, [r7, #12]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <vTaskStartScheduler+0xaa>
}
 800ada0:	bf00      	nop
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	0800d054 	.word	0x0800d054
 800adac:	0800b3d9 	.word	0x0800b3d9
 800adb0:	20000c54 	.word	0x20000c54
 800adb4:	20000c50 	.word	0x20000c50
 800adb8:	20000c3c 	.word	0x20000c3c
 800adbc:	20000c34 	.word	0x20000c34

0800adc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800adc0:	b480      	push	{r7}
 800adc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800adc4:	4b04      	ldr	r3, [pc, #16]	; (800add8 <vTaskSuspendAll+0x18>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	3301      	adds	r3, #1
 800adca:	4a03      	ldr	r2, [pc, #12]	; (800add8 <vTaskSuspendAll+0x18>)
 800adcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adce:	bf00      	nop
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	20000c58 	.word	0x20000c58

0800addc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800adea:	4b42      	ldr	r3, [pc, #264]	; (800aef4 <xTaskResumeAll+0x118>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10a      	bne.n	800ae08 <xTaskResumeAll+0x2c>
	__asm volatile
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	603b      	str	r3, [r7, #0]
}
 800ae04:	bf00      	nop
 800ae06:	e7fe      	b.n	800ae06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae08:	f001 fa14 	bl	800c234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae0c:	4b39      	ldr	r3, [pc, #228]	; (800aef4 <xTaskResumeAll+0x118>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	4a38      	ldr	r2, [pc, #224]	; (800aef4 <xTaskResumeAll+0x118>)
 800ae14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae16:	4b37      	ldr	r3, [pc, #220]	; (800aef4 <xTaskResumeAll+0x118>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d162      	bne.n	800aee4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae1e:	4b36      	ldr	r3, [pc, #216]	; (800aef8 <xTaskResumeAll+0x11c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d05e      	beq.n	800aee4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae26:	e02f      	b.n	800ae88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae28:	4b34      	ldr	r3, [pc, #208]	; (800aefc <xTaskResumeAll+0x120>)
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	3318      	adds	r3, #24
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fe fd4f 	bl	80098d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fe fd4a 	bl	80098d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae48:	4b2d      	ldr	r3, [pc, #180]	; (800af00 <xTaskResumeAll+0x124>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d903      	bls.n	800ae58 <xTaskResumeAll+0x7c>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae54:	4a2a      	ldr	r2, [pc, #168]	; (800af00 <xTaskResumeAll+0x124>)
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4a27      	ldr	r2, [pc, #156]	; (800af04 <xTaskResumeAll+0x128>)
 800ae66:	441a      	add	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	f7fe fcd5 	bl	800981e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae78:	4b23      	ldr	r3, [pc, #140]	; (800af08 <xTaskResumeAll+0x12c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d302      	bcc.n	800ae88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae82:	4b22      	ldr	r3, [pc, #136]	; (800af0c <xTaskResumeAll+0x130>)
 800ae84:	2201      	movs	r2, #1
 800ae86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae88:	4b1c      	ldr	r3, [pc, #112]	; (800aefc <xTaskResumeAll+0x120>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1cb      	bne.n	800ae28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae96:	f000 fb55 	bl	800b544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae9a:	4b1d      	ldr	r3, [pc, #116]	; (800af10 <xTaskResumeAll+0x134>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d010      	beq.n	800aec8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aea6:	f000 f847 	bl	800af38 <xTaskIncrementTick>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aeb0:	4b16      	ldr	r3, [pc, #88]	; (800af0c <xTaskResumeAll+0x130>)
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1f1      	bne.n	800aea6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aec2:	4b13      	ldr	r3, [pc, #76]	; (800af10 <xTaskResumeAll+0x134>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aec8:	4b10      	ldr	r3, [pc, #64]	; (800af0c <xTaskResumeAll+0x130>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d009      	beq.n	800aee4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aed0:	2301      	movs	r3, #1
 800aed2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aed4:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <xTaskResumeAll+0x138>)
 800aed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aee4:	f001 f9d6 	bl	800c294 <vPortExitCritical>

	return xAlreadyYielded;
 800aee8:	68bb      	ldr	r3, [r7, #8]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20000c58 	.word	0x20000c58
 800aef8:	20000c30 	.word	0x20000c30
 800aefc:	20000bf0 	.word	0x20000bf0
 800af00:	20000c38 	.word	0x20000c38
 800af04:	20000760 	.word	0x20000760
 800af08:	2000075c 	.word	0x2000075c
 800af0c:	20000c44 	.word	0x20000c44
 800af10:	20000c40 	.word	0x20000c40
 800af14:	e000ed04 	.word	0xe000ed04

0800af18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af1e:	4b05      	ldr	r3, [pc, #20]	; (800af34 <xTaskGetTickCount+0x1c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af24:	687b      	ldr	r3, [r7, #4]
}
 800af26:	4618      	mov	r0, r3
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	20000c34 	.word	0x20000c34

0800af38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af42:	4b4f      	ldr	r3, [pc, #316]	; (800b080 <xTaskIncrementTick+0x148>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	f040 808f 	bne.w	800b06a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af4c:	4b4d      	ldr	r3, [pc, #308]	; (800b084 <xTaskIncrementTick+0x14c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3301      	adds	r3, #1
 800af52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af54:	4a4b      	ldr	r2, [pc, #300]	; (800b084 <xTaskIncrementTick+0x14c>)
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d120      	bne.n	800afa2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af60:	4b49      	ldr	r3, [pc, #292]	; (800b088 <xTaskIncrementTick+0x150>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00a      	beq.n	800af80 <xTaskIncrementTick+0x48>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	603b      	str	r3, [r7, #0]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <xTaskIncrementTick+0x46>
 800af80:	4b41      	ldr	r3, [pc, #260]	; (800b088 <xTaskIncrementTick+0x150>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	4b41      	ldr	r3, [pc, #260]	; (800b08c <xTaskIncrementTick+0x154>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a3f      	ldr	r2, [pc, #252]	; (800b088 <xTaskIncrementTick+0x150>)
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	4a3f      	ldr	r2, [pc, #252]	; (800b08c <xTaskIncrementTick+0x154>)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	4b3e      	ldr	r3, [pc, #248]	; (800b090 <xTaskIncrementTick+0x158>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3301      	adds	r3, #1
 800af9a:	4a3d      	ldr	r2, [pc, #244]	; (800b090 <xTaskIncrementTick+0x158>)
 800af9c:	6013      	str	r3, [r2, #0]
 800af9e:	f000 fad1 	bl	800b544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afa2:	4b3c      	ldr	r3, [pc, #240]	; (800b094 <xTaskIncrementTick+0x15c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d349      	bcc.n	800b040 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afac:	4b36      	ldr	r3, [pc, #216]	; (800b088 <xTaskIncrementTick+0x150>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d104      	bne.n	800afc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb6:	4b37      	ldr	r3, [pc, #220]	; (800b094 <xTaskIncrementTick+0x15c>)
 800afb8:	f04f 32ff 	mov.w	r2, #4294967295
 800afbc:	601a      	str	r2, [r3, #0]
					break;
 800afbe:	e03f      	b.n	800b040 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc0:	4b31      	ldr	r3, [pc, #196]	; (800b088 <xTaskIncrementTick+0x150>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d203      	bcs.n	800afe0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afd8:	4a2e      	ldr	r2, [pc, #184]	; (800b094 <xTaskIncrementTick+0x15c>)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afde:	e02f      	b.n	800b040 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fe fc77 	bl	80098d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	3318      	adds	r3, #24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fc6e 	bl	80098d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b000:	4b25      	ldr	r3, [pc, #148]	; (800b098 <xTaskIncrementTick+0x160>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	429a      	cmp	r2, r3
 800b006:	d903      	bls.n	800b010 <xTaskIncrementTick+0xd8>
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00c:	4a22      	ldr	r2, [pc, #136]	; (800b098 <xTaskIncrementTick+0x160>)
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b014:	4613      	mov	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4a1f      	ldr	r2, [pc, #124]	; (800b09c <xTaskIncrementTick+0x164>)
 800b01e:	441a      	add	r2, r3
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	3304      	adds	r3, #4
 800b024:	4619      	mov	r1, r3
 800b026:	4610      	mov	r0, r2
 800b028:	f7fe fbf9 	bl	800981e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	4b1b      	ldr	r3, [pc, #108]	; (800b0a0 <xTaskIncrementTick+0x168>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b036:	429a      	cmp	r2, r3
 800b038:	d3b8      	bcc.n	800afac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b03a:	2301      	movs	r3, #1
 800b03c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b03e:	e7b5      	b.n	800afac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b040:	4b17      	ldr	r3, [pc, #92]	; (800b0a0 <xTaskIncrementTick+0x168>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b046:	4915      	ldr	r1, [pc, #84]	; (800b09c <xTaskIncrementTick+0x164>)
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d901      	bls.n	800b05c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b058:	2301      	movs	r3, #1
 800b05a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b05c:	4b11      	ldr	r3, [pc, #68]	; (800b0a4 <xTaskIncrementTick+0x16c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d007      	beq.n	800b074 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e004      	b.n	800b074 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b06a:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <xTaskIncrementTick+0x170>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3301      	adds	r3, #1
 800b070:	4a0d      	ldr	r2, [pc, #52]	; (800b0a8 <xTaskIncrementTick+0x170>)
 800b072:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b074:	697b      	ldr	r3, [r7, #20]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20000c58 	.word	0x20000c58
 800b084:	20000c34 	.word	0x20000c34
 800b088:	20000be8 	.word	0x20000be8
 800b08c:	20000bec 	.word	0x20000bec
 800b090:	20000c48 	.word	0x20000c48
 800b094:	20000c50 	.word	0x20000c50
 800b098:	20000c38 	.word	0x20000c38
 800b09c:	20000760 	.word	0x20000760
 800b0a0:	2000075c 	.word	0x2000075c
 800b0a4:	20000c44 	.word	0x20000c44
 800b0a8:	20000c40 	.word	0x20000c40

0800b0ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0b2:	4b28      	ldr	r3, [pc, #160]	; (800b154 <vTaskSwitchContext+0xa8>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d003      	beq.n	800b0c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0ba:	4b27      	ldr	r3, [pc, #156]	; (800b158 <vTaskSwitchContext+0xac>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0c0:	e041      	b.n	800b146 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b0c2:	4b25      	ldr	r3, [pc, #148]	; (800b158 <vTaskSwitchContext+0xac>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c8:	4b24      	ldr	r3, [pc, #144]	; (800b15c <vTaskSwitchContext+0xb0>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	e010      	b.n	800b0f2 <vTaskSwitchContext+0x46>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10a      	bne.n	800b0ec <vTaskSwitchContext+0x40>
	__asm volatile
 800b0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	607b      	str	r3, [r7, #4]
}
 800b0e8:	bf00      	nop
 800b0ea:	e7fe      	b.n	800b0ea <vTaskSwitchContext+0x3e>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]
 800b0f2:	491b      	ldr	r1, [pc, #108]	; (800b160 <vTaskSwitchContext+0xb4>)
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4413      	add	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	440b      	add	r3, r1
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0e4      	beq.n	800b0d0 <vTaskSwitchContext+0x24>
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	4613      	mov	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4a13      	ldr	r2, [pc, #76]	; (800b160 <vTaskSwitchContext+0xb4>)
 800b112:	4413      	add	r3, r2
 800b114:	60bb      	str	r3, [r7, #8]
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	605a      	str	r2, [r3, #4]
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	3308      	adds	r3, #8
 800b128:	429a      	cmp	r2, r3
 800b12a:	d104      	bne.n	800b136 <vTaskSwitchContext+0x8a>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	605a      	str	r2, [r3, #4]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	4a09      	ldr	r2, [pc, #36]	; (800b164 <vTaskSwitchContext+0xb8>)
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	4a06      	ldr	r2, [pc, #24]	; (800b15c <vTaskSwitchContext+0xb0>)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6013      	str	r3, [r2, #0]
}
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	20000c58 	.word	0x20000c58
 800b158:	20000c44 	.word	0x20000c44
 800b15c:	20000c38 	.word	0x20000c38
 800b160:	20000760 	.word	0x20000760
 800b164:	2000075c 	.word	0x2000075c

0800b168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10a      	bne.n	800b18e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	60fb      	str	r3, [r7, #12]
}
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b18e:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <vTaskPlaceOnEventList+0x44>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	3318      	adds	r3, #24
 800b194:	4619      	mov	r1, r3
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f7fe fb65 	bl	8009866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b19c:	2101      	movs	r1, #1
 800b19e:	6838      	ldr	r0, [r7, #0]
 800b1a0:	f000 fb7a 	bl	800b898 <prvAddCurrentTaskToDelayedList>
}
 800b1a4:	bf00      	nop
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	2000075c 	.word	0x2000075c

0800b1b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10a      	bne.n	800b1d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	617b      	str	r3, [r7, #20]
}
 800b1d4:	bf00      	nop
 800b1d6:	e7fe      	b.n	800b1d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <vTaskPlaceOnEventListRestricted+0x54>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3318      	adds	r3, #24
 800b1de:	4619      	mov	r1, r3
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7fe fb1c 	bl	800981e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	68b8      	ldr	r0, [r7, #8]
 800b1f6:	f000 fb4f 	bl	800b898 <prvAddCurrentTaskToDelayedList>
	}
 800b1fa:	bf00      	nop
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	2000075c 	.word	0x2000075c

0800b208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10a      	bne.n	800b234 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	60fb      	str	r3, [r7, #12]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	3318      	adds	r3, #24
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe fb4d 	bl	80098d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b23e:	4b1e      	ldr	r3, [pc, #120]	; (800b2b8 <xTaskRemoveFromEventList+0xb0>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d11d      	bne.n	800b282 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	3304      	adds	r3, #4
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fe fb44 	bl	80098d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b254:	4b19      	ldr	r3, [pc, #100]	; (800b2bc <xTaskRemoveFromEventList+0xb4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d903      	bls.n	800b264 <xTaskRemoveFromEventList+0x5c>
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	4a16      	ldr	r2, [pc, #88]	; (800b2bc <xTaskRemoveFromEventList+0xb4>)
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b268:	4613      	mov	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4a13      	ldr	r2, [pc, #76]	; (800b2c0 <xTaskRemoveFromEventList+0xb8>)
 800b272:	441a      	add	r2, r3
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	3304      	adds	r3, #4
 800b278:	4619      	mov	r1, r3
 800b27a:	4610      	mov	r0, r2
 800b27c:	f7fe facf 	bl	800981e <vListInsertEnd>
 800b280:	e005      	b.n	800b28e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	3318      	adds	r3, #24
 800b286:	4619      	mov	r1, r3
 800b288:	480e      	ldr	r0, [pc, #56]	; (800b2c4 <xTaskRemoveFromEventList+0xbc>)
 800b28a:	f7fe fac8 	bl	800981e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b292:	4b0d      	ldr	r3, [pc, #52]	; (800b2c8 <xTaskRemoveFromEventList+0xc0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b298:	429a      	cmp	r2, r3
 800b29a:	d905      	bls.n	800b2a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b29c:	2301      	movs	r3, #1
 800b29e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	; (800b2cc <xTaskRemoveFromEventList+0xc4>)
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	e001      	b.n	800b2ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b2ac:	697b      	ldr	r3, [r7, #20]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20000c58 	.word	0x20000c58
 800b2bc:	20000c38 	.word	0x20000c38
 800b2c0:	20000760 	.word	0x20000760
 800b2c4:	20000bf0 	.word	0x20000bf0
 800b2c8:	2000075c 	.word	0x2000075c
 800b2cc:	20000c44 	.word	0x20000c44

0800b2d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2d8:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <vTaskInternalSetTimeOutState+0x24>)
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2e0:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <vTaskInternalSetTimeOutState+0x28>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	605a      	str	r2, [r3, #4]
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	20000c48 	.word	0x20000c48
 800b2f8:	20000c34 	.word	0x20000c34

0800b2fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10a      	bne.n	800b322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	613b      	str	r3, [r7, #16]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	60fb      	str	r3, [r7, #12]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b33e:	f000 ff79 	bl	800c234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b342:	4b1d      	ldr	r3, [pc, #116]	; (800b3b8 <xTaskCheckForTimeOut+0xbc>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35a:	d102      	bne.n	800b362 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b35c:	2300      	movs	r3, #0
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	e023      	b.n	800b3aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <xTaskCheckForTimeOut+0xc0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d007      	beq.n	800b37e <xTaskCheckForTimeOut+0x82>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	429a      	cmp	r2, r3
 800b376:	d302      	bcc.n	800b37e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b378:	2301      	movs	r3, #1
 800b37a:	61fb      	str	r3, [r7, #28]
 800b37c:	e015      	b.n	800b3aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	429a      	cmp	r2, r3
 800b386:	d20b      	bcs.n	800b3a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	1ad2      	subs	r2, r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff ff9b 	bl	800b2d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61fb      	str	r3, [r7, #28]
 800b39e:	e004      	b.n	800b3aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3aa:	f000 ff73 	bl	800c294 <vPortExitCritical>

	return xReturn;
 800b3ae:	69fb      	ldr	r3, [r7, #28]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	20000c34 	.word	0x20000c34
 800b3bc:	20000c48 	.word	0x20000c48

0800b3c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3c4:	4b03      	ldr	r3, [pc, #12]	; (800b3d4 <vTaskMissedYield+0x14>)
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	20000c44 	.word	0x20000c44

0800b3d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3e0:	f000 f852 	bl	800b488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3e4:	4b06      	ldr	r3, [pc, #24]	; (800b400 <prvIdleTask+0x28>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d9f9      	bls.n	800b3e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3ec:	4b05      	ldr	r3, [pc, #20]	; (800b404 <prvIdleTask+0x2c>)
 800b3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3fc:	e7f0      	b.n	800b3e0 <prvIdleTask+0x8>
 800b3fe:	bf00      	nop
 800b400:	20000760 	.word	0x20000760
 800b404:	e000ed04 	.word	0xe000ed04

0800b408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b40e:	2300      	movs	r3, #0
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	e00c      	b.n	800b42e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4a12      	ldr	r2, [pc, #72]	; (800b468 <prvInitialiseTaskLists+0x60>)
 800b420:	4413      	add	r3, r2
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe f9ce 	bl	80097c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3301      	adds	r3, #1
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b37      	cmp	r3, #55	; 0x37
 800b432:	d9ef      	bls.n	800b414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b434:	480d      	ldr	r0, [pc, #52]	; (800b46c <prvInitialiseTaskLists+0x64>)
 800b436:	f7fe f9c5 	bl	80097c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b43a:	480d      	ldr	r0, [pc, #52]	; (800b470 <prvInitialiseTaskLists+0x68>)
 800b43c:	f7fe f9c2 	bl	80097c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b440:	480c      	ldr	r0, [pc, #48]	; (800b474 <prvInitialiseTaskLists+0x6c>)
 800b442:	f7fe f9bf 	bl	80097c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b446:	480c      	ldr	r0, [pc, #48]	; (800b478 <prvInitialiseTaskLists+0x70>)
 800b448:	f7fe f9bc 	bl	80097c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b44c:	480b      	ldr	r0, [pc, #44]	; (800b47c <prvInitialiseTaskLists+0x74>)
 800b44e:	f7fe f9b9 	bl	80097c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b452:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <prvInitialiseTaskLists+0x78>)
 800b454:	4a05      	ldr	r2, [pc, #20]	; (800b46c <prvInitialiseTaskLists+0x64>)
 800b456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <prvInitialiseTaskLists+0x7c>)
 800b45a:	4a05      	ldr	r2, [pc, #20]	; (800b470 <prvInitialiseTaskLists+0x68>)
 800b45c:	601a      	str	r2, [r3, #0]
}
 800b45e:	bf00      	nop
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20000760 	.word	0x20000760
 800b46c:	20000bc0 	.word	0x20000bc0
 800b470:	20000bd4 	.word	0x20000bd4
 800b474:	20000bf0 	.word	0x20000bf0
 800b478:	20000c04 	.word	0x20000c04
 800b47c:	20000c1c 	.word	0x20000c1c
 800b480:	20000be8 	.word	0x20000be8
 800b484:	20000bec 	.word	0x20000bec

0800b488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b48e:	e019      	b.n	800b4c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b490:	f000 fed0 	bl	800c234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b494:	4b10      	ldr	r3, [pc, #64]	; (800b4d8 <prvCheckTasksWaitingTermination+0x50>)
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe fa19 	bl	80098d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	; (800b4dc <prvCheckTasksWaitingTermination+0x54>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	4a0b      	ldr	r2, [pc, #44]	; (800b4dc <prvCheckTasksWaitingTermination+0x54>)
 800b4ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	4a0a      	ldr	r2, [pc, #40]	; (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4ba:	f000 feeb 	bl	800c294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f810 	bl	800b4e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4c4:	4b06      	ldr	r3, [pc, #24]	; (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e1      	bne.n	800b490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000c04 	.word	0x20000c04
 800b4dc:	20000c30 	.word	0x20000c30
 800b4e0:	20000c18 	.word	0x20000c18

0800b4e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d108      	bne.n	800b508 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f001 f888 	bl	800c610 <vPortFree>
				vPortFree( pxTCB );
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f001 f885 	bl	800c610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b506:	e018      	b.n	800b53a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d103      	bne.n	800b51a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f001 f87c 	bl	800c610 <vPortFree>
	}
 800b518:	e00f      	b.n	800b53a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b520:	2b02      	cmp	r3, #2
 800b522:	d00a      	beq.n	800b53a <prvDeleteTCB+0x56>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	60fb      	str	r3, [r7, #12]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <prvDeleteTCB+0x54>
	}
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b54a:	4b0c      	ldr	r3, [pc, #48]	; (800b57c <prvResetNextTaskUnblockTime+0x38>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d104      	bne.n	800b55e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b554:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <prvResetNextTaskUnblockTime+0x3c>)
 800b556:	f04f 32ff 	mov.w	r2, #4294967295
 800b55a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b55c:	e008      	b.n	800b570 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b55e:	4b07      	ldr	r3, [pc, #28]	; (800b57c <prvResetNextTaskUnblockTime+0x38>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	4a04      	ldr	r2, [pc, #16]	; (800b580 <prvResetNextTaskUnblockTime+0x3c>)
 800b56e:	6013      	str	r3, [r2, #0]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20000be8 	.word	0x20000be8
 800b580:	20000c50 	.word	0x20000c50

0800b584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b58a:	4b0b      	ldr	r3, [pc, #44]	; (800b5b8 <xTaskGetSchedulerState+0x34>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b592:	2301      	movs	r3, #1
 800b594:	607b      	str	r3, [r7, #4]
 800b596:	e008      	b.n	800b5aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b598:	4b08      	ldr	r3, [pc, #32]	; (800b5bc <xTaskGetSchedulerState+0x38>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	607b      	str	r3, [r7, #4]
 800b5a4:	e001      	b.n	800b5aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5aa:	687b      	ldr	r3, [r7, #4]
	}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	20000c3c 	.word	0x20000c3c
 800b5bc:	20000c58 	.word	0x20000c58

0800b5c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d051      	beq.n	800b67a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5da:	4b2a      	ldr	r3, [pc, #168]	; (800b684 <xTaskPriorityInherit+0xc4>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d241      	bcs.n	800b668 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	db06      	blt.n	800b5fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ec:	4b25      	ldr	r3, [pc, #148]	; (800b684 <xTaskPriorityInherit+0xc4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	6959      	ldr	r1, [r3, #20]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b602:	4613      	mov	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4a1f      	ldr	r2, [pc, #124]	; (800b688 <xTaskPriorityInherit+0xc8>)
 800b60c:	4413      	add	r3, r2
 800b60e:	4299      	cmp	r1, r3
 800b610:	d122      	bne.n	800b658 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	3304      	adds	r3, #4
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe f95e 	bl	80098d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b61c:	4b19      	ldr	r3, [pc, #100]	; (800b684 <xTaskPriorityInherit+0xc4>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62a:	4b18      	ldr	r3, [pc, #96]	; (800b68c <xTaskPriorityInherit+0xcc>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d903      	bls.n	800b63a <xTaskPriorityInherit+0x7a>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b636:	4a15      	ldr	r2, [pc, #84]	; (800b68c <xTaskPriorityInherit+0xcc>)
 800b638:	6013      	str	r3, [r2, #0]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4a10      	ldr	r2, [pc, #64]	; (800b688 <xTaskPriorityInherit+0xc8>)
 800b648:	441a      	add	r2, r3
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	3304      	adds	r3, #4
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f7fe f8e4 	bl	800981e <vListInsertEnd>
 800b656:	e004      	b.n	800b662 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b658:	4b0a      	ldr	r3, [pc, #40]	; (800b684 <xTaskPriorityInherit+0xc4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b662:	2301      	movs	r3, #1
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	e008      	b.n	800b67a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <xTaskPriorityInherit+0xc4>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b672:	429a      	cmp	r2, r3
 800b674:	d201      	bcs.n	800b67a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b676:	2301      	movs	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b67a:	68fb      	ldr	r3, [r7, #12]
	}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	2000075c 	.word	0x2000075c
 800b688:	20000760 	.word	0x20000760
 800b68c:	20000c38 	.word	0x20000c38

0800b690 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d056      	beq.n	800b754 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6a6:	4b2e      	ldr	r3, [pc, #184]	; (800b760 <xTaskPriorityDisinherit+0xd0>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d00a      	beq.n	800b6c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	60fb      	str	r3, [r7, #12]
}
 800b6c2:	bf00      	nop
 800b6c4:	e7fe      	b.n	800b6c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	60bb      	str	r3, [r7, #8]
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e8:	1e5a      	subs	r2, r3, #1
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d02c      	beq.n	800b754 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d128      	bne.n	800b754 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	3304      	adds	r3, #4
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe f8e6 	bl	80098d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b718:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b724:	4b0f      	ldr	r3, [pc, #60]	; (800b764 <xTaskPriorityDisinherit+0xd4>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d903      	bls.n	800b734 <xTaskPriorityDisinherit+0xa4>
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	4a0c      	ldr	r2, [pc, #48]	; (800b764 <xTaskPriorityDisinherit+0xd4>)
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b738:	4613      	mov	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	4a09      	ldr	r2, [pc, #36]	; (800b768 <xTaskPriorityDisinherit+0xd8>)
 800b742:	441a      	add	r2, r3
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	3304      	adds	r3, #4
 800b748:	4619      	mov	r1, r3
 800b74a:	4610      	mov	r0, r2
 800b74c:	f7fe f867 	bl	800981e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b750:	2301      	movs	r3, #1
 800b752:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b754:	697b      	ldr	r3, [r7, #20]
	}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	2000075c 	.word	0x2000075c
 800b764:	20000c38 	.word	0x20000c38
 800b768:	20000760 	.word	0x20000760

0800b76c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b77a:	2301      	movs	r3, #1
 800b77c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d06a      	beq.n	800b85a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	60fb      	str	r3, [r7, #12]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d902      	bls.n	800b7b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	61fb      	str	r3, [r7, #28]
 800b7b0:	e002      	b.n	800b7b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	69fa      	ldr	r2, [r7, #28]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d04b      	beq.n	800b85a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d146      	bne.n	800b85a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b7cc:	4b25      	ldr	r3, [pc, #148]	; (800b864 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	69ba      	ldr	r2, [r7, #24]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d10a      	bne.n	800b7ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	60bb      	str	r3, [r7, #8]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	69fa      	ldr	r2, [r7, #28]
 800b7f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	db04      	blt.n	800b80a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	6959      	ldr	r1, [r3, #20]
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	4613      	mov	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4a13      	ldr	r2, [pc, #76]	; (800b868 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b81a:	4413      	add	r3, r2
 800b81c:	4299      	cmp	r1, r3
 800b81e:	d11c      	bne.n	800b85a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	3304      	adds	r3, #4
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe f857 	bl	80098d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82e:	4b0f      	ldr	r3, [pc, #60]	; (800b86c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d903      	bls.n	800b83e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83a:	4a0c      	ldr	r2, [pc, #48]	; (800b86c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b842:	4613      	mov	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4a07      	ldr	r2, [pc, #28]	; (800b868 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b84c:	441a      	add	r2, r3
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	3304      	adds	r3, #4
 800b852:	4619      	mov	r1, r3
 800b854:	4610      	mov	r0, r2
 800b856:	f7fd ffe2 	bl	800981e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b85a:	bf00      	nop
 800b85c:	3720      	adds	r7, #32
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	2000075c 	.word	0x2000075c
 800b868:	20000760 	.word	0x20000760
 800b86c:	20000c38 	.word	0x20000c38

0800b870 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b870:	b480      	push	{r7}
 800b872:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b874:	4b07      	ldr	r3, [pc, #28]	; (800b894 <pvTaskIncrementMutexHeldCount+0x24>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <pvTaskIncrementMutexHeldCount+0x24>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b882:	3201      	adds	r2, #1
 800b884:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b886:	4b03      	ldr	r3, [pc, #12]	; (800b894 <pvTaskIncrementMutexHeldCount+0x24>)
 800b888:	681b      	ldr	r3, [r3, #0]
	}
 800b88a:	4618      	mov	r0, r3
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	2000075c 	.word	0x2000075c

0800b898 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8a2:	4b21      	ldr	r3, [pc, #132]	; (800b928 <prvAddCurrentTaskToDelayedList+0x90>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8a8:	4b20      	ldr	r3, [pc, #128]	; (800b92c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fe f812 	bl	80098d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ba:	d10a      	bne.n	800b8d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d007      	beq.n	800b8d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8c2:	4b1a      	ldr	r3, [pc, #104]	; (800b92c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	4819      	ldr	r0, [pc, #100]	; (800b930 <prvAddCurrentTaskToDelayedList+0x98>)
 800b8cc:	f7fd ffa7 	bl	800981e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8d0:	e026      	b.n	800b920 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8da:	4b14      	ldr	r3, [pc, #80]	; (800b92c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d209      	bcs.n	800b8fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8ea:	4b12      	ldr	r3, [pc, #72]	; (800b934 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f7fd ffb5 	bl	8009866 <vListInsert>
}
 800b8fc:	e010      	b.n	800b920 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8fe:	4b0e      	ldr	r3, [pc, #56]	; (800b938 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <prvAddCurrentTaskToDelayedList+0x94>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3304      	adds	r3, #4
 800b908:	4619      	mov	r1, r3
 800b90a:	4610      	mov	r0, r2
 800b90c:	f7fd ffab 	bl	8009866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b910:	4b0a      	ldr	r3, [pc, #40]	; (800b93c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	429a      	cmp	r2, r3
 800b918:	d202      	bcs.n	800b920 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b91a:	4a08      	ldr	r2, [pc, #32]	; (800b93c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	6013      	str	r3, [r2, #0]
}
 800b920:	bf00      	nop
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000c34 	.word	0x20000c34
 800b92c:	2000075c 	.word	0x2000075c
 800b930:	20000c1c 	.word	0x20000c1c
 800b934:	20000bec 	.word	0x20000bec
 800b938:	20000be8 	.word	0x20000be8
 800b93c:	20000c50 	.word	0x20000c50

0800b940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08a      	sub	sp, #40	; 0x28
 800b944:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b94a:	f000 fb07 	bl	800bf5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b94e:	4b1c      	ldr	r3, [pc, #112]	; (800b9c0 <xTimerCreateTimerTask+0x80>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d021      	beq.n	800b99a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b95e:	1d3a      	adds	r2, r7, #4
 800b960:	f107 0108 	add.w	r1, r7, #8
 800b964:	f107 030c 	add.w	r3, r7, #12
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fd ff11 	bl	8009790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b96e:	6879      	ldr	r1, [r7, #4]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	9202      	str	r2, [sp, #8]
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	2302      	movs	r3, #2
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	2300      	movs	r3, #0
 800b97e:	460a      	mov	r2, r1
 800b980:	4910      	ldr	r1, [pc, #64]	; (800b9c4 <xTimerCreateTimerTask+0x84>)
 800b982:	4811      	ldr	r0, [pc, #68]	; (800b9c8 <xTimerCreateTimerTask+0x88>)
 800b984:	f7fe ffe0 	bl	800a948 <xTaskCreateStatic>
 800b988:	4603      	mov	r3, r0
 800b98a:	4a10      	ldr	r2, [pc, #64]	; (800b9cc <xTimerCreateTimerTask+0x8c>)
 800b98c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b98e:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <xTimerCreateTimerTask+0x8c>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b996:	2301      	movs	r3, #1
 800b998:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	613b      	str	r3, [r7, #16]
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b9b6:	697b      	ldr	r3, [r7, #20]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20000c8c 	.word	0x20000c8c
 800b9c4:	0800d05c 	.word	0x0800d05c
 800b9c8:	0800bb05 	.word	0x0800bb05
 800b9cc:	20000c90 	.word	0x20000c90

0800b9d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b08a      	sub	sp, #40	; 0x28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
 800b9dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10a      	bne.n	800b9fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	623b      	str	r3, [r7, #32]
}
 800b9fa:	bf00      	nop
 800b9fc:	e7fe      	b.n	800b9fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9fe:	4b1a      	ldr	r3, [pc, #104]	; (800ba68 <xTimerGenericCommand+0x98>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d02a      	beq.n	800ba5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b05      	cmp	r3, #5
 800ba16:	dc18      	bgt.n	800ba4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba18:	f7ff fdb4 	bl	800b584 <xTaskGetSchedulerState>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d109      	bne.n	800ba36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba22:	4b11      	ldr	r3, [pc, #68]	; (800ba68 <xTimerGenericCommand+0x98>)
 800ba24:	6818      	ldr	r0, [r3, #0]
 800ba26:	f107 0110 	add.w	r1, r7, #16
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba2e:	f7fe f925 	bl	8009c7c <xQueueGenericSend>
 800ba32:	6278      	str	r0, [r7, #36]	; 0x24
 800ba34:	e012      	b.n	800ba5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba36:	4b0c      	ldr	r3, [pc, #48]	; (800ba68 <xTimerGenericCommand+0x98>)
 800ba38:	6818      	ldr	r0, [r3, #0]
 800ba3a:	f107 0110 	add.w	r1, r7, #16
 800ba3e:	2300      	movs	r3, #0
 800ba40:	2200      	movs	r2, #0
 800ba42:	f7fe f91b 	bl	8009c7c <xQueueGenericSend>
 800ba46:	6278      	str	r0, [r7, #36]	; 0x24
 800ba48:	e008      	b.n	800ba5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba4a:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <xTimerGenericCommand+0x98>)
 800ba4c:	6818      	ldr	r0, [r3, #0]
 800ba4e:	f107 0110 	add.w	r1, r7, #16
 800ba52:	2300      	movs	r3, #0
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	f7fe fa0f 	bl	8009e78 <xQueueGenericSendFromISR>
 800ba5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3728      	adds	r7, #40	; 0x28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	20000c8c 	.word	0x20000c8c

0800ba6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af02      	add	r7, sp, #8
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba76:	4b22      	ldr	r3, [pc, #136]	; (800bb00 <prvProcessExpiredTimer+0x94>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fd ff27 	bl	80098d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d022      	beq.n	800bade <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	699a      	ldr	r2, [r3, #24]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	18d1      	adds	r1, r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	6978      	ldr	r0, [r7, #20]
 800baa6:	f000 f8d1 	bl	800bc4c <prvInsertTimerInActiveList>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d01f      	beq.n	800baf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bab0:	2300      	movs	r3, #0
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2300      	movs	r3, #0
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	2100      	movs	r1, #0
 800baba:	6978      	ldr	r0, [r7, #20]
 800babc:	f7ff ff88 	bl	800b9d0 <xTimerGenericCommand>
 800bac0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d113      	bne.n	800baf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60fb      	str	r3, [r7, #12]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bae4:	f023 0301 	bic.w	r3, r3, #1
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	6978      	ldr	r0, [r7, #20]
 800baf6:	4798      	blx	r3
}
 800baf8:	bf00      	nop
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20000c84 	.word	0x20000c84

0800bb04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb0c:	f107 0308 	add.w	r3, r7, #8
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 f857 	bl	800bbc4 <prvGetNextExpireTime>
 800bb16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 f803 	bl	800bb28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb22:	f000 f8d5 	bl	800bcd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb26:	e7f1      	b.n	800bb0c <prvTimerTask+0x8>

0800bb28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb32:	f7ff f945 	bl	800adc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb36:	f107 0308 	add.w	r3, r7, #8
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 f866 	bl	800bc0c <prvSampleTimeNow>
 800bb40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d130      	bne.n	800bbaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10a      	bne.n	800bb64 <prvProcessTimerOrBlockTask+0x3c>
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d806      	bhi.n	800bb64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb56:	f7ff f941 	bl	800addc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb5a:	68f9      	ldr	r1, [r7, #12]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff ff85 	bl	800ba6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb62:	e024      	b.n	800bbae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d008      	beq.n	800bb7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb6a:	4b13      	ldr	r3, [pc, #76]	; (800bbb8 <prvProcessTimerOrBlockTask+0x90>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <prvProcessTimerOrBlockTask+0x50>
 800bb74:	2301      	movs	r3, #1
 800bb76:	e000      	b.n	800bb7a <prvProcessTimerOrBlockTask+0x52>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb7c:	4b0f      	ldr	r3, [pc, #60]	; (800bbbc <prvProcessTimerOrBlockTask+0x94>)
 800bb7e:	6818      	ldr	r0, [r3, #0]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	f7fe fea9 	bl	800a8e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb8e:	f7ff f925 	bl	800addc <xTaskResumeAll>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10a      	bne.n	800bbae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb98:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <prvProcessTimerOrBlockTask+0x98>)
 800bb9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb9e:	601a      	str	r2, [r3, #0]
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	f3bf 8f6f 	isb	sy
}
 800bba8:	e001      	b.n	800bbae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bbaa:	f7ff f917 	bl	800addc <xTaskResumeAll>
}
 800bbae:	bf00      	nop
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000c88 	.word	0x20000c88
 800bbbc:	20000c8c 	.word	0x20000c8c
 800bbc0:	e000ed04 	.word	0xe000ed04

0800bbc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b085      	sub	sp, #20
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bbcc:	4b0e      	ldr	r3, [pc, #56]	; (800bc08 <prvGetNextExpireTime+0x44>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <prvGetNextExpireTime+0x16>
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	e000      	b.n	800bbdc <prvGetNextExpireTime+0x18>
 800bbda:	2200      	movs	r2, #0
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d105      	bne.n	800bbf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbe8:	4b07      	ldr	r3, [pc, #28]	; (800bc08 <prvGetNextExpireTime+0x44>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	e001      	b.n	800bbf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	20000c84 	.word	0x20000c84

0800bc0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc14:	f7ff f980 	bl	800af18 <xTaskGetTickCount>
 800bc18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <prvSampleTimeNow+0x3c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d205      	bcs.n	800bc30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc24:	f000 f936 	bl	800be94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	e002      	b.n	800bc36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc36:	4a04      	ldr	r2, [pc, #16]	; (800bc48 <prvSampleTimeNow+0x3c>)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20000c94 	.word	0x20000c94

0800bc4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d812      	bhi.n	800bc98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	1ad2      	subs	r2, r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	699b      	ldr	r3, [r3, #24]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d302      	bcc.n	800bc86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc80:	2301      	movs	r3, #1
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	e01b      	b.n	800bcbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc86:	4b10      	ldr	r3, [pc, #64]	; (800bcc8 <prvInsertTimerInActiveList+0x7c>)
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	4619      	mov	r1, r3
 800bc90:	4610      	mov	r0, r2
 800bc92:	f7fd fde8 	bl	8009866 <vListInsert>
 800bc96:	e012      	b.n	800bcbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d206      	bcs.n	800bcae <prvInsertTimerInActiveList+0x62>
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d302      	bcc.n	800bcae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	617b      	str	r3, [r7, #20]
 800bcac:	e007      	b.n	800bcbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcae:	4b07      	ldr	r3, [pc, #28]	; (800bccc <prvInsertTimerInActiveList+0x80>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	4610      	mov	r0, r2
 800bcba:	f7fd fdd4 	bl	8009866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bcbe:	697b      	ldr	r3, [r7, #20]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	20000c88 	.word	0x20000c88
 800bccc:	20000c84 	.word	0x20000c84

0800bcd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08e      	sub	sp, #56	; 0x38
 800bcd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcd6:	e0ca      	b.n	800be6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	da18      	bge.n	800bd10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcde:	1d3b      	adds	r3, r7, #4
 800bce0:	3304      	adds	r3, #4
 800bce2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10a      	bne.n	800bd00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	61fb      	str	r3, [r7, #28]
}
 800bcfc:	bf00      	nop
 800bcfe:	e7fe      	b.n	800bcfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd06:	6850      	ldr	r0, [r2, #4]
 800bd08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd0a:	6892      	ldr	r2, [r2, #8]
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f2c0 80aa 	blt.w	800be6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	3304      	adds	r3, #4
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fd fdd5 	bl	80098d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd2e:	463b      	mov	r3, r7
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff ff6b 	bl	800bc0c <prvSampleTimeNow>
 800bd36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b09      	cmp	r3, #9
 800bd3c:	f200 8097 	bhi.w	800be6e <prvProcessReceivedCommands+0x19e>
 800bd40:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <prvProcessReceivedCommands+0x78>)
 800bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd46:	bf00      	nop
 800bd48:	0800bd71 	.word	0x0800bd71
 800bd4c:	0800bd71 	.word	0x0800bd71
 800bd50:	0800bd71 	.word	0x0800bd71
 800bd54:	0800bde5 	.word	0x0800bde5
 800bd58:	0800bdf9 	.word	0x0800bdf9
 800bd5c:	0800be43 	.word	0x0800be43
 800bd60:	0800bd71 	.word	0x0800bd71
 800bd64:	0800bd71 	.word	0x0800bd71
 800bd68:	0800bde5 	.word	0x0800bde5
 800bd6c:	0800bdf9 	.word	0x0800bdf9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd76:	f043 0301 	orr.w	r3, r3, #1
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	18d1      	adds	r1, r2, r3
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd90:	f7ff ff5c 	bl	800bc4c <prvInsertTimerInActiveList>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d069      	beq.n	800be6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bda0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d05e      	beq.n	800be6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	441a      	add	r2, r3
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdc2:	f7ff fe05 	bl	800b9d0 <xTimerGenericCommand>
 800bdc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d14f      	bne.n	800be6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	61bb      	str	r3, [r7, #24]
}
 800bde0:	bf00      	nop
 800bde2:	e7fe      	b.n	800bde2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdea:	f023 0301 	bic.w	r3, r3, #1
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bdf6:	e03a      	b.n	800be6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdfe:	f043 0301 	orr.w	r3, r3, #1
 800be02:	b2da      	uxtb	r2, r3
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	617b      	str	r3, [r7, #20]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	699a      	ldr	r2, [r3, #24]
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	18d1      	adds	r1, r2, r3
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be3c:	f7ff ff06 	bl	800bc4c <prvInsertTimerInActiveList>
					break;
 800be40:	e015      	b.n	800be6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d103      	bne.n	800be58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800be50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be52:	f000 fbdd 	bl	800c610 <vPortFree>
 800be56:	e00a      	b.n	800be6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be5e:	f023 0301 	bic.w	r3, r3, #1
 800be62:	b2da      	uxtb	r2, r3
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be6a:	e000      	b.n	800be6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be6e:	4b08      	ldr	r3, [pc, #32]	; (800be90 <prvProcessReceivedCommands+0x1c0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	1d39      	adds	r1, r7, #4
 800be74:	2200      	movs	r2, #0
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe f926 	bl	800a0c8 <xQueueReceive>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f47f af2a 	bne.w	800bcd8 <prvProcessReceivedCommands+0x8>
	}
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop
 800be88:	3730      	adds	r7, #48	; 0x30
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20000c8c 	.word	0x20000c8c

0800be94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be9a:	e048      	b.n	800bf2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be9c:	4b2d      	ldr	r3, [pc, #180]	; (800bf54 <prvSwitchTimerLists+0xc0>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea6:	4b2b      	ldr	r3, [pc, #172]	; (800bf54 <prvSwitchTimerLists+0xc0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	3304      	adds	r3, #4
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fd fd0f 	bl	80098d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bec8:	f003 0304 	and.w	r3, r3, #4
 800becc:	2b00      	cmp	r3, #0
 800bece:	d02e      	beq.n	800bf2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4413      	add	r3, r2
 800bed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d90e      	bls.n	800bf00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800beee:	4b19      	ldr	r3, [pc, #100]	; (800bf54 <prvSwitchTimerLists+0xc0>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f7fd fcb4 	bl	8009866 <vListInsert>
 800befe:	e016      	b.n	800bf2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf00:	2300      	movs	r3, #0
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	2300      	movs	r3, #0
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f7ff fd60 	bl	800b9d0 <xTimerGenericCommand>
 800bf10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10a      	bne.n	800bf2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	603b      	str	r3, [r7, #0]
}
 800bf2a:	bf00      	nop
 800bf2c:	e7fe      	b.n	800bf2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf2e:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <prvSwitchTimerLists+0xc0>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1b1      	bne.n	800be9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf38:	4b06      	ldr	r3, [pc, #24]	; (800bf54 <prvSwitchTimerLists+0xc0>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf3e:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <prvSwitchTimerLists+0xc4>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a04      	ldr	r2, [pc, #16]	; (800bf54 <prvSwitchTimerLists+0xc0>)
 800bf44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf46:	4a04      	ldr	r2, [pc, #16]	; (800bf58 <prvSwitchTimerLists+0xc4>)
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	6013      	str	r3, [r2, #0]
}
 800bf4c:	bf00      	nop
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	20000c84 	.word	0x20000c84
 800bf58:	20000c88 	.word	0x20000c88

0800bf5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf62:	f000 f967 	bl	800c234 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf66:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <prvCheckForValidListAndQueue+0x60>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d120      	bne.n	800bfb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf6e:	4814      	ldr	r0, [pc, #80]	; (800bfc0 <prvCheckForValidListAndQueue+0x64>)
 800bf70:	f7fd fc28 	bl	80097c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf74:	4813      	ldr	r0, [pc, #76]	; (800bfc4 <prvCheckForValidListAndQueue+0x68>)
 800bf76:	f7fd fc25 	bl	80097c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf7a:	4b13      	ldr	r3, [pc, #76]	; (800bfc8 <prvCheckForValidListAndQueue+0x6c>)
 800bf7c:	4a10      	ldr	r2, [pc, #64]	; (800bfc0 <prvCheckForValidListAndQueue+0x64>)
 800bf7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf80:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <prvCheckForValidListAndQueue+0x70>)
 800bf82:	4a10      	ldr	r2, [pc, #64]	; (800bfc4 <prvCheckForValidListAndQueue+0x68>)
 800bf84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf86:	2300      	movs	r3, #0
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	4b11      	ldr	r3, [pc, #68]	; (800bfd0 <prvCheckForValidListAndQueue+0x74>)
 800bf8c:	4a11      	ldr	r2, [pc, #68]	; (800bfd4 <prvCheckForValidListAndQueue+0x78>)
 800bf8e:	2110      	movs	r1, #16
 800bf90:	200a      	movs	r0, #10
 800bf92:	f7fd fd33 	bl	80099fc <xQueueGenericCreateStatic>
 800bf96:	4603      	mov	r3, r0
 800bf98:	4a08      	ldr	r2, [pc, #32]	; (800bfbc <prvCheckForValidListAndQueue+0x60>)
 800bf9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf9c:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <prvCheckForValidListAndQueue+0x60>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d005      	beq.n	800bfb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <prvCheckForValidListAndQueue+0x60>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	490b      	ldr	r1, [pc, #44]	; (800bfd8 <prvCheckForValidListAndQueue+0x7c>)
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe fc44 	bl	800a838 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfb0:	f000 f970 	bl	800c294 <vPortExitCritical>
}
 800bfb4:	bf00      	nop
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20000c8c 	.word	0x20000c8c
 800bfc0:	20000c5c 	.word	0x20000c5c
 800bfc4:	20000c70 	.word	0x20000c70
 800bfc8:	20000c84 	.word	0x20000c84
 800bfcc:	20000c88 	.word	0x20000c88
 800bfd0:	20000d38 	.word	0x20000d38
 800bfd4:	20000c98 	.word	0x20000c98
 800bfd8:	0800d064 	.word	0x0800d064

0800bfdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3b04      	subs	r3, #4
 800bfec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3b04      	subs	r3, #4
 800bffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	f023 0201 	bic.w	r2, r3, #1
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	3b04      	subs	r3, #4
 800c00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c00c:	4a0c      	ldr	r2, [pc, #48]	; (800c040 <pxPortInitialiseStack+0x64>)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	3b14      	subs	r3, #20
 800c016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3b04      	subs	r3, #4
 800c022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f06f 0202 	mvn.w	r2, #2
 800c02a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	3b20      	subs	r3, #32
 800c030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c032:	68fb      	ldr	r3, [r7, #12]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	0800c045 	.word	0x0800c045

0800c044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c04e:	4b12      	ldr	r3, [pc, #72]	; (800c098 <prvTaskExitError+0x54>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c056:	d00a      	beq.n	800c06e <prvTaskExitError+0x2a>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	60fb      	str	r3, [r7, #12]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <prvTaskExitError+0x28>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	60bb      	str	r3, [r7, #8]
}
 800c080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c082:	bf00      	nop
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0fc      	beq.n	800c084 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c08a:	bf00      	nop
 800c08c:	bf00      	nop
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr
 800c098:	20000018 	.word	0x20000018
 800c09c:	00000000 	.word	0x00000000

0800c0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c0a0:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <pxCurrentTCBConst2>)
 800c0a2:	6819      	ldr	r1, [r3, #0]
 800c0a4:	6808      	ldr	r0, [r1, #0]
 800c0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0aa:	f380 8809 	msr	PSP, r0
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f04f 0000 	mov.w	r0, #0
 800c0b6:	f380 8811 	msr	BASEPRI, r0
 800c0ba:	4770      	bx	lr
 800c0bc:	f3af 8000 	nop.w

0800c0c0 <pxCurrentTCBConst2>:
 800c0c0:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop

0800c0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0c8:	4808      	ldr	r0, [pc, #32]	; (800c0ec <prvPortStartFirstTask+0x24>)
 800c0ca:	6800      	ldr	r0, [r0, #0]
 800c0cc:	6800      	ldr	r0, [r0, #0]
 800c0ce:	f380 8808 	msr	MSP, r0
 800c0d2:	f04f 0000 	mov.w	r0, #0
 800c0d6:	f380 8814 	msr	CONTROL, r0
 800c0da:	b662      	cpsie	i
 800c0dc:	b661      	cpsie	f
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	df00      	svc	0
 800c0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0ea:	bf00      	nop
 800c0ec:	e000ed08 	.word	0xe000ed08

0800c0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0f6:	4b46      	ldr	r3, [pc, #280]	; (800c210 <xPortStartScheduler+0x120>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a46      	ldr	r2, [pc, #280]	; (800c214 <xPortStartScheduler+0x124>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d10a      	bne.n	800c116 <xPortStartScheduler+0x26>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	613b      	str	r3, [r7, #16]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c116:	4b3e      	ldr	r3, [pc, #248]	; (800c210 <xPortStartScheduler+0x120>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a3f      	ldr	r2, [pc, #252]	; (800c218 <xPortStartScheduler+0x128>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d10a      	bne.n	800c136 <xPortStartScheduler+0x46>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	60fb      	str	r3, [r7, #12]
}
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c136:	4b39      	ldr	r3, [pc, #228]	; (800c21c <xPortStartScheduler+0x12c>)
 800c138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	22ff      	movs	r2, #255	; 0xff
 800c146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	4b31      	ldr	r3, [pc, #196]	; (800c220 <xPortStartScheduler+0x130>)
 800c15c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c15e:	4b31      	ldr	r3, [pc, #196]	; (800c224 <xPortStartScheduler+0x134>)
 800c160:	2207      	movs	r2, #7
 800c162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c164:	e009      	b.n	800c17a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c166:	4b2f      	ldr	r3, [pc, #188]	; (800c224 <xPortStartScheduler+0x134>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	4a2d      	ldr	r2, [pc, #180]	; (800c224 <xPortStartScheduler+0x134>)
 800c16e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c170:	78fb      	ldrb	r3, [r7, #3]
 800c172:	b2db      	uxtb	r3, r3
 800c174:	005b      	lsls	r3, r3, #1
 800c176:	b2db      	uxtb	r3, r3
 800c178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c17a:	78fb      	ldrb	r3, [r7, #3]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c182:	2b80      	cmp	r3, #128	; 0x80
 800c184:	d0ef      	beq.n	800c166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c186:	4b27      	ldr	r3, [pc, #156]	; (800c224 <xPortStartScheduler+0x134>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f1c3 0307 	rsb	r3, r3, #7
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d00a      	beq.n	800c1a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	60bb      	str	r3, [r7, #8]
}
 800c1a4:	bf00      	nop
 800c1a6:	e7fe      	b.n	800c1a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1a8:	4b1e      	ldr	r3, [pc, #120]	; (800c224 <xPortStartScheduler+0x134>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	021b      	lsls	r3, r3, #8
 800c1ae:	4a1d      	ldr	r2, [pc, #116]	; (800c224 <xPortStartScheduler+0x134>)
 800c1b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1b2:	4b1c      	ldr	r3, [pc, #112]	; (800c224 <xPortStartScheduler+0x134>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1ba:	4a1a      	ldr	r2, [pc, #104]	; (800c224 <xPortStartScheduler+0x134>)
 800c1bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1c6:	4b18      	ldr	r3, [pc, #96]	; (800c228 <xPortStartScheduler+0x138>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a17      	ldr	r2, [pc, #92]	; (800c228 <xPortStartScheduler+0x138>)
 800c1cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1d2:	4b15      	ldr	r3, [pc, #84]	; (800c228 <xPortStartScheduler+0x138>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a14      	ldr	r2, [pc, #80]	; (800c228 <xPortStartScheduler+0x138>)
 800c1d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c1dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1de:	f000 f8dd 	bl	800c39c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1e2:	4b12      	ldr	r3, [pc, #72]	; (800c22c <xPortStartScheduler+0x13c>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1e8:	f000 f8fc 	bl	800c3e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1ec:	4b10      	ldr	r3, [pc, #64]	; (800c230 <xPortStartScheduler+0x140>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a0f      	ldr	r2, [pc, #60]	; (800c230 <xPortStartScheduler+0x140>)
 800c1f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c1f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1f8:	f7ff ff66 	bl	800c0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1fc:	f7fe ff56 	bl	800b0ac <vTaskSwitchContext>
	prvTaskExitError();
 800c200:	f7ff ff20 	bl	800c044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	e000ed00 	.word	0xe000ed00
 800c214:	410fc271 	.word	0x410fc271
 800c218:	410fc270 	.word	0x410fc270
 800c21c:	e000e400 	.word	0xe000e400
 800c220:	20000d88 	.word	0x20000d88
 800c224:	20000d8c 	.word	0x20000d8c
 800c228:	e000ed20 	.word	0xe000ed20
 800c22c:	20000018 	.word	0x20000018
 800c230:	e000ef34 	.word	0xe000ef34

0800c234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
	__asm volatile
 800c23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	607b      	str	r3, [r7, #4]
}
 800c24c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c24e:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <vPortEnterCritical+0x58>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3301      	adds	r3, #1
 800c254:	4a0d      	ldr	r2, [pc, #52]	; (800c28c <vPortEnterCritical+0x58>)
 800c256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c258:	4b0c      	ldr	r3, [pc, #48]	; (800c28c <vPortEnterCritical+0x58>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d10f      	bne.n	800c280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c260:	4b0b      	ldr	r3, [pc, #44]	; (800c290 <vPortEnterCritical+0x5c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00a      	beq.n	800c280 <vPortEnterCritical+0x4c>
	__asm volatile
 800c26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	603b      	str	r3, [r7, #0]
}
 800c27c:	bf00      	nop
 800c27e:	e7fe      	b.n	800c27e <vPortEnterCritical+0x4a>
	}
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr
 800c28c:	20000018 	.word	0x20000018
 800c290:	e000ed04 	.word	0xe000ed04

0800c294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c29a:	4b12      	ldr	r3, [pc, #72]	; (800c2e4 <vPortExitCritical+0x50>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10a      	bne.n	800c2b8 <vPortExitCritical+0x24>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	607b      	str	r3, [r7, #4]
}
 800c2b4:	bf00      	nop
 800c2b6:	e7fe      	b.n	800c2b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c2b8:	4b0a      	ldr	r3, [pc, #40]	; (800c2e4 <vPortExitCritical+0x50>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	4a09      	ldr	r2, [pc, #36]	; (800c2e4 <vPortExitCritical+0x50>)
 800c2c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2c2:	4b08      	ldr	r3, [pc, #32]	; (800c2e4 <vPortExitCritical+0x50>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d105      	bne.n	800c2d6 <vPortExitCritical+0x42>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	f383 8811 	msr	BASEPRI, r3
}
 800c2d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2d6:	bf00      	nop
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	20000018 	.word	0x20000018
	...

0800c2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2f0:	f3ef 8009 	mrs	r0, PSP
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	4b15      	ldr	r3, [pc, #84]	; (800c350 <pxCurrentTCBConst>)
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	f01e 0f10 	tst.w	lr, #16
 800c300:	bf08      	it	eq
 800c302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30a:	6010      	str	r0, [r2, #0]
 800c30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c310:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c314:	f380 8811 	msr	BASEPRI, r0
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f7fe fec4 	bl	800b0ac <vTaskSwitchContext>
 800c324:	f04f 0000 	mov.w	r0, #0
 800c328:	f380 8811 	msr	BASEPRI, r0
 800c32c:	bc09      	pop	{r0, r3}
 800c32e:	6819      	ldr	r1, [r3, #0]
 800c330:	6808      	ldr	r0, [r1, #0]
 800c332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c336:	f01e 0f10 	tst.w	lr, #16
 800c33a:	bf08      	it	eq
 800c33c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c340:	f380 8809 	msr	PSP, r0
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	f3af 8000 	nop.w

0800c350 <pxCurrentTCBConst>:
 800c350:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c354:	bf00      	nop
 800c356:	bf00      	nop

0800c358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
	__asm volatile
 800c35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	607b      	str	r3, [r7, #4]
}
 800c370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c372:	f7fe fde1 	bl	800af38 <xTaskIncrementTick>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c37c:	4b06      	ldr	r3, [pc, #24]	; (800c398 <xPortSysTickHandler+0x40>)
 800c37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	2300      	movs	r3, #0
 800c386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	f383 8811 	msr	BASEPRI, r3
}
 800c38e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	e000ed04 	.word	0xe000ed04

0800c39c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c39c:	b480      	push	{r7}
 800c39e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3a0:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <vPortSetupTimerInterrupt+0x34>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <vPortSetupTimerInterrupt+0x38>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3ac:	4b0a      	ldr	r3, [pc, #40]	; (800c3d8 <vPortSetupTimerInterrupt+0x3c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a0a      	ldr	r2, [pc, #40]	; (800c3dc <vPortSetupTimerInterrupt+0x40>)
 800c3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b6:	099b      	lsrs	r3, r3, #6
 800c3b8:	4a09      	ldr	r2, [pc, #36]	; (800c3e0 <vPortSetupTimerInterrupt+0x44>)
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3be:	4b04      	ldr	r3, [pc, #16]	; (800c3d0 <vPortSetupTimerInterrupt+0x34>)
 800c3c0:	2207      	movs	r2, #7
 800c3c2:	601a      	str	r2, [r3, #0]
}
 800c3c4:	bf00      	nop
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	e000e010 	.word	0xe000e010
 800c3d4:	e000e018 	.word	0xe000e018
 800c3d8:	2000000c 	.word	0x2000000c
 800c3dc:	10624dd3 	.word	0x10624dd3
 800c3e0:	e000e014 	.word	0xe000e014

0800c3e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c3f4 <vPortEnableVFP+0x10>
 800c3e8:	6801      	ldr	r1, [r0, #0]
 800c3ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c3ee:	6001      	str	r1, [r0, #0]
 800c3f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3f2:	bf00      	nop
 800c3f4:	e000ed88 	.word	0xe000ed88

0800c3f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3fe:	f3ef 8305 	mrs	r3, IPSR
 800c402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b0f      	cmp	r3, #15
 800c408:	d914      	bls.n	800c434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c40a:	4a17      	ldr	r2, [pc, #92]	; (800c468 <vPortValidateInterruptPriority+0x70>)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	4413      	add	r3, r2
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c414:	4b15      	ldr	r3, [pc, #84]	; (800c46c <vPortValidateInterruptPriority+0x74>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	7afa      	ldrb	r2, [r7, #11]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d20a      	bcs.n	800c434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	607b      	str	r3, [r7, #4]
}
 800c430:	bf00      	nop
 800c432:	e7fe      	b.n	800c432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c434:	4b0e      	ldr	r3, [pc, #56]	; (800c470 <vPortValidateInterruptPriority+0x78>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c43c:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <vPortValidateInterruptPriority+0x7c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	429a      	cmp	r2, r3
 800c442:	d90a      	bls.n	800c45a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	603b      	str	r3, [r7, #0]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <vPortValidateInterruptPriority+0x60>
	}
 800c45a:	bf00      	nop
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	e000e3f0 	.word	0xe000e3f0
 800c46c:	20000d88 	.word	0x20000d88
 800c470:	e000ed0c 	.word	0xe000ed0c
 800c474:	20000d8c 	.word	0x20000d8c

0800c478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	; 0x28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c484:	f7fe fc9c 	bl	800adc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c488:	4b5b      	ldr	r3, [pc, #364]	; (800c5f8 <pvPortMalloc+0x180>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c490:	f000 f920 	bl	800c6d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c494:	4b59      	ldr	r3, [pc, #356]	; (800c5fc <pvPortMalloc+0x184>)
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4013      	ands	r3, r2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f040 8093 	bne.w	800c5c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d01d      	beq.n	800c4e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c4a8:	2208      	movs	r2, #8
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f003 0307 	and.w	r3, r3, #7
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d014      	beq.n	800c4e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f023 0307 	bic.w	r3, r3, #7
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f003 0307 	and.w	r3, r3, #7
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00a      	beq.n	800c4e4 <pvPortMalloc+0x6c>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	617b      	str	r3, [r7, #20]
}
 800c4e0:	bf00      	nop
 800c4e2:	e7fe      	b.n	800c4e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d06e      	beq.n	800c5c8 <pvPortMalloc+0x150>
 800c4ea:	4b45      	ldr	r3, [pc, #276]	; (800c600 <pvPortMalloc+0x188>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d869      	bhi.n	800c5c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4f4:	4b43      	ldr	r3, [pc, #268]	; (800c604 <pvPortMalloc+0x18c>)
 800c4f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4f8:	4b42      	ldr	r3, [pc, #264]	; (800c604 <pvPortMalloc+0x18c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4fe:	e004      	b.n	800c50a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	429a      	cmp	r2, r3
 800c512:	d903      	bls.n	800c51c <pvPortMalloc+0xa4>
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1f1      	bne.n	800c500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c51c:	4b36      	ldr	r3, [pc, #216]	; (800c5f8 <pvPortMalloc+0x180>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c522:	429a      	cmp	r2, r3
 800c524:	d050      	beq.n	800c5c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c526:	6a3b      	ldr	r3, [r7, #32]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2208      	movs	r2, #8
 800c52c:	4413      	add	r3, r2
 800c52e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	685a      	ldr	r2, [r3, #4]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	2308      	movs	r3, #8
 800c542:	005b      	lsls	r3, r3, #1
 800c544:	429a      	cmp	r2, r3
 800c546:	d91f      	bls.n	800c588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4413      	add	r3, r2
 800c54e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00a      	beq.n	800c570 <pvPortMalloc+0xf8>
	__asm volatile
 800c55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	613b      	str	r3, [r7, #16]
}
 800c56c:	bf00      	nop
 800c56e:	e7fe      	b.n	800c56e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	1ad2      	subs	r2, r2, r3
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c582:	69b8      	ldr	r0, [r7, #24]
 800c584:	f000 f908 	bl	800c798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c588:	4b1d      	ldr	r3, [pc, #116]	; (800c600 <pvPortMalloc+0x188>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	4a1b      	ldr	r2, [pc, #108]	; (800c600 <pvPortMalloc+0x188>)
 800c594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c596:	4b1a      	ldr	r3, [pc, #104]	; (800c600 <pvPortMalloc+0x188>)
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	4b1b      	ldr	r3, [pc, #108]	; (800c608 <pvPortMalloc+0x190>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d203      	bcs.n	800c5aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5a2:	4b17      	ldr	r3, [pc, #92]	; (800c600 <pvPortMalloc+0x188>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a18      	ldr	r2, [pc, #96]	; (800c608 <pvPortMalloc+0x190>)
 800c5a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	4b13      	ldr	r3, [pc, #76]	; (800c5fc <pvPortMalloc+0x184>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	431a      	orrs	r2, r3
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c5be:	4b13      	ldr	r3, [pc, #76]	; (800c60c <pvPortMalloc+0x194>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	4a11      	ldr	r2, [pc, #68]	; (800c60c <pvPortMalloc+0x194>)
 800c5c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5c8:	f7fe fc08 	bl	800addc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	f003 0307 	and.w	r3, r3, #7
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <pvPortMalloc+0x174>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	60fb      	str	r3, [r7, #12]
}
 800c5e8:	bf00      	nop
 800c5ea:	e7fe      	b.n	800c5ea <pvPortMalloc+0x172>
	return pvReturn;
 800c5ec:	69fb      	ldr	r3, [r7, #28]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3728      	adds	r7, #40	; 0x28
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20004998 	.word	0x20004998
 800c5fc:	200049ac 	.word	0x200049ac
 800c600:	2000499c 	.word	0x2000499c
 800c604:	20004990 	.word	0x20004990
 800c608:	200049a0 	.word	0x200049a0
 800c60c:	200049a4 	.word	0x200049a4

0800c610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d04d      	beq.n	800c6be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c622:	2308      	movs	r3, #8
 800c624:	425b      	negs	r3, r3
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	4413      	add	r3, r2
 800c62a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	4b24      	ldr	r3, [pc, #144]	; (800c6c8 <vPortFree+0xb8>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4013      	ands	r3, r2
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10a      	bne.n	800c654 <vPortFree+0x44>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	60fb      	str	r3, [r7, #12]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00a      	beq.n	800c672 <vPortFree+0x62>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	60bb      	str	r3, [r7, #8]
}
 800c66e:	bf00      	nop
 800c670:	e7fe      	b.n	800c670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	4b14      	ldr	r3, [pc, #80]	; (800c6c8 <vPortFree+0xb8>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4013      	ands	r3, r2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d01e      	beq.n	800c6be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d11a      	bne.n	800c6be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	685a      	ldr	r2, [r3, #4]
 800c68c:	4b0e      	ldr	r3, [pc, #56]	; (800c6c8 <vPortFree+0xb8>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	43db      	mvns	r3, r3
 800c692:	401a      	ands	r2, r3
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c698:	f7fe fb92 	bl	800adc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	4b0a      	ldr	r3, [pc, #40]	; (800c6cc <vPortFree+0xbc>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	4a09      	ldr	r2, [pc, #36]	; (800c6cc <vPortFree+0xbc>)
 800c6a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6aa:	6938      	ldr	r0, [r7, #16]
 800c6ac:	f000 f874 	bl	800c798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c6b0:	4b07      	ldr	r3, [pc, #28]	; (800c6d0 <vPortFree+0xc0>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	4a06      	ldr	r2, [pc, #24]	; (800c6d0 <vPortFree+0xc0>)
 800c6b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6ba:	f7fe fb8f 	bl	800addc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6be:	bf00      	nop
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	200049ac 	.word	0x200049ac
 800c6cc:	2000499c 	.word	0x2000499c
 800c6d0:	200049a8 	.word	0x200049a8

0800c6d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c6de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6e0:	4b27      	ldr	r3, [pc, #156]	; (800c780 <prvHeapInit+0xac>)
 800c6e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f003 0307 	and.w	r3, r3, #7
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00c      	beq.n	800c708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	3307      	adds	r3, #7
 800c6f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f023 0307 	bic.w	r3, r3, #7
 800c6fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	4a1f      	ldr	r2, [pc, #124]	; (800c780 <prvHeapInit+0xac>)
 800c704:	4413      	add	r3, r2
 800c706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c70c:	4a1d      	ldr	r2, [pc, #116]	; (800c784 <prvHeapInit+0xb0>)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c712:	4b1c      	ldr	r3, [pc, #112]	; (800c784 <prvHeapInit+0xb0>)
 800c714:	2200      	movs	r2, #0
 800c716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	4413      	add	r3, r2
 800c71e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c720:	2208      	movs	r2, #8
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	1a9b      	subs	r3, r3, r2
 800c726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f023 0307 	bic.w	r3, r3, #7
 800c72e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	4a15      	ldr	r2, [pc, #84]	; (800c788 <prvHeapInit+0xb4>)
 800c734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c736:	4b14      	ldr	r3, [pc, #80]	; (800c788 <prvHeapInit+0xb4>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2200      	movs	r2, #0
 800c73c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c73e:	4b12      	ldr	r3, [pc, #72]	; (800c788 <prvHeapInit+0xb4>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c754:	4b0c      	ldr	r3, [pc, #48]	; (800c788 <prvHeapInit+0xb4>)
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	4a0a      	ldr	r2, [pc, #40]	; (800c78c <prvHeapInit+0xb8>)
 800c762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	4a09      	ldr	r2, [pc, #36]	; (800c790 <prvHeapInit+0xbc>)
 800c76a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c76c:	4b09      	ldr	r3, [pc, #36]	; (800c794 <prvHeapInit+0xc0>)
 800c76e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c772:	601a      	str	r2, [r3, #0]
}
 800c774:	bf00      	nop
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	20000d90 	.word	0x20000d90
 800c784:	20004990 	.word	0x20004990
 800c788:	20004998 	.word	0x20004998
 800c78c:	200049a0 	.word	0x200049a0
 800c790:	2000499c 	.word	0x2000499c
 800c794:	200049ac 	.word	0x200049ac

0800c798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7a0:	4b28      	ldr	r3, [pc, #160]	; (800c844 <prvInsertBlockIntoFreeList+0xac>)
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e002      	b.n	800c7ac <prvInsertBlockIntoFreeList+0x14>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d8f7      	bhi.n	800c7a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d108      	bne.n	800c7da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	441a      	add	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	441a      	add	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d118      	bne.n	800c820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	4b15      	ldr	r3, [pc, #84]	; (800c848 <prvInsertBlockIntoFreeList+0xb0>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d00d      	beq.n	800c816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	441a      	add	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	e008      	b.n	800c828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c816:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <prvInsertBlockIntoFreeList+0xb0>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	601a      	str	r2, [r3, #0]
 800c81e:	e003      	b.n	800c828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d002      	beq.n	800c836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	20004990 	.word	0x20004990
 800c848:	20004998 	.word	0x20004998

0800c84c <acos>:
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	ed2d 8b02 	vpush	{d8}
 800c852:	ec55 4b10 	vmov	r4, r5, d0
 800c856:	f000 f867 	bl	800c928 <__ieee754_acos>
 800c85a:	4b16      	ldr	r3, [pc, #88]	; (800c8b4 <acos+0x68>)
 800c85c:	eeb0 8a40 	vmov.f32	s16, s0
 800c860:	eef0 8a60 	vmov.f32	s17, s1
 800c864:	f993 3000 	ldrsb.w	r3, [r3]
 800c868:	3301      	adds	r3, #1
 800c86a:	d01c      	beq.n	800c8a6 <acos+0x5a>
 800c86c:	4622      	mov	r2, r4
 800c86e:	462b      	mov	r3, r5
 800c870:	4620      	mov	r0, r4
 800c872:	4629      	mov	r1, r5
 800c874:	f7f4 f902 	bl	8000a7c <__aeabi_dcmpun>
 800c878:	b9a8      	cbnz	r0, 800c8a6 <acos+0x5a>
 800c87a:	ec45 4b10 	vmov	d0, r4, r5
 800c87e:	f000 fb67 	bl	800cf50 <fabs>
 800c882:	4b0d      	ldr	r3, [pc, #52]	; (800c8b8 <acos+0x6c>)
 800c884:	ec51 0b10 	vmov	r0, r1, d0
 800c888:	2200      	movs	r2, #0
 800c88a:	f7f4 f8ed 	bl	8000a68 <__aeabi_dcmpgt>
 800c88e:	b150      	cbz	r0, 800c8a6 <acos+0x5a>
 800c890:	f000 fb72 	bl	800cf78 <__errno>
 800c894:	ecbd 8b02 	vpop	{d8}
 800c898:	2321      	movs	r3, #33	; 0x21
 800c89a:	6003      	str	r3, [r0, #0]
 800c89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8a0:	4806      	ldr	r0, [pc, #24]	; (800c8bc <acos+0x70>)
 800c8a2:	f000 bb61 	b.w	800cf68 <nan>
 800c8a6:	eeb0 0a48 	vmov.f32	s0, s16
 800c8aa:	eef0 0a68 	vmov.f32	s1, s17
 800c8ae:	ecbd 8b02 	vpop	{d8}
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	2000001c 	.word	0x2000001c
 800c8b8:	3ff00000 	.word	0x3ff00000
 800c8bc:	0800d150 	.word	0x0800d150

0800c8c0 <sqrt>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	ed2d 8b02 	vpush	{d8}
 800c8c6:	ec55 4b10 	vmov	r4, r5, d0
 800c8ca:	f000 fa8d 	bl	800cde8 <__ieee754_sqrt>
 800c8ce:	4b15      	ldr	r3, [pc, #84]	; (800c924 <sqrt+0x64>)
 800c8d0:	eeb0 8a40 	vmov.f32	s16, s0
 800c8d4:	eef0 8a60 	vmov.f32	s17, s1
 800c8d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	d019      	beq.n	800c914 <sqrt+0x54>
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f4 f8c8 	bl	8000a7c <__aeabi_dcmpun>
 800c8ec:	b990      	cbnz	r0, 800c914 <sqrt+0x54>
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	f7f4 f899 	bl	8000a2c <__aeabi_dcmplt>
 800c8fa:	b158      	cbz	r0, 800c914 <sqrt+0x54>
 800c8fc:	f000 fb3c 	bl	800cf78 <__errno>
 800c900:	2321      	movs	r3, #33	; 0x21
 800c902:	6003      	str	r3, [r0, #0]
 800c904:	2200      	movs	r2, #0
 800c906:	2300      	movs	r3, #0
 800c908:	4610      	mov	r0, r2
 800c90a:	4619      	mov	r1, r3
 800c90c:	f7f3 ff46 	bl	800079c <__aeabi_ddiv>
 800c910:	ec41 0b18 	vmov	d8, r0, r1
 800c914:	eeb0 0a48 	vmov.f32	s0, s16
 800c918:	eef0 0a68 	vmov.f32	s1, s17
 800c91c:	ecbd 8b02 	vpop	{d8}
 800c920:	bd38      	pop	{r3, r4, r5, pc}
 800c922:	bf00      	nop
 800c924:	2000001c 	.word	0x2000001c

0800c928 <__ieee754_acos>:
 800c928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	ec55 4b10 	vmov	r4, r5, d0
 800c930:	49b7      	ldr	r1, [pc, #732]	; (800cc10 <__ieee754_acos+0x2e8>)
 800c932:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c936:	428b      	cmp	r3, r1
 800c938:	dd1b      	ble.n	800c972 <__ieee754_acos+0x4a>
 800c93a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c93e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c942:	4323      	orrs	r3, r4
 800c944:	d106      	bne.n	800c954 <__ieee754_acos+0x2c>
 800c946:	2d00      	cmp	r5, #0
 800c948:	f300 8211 	bgt.w	800cd6e <__ieee754_acos+0x446>
 800c94c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800cba8 <__ieee754_acos+0x280>
 800c950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c954:	ee10 2a10 	vmov	r2, s0
 800c958:	462b      	mov	r3, r5
 800c95a:	ee10 0a10 	vmov	r0, s0
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f3 fc3a 	bl	80001d8 <__aeabi_dsub>
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	f7f3 ff18 	bl	800079c <__aeabi_ddiv>
 800c96c:	ec41 0b10 	vmov	d0, r0, r1
 800c970:	e7ee      	b.n	800c950 <__ieee754_acos+0x28>
 800c972:	49a8      	ldr	r1, [pc, #672]	; (800cc14 <__ieee754_acos+0x2ec>)
 800c974:	428b      	cmp	r3, r1
 800c976:	f300 8087 	bgt.w	800ca88 <__ieee754_acos+0x160>
 800c97a:	4aa7      	ldr	r2, [pc, #668]	; (800cc18 <__ieee754_acos+0x2f0>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	f340 81f9 	ble.w	800cd74 <__ieee754_acos+0x44c>
 800c982:	ee10 2a10 	vmov	r2, s0
 800c986:	ee10 0a10 	vmov	r0, s0
 800c98a:	462b      	mov	r3, r5
 800c98c:	4629      	mov	r1, r5
 800c98e:	f7f3 fddb 	bl	8000548 <__aeabi_dmul>
 800c992:	a387      	add	r3, pc, #540	; (adr r3, 800cbb0 <__ieee754_acos+0x288>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	4606      	mov	r6, r0
 800c99a:	460f      	mov	r7, r1
 800c99c:	f7f3 fdd4 	bl	8000548 <__aeabi_dmul>
 800c9a0:	a385      	add	r3, pc, #532	; (adr r3, 800cbb8 <__ieee754_acos+0x290>)
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	f7f3 fc19 	bl	80001dc <__adddf3>
 800c9aa:	4632      	mov	r2, r6
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	f7f3 fdcb 	bl	8000548 <__aeabi_dmul>
 800c9b2:	a383      	add	r3, pc, #524	; (adr r3, 800cbc0 <__ieee754_acos+0x298>)
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	f7f3 fc0e 	bl	80001d8 <__aeabi_dsub>
 800c9bc:	4632      	mov	r2, r6
 800c9be:	463b      	mov	r3, r7
 800c9c0:	f7f3 fdc2 	bl	8000548 <__aeabi_dmul>
 800c9c4:	a380      	add	r3, pc, #512	; (adr r3, 800cbc8 <__ieee754_acos+0x2a0>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	f7f3 fc07 	bl	80001dc <__adddf3>
 800c9ce:	4632      	mov	r2, r6
 800c9d0:	463b      	mov	r3, r7
 800c9d2:	f7f3 fdb9 	bl	8000548 <__aeabi_dmul>
 800c9d6:	a37e      	add	r3, pc, #504	; (adr r3, 800cbd0 <__ieee754_acos+0x2a8>)
 800c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9dc:	f7f3 fbfc 	bl	80001d8 <__aeabi_dsub>
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	463b      	mov	r3, r7
 800c9e4:	f7f3 fdb0 	bl	8000548 <__aeabi_dmul>
 800c9e8:	a37b      	add	r3, pc, #492	; (adr r3, 800cbd8 <__ieee754_acos+0x2b0>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	f7f3 fbf5 	bl	80001dc <__adddf3>
 800c9f2:	4632      	mov	r2, r6
 800c9f4:	463b      	mov	r3, r7
 800c9f6:	f7f3 fda7 	bl	8000548 <__aeabi_dmul>
 800c9fa:	a379      	add	r3, pc, #484	; (adr r3, 800cbe0 <__ieee754_acos+0x2b8>)
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	4680      	mov	r8, r0
 800ca02:	4689      	mov	r9, r1
 800ca04:	4630      	mov	r0, r6
 800ca06:	4639      	mov	r1, r7
 800ca08:	f7f3 fd9e 	bl	8000548 <__aeabi_dmul>
 800ca0c:	a376      	add	r3, pc, #472	; (adr r3, 800cbe8 <__ieee754_acos+0x2c0>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	f7f3 fbe1 	bl	80001d8 <__aeabi_dsub>
 800ca16:	4632      	mov	r2, r6
 800ca18:	463b      	mov	r3, r7
 800ca1a:	f7f3 fd95 	bl	8000548 <__aeabi_dmul>
 800ca1e:	a374      	add	r3, pc, #464	; (adr r3, 800cbf0 <__ieee754_acos+0x2c8>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f3 fbda 	bl	80001dc <__adddf3>
 800ca28:	4632      	mov	r2, r6
 800ca2a:	463b      	mov	r3, r7
 800ca2c:	f7f3 fd8c 	bl	8000548 <__aeabi_dmul>
 800ca30:	a371      	add	r3, pc, #452	; (adr r3, 800cbf8 <__ieee754_acos+0x2d0>)
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	f7f3 fbcf 	bl	80001d8 <__aeabi_dsub>
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	463b      	mov	r3, r7
 800ca3e:	f7f3 fd83 	bl	8000548 <__aeabi_dmul>
 800ca42:	4b76      	ldr	r3, [pc, #472]	; (800cc1c <__ieee754_acos+0x2f4>)
 800ca44:	2200      	movs	r2, #0
 800ca46:	f7f3 fbc9 	bl	80001dc <__adddf3>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4640      	mov	r0, r8
 800ca50:	4649      	mov	r1, r9
 800ca52:	f7f3 fea3 	bl	800079c <__aeabi_ddiv>
 800ca56:	4622      	mov	r2, r4
 800ca58:	462b      	mov	r3, r5
 800ca5a:	f7f3 fd75 	bl	8000548 <__aeabi_dmul>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	a167      	add	r1, pc, #412	; (adr r1, 800cc00 <__ieee754_acos+0x2d8>)
 800ca64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca68:	f7f3 fbb6 	bl	80001d8 <__aeabi_dsub>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4620      	mov	r0, r4
 800ca72:	4629      	mov	r1, r5
 800ca74:	f7f3 fbb0 	bl	80001d8 <__aeabi_dsub>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	a162      	add	r1, pc, #392	; (adr r1, 800cc08 <__ieee754_acos+0x2e0>)
 800ca7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca82:	f7f3 fba9 	bl	80001d8 <__aeabi_dsub>
 800ca86:	e771      	b.n	800c96c <__ieee754_acos+0x44>
 800ca88:	2d00      	cmp	r5, #0
 800ca8a:	f280 80cb 	bge.w	800cc24 <__ieee754_acos+0x2fc>
 800ca8e:	ee10 0a10 	vmov	r0, s0
 800ca92:	4b62      	ldr	r3, [pc, #392]	; (800cc1c <__ieee754_acos+0x2f4>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	4629      	mov	r1, r5
 800ca98:	f7f3 fba0 	bl	80001dc <__adddf3>
 800ca9c:	4b60      	ldr	r3, [pc, #384]	; (800cc20 <__ieee754_acos+0x2f8>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f7f3 fd52 	bl	8000548 <__aeabi_dmul>
 800caa4:	a342      	add	r3, pc, #264	; (adr r3, 800cbb0 <__ieee754_acos+0x288>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
 800caae:	f7f3 fd4b 	bl	8000548 <__aeabi_dmul>
 800cab2:	a341      	add	r3, pc, #260	; (adr r3, 800cbb8 <__ieee754_acos+0x290>)
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	f7f3 fb90 	bl	80001dc <__adddf3>
 800cabc:	4622      	mov	r2, r4
 800cabe:	462b      	mov	r3, r5
 800cac0:	f7f3 fd42 	bl	8000548 <__aeabi_dmul>
 800cac4:	a33e      	add	r3, pc, #248	; (adr r3, 800cbc0 <__ieee754_acos+0x298>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	f7f3 fb85 	bl	80001d8 <__aeabi_dsub>
 800cace:	4622      	mov	r2, r4
 800cad0:	462b      	mov	r3, r5
 800cad2:	f7f3 fd39 	bl	8000548 <__aeabi_dmul>
 800cad6:	a33c      	add	r3, pc, #240	; (adr r3, 800cbc8 <__ieee754_acos+0x2a0>)
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	f7f3 fb7e 	bl	80001dc <__adddf3>
 800cae0:	4622      	mov	r2, r4
 800cae2:	462b      	mov	r3, r5
 800cae4:	f7f3 fd30 	bl	8000548 <__aeabi_dmul>
 800cae8:	a339      	add	r3, pc, #228	; (adr r3, 800cbd0 <__ieee754_acos+0x2a8>)
 800caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caee:	f7f3 fb73 	bl	80001d8 <__aeabi_dsub>
 800caf2:	4622      	mov	r2, r4
 800caf4:	462b      	mov	r3, r5
 800caf6:	f7f3 fd27 	bl	8000548 <__aeabi_dmul>
 800cafa:	a337      	add	r3, pc, #220	; (adr r3, 800cbd8 <__ieee754_acos+0x2b0>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fb6c 	bl	80001dc <__adddf3>
 800cb04:	4622      	mov	r2, r4
 800cb06:	462b      	mov	r3, r5
 800cb08:	f7f3 fd1e 	bl	8000548 <__aeabi_dmul>
 800cb0c:	ec45 4b10 	vmov	d0, r4, r5
 800cb10:	4680      	mov	r8, r0
 800cb12:	4689      	mov	r9, r1
 800cb14:	f000 f968 	bl	800cde8 <__ieee754_sqrt>
 800cb18:	a331      	add	r3, pc, #196	; (adr r3, 800cbe0 <__ieee754_acos+0x2b8>)
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	4620      	mov	r0, r4
 800cb20:	4629      	mov	r1, r5
 800cb22:	ec57 6b10 	vmov	r6, r7, d0
 800cb26:	f7f3 fd0f 	bl	8000548 <__aeabi_dmul>
 800cb2a:	a32f      	add	r3, pc, #188	; (adr r3, 800cbe8 <__ieee754_acos+0x2c0>)
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	f7f3 fb52 	bl	80001d8 <__aeabi_dsub>
 800cb34:	4622      	mov	r2, r4
 800cb36:	462b      	mov	r3, r5
 800cb38:	f7f3 fd06 	bl	8000548 <__aeabi_dmul>
 800cb3c:	a32c      	add	r3, pc, #176	; (adr r3, 800cbf0 <__ieee754_acos+0x2c8>)
 800cb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb42:	f7f3 fb4b 	bl	80001dc <__adddf3>
 800cb46:	4622      	mov	r2, r4
 800cb48:	462b      	mov	r3, r5
 800cb4a:	f7f3 fcfd 	bl	8000548 <__aeabi_dmul>
 800cb4e:	a32a      	add	r3, pc, #168	; (adr r3, 800cbf8 <__ieee754_acos+0x2d0>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	f7f3 fb40 	bl	80001d8 <__aeabi_dsub>
 800cb58:	4622      	mov	r2, r4
 800cb5a:	462b      	mov	r3, r5
 800cb5c:	f7f3 fcf4 	bl	8000548 <__aeabi_dmul>
 800cb60:	4b2e      	ldr	r3, [pc, #184]	; (800cc1c <__ieee754_acos+0x2f4>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	f7f3 fb3a 	bl	80001dc <__adddf3>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4640      	mov	r0, r8
 800cb6e:	4649      	mov	r1, r9
 800cb70:	f7f3 fe14 	bl	800079c <__aeabi_ddiv>
 800cb74:	4632      	mov	r2, r6
 800cb76:	463b      	mov	r3, r7
 800cb78:	f7f3 fce6 	bl	8000548 <__aeabi_dmul>
 800cb7c:	a320      	add	r3, pc, #128	; (adr r3, 800cc00 <__ieee754_acos+0x2d8>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	f7f3 fb29 	bl	80001d8 <__aeabi_dsub>
 800cb86:	4632      	mov	r2, r6
 800cb88:	463b      	mov	r3, r7
 800cb8a:	f7f3 fb27 	bl	80001dc <__adddf3>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	460b      	mov	r3, r1
 800cb92:	f7f3 fb23 	bl	80001dc <__adddf3>
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	a103      	add	r1, pc, #12	; (adr r1, 800cba8 <__ieee754_acos+0x280>)
 800cb9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cba0:	e76f      	b.n	800ca82 <__ieee754_acos+0x15a>
 800cba2:	bf00      	nop
 800cba4:	f3af 8000 	nop.w
 800cba8:	54442d18 	.word	0x54442d18
 800cbac:	400921fb 	.word	0x400921fb
 800cbb0:	0dfdf709 	.word	0x0dfdf709
 800cbb4:	3f023de1 	.word	0x3f023de1
 800cbb8:	7501b288 	.word	0x7501b288
 800cbbc:	3f49efe0 	.word	0x3f49efe0
 800cbc0:	b5688f3b 	.word	0xb5688f3b
 800cbc4:	3fa48228 	.word	0x3fa48228
 800cbc8:	0e884455 	.word	0x0e884455
 800cbcc:	3fc9c155 	.word	0x3fc9c155
 800cbd0:	03eb6f7d 	.word	0x03eb6f7d
 800cbd4:	3fd4d612 	.word	0x3fd4d612
 800cbd8:	55555555 	.word	0x55555555
 800cbdc:	3fc55555 	.word	0x3fc55555
 800cbe0:	b12e9282 	.word	0xb12e9282
 800cbe4:	3fb3b8c5 	.word	0x3fb3b8c5
 800cbe8:	1b8d0159 	.word	0x1b8d0159
 800cbec:	3fe6066c 	.word	0x3fe6066c
 800cbf0:	9c598ac8 	.word	0x9c598ac8
 800cbf4:	40002ae5 	.word	0x40002ae5
 800cbf8:	1c8a2d4b 	.word	0x1c8a2d4b
 800cbfc:	40033a27 	.word	0x40033a27
 800cc00:	33145c07 	.word	0x33145c07
 800cc04:	3c91a626 	.word	0x3c91a626
 800cc08:	54442d18 	.word	0x54442d18
 800cc0c:	3ff921fb 	.word	0x3ff921fb
 800cc10:	3fefffff 	.word	0x3fefffff
 800cc14:	3fdfffff 	.word	0x3fdfffff
 800cc18:	3c600000 	.word	0x3c600000
 800cc1c:	3ff00000 	.word	0x3ff00000
 800cc20:	3fe00000 	.word	0x3fe00000
 800cc24:	ee10 2a10 	vmov	r2, s0
 800cc28:	462b      	mov	r3, r5
 800cc2a:	496d      	ldr	r1, [pc, #436]	; (800cde0 <__ieee754_acos+0x4b8>)
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	f7f3 fad3 	bl	80001d8 <__aeabi_dsub>
 800cc32:	4b6c      	ldr	r3, [pc, #432]	; (800cde4 <__ieee754_acos+0x4bc>)
 800cc34:	2200      	movs	r2, #0
 800cc36:	f7f3 fc87 	bl	8000548 <__aeabi_dmul>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	460d      	mov	r5, r1
 800cc3e:	ec45 4b10 	vmov	d0, r4, r5
 800cc42:	f000 f8d1 	bl	800cde8 <__ieee754_sqrt>
 800cc46:	a34e      	add	r3, pc, #312	; (adr r3, 800cd80 <__ieee754_acos+0x458>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4629      	mov	r1, r5
 800cc50:	ec59 8b10 	vmov	r8, r9, d0
 800cc54:	f7f3 fc78 	bl	8000548 <__aeabi_dmul>
 800cc58:	a34b      	add	r3, pc, #300	; (adr r3, 800cd88 <__ieee754_acos+0x460>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f7f3 fabd 	bl	80001dc <__adddf3>
 800cc62:	4622      	mov	r2, r4
 800cc64:	462b      	mov	r3, r5
 800cc66:	f7f3 fc6f 	bl	8000548 <__aeabi_dmul>
 800cc6a:	a349      	add	r3, pc, #292	; (adr r3, 800cd90 <__ieee754_acos+0x468>)
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	f7f3 fab2 	bl	80001d8 <__aeabi_dsub>
 800cc74:	4622      	mov	r2, r4
 800cc76:	462b      	mov	r3, r5
 800cc78:	f7f3 fc66 	bl	8000548 <__aeabi_dmul>
 800cc7c:	a346      	add	r3, pc, #280	; (adr r3, 800cd98 <__ieee754_acos+0x470>)
 800cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc82:	f7f3 faab 	bl	80001dc <__adddf3>
 800cc86:	4622      	mov	r2, r4
 800cc88:	462b      	mov	r3, r5
 800cc8a:	f7f3 fc5d 	bl	8000548 <__aeabi_dmul>
 800cc8e:	a344      	add	r3, pc, #272	; (adr r3, 800cda0 <__ieee754_acos+0x478>)
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f7f3 faa0 	bl	80001d8 <__aeabi_dsub>
 800cc98:	4622      	mov	r2, r4
 800cc9a:	462b      	mov	r3, r5
 800cc9c:	f7f3 fc54 	bl	8000548 <__aeabi_dmul>
 800cca0:	a341      	add	r3, pc, #260	; (adr r3, 800cda8 <__ieee754_acos+0x480>)
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	f7f3 fa99 	bl	80001dc <__adddf3>
 800ccaa:	4622      	mov	r2, r4
 800ccac:	462b      	mov	r3, r5
 800ccae:	f7f3 fc4b 	bl	8000548 <__aeabi_dmul>
 800ccb2:	a33f      	add	r3, pc, #252	; (adr r3, 800cdb0 <__ieee754_acos+0x488>)
 800ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb8:	4682      	mov	sl, r0
 800ccba:	468b      	mov	fp, r1
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	f7f3 fc42 	bl	8000548 <__aeabi_dmul>
 800ccc4:	a33c      	add	r3, pc, #240	; (adr r3, 800cdb8 <__ieee754_acos+0x490>)
 800ccc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccca:	f7f3 fa85 	bl	80001d8 <__aeabi_dsub>
 800ccce:	4622      	mov	r2, r4
 800ccd0:	462b      	mov	r3, r5
 800ccd2:	f7f3 fc39 	bl	8000548 <__aeabi_dmul>
 800ccd6:	a33a      	add	r3, pc, #232	; (adr r3, 800cdc0 <__ieee754_acos+0x498>)
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	f7f3 fa7e 	bl	80001dc <__adddf3>
 800cce0:	4622      	mov	r2, r4
 800cce2:	462b      	mov	r3, r5
 800cce4:	f7f3 fc30 	bl	8000548 <__aeabi_dmul>
 800cce8:	a337      	add	r3, pc, #220	; (adr r3, 800cdc8 <__ieee754_acos+0x4a0>)
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	f7f3 fa73 	bl	80001d8 <__aeabi_dsub>
 800ccf2:	4622      	mov	r2, r4
 800ccf4:	462b      	mov	r3, r5
 800ccf6:	f7f3 fc27 	bl	8000548 <__aeabi_dmul>
 800ccfa:	4b39      	ldr	r3, [pc, #228]	; (800cde0 <__ieee754_acos+0x4b8>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f7f3 fa6d 	bl	80001dc <__adddf3>
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	4650      	mov	r0, sl
 800cd08:	4659      	mov	r1, fp
 800cd0a:	f7f3 fd47 	bl	800079c <__aeabi_ddiv>
 800cd0e:	4642      	mov	r2, r8
 800cd10:	464b      	mov	r3, r9
 800cd12:	f7f3 fc19 	bl	8000548 <__aeabi_dmul>
 800cd16:	2600      	movs	r6, #0
 800cd18:	4682      	mov	sl, r0
 800cd1a:	468b      	mov	fp, r1
 800cd1c:	4632      	mov	r2, r6
 800cd1e:	464b      	mov	r3, r9
 800cd20:	4630      	mov	r0, r6
 800cd22:	4649      	mov	r1, r9
 800cd24:	f7f3 fc10 	bl	8000548 <__aeabi_dmul>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	4629      	mov	r1, r5
 800cd30:	f7f3 fa52 	bl	80001d8 <__aeabi_dsub>
 800cd34:	4632      	mov	r2, r6
 800cd36:	4604      	mov	r4, r0
 800cd38:	460d      	mov	r5, r1
 800cd3a:	464b      	mov	r3, r9
 800cd3c:	4640      	mov	r0, r8
 800cd3e:	4649      	mov	r1, r9
 800cd40:	f7f3 fa4c 	bl	80001dc <__adddf3>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	4620      	mov	r0, r4
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	f7f3 fd26 	bl	800079c <__aeabi_ddiv>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	4650      	mov	r0, sl
 800cd56:	4659      	mov	r1, fp
 800cd58:	f7f3 fa40 	bl	80001dc <__adddf3>
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	464b      	mov	r3, r9
 800cd60:	f7f3 fa3c 	bl	80001dc <__adddf3>
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	f7f3 fa38 	bl	80001dc <__adddf3>
 800cd6c:	e5fe      	b.n	800c96c <__ieee754_acos+0x44>
 800cd6e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800cdd0 <__ieee754_acos+0x4a8>
 800cd72:	e5ed      	b.n	800c950 <__ieee754_acos+0x28>
 800cd74:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800cdd8 <__ieee754_acos+0x4b0>
 800cd78:	e5ea      	b.n	800c950 <__ieee754_acos+0x28>
 800cd7a:	bf00      	nop
 800cd7c:	f3af 8000 	nop.w
 800cd80:	0dfdf709 	.word	0x0dfdf709
 800cd84:	3f023de1 	.word	0x3f023de1
 800cd88:	7501b288 	.word	0x7501b288
 800cd8c:	3f49efe0 	.word	0x3f49efe0
 800cd90:	b5688f3b 	.word	0xb5688f3b
 800cd94:	3fa48228 	.word	0x3fa48228
 800cd98:	0e884455 	.word	0x0e884455
 800cd9c:	3fc9c155 	.word	0x3fc9c155
 800cda0:	03eb6f7d 	.word	0x03eb6f7d
 800cda4:	3fd4d612 	.word	0x3fd4d612
 800cda8:	55555555 	.word	0x55555555
 800cdac:	3fc55555 	.word	0x3fc55555
 800cdb0:	b12e9282 	.word	0xb12e9282
 800cdb4:	3fb3b8c5 	.word	0x3fb3b8c5
 800cdb8:	1b8d0159 	.word	0x1b8d0159
 800cdbc:	3fe6066c 	.word	0x3fe6066c
 800cdc0:	9c598ac8 	.word	0x9c598ac8
 800cdc4:	40002ae5 	.word	0x40002ae5
 800cdc8:	1c8a2d4b 	.word	0x1c8a2d4b
 800cdcc:	40033a27 	.word	0x40033a27
	...
 800cdd8:	54442d18 	.word	0x54442d18
 800cddc:	3ff921fb 	.word	0x3ff921fb
 800cde0:	3ff00000 	.word	0x3ff00000
 800cde4:	3fe00000 	.word	0x3fe00000

0800cde8 <__ieee754_sqrt>:
 800cde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdec:	ec55 4b10 	vmov	r4, r5, d0
 800cdf0:	4e56      	ldr	r6, [pc, #344]	; (800cf4c <__ieee754_sqrt+0x164>)
 800cdf2:	43ae      	bics	r6, r5
 800cdf4:	ee10 0a10 	vmov	r0, s0
 800cdf8:	ee10 3a10 	vmov	r3, s0
 800cdfc:	4629      	mov	r1, r5
 800cdfe:	462a      	mov	r2, r5
 800ce00:	d110      	bne.n	800ce24 <__ieee754_sqrt+0x3c>
 800ce02:	ee10 2a10 	vmov	r2, s0
 800ce06:	462b      	mov	r3, r5
 800ce08:	f7f3 fb9e 	bl	8000548 <__aeabi_dmul>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	460b      	mov	r3, r1
 800ce10:	4620      	mov	r0, r4
 800ce12:	4629      	mov	r1, r5
 800ce14:	f7f3 f9e2 	bl	80001dc <__adddf3>
 800ce18:	4604      	mov	r4, r0
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	ec45 4b10 	vmov	d0, r4, r5
 800ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce24:	2d00      	cmp	r5, #0
 800ce26:	dc10      	bgt.n	800ce4a <__ieee754_sqrt+0x62>
 800ce28:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ce2c:	4330      	orrs	r0, r6
 800ce2e:	d0f5      	beq.n	800ce1c <__ieee754_sqrt+0x34>
 800ce30:	b15d      	cbz	r5, 800ce4a <__ieee754_sqrt+0x62>
 800ce32:	ee10 2a10 	vmov	r2, s0
 800ce36:	462b      	mov	r3, r5
 800ce38:	ee10 0a10 	vmov	r0, s0
 800ce3c:	f7f3 f9cc 	bl	80001d8 <__aeabi_dsub>
 800ce40:	4602      	mov	r2, r0
 800ce42:	460b      	mov	r3, r1
 800ce44:	f7f3 fcaa 	bl	800079c <__aeabi_ddiv>
 800ce48:	e7e6      	b.n	800ce18 <__ieee754_sqrt+0x30>
 800ce4a:	1509      	asrs	r1, r1, #20
 800ce4c:	d076      	beq.n	800cf3c <__ieee754_sqrt+0x154>
 800ce4e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ce52:	07ce      	lsls	r6, r1, #31
 800ce54:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ce58:	bf5e      	ittt	pl
 800ce5a:	0fda      	lsrpl	r2, r3, #31
 800ce5c:	005b      	lslpl	r3, r3, #1
 800ce5e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ce62:	0fda      	lsrs	r2, r3, #31
 800ce64:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ce68:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	106d      	asrs	r5, r5, #1
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	f04f 0e16 	mov.w	lr, #22
 800ce76:	4684      	mov	ip, r0
 800ce78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce7c:	eb0c 0401 	add.w	r4, ip, r1
 800ce80:	4294      	cmp	r4, r2
 800ce82:	bfde      	ittt	le
 800ce84:	1b12      	suble	r2, r2, r4
 800ce86:	eb04 0c01 	addle.w	ip, r4, r1
 800ce8a:	1840      	addle	r0, r0, r1
 800ce8c:	0052      	lsls	r2, r2, #1
 800ce8e:	f1be 0e01 	subs.w	lr, lr, #1
 800ce92:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ce96:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ce9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce9e:	d1ed      	bne.n	800ce7c <__ieee754_sqrt+0x94>
 800cea0:	4671      	mov	r1, lr
 800cea2:	2720      	movs	r7, #32
 800cea4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cea8:	4562      	cmp	r2, ip
 800ceaa:	eb04 060e 	add.w	r6, r4, lr
 800ceae:	dc02      	bgt.n	800ceb6 <__ieee754_sqrt+0xce>
 800ceb0:	d113      	bne.n	800ceda <__ieee754_sqrt+0xf2>
 800ceb2:	429e      	cmp	r6, r3
 800ceb4:	d811      	bhi.n	800ceda <__ieee754_sqrt+0xf2>
 800ceb6:	2e00      	cmp	r6, #0
 800ceb8:	eb06 0e04 	add.w	lr, r6, r4
 800cebc:	da43      	bge.n	800cf46 <__ieee754_sqrt+0x15e>
 800cebe:	f1be 0f00 	cmp.w	lr, #0
 800cec2:	db40      	blt.n	800cf46 <__ieee754_sqrt+0x15e>
 800cec4:	f10c 0801 	add.w	r8, ip, #1
 800cec8:	eba2 020c 	sub.w	r2, r2, ip
 800cecc:	429e      	cmp	r6, r3
 800cece:	bf88      	it	hi
 800ced0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ced4:	1b9b      	subs	r3, r3, r6
 800ced6:	4421      	add	r1, r4
 800ced8:	46c4      	mov	ip, r8
 800ceda:	0052      	lsls	r2, r2, #1
 800cedc:	3f01      	subs	r7, #1
 800cede:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cee2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cee6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ceea:	d1dd      	bne.n	800cea8 <__ieee754_sqrt+0xc0>
 800ceec:	4313      	orrs	r3, r2
 800ceee:	d006      	beq.n	800cefe <__ieee754_sqrt+0x116>
 800cef0:	1c4c      	adds	r4, r1, #1
 800cef2:	bf13      	iteet	ne
 800cef4:	3101      	addne	r1, #1
 800cef6:	3001      	addeq	r0, #1
 800cef8:	4639      	moveq	r1, r7
 800cefa:	f021 0101 	bicne.w	r1, r1, #1
 800cefe:	1043      	asrs	r3, r0, #1
 800cf00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cf04:	0849      	lsrs	r1, r1, #1
 800cf06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cf0a:	07c2      	lsls	r2, r0, #31
 800cf0c:	bf48      	it	mi
 800cf0e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cf12:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cf16:	460c      	mov	r4, r1
 800cf18:	463d      	mov	r5, r7
 800cf1a:	e77f      	b.n	800ce1c <__ieee754_sqrt+0x34>
 800cf1c:	0ada      	lsrs	r2, r3, #11
 800cf1e:	3815      	subs	r0, #21
 800cf20:	055b      	lsls	r3, r3, #21
 800cf22:	2a00      	cmp	r2, #0
 800cf24:	d0fa      	beq.n	800cf1c <__ieee754_sqrt+0x134>
 800cf26:	02d7      	lsls	r7, r2, #11
 800cf28:	d50a      	bpl.n	800cf40 <__ieee754_sqrt+0x158>
 800cf2a:	f1c1 0420 	rsb	r4, r1, #32
 800cf2e:	fa23 f404 	lsr.w	r4, r3, r4
 800cf32:	1e4d      	subs	r5, r1, #1
 800cf34:	408b      	lsls	r3, r1
 800cf36:	4322      	orrs	r2, r4
 800cf38:	1b41      	subs	r1, r0, r5
 800cf3a:	e788      	b.n	800ce4e <__ieee754_sqrt+0x66>
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	e7f0      	b.n	800cf22 <__ieee754_sqrt+0x13a>
 800cf40:	0052      	lsls	r2, r2, #1
 800cf42:	3101      	adds	r1, #1
 800cf44:	e7ef      	b.n	800cf26 <__ieee754_sqrt+0x13e>
 800cf46:	46e0      	mov	r8, ip
 800cf48:	e7be      	b.n	800cec8 <__ieee754_sqrt+0xe0>
 800cf4a:	bf00      	nop
 800cf4c:	7ff00000 	.word	0x7ff00000

0800cf50 <fabs>:
 800cf50:	ec51 0b10 	vmov	r0, r1, d0
 800cf54:	ee10 2a10 	vmov	r2, s0
 800cf58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf5c:	ec43 2b10 	vmov	d0, r2, r3
 800cf60:	4770      	bx	lr
 800cf62:	0000      	movs	r0, r0
 800cf64:	0000      	movs	r0, r0
	...

0800cf68 <nan>:
 800cf68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf70 <nan+0x8>
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	00000000 	.word	0x00000000
 800cf74:	7ff80000 	.word	0x7ff80000

0800cf78 <__errno>:
 800cf78:	4b01      	ldr	r3, [pc, #4]	; (800cf80 <__errno+0x8>)
 800cf7a:	6818      	ldr	r0, [r3, #0]
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop
 800cf80:	20000020 	.word	0x20000020

0800cf84 <__libc_init_array>:
 800cf84:	b570      	push	{r4, r5, r6, lr}
 800cf86:	4d0d      	ldr	r5, [pc, #52]	; (800cfbc <__libc_init_array+0x38>)
 800cf88:	4c0d      	ldr	r4, [pc, #52]	; (800cfc0 <__libc_init_array+0x3c>)
 800cf8a:	1b64      	subs	r4, r4, r5
 800cf8c:	10a4      	asrs	r4, r4, #2
 800cf8e:	2600      	movs	r6, #0
 800cf90:	42a6      	cmp	r6, r4
 800cf92:	d109      	bne.n	800cfa8 <__libc_init_array+0x24>
 800cf94:	4d0b      	ldr	r5, [pc, #44]	; (800cfc4 <__libc_init_array+0x40>)
 800cf96:	4c0c      	ldr	r4, [pc, #48]	; (800cfc8 <__libc_init_array+0x44>)
 800cf98:	f000 f82e 	bl	800cff8 <_init>
 800cf9c:	1b64      	subs	r4, r4, r5
 800cf9e:	10a4      	asrs	r4, r4, #2
 800cfa0:	2600      	movs	r6, #0
 800cfa2:	42a6      	cmp	r6, r4
 800cfa4:	d105      	bne.n	800cfb2 <__libc_init_array+0x2e>
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}
 800cfa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfac:	4798      	blx	r3
 800cfae:	3601      	adds	r6, #1
 800cfb0:	e7ee      	b.n	800cf90 <__libc_init_array+0xc>
 800cfb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb6:	4798      	blx	r3
 800cfb8:	3601      	adds	r6, #1
 800cfba:	e7f2      	b.n	800cfa2 <__libc_init_array+0x1e>
 800cfbc:	0800d15c 	.word	0x0800d15c
 800cfc0:	0800d15c 	.word	0x0800d15c
 800cfc4:	0800d15c 	.word	0x0800d15c
 800cfc8:	0800d160 	.word	0x0800d160

0800cfcc <memcpy>:
 800cfcc:	440a      	add	r2, r1
 800cfce:	4291      	cmp	r1, r2
 800cfd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfd4:	d100      	bne.n	800cfd8 <memcpy+0xc>
 800cfd6:	4770      	bx	lr
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfe2:	4291      	cmp	r1, r2
 800cfe4:	d1f9      	bne.n	800cfda <memcpy+0xe>
 800cfe6:	bd10      	pop	{r4, pc}

0800cfe8 <memset>:
 800cfe8:	4402      	add	r2, r0
 800cfea:	4603      	mov	r3, r0
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d100      	bne.n	800cff2 <memset+0xa>
 800cff0:	4770      	bx	lr
 800cff2:	f803 1b01 	strb.w	r1, [r3], #1
 800cff6:	e7f9      	b.n	800cfec <memset+0x4>

0800cff8 <_init>:
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	bf00      	nop
 800cffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffe:	bc08      	pop	{r3}
 800d000:	469e      	mov	lr, r3
 800d002:	4770      	bx	lr

0800d004 <_fini>:
 800d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d006:	bf00      	nop
 800d008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d00a:	bc08      	pop	{r3}
 800d00c:	469e      	mov	lr, r3
 800d00e:	4770      	bx	lr
