
RobotController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c50  08007c50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007c50  08007c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c58  08007c58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c78  20000010  08007c70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c88  08007c70  00024c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d09e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003993  00000000  00000000  0003d0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00040a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  000421d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003833  00000000  00000000  000437f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bf8  00000000  00000000  00047023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e37a3  00000000  00000000  0005fc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001433be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006358  00000000  00000000  00143414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bd0 	.word	0x08007bd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007bd0 	.word	0x08007bd0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 faae 	bl	8001a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f828 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fdfc 	bl	80010d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 fdda 	bl	8001090 <MX_DMA_Init>
  MX_TIM1_Init();
 80004dc:	f000 f97c 	bl	80007d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e0:	f000 fa78 	bl	80009d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e4:	f000 fb46 	bl	8000b74 <MX_TIM3_Init>
  MX_CAN2_Init();
 80004e8:	f000 f942 	bl	8000770 <MX_CAN2_Init>
  MX_TIM8_Init();
 80004ec:	f000 fc14 	bl	8000d18 <MX_TIM8_Init>
  MX_ADC1_Init();
 80004f0:	f000 f882 	bl	80005f8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004f4:	f000 fda2 	bl	800103c <MX_USART2_UART_Init>
  MX_TIM12_Init();
 80004f8:	f000 fd0c 	bl	8000f14 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f004 fdda 	bl	80050b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <main+0x50>)
 8000502:	2100      	movs	r1, #0
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x54>)
 8000506:	f004 fe1f 	bl	8005148 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <main+0x58>)
 800050e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000510:	f004 fdf4 	bl	80050fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x4c>
 8000516:	bf00      	nop
 8000518:	08007c0c 	.word	0x08007c0c
 800051c:	0800121d 	.word	0x0800121d
 8000520:	2000493c 	.word	0x2000493c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f007 fb44 	bl	8007bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000598:	23a8      	movs	r3, #168	; 0xa8
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 feeb 	bl	8003384 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b4:	f000 fe5e 	bl	8001274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2105      	movs	r1, #5
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 f94c 	bl	8003874 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005e2:	f000 fe47 	bl	8001274 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060a:	4b56      	ldr	r3, [pc, #344]	; (8000764 <MX_ADC1_Init+0x16c>)
 800060c:	4a56      	ldr	r2, [pc, #344]	; (8000768 <MX_ADC1_Init+0x170>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000610:	4b54      	ldr	r3, [pc, #336]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000612:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000616:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000618:	4b52      	ldr	r3, [pc, #328]	; (8000764 <MX_ADC1_Init+0x16c>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800061e:	4b51      	ldr	r3, [pc, #324]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000620:	2201      	movs	r2, #1
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000624:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b4e      	ldr	r3, [pc, #312]	; (8000764 <MX_ADC1_Init+0x16c>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b4c      	ldr	r3, [pc, #304]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <MX_ADC1_Init+0x16c>)
 800063a:	4a4c      	ldr	r2, [pc, #304]	; (800076c <MX_ADC1_Init+0x174>)
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063e:	4b49      	ldr	r3, [pc, #292]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000644:	4b47      	ldr	r3, [pc, #284]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000646:	2208      	movs	r2, #8
 8000648:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064a:	4b46      	ldr	r3, [pc, #280]	; (8000764 <MX_ADC1_Init+0x16c>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b44      	ldr	r3, [pc, #272]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000654:	2201      	movs	r2, #1
 8000656:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4842      	ldr	r0, [pc, #264]	; (8000764 <MX_ADC1_Init+0x16c>)
 800065a:	f001 fa29 	bl	8001ab0 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000664:	f000 fe06 	bl	8001274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000668:	2304      	movs	r3, #4
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800066c:	2301      	movs	r3, #1
 800066e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	483a      	ldr	r0, [pc, #232]	; (8000764 <MX_ADC1_Init+0x16c>)
 800067a:	f001 fcd5 	bl	8002028 <HAL_ADC_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000684:	f000 fdf6 	bl	8001274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000688:	2305      	movs	r3, #5
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4833      	ldr	r0, [pc, #204]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000696:	f001 fcc7 	bl	8002028 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006a0:	f000 fde8 	bl	8001274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006a4:	230a      	movs	r3, #10
 80006a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006a8:	2303      	movs	r3, #3
 80006aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	482c      	ldr	r0, [pc, #176]	; (8000764 <MX_ADC1_Init+0x16c>)
 80006b2:	f001 fcb9 	bl	8002028 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006bc:	f000 fdda 	bl	8001274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006c0:	230b      	movs	r3, #11
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4619      	mov	r1, r3
 80006cc:	4825      	ldr	r0, [pc, #148]	; (8000764 <MX_ADC1_Init+0x16c>)
 80006ce:	f001 fcab 	bl	8002028 <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006d8:	f000 fdcc 	bl	8001274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006dc:	230c      	movs	r3, #12
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80006e0:	2305      	movs	r3, #5
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	481e      	ldr	r0, [pc, #120]	; (8000764 <MX_ADC1_Init+0x16c>)
 80006ea:	f001 fc9d 	bl	8002028 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80006f4:	f000 fdbe 	bl	8001274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006f8:	230d      	movs	r3, #13
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80006fc:	2306      	movs	r3, #6
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4817      	ldr	r0, [pc, #92]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000706:	f001 fc8f 	bl	8002028 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000710:	f000 fdb0 	bl	8001274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000714:	230e      	movs	r3, #14
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000722:	f001 fc81 	bl	8002028 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800072c:	f000 fda2 	bl	8001274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000730:	230f      	movs	r3, #15
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_ADC1_Init+0x16c>)
 800073e:	f001 fc73 	bl	8002028 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000748:	f000 fd94 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  hadc1.Instance->CR1|=ADC_CR1_EOCIE;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <MX_ADC1_Init+0x16c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <MX_ADC1_Init+0x16c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f042 0220 	orr.w	r2, r2, #32
 800075a:	605a      	str	r2, [r3, #4]
  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200049d4 	.word	0x200049d4
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_CAN2_Init+0x60>)
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_CAN2_Init+0x64>)
 8000778:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_CAN2_Init+0x60>)
 800077c:	2210      	movs	r2, #16
 800077e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_CAN2_Init+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_CAN2_Init+0x60>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_CAN2_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_CAN2_Init+0x60>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_CAN2_Init+0x60>)
 800079a:	2200      	movs	r2, #0
 800079c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_CAN2_Init+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_CAN2_Init+0x60>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_CAN2_Init+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_CAN2_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_CAN2_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_CAN2_Init+0x60>)
 80007be:	f001 fedd 	bl	800257c <HAL_CAN_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fd54 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20004a1c 	.word	0x20004a1c
 80007d4:	40006800 	.word	0x40006800

080007d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	; 0x58
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f007 f9d5 	bl	8007bc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000816:	4b6d      	ldr	r3, [pc, #436]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000818:	4a6d      	ldr	r2, [pc, #436]	; (80009d0 <MX_TIM1_Init+0x1f8>)
 800081a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800081c:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <MX_TIM1_Init+0x1f4>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b6a      	ldr	r3, [pc, #424]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 8000828:	4b68      	ldr	r3, [pc, #416]	; (80009cc <MX_TIM1_Init+0x1f4>)
 800082a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800082e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b66      	ldr	r3, [pc, #408]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000836:	4b65      	ldr	r3, [pc, #404]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b63      	ldr	r3, [pc, #396]	; (80009cc <MX_TIM1_Init+0x1f4>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000842:	4862      	ldr	r0, [pc, #392]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000844:	f003 fa44 	bl	8003cd0 <HAL_TIM_Base_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800084e:	f000 fd11 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000858:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800085c:	4619      	mov	r1, r3
 800085e:	485b      	ldr	r0, [pc, #364]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000860:	f003 fd16 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800086a:	f000 fd03 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800086e:	4857      	ldr	r0, [pc, #348]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000870:	f003 faee 	bl	8003e50 <HAL_TIM_PWM_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800087a:	f000 fcfb 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000886:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800088a:	4619      	mov	r1, r3
 800088c:	484f      	ldr	r0, [pc, #316]	; (80009cc <MX_TIM1_Init+0x1f4>)
 800088e:	f004 f8d5 	bl	8004a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000898:	f000 fcec 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 80008a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	2200      	movs	r2, #0
 80008c0:	4619      	mov	r1, r3
 80008c2:	4842      	ldr	r0, [pc, #264]	; (80009cc <MX_TIM1_Init+0x1f4>)
 80008c4:	f003 fc26 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80008ce:	f000 fcd1 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 80008d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	2204      	movs	r2, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	483a      	ldr	r0, [pc, #232]	; (80009cc <MX_TIM1_Init+0x1f4>)
 80008e2:	f003 fc17 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80008ec:	f000 fcc2 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 3000;
 80008f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	2208      	movs	r2, #8
 80008fc:	4619      	mov	r1, r3
 80008fe:	4833      	ldr	r0, [pc, #204]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000900:	f003 fc08 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800090a:	f000 fcb3 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 4000;
 800090e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	220c      	movs	r2, #12
 800091a:	4619      	mov	r1, r3
 800091c:	482b      	ldr	r0, [pc, #172]	; (80009cc <MX_TIM1_Init+0x1f4>)
 800091e:	f003 fbf9 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8000928:	f000 fca4 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	481f      	ldr	r0, [pc, #124]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000950:	f004 f8f0 	bl	8004b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 800095a:	f000 fc8b 	bl	8001274 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */

  // TIM1->CR1=0x1;


  htim1.Instance->CR1|=TIM_CR1_CEN;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f042 0201 	orr.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]
  htim1.Instance->BDTR|=TIM_BDTR_MOE;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800097c:	645a      	str	r2, [r3, #68]	; 0x44
  htim1.Instance->CCER|=TIM_CCER_CC1E;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6a1a      	ldr	r2, [r3, #32]
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f042 0201 	orr.w	r2, r2, #1
 800098c:	621a      	str	r2, [r3, #32]
  htim1.Instance->CCER|=TIM_CCER_CC2E;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6a1a      	ldr	r2, [r3, #32]
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_TIM1_Init+0x1f4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f042 0210 	orr.w	r2, r2, #16
 800099c:	621a      	str	r2, [r3, #32]
  htim1.Instance->CCER|=TIM_CCER_CC3E;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_TIM1_Init+0x1f4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6a1a      	ldr	r2, [r3, #32]
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_TIM1_Init+0x1f4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009ac:	621a      	str	r2, [r3, #32]
  htim1.Instance->CCER|=TIM_CCER_CC4E;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_TIM1_Init+0x1f4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	6a1a      	ldr	r2, [r3, #32]
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_TIM1_Init+0x1f4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009bc:	621a      	str	r2, [r3, #32]

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM1_Init+0x1f4>)
 80009c0:	f000 fe08 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 80009c4:	bf00      	nop
 80009c6:	3758      	adds	r7, #88	; 0x58
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20004aa4 	.word	0x20004aa4
 80009d0:	40010000 	.word	0x40010000

080009d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	; 0x38
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a04:	4b5a      	ldr	r3, [pc, #360]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a0c:	4b58      	ldr	r3, [pc, #352]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b57      	ldr	r3, [pc, #348]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200;
 8000a18:	4b55      	ldr	r3, [pc, #340]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a1a:	f241 0268 	movw	r2, #4200	; 0x1068
 8000a1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b53      	ldr	r3, [pc, #332]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b52      	ldr	r3, [pc, #328]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2c:	4850      	ldr	r0, [pc, #320]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a2e:	f003 f94f 	bl	8003cd0 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a38:	f000 fc1c 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4849      	ldr	r0, [pc, #292]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a4a:	f003 fc21 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a54:	f000 fc0e 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a58:	4845      	ldr	r0, [pc, #276]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a5a:	f003 f9f9 	bl	8003e50 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a64:	f000 fc06 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4619      	mov	r1, r3
 8000a76:	483e      	ldr	r0, [pc, #248]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000a78:	f003 ffe0 	bl	8004a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a82:	f000 fbf7 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a86:	2360      	movs	r3, #96	; 0x60
 8000a88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4834      	ldr	r0, [pc, #208]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000aa0:	f003 fb38 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000aaa:	f000 fbe3 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8000aae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	482d      	ldr	r0, [pc, #180]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000abc:	f003 fb2a 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000ac6:	f000 fbd5 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 3000;
 8000aca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ace:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4826      	ldr	r0, [pc, #152]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000ad8:	f003 fb1c 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000ae2:	f000 fbc7 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 4000;
 8000ae6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000aea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	220c      	movs	r2, #12
 8000af0:	4619      	mov	r1, r3
 8000af2:	481f      	ldr	r0, [pc, #124]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000af4:	f003 fb0e 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8000afe:	f000 fbb9 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  htim2.Instance->CR1|=TIM_CR1_CEN;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0201 	orr.w	r2, r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
  htim2.Instance->BDTR|=TIM_BDTR_MOE;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b20:	645a      	str	r2, [r3, #68]	; 0x44
  htim2.Instance->CCER|=TIM_CCER_CC1E;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6a1a      	ldr	r2, [r3, #32]
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f042 0201 	orr.w	r2, r2, #1
 8000b30:	621a      	str	r2, [r3, #32]
  htim2.Instance->CCER|=TIM_CCER_CC2E;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a1a      	ldr	r2, [r3, #32]
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f042 0210 	orr.w	r2, r2, #16
 8000b40:	621a      	str	r2, [r3, #32]
  htim2.Instance->CCER|=TIM_CCER_CC3E;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6a1a      	ldr	r2, [r3, #32]
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b50:	621a      	str	r2, [r3, #32]
  htim2.Instance->CCER|=TIM_CCER_CC4E;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6a1a      	ldr	r2, [r3, #32]
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b60:	621a      	str	r2, [r3, #32]

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <MX_TIM2_Init+0x19c>)
 8000b64:	f000 fd36 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 8000b68:	bf00      	nop
 8000b6a:	3738      	adds	r7, #56	; 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20004aec 	.word	0x20004aec

08000b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]
 8000ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba4:	4b5a      	ldr	r3, [pc, #360]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000ba6:	4a5b      	ldr	r2, [pc, #364]	; (8000d14 <MX_TIM3_Init+0x1a0>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000baa:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b57      	ldr	r3, [pc, #348]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200;
 8000bb6:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000bb8:	f241 0268 	movw	r2, #4200	; 0x1068
 8000bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b54      	ldr	r3, [pc, #336]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b52      	ldr	r3, [pc, #328]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bca:	4851      	ldr	r0, [pc, #324]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000bcc:	f003 f880 	bl	8003cd0 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bd6:	f000 fb4d 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be4:	4619      	mov	r1, r3
 8000be6:	484a      	ldr	r0, [pc, #296]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000be8:	f003 fb52 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bf2:	f000 fb3f 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf6:	4846      	ldr	r0, [pc, #280]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000bf8:	f003 f92a 	bl	8003e50 <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c02:	f000 fb37 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 0320 	add.w	r3, r7, #32
 8000c12:	4619      	mov	r1, r3
 8000c14:	483e      	ldr	r0, [pc, #248]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000c16:	f003 ff11 	bl	8004a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c20:	f000 fb28 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	2360      	movs	r3, #96	; 0x60
 8000c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4834      	ldr	r0, [pc, #208]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000c3e:	f003 fa69 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c48:	f000 fb14 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8000c4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2204      	movs	r2, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	482d      	ldr	r0, [pc, #180]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000c5a:	f003 fa5b 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000c64:	f000 fb06 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 3000;
 8000c68:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2208      	movs	r2, #8
 8000c72:	4619      	mov	r1, r3
 8000c74:	4826      	ldr	r0, [pc, #152]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000c76:	f003 fa4d 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000c80:	f000 faf8 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 4000;
 8000c84:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	220c      	movs	r2, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481f      	ldr	r0, [pc, #124]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000c92:	f003 fa3f 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8000c9c:	f000 faea 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  htim3.Instance->CR1|=TIM_CR1_CEN;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0201 	orr.w	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
  htim3.Instance->BDTR|=TIM_BDTR_MOE;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44
  htim3.Instance->CCER|=TIM_CCER_CC1E;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6a1a      	ldr	r2, [r3, #32]
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	621a      	str	r2, [r3, #32]
  htim3.Instance->CCER|=TIM_CCER_CC2E;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6a1a      	ldr	r2, [r3, #32]
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0210 	orr.w	r2, r2, #16
 8000cde:	621a      	str	r2, [r3, #32]
  htim3.Instance->CCER|=TIM_CCER_CC3E;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6a1a      	ldr	r2, [r3, #32]
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cee:	621a      	str	r2, [r3, #32]
  htim3.Instance->CCER|=TIM_CCER_CC4E;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6a1a      	ldr	r2, [r3, #32]
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cfe:	621a      	str	r2, [r3, #32]
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <MX_TIM3_Init+0x19c>)
 8000d02:	f000 fc67 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 8000d06:	bf00      	nop
 8000d08:	3738      	adds	r7, #56	; 0x38
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20004988 	.word	0x20004988
 8000d14:	40000400 	.word	0x40000400

08000d18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b096      	sub	sp, #88	; 0x58
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
 8000d46:	615a      	str	r2, [r3, #20]
 8000d48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 ff35 	bl	8007bc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d56:	4b6d      	ldr	r3, [pc, #436]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000d58:	4a6d      	ldr	r2, [pc, #436]	; (8000f10 <MX_TIM8_Init+0x1f8>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d5c:	4b6b      	ldr	r3, [pc, #428]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b6a      	ldr	r3, [pc, #424]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8400;
 8000d68:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000d6a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000d6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d76:	4b65      	ldr	r3, [pc, #404]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b63      	ldr	r3, [pc, #396]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d82:	4862      	ldr	r0, [pc, #392]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000d84:	f002 ffa4 	bl	8003cd0 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000d8e:	f000 fa71 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000d98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	485b      	ldr	r0, [pc, #364]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000da0:	f003 fa76 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000daa:	f000 fa63 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dae:	4857      	ldr	r0, [pc, #348]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000db0:	f003 f84e 	bl	8003e50 <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000dba:	f000 fa5b 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dca:	4619      	mov	r1, r3
 8000dcc:	484f      	ldr	r0, [pc, #316]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000dce:	f003 fe35 	bl	8004a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000dd8:	f000 fa4c 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	; 0x60
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4842      	ldr	r0, [pc, #264]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000e04:	f003 f986 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000e0e:	f000 fa31 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8000e12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	483a      	ldr	r0, [pc, #232]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000e22:	f003 f977 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8000e2c:	f000 fa22 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 3000;
 8000e30:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4833      	ldr	r0, [pc, #204]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000e40:	f003 f968 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM8_Init+0x136>
  {
    Error_Handler();
 8000e4a:	f000 fa13 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 4000;
 8000e4e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	220c      	movs	r2, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	482b      	ldr	r0, [pc, #172]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000e5e:	f003 f959 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM8_Init+0x154>
  {
    Error_Handler();
 8000e68:	f000 fa04 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481f      	ldr	r0, [pc, #124]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000e90:	f003 fe50 	bl	8004b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8000e9a:	f000 f9eb 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  htim8.Instance->CR1|=TIM_CR1_CEN;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 0201 	orr.w	r2, r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
  htim8.Instance->BDTR|=TIM_BDTR_MOE;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ebc:	645a      	str	r2, [r3, #68]	; 0x44
  htim8.Instance->CCER|=TIM_CCER_CC1E;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a1a      	ldr	r2, [r3, #32]
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0201 	orr.w	r2, r2, #1
 8000ecc:	621a      	str	r2, [r3, #32]
  htim8.Instance->CCER|=TIM_CCER_CC2E;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0210 	orr.w	r2, r2, #16
 8000edc:	621a      	str	r2, [r3, #32]
  htim8.Instance->CCER|=TIM_CCER_CC3E;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a1a      	ldr	r2, [r3, #32]
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eec:	621a      	str	r2, [r3, #32]
  htim8.Instance->CCER|=TIM_CCER_CC4E;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6a1a      	ldr	r2, [r3, #32]
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000efc:	621a      	str	r2, [r3, #32]
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM8_Init+0x1f4>)
 8000f00:	f000 fb68 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 8000f04:	bf00      	nop
 8000f06:	3758      	adds	r7, #88	; 0x58
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20004940 	.word	0x20004940
 8000f10:	40010400 	.word	0x40010400

08000f14 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f3c:	4a3e      	ldr	r2, [pc, #248]	; (8001038 <MX_TIM12_Init+0x124>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000f40:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4200;
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f4e:	f241 0268 	movw	r2, #4200	; 0x1068
 8000f52:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f60:	4834      	ldr	r0, [pc, #208]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f62:	f002 feb5 	bl	8003cd0 <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 f982 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482d      	ldr	r0, [pc, #180]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f7e:	f003 f987 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000f88:	f000 f974 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000f8c:	4829      	ldr	r0, [pc, #164]	; (8001034 <MX_TIM12_Init+0x120>)
 8000f8e:	f002 ff5f 	bl	8003e50 <HAL_TIM_PWM_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000f98:	f000 f96c 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	; 0x60
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3000;
 8000fa0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481f      	ldr	r0, [pc, #124]	; (8001034 <MX_TIM12_Init+0x120>)
 8000fb6:	f003 f8ad 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8000fc0:	f000 f958 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
  htim12.Instance->CR1|=TIM_CR1_CEN;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_TIM12_Init+0x120>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_TIM12_Init+0x120>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
  htim12.Instance->BDTR|=TIM_BDTR_MOE;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_TIM12_Init+0x120>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_TIM12_Init+0x120>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fe2:	645a      	str	r2, [r3, #68]	; 0x44
  htim12.Instance->CCER|=TIM_CCER_CC1E;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_TIM12_Init+0x120>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6a1a      	ldr	r2, [r3, #32]
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_TIM12_Init+0x120>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0201 	orr.w	r2, r2, #1
 8000ff2:	621a      	str	r2, [r3, #32]
  htim12.Instance->CCER|=TIM_CCER_CC2E;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_TIM12_Init+0x120>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6a1a      	ldr	r2, [r3, #32]
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_TIM12_Init+0x120>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0210 	orr.w	r2, r2, #16
 8001002:	621a      	str	r2, [r3, #32]
  htim12.Instance->CCER|=TIM_CCER_CC3E;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_TIM12_Init+0x120>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a1a      	ldr	r2, [r3, #32]
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_TIM12_Init+0x120>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001012:	621a      	str	r2, [r3, #32]
  htim12.Instance->CCER|=TIM_CCER_CC4E;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <MX_TIM12_Init+0x120>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6a1a      	ldr	r2, [r3, #32]
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_TIM12_Init+0x120>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001022:	621a      	str	r2, [r3, #32]
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM12_Init+0x120>)
 8001026:	f000 fad5 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3730      	adds	r7, #48	; 0x30
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20004b78 	.word	0x20004b78
 8001038:	40001800 	.word	0x40001800

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_USART2_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001074:	f003 fdc4 	bl	8004c00 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f000 f8f9 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20004b34 	.word	0x20004b34
 800108c:	40004400 	.word	0x40004400

08001090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_DMA_Init+0x3c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <MX_DMA_Init+0x3c>)
 80010a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_DMA_Init+0x3c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2105      	movs	r1, #5
 80010b6:	2038      	movs	r0, #56	; 0x38
 80010b8:	f001 fc14 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010bc:	2038      	movs	r0, #56	; 0x38
 80010be:	f001 fc2d 	bl	800291c <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <MX_GPIO_Init+0x13c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a47      	ldr	r2, [pc, #284]	; (800120c <MX_GPIO_Init+0x13c>)
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <MX_GPIO_Init+0x13c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <MX_GPIO_Init+0x13c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a40      	ldr	r2, [pc, #256]	; (800120c <MX_GPIO_Init+0x13c>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <MX_GPIO_Init+0x13c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <MX_GPIO_Init+0x13c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a39      	ldr	r2, [pc, #228]	; (800120c <MX_GPIO_Init+0x13c>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <MX_GPIO_Init+0x13c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <MX_GPIO_Init+0x13c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a32      	ldr	r2, [pc, #200]	; (800120c <MX_GPIO_Init+0x13c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <MX_GPIO_Init+0x13c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_GPIO_Init+0x13c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a2b      	ldr	r2, [pc, #172]	; (800120c <MX_GPIO_Init+0x13c>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <MX_GPIO_Init+0x13c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_GPIO_Init+0x13c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a24      	ldr	r2, [pc, #144]	; (800120c <MX_GPIO_Init+0x13c>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_GPIO_Init+0x13c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800118e:	2200      	movs	r2, #0
 8001190:	21ff      	movs	r1, #255	; 0xff
 8001192:	481f      	ldr	r0, [pc, #124]	; (8001210 <MX_GPIO_Init+0x140>)
 8001194:	f002 f8dc 	bl	8003350 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001198:	2200      	movs	r2, #0
 800119a:	f64f 7187 	movw	r1, #65415	; 0xff87
 800119e:	481d      	ldr	r0, [pc, #116]	; (8001214 <MX_GPIO_Init+0x144>)
 80011a0:	f002 f8d6 	bl	8003350 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2120      	movs	r1, #32
 80011a8:	481b      	ldr	r0, [pc, #108]	; (8001218 <MX_GPIO_Init+0x148>)
 80011aa:	f002 f8d1 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80011ae:	23ff      	movs	r3, #255	; 0xff
 80011b0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <MX_GPIO_Init+0x140>)
 80011c6:	f001 ff27 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011ca:	f64f 7387 	movw	r3, #65415	; 0xff87
 80011ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	480c      	ldr	r0, [pc, #48]	; (8001214 <MX_GPIO_Init+0x144>)
 80011e4:	f001 ff18 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011e8:	2320      	movs	r3, #32
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_GPIO_Init+0x148>)
 8001200:	f001 ff0a 	bl	8003018 <HAL_GPIO_Init>

}
 8001204:	bf00      	nop
 8001206:	3730      	adds	r7, #48	; 0x30
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40021000 	.word	0x40021000
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40020400 	.word	0x40020400

0800121c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /*    HAL_ADC_Start(&hadc1);
      HAL_ADC_PollForConversion(&hadc1, 100);
      adcResult = HAL_ADC_GetValue(&hadc1);
      HAL_ADC_Stop(&hadc1);
*/
	   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 8);
 8001224:	2208      	movs	r2, #8
 8001226:	4907      	ldr	r1, [pc, #28]	; (8001244 <StartDefaultTask+0x28>)
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <StartDefaultTask+0x2c>)
 800122a:	f000 fdc5 	bl	8001db8 <HAL_ADC_Start_DMA>
	   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <StartDefaultTask+0x30>)
 8001236:	f002 f88b 	bl	8003350 <HAL_GPIO_WritePin>

	  asm("Nop");
 800123a:	bf00      	nop


    osDelay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f004 f815 	bl	800526c <osDelay>
	   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 8);
 8001242:	e7ef      	b.n	8001224 <StartDefaultTask+0x8>
 8001244:	20004bc0 	.word	0x20004bc0
 8001248:	200049d4 	.word	0x200049d4
 800124c:	40020c00 	.word	0x40020c00

08001250 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	  if (htim->Instance == TIM14) {
	//   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 8);
	  //}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001262:	f000 fc05 	bl	8001a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40002000 	.word	0x40002000

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_MspInit+0x54>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_MspInit+0x54>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_MspInit+0x54>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_MspInit+0x54>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_MspInit+0x54>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_MspInit+0x54>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	210f      	movs	r1, #15
 80012c2:	f06f 0001 	mvn.w	r0, #1
 80012c6:	f001 fb0d 	bl	80028e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <HAL_ADC_MspInit+0x11c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d178      	bne.n	80013ec <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a3d      	ldr	r2, [pc, #244]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b3b      	ldr	r3, [pc, #236]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a36      	ldr	r2, [pc, #216]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_ADC_MspInit+0x120>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800134e:	233f      	movs	r3, #63	; 0x3f
 8001350:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4826      	ldr	r0, [pc, #152]	; (80013fc <HAL_ADC_MspInit+0x124>)
 8001362:	f001 fe59 	bl	8003018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001366:	2330      	movs	r3, #48	; 0x30
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4821      	ldr	r0, [pc, #132]	; (8001400 <HAL_ADC_MspInit+0x128>)
 800137a:	f001 fe4d 	bl	8003018 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <HAL_ADC_MspInit+0x130>)
 8001382:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 8001398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 80013a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 80013a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 80013c2:	f001 fab9 	bl	8002938 <HAL_DMA_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80013cc:	f7ff ff52 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_ADC_MspInit+0x12c>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2105      	movs	r1, #5
 80013e0:	2012      	movs	r0, #18
 80013e2:	f001 fa7f 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013e6:	2012      	movs	r0, #18
 80013e8:	f001 fa98 	bl	800291c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40012000 	.word	0x40012000
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020000 	.word	0x40020000
 8001404:	20004a44 	.word	0x20004a44
 8001408:	40026410 	.word	0x40026410

0800140c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a20      	ldr	r2, [pc, #128]	; (80014ac <HAL_CAN_MspInit+0xa0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d13a      	bne.n	80014a4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001482:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001494:	2309      	movs	r3, #9
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_CAN_MspInit+0xa8>)
 80014a0:	f001 fdba 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40006800 	.word	0x40006800
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020400 	.word	0x40020400

080014b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a3e      	ldr	r2, [pc, #248]	; (80015c0 <HAL_TIM_Base_MspInit+0x108>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d116      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a3c      	ldr	r2, [pc, #240]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2105      	movs	r1, #5
 80014ea:	2019      	movs	r0, #25
 80014ec:	f001 f9fa 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014f0:	2019      	movs	r0, #25
 80014f2:	f001 fa13 	bl	800291c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80014f6:	e05e      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001500:	d116      	bne.n	8001530 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2105      	movs	r1, #5
 8001522:	201c      	movs	r0, #28
 8001524:	f001 f9de 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001528:	201c      	movs	r0, #28
 800152a:	f001 f9f7 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 800152e:	e042      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_TIM_Base_MspInit+0x110>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10e      	bne.n	8001558 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
}
 8001556:	e02e      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM8)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <HAL_TIM_Base_MspInit+0x114>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d116      	bne.n	8001590 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	202d      	movs	r0, #45	; 0x2d
 8001584:	f001 f9ae 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001588:	202d      	movs	r0, #45	; 0x2d
 800158a:	f001 f9c7 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 800158e:	e012      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM12)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_TIM_Base_MspInit+0x118>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10d      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 80015a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_TIM_Base_MspInit+0x10c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40000400 	.word	0x40000400
 80015cc:	40010400 	.word	0x40010400
 80015d0:	40001800 	.word	0x40001800

080015d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	; 0x38
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_TIM_MspPostInit+0x1c8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d11f      	bne.n	8001636 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
 80015fa:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a68      	ldr	r2, [pc, #416]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001612:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001624:	2301      	movs	r3, #1
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	485d      	ldr	r0, [pc, #372]	; (80017a4 <HAL_TIM_MspPostInit+0x1d0>)
 8001630:	f001 fcf2 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001634:	e0ae      	b.n	8001794 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163e:	d11e      	bne.n	800167e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a55      	ldr	r2, [pc, #340]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800165c:	230f      	movs	r3, #15
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800166c:	2301      	movs	r3, #1
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	484c      	ldr	r0, [pc, #304]	; (80017a8 <HAL_TIM_MspPostInit+0x1d4>)
 8001678:	f001 fcce 	bl	8003018 <HAL_GPIO_Init>
}
 800167c:	e08a      	b.n	8001794 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM3)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_TIM_MspPostInit+0x1d8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d13c      	bne.n	8001702 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6313      	str	r3, [r2, #48]	; 0x30
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a3c      	ldr	r2, [pc, #240]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016c0:	23c0      	movs	r3, #192	; 0xc0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016d0:	2302      	movs	r3, #2
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	4833      	ldr	r0, [pc, #204]	; (80017a8 <HAL_TIM_MspPostInit+0x1d4>)
 80016dc:	f001 fc9c 	bl	8003018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016e0:	2303      	movs	r3, #3
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f0:	2302      	movs	r3, #2
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	482d      	ldr	r0, [pc, #180]	; (80017b0 <HAL_TIM_MspPostInit+0x1dc>)
 80016fc:	f001 fc8c 	bl	8003018 <HAL_GPIO_Init>
}
 8001700:	e048      	b.n	8001794 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a2b      	ldr	r2, [pc, #172]	; (80017b4 <HAL_TIM_MspPostInit+0x1e0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d11f      	bne.n	800174c <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001728:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800173a:	2303      	movs	r3, #3
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <HAL_TIM_MspPostInit+0x1e4>)
 8001746:	f001 fc67 	bl	8003018 <HAL_GPIO_Init>
}
 800174a:	e023      	b.n	8001794 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM12)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <HAL_TIM_MspPostInit+0x1e8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d11e      	bne.n	8001794 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001772:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001784:	2309      	movs	r3, #9
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <HAL_TIM_MspPostInit+0x1dc>)
 8001790:	f001 fc42 	bl	8003018 <HAL_GPIO_Init>
}
 8001794:	bf00      	nop
 8001796:	3738      	adds	r7, #56	; 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010000 	.word	0x40010000
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40010400 	.word	0x40010400
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40001800 	.word	0x40001800

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <HAL_UART_MspInit+0x84>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d12b      	bne.n	800183a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_UART_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_UART_MspInit+0x88>)
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_UART_MspInit+0x88>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_UART_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_UART_MspInit+0x88>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_UART_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800181a:	2360      	movs	r3, #96	; 0x60
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800182a:	2307      	movs	r3, #7
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_UART_MspInit+0x8c>)
 8001836:	f001 fbef 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40004400 	.word	0x40004400
 8001848:	40023800 	.word	0x40023800
 800184c:	40020c00 	.word	0x40020c00

08001850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	202d      	movs	r0, #45	; 0x2d
 8001866:	f001 f83d 	bl	80028e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800186a:	202d      	movs	r0, #45	; 0x2d
 800186c:	f001 f856 	bl	800291c <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_InitTick+0xa4>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <HAL_InitTick+0xa4>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6413      	str	r3, [r2, #64]	; 0x40
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_InitTick+0xa4>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800188c:	f107 0210 	add.w	r2, r7, #16
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f002 f9e8 	bl	8003c6c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800189c:	f002 f9be 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 80018a0:	4603      	mov	r3, r0
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <HAL_InitTick+0xa8>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0c9b      	lsrs	r3, r3, #18
 80018b0:	3b01      	subs	r3, #1
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_InitTick+0xac>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_InitTick+0xb0>)
 80018b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_InitTick+0xac>)
 80018bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_InitTick+0xac>)
 80018c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_InitTick+0xac>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_InitTick+0xac>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <HAL_InitTick+0xac>)
 80018d6:	f002 f9fb 	bl	8003cd0 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <HAL_InitTick+0xac>)
 80018e2:	f002 fa45 	bl	8003d70 <HAL_TIM_Base_Start_IT>
 80018e6:	4603      	mov	r3, r0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3730      	adds	r7, #48	; 0x30
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	431bde83 	.word	0x431bde83
 80018fc:	20004bfc 	.word	0x20004bfc
 8001900:	40002000 	.word	0x40002000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <ADC_IRQHandler+0x10>)
 8001936:	f000 f8fe 	bl	8001b36 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200049d4 	.word	0x200049d4

08001944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800194a:	f002 fada 	bl	8003f02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20004aa4 	.word	0x20004aa4

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f002 fad0 	bl	8003f02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20004aec 	.word	0x20004aec

0800196c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8001972:	f002 fac6 	bl	8003f02 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8001978:	f002 fac3 	bl	8003f02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20004940 	.word	0x20004940
 8001984:	20004bfc 	.word	0x20004bfc

08001988 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <DMA2_Stream0_IRQHandler+0x1c>)
 800198e:	f001 f8d9 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <DMA2_Stream0_IRQHandler+0x20>)
 800199a:	f001 fcd9 	bl	8003350 <HAL_GPIO_WritePin>
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //светодиод
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20004a44 	.word	0x20004a44
 80019a8:	40020c00 	.word	0x40020c00

080019ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <SystemInit+0x28>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <SystemInit+0x28>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SystemInit+0x28>)
 80019c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019c6:	609a      	str	r2, [r3, #8]
#endif
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019de:	e003      	b.n	80019e8 <LoopCopyDataInit>

080019e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019e6:	3104      	adds	r1, #4

080019e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019f0:	d3f6      	bcc.n	80019e0 <CopyDataInit>
  ldr  r2, =_sbss
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019f4:	e002      	b.n	80019fc <LoopFillZerobss>

080019f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019f8:	f842 3b04 	str.w	r3, [r2], #4

080019fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a00:	d3f9      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a02:	f7ff ffd3 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f006 f8a9 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7fe fd5d 	bl	80004c8 <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a14:	08007c60 	.word	0x08007c60
  ldr  r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a1c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001a20:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001a24:	20004c88 	.word	0x20004c88

08001a28 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <CAN1_RX0_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_Init+0x40>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_Init+0x40>)
 8001a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_Init+0x40>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 ff3a 	bl	80028ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fef8 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fc0e 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20004c44 	.word	0x20004c44

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20004c44 	.word	0x20004c44

08001ab0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e033      	b.n	8001b2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fc02 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af6:	f023 0302 	bic.w	r3, r3, #2
 8001afa:	f043 0202 	orr.w	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fbb2 	bl	800226c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b1e:	e001      	b.n	8001b24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d049      	beq.n	8001c0c <HAL_ADC_IRQHandler+0xd6>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d046      	beq.n	8001c0c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d12b      	bne.n	8001bfc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d127      	bne.n	8001bfc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d119      	bne.n	8001bfc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0220 	bic.w	r2, r2, #32
 8001bd6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f9eb 	bl	8001fd8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f06f 0212 	mvn.w	r2, #18
 8001c0a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	2b80      	cmp	r3, #128	; 0x80
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d057      	beq.n	8001cee <HAL_ADC_IRQHandler+0x1b8>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d054      	beq.n	8001cee <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d139      	bne.n	8001cde <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d12b      	bne.n	8001cde <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d124      	bne.n	8001cde <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11d      	bne.n	8001cde <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d119      	bne.n	8001cde <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fc42 	bl	8002568 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 020c 	mvn.w	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d017      	beq.n	8001d50 <HAL_ADC_IRQHandler+0x21a>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d014      	beq.n	8001d50 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10d      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f95d 	bl	8002000 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f06f 0201 	mvn.w	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d74:	bf0c      	ite	eq
 8001d76:	2301      	moveq	r3, #1
 8001d78:	2300      	movne	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d015      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x27a>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d012      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f043 0202 	orr.w	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0220 	mvn.w	r2, #32
 8001d9e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f937 	bl	8002014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f06f 0220 	mvn.w	r2, #32
 8001dae:	601a      	str	r2, [r3, #0]
  }
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Start_DMA+0x1e>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e0e9      	b.n	8001faa <HAL_ADC_Start_DMA+0x1f2>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d018      	beq.n	8001e1e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfc:	4b6d      	ldr	r3, [pc, #436]	; (8001fb4 <HAL_ADC_Start_DMA+0x1fc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6d      	ldr	r2, [pc, #436]	; (8001fb8 <HAL_ADC_Start_DMA+0x200>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9a      	lsrs	r2, r3, #18
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f9      	bne.n	8001e12 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2c:	d107      	bne.n	8001e3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	f040 80a1 	bne.w	8001f90 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	d106      	bne.n	8001e9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f023 0206 	bic.w	r2, r3, #6
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
 8001e9a:	e002      	b.n	8001ea2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_ADC_Start_DMA+0x204>)
 8001eac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	4a43      	ldr	r2, [pc, #268]	; (8001fc0 <HAL_ADC_Start_DMA+0x208>)
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	4a42      	ldr	r2, [pc, #264]	; (8001fc4 <HAL_ADC_Start_DMA+0x20c>)
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	4a41      	ldr	r2, [pc, #260]	; (8001fc8 <HAL_ADC_Start_DMA+0x210>)
 8001ec4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ece:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ede:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	334c      	adds	r3, #76	; 0x4c
 8001efa:	4619      	mov	r1, r3
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f000 fdc8 	bl	8002a94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d12a      	bne.n	8001f66 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_ADC_Start_DMA+0x214>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d015      	beq.n	8001f46 <HAL_ADC_Start_DMA+0x18e>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <HAL_ADC_Start_DMA+0x218>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d105      	bne.n	8001f30 <HAL_ADC_Start_DMA+0x178>
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_ADC_Start_DMA+0x204>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <HAL_ADC_Start_DMA+0x21c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d136      	bne.n	8001fa8 <HAL_ADC_Start_DMA+0x1f0>
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_ADC_Start_DMA+0x204>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d130      	bne.n	8001fa8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d129      	bne.n	8001fa8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e020      	b.n	8001fa8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_ADC_Start_DMA+0x214>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_ADC_Start_DMA+0x1f0>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d114      	bne.n	8001fa8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f043 0210 	orr.w	r2, r3, #16
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	40012300 	.word	0x40012300
 8001fc0:	08002465 	.word	0x08002465
 8001fc4:	0800251f 	.word	0x0800251f
 8001fc8:	0800253b 	.word	0x0800253b
 8001fcc:	40012000 	.word	0x40012000
 8001fd0:	40012100 	.word	0x40012100
 8001fd4:	40012200 	.word	0x40012200

08001fd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1c>
 8002040:	2302      	movs	r3, #2
 8002042:	e105      	b.n	8002250 <HAL_ADC_ConfigChannel+0x228>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b09      	cmp	r3, #9
 8002052:	d925      	bls.n	80020a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68d9      	ldr	r1, [r3, #12]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	3b1e      	subs	r3, #30
 800206a:	2207      	movs	r2, #7
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43da      	mvns	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	400a      	ands	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68d9      	ldr	r1, [r3, #12]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	4603      	mov	r3, r0
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4403      	add	r3, r0
 8002092:	3b1e      	subs	r3, #30
 8002094:	409a      	lsls	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	e022      	b.n	80020e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6919      	ldr	r1, [r3, #16]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	2207      	movs	r2, #7
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	400a      	ands	r2, r1
 80020c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6919      	ldr	r1, [r3, #16]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4403      	add	r3, r0
 80020dc:	409a      	lsls	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d824      	bhi.n	8002138 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b05      	subs	r3, #5
 8002100:	221f      	movs	r2, #31
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	400a      	ands	r2, r1
 800210e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b05      	subs	r3, #5
 800212a:	fa00 f203 	lsl.w	r2, r0, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
 8002136:	e04c      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b0c      	cmp	r3, #12
 800213e:	d824      	bhi.n	800218a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b23      	subs	r3, #35	; 0x23
 8002152:	221f      	movs	r2, #31
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b23      	subs	r3, #35	; 0x23
 800217c:	fa00 f203 	lsl.w	r2, r0, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
 8002188:	e023      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b41      	subs	r3, #65	; 0x41
 800219c:	221f      	movs	r2, #31
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b41      	subs	r3, #65	; 0x41
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_ADC_ConfigChannel+0x234>)
 80021d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a21      	ldr	r2, [pc, #132]	; (8002260 <HAL_ADC_ConfigChannel+0x238>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d109      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1cc>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_ADC_ConfigChannel+0x238>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d123      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x21e>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b10      	cmp	r3, #16
 8002204:	d003      	beq.n	800220e <HAL_ADC_ConfigChannel+0x1e6>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b11      	cmp	r3, #17
 800220c:	d11b      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d111      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_ADC_ConfigChannel+0x23c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_ADC_ConfigChannel+0x240>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	0c9a      	lsrs	r2, r3, #18
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002238:	e002      	b.n	8002240 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3b01      	subs	r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012300 	.word	0x40012300
 8002260:	40012000 	.word	0x40012000
 8002264:	20000000 	.word	0x20000000
 8002268:	431bde83 	.word	0x431bde83

0800226c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002274:	4b79      	ldr	r3, [pc, #484]	; (800245c <ADC_Init+0x1f0>)
 8002276:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	4a58      	ldr	r2, [pc, #352]	; (8002460 <ADC_Init+0x1f4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d022      	beq.n	800234a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002312:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e00f      	b.n	800236a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002368:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0202 	bic.w	r2, r2, #2
 8002378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
 8002384:	005a      	lsls	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01b      	beq.n	80023d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6859      	ldr	r1, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	3b01      	subs	r3, #1
 80023c4:	035a      	lsls	r2, r3, #13
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e007      	b.n	80023e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	051a      	lsls	r2, r3, #20
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002422:	025a      	lsls	r2, r3, #9
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6899      	ldr	r1, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	029a      	lsls	r2, r3, #10
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40012300 	.word	0x40012300
 8002460:	0f000001 	.word	0x0f000001

08002464 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800247a:	2b00      	cmp	r3, #0
 800247c:	d13c      	bne.n	80024f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12b      	bne.n	80024f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800249c:	2b00      	cmp	r3, #0
 800249e:	d127      	bne.n	80024f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d119      	bne.n	80024f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0220 	bic.w	r2, r2, #32
 80024ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff fd71 	bl	8001fd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024f6:	e00e      	b.n	8002516 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7ff fd85 	bl	8002014 <HAL_ADC_ErrorCallback>
}
 800250a:	e004      	b.n	8002516 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7ff fd5d 	bl	8001fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f043 0204 	orr.w	r2, r3, #4
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff fd5a 	bl	8002014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0ed      	b.n	800276a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe ff36 	bl	800140c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0202 	bic.w	r2, r2, #2
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b0:	f7ff fa72 	bl	8001a98 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025b6:	e012      	b.n	80025de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b8:	f7ff fa6e 	bl	8001a98 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b0a      	cmp	r3, #10
 80025c4:	d90b      	bls.n	80025de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0c5      	b.n	800276a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e5      	bne.n	80025b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7ff fa4c 	bl	8001a98 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002602:	e012      	b.n	800262a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002604:	f7ff fa48 	bl	8001a98 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d90b      	bls.n	800262a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2205      	movs	r2, #5
 8002622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e09f      	b.n	800276a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0e5      	beq.n	8002604 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e007      	b.n	8002662 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7e5b      	ldrb	r3, [r3, #25]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7e9b      	ldrb	r3, [r3, #26]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0220 	orr.w	r2, r2, #32
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0220 	bic.w	r2, r2, #32
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7edb      	ldrb	r3, [r3, #27]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0210 	bic.w	r2, r2, #16
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e007      	b.n	80026e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0210 	orr.w	r2, r2, #16
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7f1b      	ldrb	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d108      	bne.n	80026fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0208 	orr.w	r2, r2, #8
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e007      	b.n	800270a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0208 	bic.w	r2, r2, #8
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7f5b      	ldrb	r3, [r3, #29]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d108      	bne.n	8002724 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0204 	orr.w	r2, r2, #4
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e007      	b.n	8002734 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0204 	bic.w	r2, r2, #4
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	ea42 0103 	orr.w	r1, r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0b      	blt.n	8002802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <__NVIC_EnableIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	; (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f1c3 0307 	rsb	r3, r3, #7
 8002882:	2b04      	cmp	r3, #4
 8002884:	bf28      	it	cs
 8002886:	2304      	movcs	r3, #4
 8002888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3304      	adds	r3, #4
 800288e:	2b06      	cmp	r3, #6
 8002890:	d902      	bls.n	8002898 <NVIC_EncodePriority+0x30>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b03      	subs	r3, #3
 8002896:	e000      	b.n	800289a <NVIC_EncodePriority+0x32>
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43d9      	mvns	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	4313      	orrs	r3, r2
         );
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff4c 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f6:	f7ff ff61 	bl	80027bc <__NVIC_GetPriorityGrouping>
 80028fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	6978      	ldr	r0, [r7, #20]
 8002902:	f7ff ffb1 	bl	8002868 <NVIC_EncodePriority>
 8002906:	4602      	mov	r2, r0
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff80 	bl	8002814 <__NVIC_SetPriority>
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff54 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff f8a8 	bl	8001a98 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e099      	b.n	8002a88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002974:	e00f      	b.n	8002996 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002976:	f7ff f88f 	bl	8001a98 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b05      	cmp	r3, #5
 8002982:	d908      	bls.n	8002996 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2203      	movs	r2, #3
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e078      	b.n	8002a88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e8      	bne.n	8002976 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <HAL_DMA_Init+0x158>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d107      	bne.n	8002a00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	4313      	orrs	r3, r2
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0307 	bic.w	r3, r3, #7
 8002a16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d117      	bne.n	8002a5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fa6f 	bl	8002f20 <DMA_CheckFifoParam>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a56:	2301      	movs	r3, #1
 8002a58:	e016      	b.n	8002a88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa26 	bl	8002eb4 <DMA_CalcBaseAndBitshift>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	223f      	movs	r2, #63	; 0x3f
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	f010803f 	.word	0xf010803f

08002a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_DMA_Start_IT+0x26>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e040      	b.n	8002b3c <HAL_DMA_Start_IT+0xa8>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d12f      	bne.n	8002b2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f9b8 	bl	8002e58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	223f      	movs	r2, #63	; 0x3f
 8002aee:	409a      	lsls	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0216 	orr.w	r2, r2, #22
 8002b02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0208 	orr.w	r2, r2, #8
 8002b1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e005      	b.n	8002b3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
 8002b38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b50:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_DMA_IRQHandler+0x258>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a92      	ldr	r2, [pc, #584]	; (8002da0 <HAL_DMA_IRQHandler+0x25c>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0a9b      	lsrs	r3, r3, #10
 8002b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	2208      	movs	r2, #8
 8002b70:	409a      	lsls	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01a      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0204 	bic.w	r2, r2, #4
 8002b96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d012      	beq.n	8002be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f043 0202 	orr.w	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2204      	movs	r2, #4
 8002bec:	409a      	lsls	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	2204      	movs	r2, #4
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	f043 0204 	orr.w	r2, r3, #4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2210      	movs	r2, #16
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d043      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03c      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	2210      	movs	r2, #16
 8002c40:	409a      	lsls	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d018      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d108      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d024      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
 8002c72:	e01f      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01b      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
 8002c84:	e016      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0208 	bic.w	r2, r2, #8
 8002ca2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	2220      	movs	r2, #32
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 808e 	beq.w	8002de2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8086 	beq.w	8002de2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2220      	movs	r2, #32
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d136      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0216 	bic.w	r2, r2, #22
 8002cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d103      	bne.n	8002d1e <HAL_DMA_IRQHandler+0x1da>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0208 	bic.w	r2, r2, #8
 8002d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	223f      	movs	r2, #63	; 0x3f
 8002d34:	409a      	lsls	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d07d      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
        }
        return;
 8002d5a:	e078      	b.n	8002e4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01c      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d030      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e02b      	b.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d027      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
 8002d9a:	e022      	b.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0210 	bic.w	r2, r2, #16
 8002dc0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d032      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d022      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2205      	movs	r2, #5
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d307      	bcc.n	8002e2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f2      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x2ca>
 8002e28:	e000      	b.n	8002e2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e2a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
 8002e4c:	e000      	b.n	8002e50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e4e:	bf00      	nop
    }
  }
}
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop

08002e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d108      	bne.n	8002e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e96:	e007      	b.n	8002ea8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3b10      	subs	r3, #16
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <DMA_CalcBaseAndBitshift+0x64>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <DMA_CalcBaseAndBitshift+0x68>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d909      	bls.n	8002ef6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	1d1a      	adds	r2, r3, #4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ef4:	e007      	b.n	8002f06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	aaaaaaab 	.word	0xaaaaaaab
 8002f1c:	08007c48 	.word	0x08007c48

08002f20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d11f      	bne.n	8002f7a <DMA_CheckFifoParam+0x5a>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d856      	bhi.n	8002fee <DMA_CheckFifoParam+0xce>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <DMA_CheckFifoParam+0x28>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f6b 	.word	0x08002f6b
 8002f50:	08002f59 	.word	0x08002f59
 8002f54:	08002fef 	.word	0x08002fef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d046      	beq.n	8002ff2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f68:	e043      	b.n	8002ff2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f72:	d140      	bne.n	8002ff6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f78:	e03d      	b.n	8002ff6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f82:	d121      	bne.n	8002fc8 <DMA_CheckFifoParam+0xa8>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d837      	bhi.n	8002ffa <DMA_CheckFifoParam+0xda>
 8002f8a:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <DMA_CheckFifoParam+0x70>)
 8002f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f90:	08002fa1 	.word	0x08002fa1
 8002f94:	08002fa7 	.word	0x08002fa7
 8002f98:	08002fa1 	.word	0x08002fa1
 8002f9c:	08002fb9 	.word	0x08002fb9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e030      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d025      	beq.n	8002ffe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb6:	e022      	b.n	8002ffe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fc0:	d11f      	bne.n	8003002 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fc6:	e01c      	b.n	8003002 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d903      	bls.n	8002fd6 <DMA_CheckFifoParam+0xb6>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d003      	beq.n	8002fdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fd4:	e018      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fda:	e015      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00e      	beq.n	8003006 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      break;
 8002fec:	e00b      	b.n	8003006 <DMA_CheckFifoParam+0xe6>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e00a      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e008      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e006      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e004      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffe:	bf00      	nop
 8003000:	e002      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
      break;   
 8003002:	bf00      	nop
 8003004:	e000      	b.n	8003008 <DMA_CheckFifoParam+0xe8>
      break;
 8003006:	bf00      	nop
    }
  } 
  
  return status; 
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop

08003018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e16b      	b.n	800330c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003034:	2201      	movs	r2, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	f040 815a 	bne.w	8003306 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d005      	beq.n	800306a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003066:	2b02      	cmp	r3, #2
 8003068:	d130      	bne.n	80030cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a0:	2201      	movs	r2, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 0201 	and.w	r2, r3, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d017      	beq.n	8003108 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d123      	bne.n	800315c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	08da      	lsrs	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3208      	adds	r2, #8
 800311c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	08da      	lsrs	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3208      	adds	r2, #8
 8003156:	69b9      	ldr	r1, [r7, #24]
 8003158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80b4 	beq.w	8003306 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_GPIO_Init+0x30c>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a5f      	ldr	r2, [pc, #380]	; (8003324 <HAL_GPIO_Init+0x30c>)
 80031a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_GPIO_Init+0x30c>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ba:	4a5b      	ldr	r2, [pc, #364]	; (8003328 <HAL_GPIO_Init+0x310>)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a52      	ldr	r2, [pc, #328]	; (800332c <HAL_GPIO_Init+0x314>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d02b      	beq.n	800323e <HAL_GPIO_Init+0x226>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a51      	ldr	r2, [pc, #324]	; (8003330 <HAL_GPIO_Init+0x318>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d025      	beq.n	800323a <HAL_GPIO_Init+0x222>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a50      	ldr	r2, [pc, #320]	; (8003334 <HAL_GPIO_Init+0x31c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01f      	beq.n	8003236 <HAL_GPIO_Init+0x21e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4f      	ldr	r2, [pc, #316]	; (8003338 <HAL_GPIO_Init+0x320>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x21a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4e      	ldr	r2, [pc, #312]	; (800333c <HAL_GPIO_Init+0x324>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x216>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4d      	ldr	r2, [pc, #308]	; (8003340 <HAL_GPIO_Init+0x328>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x212>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4c      	ldr	r2, [pc, #304]	; (8003344 <HAL_GPIO_Init+0x32c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x20e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4b      	ldr	r2, [pc, #300]	; (8003348 <HAL_GPIO_Init+0x330>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x20a>
 800321e:	2307      	movs	r3, #7
 8003220:	e00e      	b.n	8003240 <HAL_GPIO_Init+0x228>
 8003222:	2308      	movs	r3, #8
 8003224:	e00c      	b.n	8003240 <HAL_GPIO_Init+0x228>
 8003226:	2306      	movs	r3, #6
 8003228:	e00a      	b.n	8003240 <HAL_GPIO_Init+0x228>
 800322a:	2305      	movs	r3, #5
 800322c:	e008      	b.n	8003240 <HAL_GPIO_Init+0x228>
 800322e:	2304      	movs	r3, #4
 8003230:	e006      	b.n	8003240 <HAL_GPIO_Init+0x228>
 8003232:	2303      	movs	r3, #3
 8003234:	e004      	b.n	8003240 <HAL_GPIO_Init+0x228>
 8003236:	2302      	movs	r3, #2
 8003238:	e002      	b.n	8003240 <HAL_GPIO_Init+0x228>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_GPIO_Init+0x228>
 800323e:	2300      	movs	r3, #0
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	f002 0203 	and.w	r2, r2, #3
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	4093      	lsls	r3, r2
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003250:	4935      	ldr	r1, [pc, #212]	; (8003328 <HAL_GPIO_Init+0x310>)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_GPIO_Init+0x334>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003282:	4a32      	ldr	r2, [pc, #200]	; (800334c <HAL_GPIO_Init+0x334>)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003288:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_GPIO_Init+0x334>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ac:	4a27      	ldr	r2, [pc, #156]	; (800334c <HAL_GPIO_Init+0x334>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_GPIO_Init+0x334>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d6:	4a1d      	ldr	r2, [pc, #116]	; (800334c <HAL_GPIO_Init+0x334>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_GPIO_Init+0x334>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003300:	4a12      	ldr	r2, [pc, #72]	; (800334c <HAL_GPIO_Init+0x334>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3301      	adds	r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	2b0f      	cmp	r3, #15
 8003310:	f67f ae90 	bls.w	8003034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3724      	adds	r7, #36	; 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	40013800 	.word	0x40013800
 800332c:	40020000 	.word	0x40020000
 8003330:	40020400 	.word	0x40020400
 8003334:	40020800 	.word	0x40020800
 8003338:	40020c00 	.word	0x40020c00
 800333c:	40021000 	.word	0x40021000
 8003340:	40021400 	.word	0x40021400
 8003344:	40021800 	.word	0x40021800
 8003348:	40021c00 	.word	0x40021c00
 800334c:	40013c00 	.word	0x40013c00

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800336c:	e003      	b.n	8003376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	041a      	lsls	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	619a      	str	r2, [r3, #24]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e264      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d075      	beq.n	800348e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a2:	4ba3      	ldr	r3, [pc, #652]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d00c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4ba0      	ldr	r3, [pc, #640]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d112      	bne.n	80033e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ba:	4b9d      	ldr	r3, [pc, #628]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	4b99      	ldr	r3, [pc, #612]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d05b      	beq.n	800348c <HAL_RCC_OscConfig+0x108>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d157      	bne.n	800348c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e23f      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e8:	d106      	bne.n	80033f8 <HAL_RCC_OscConfig+0x74>
 80033ea:	4b91      	ldr	r3, [pc, #580]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a90      	ldr	r2, [pc, #576]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e01d      	b.n	8003434 <HAL_RCC_OscConfig+0xb0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x98>
 8003402:	4b8b      	ldr	r3, [pc, #556]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a8a      	ldr	r2, [pc, #552]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b88      	ldr	r3, [pc, #544]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a87      	ldr	r2, [pc, #540]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0xb0>
 800341c:	4b84      	ldr	r3, [pc, #528]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a83      	ldr	r2, [pc, #524]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b81      	ldr	r3, [pc, #516]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a80      	ldr	r2, [pc, #512]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fe fb2c 	bl	8001a98 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003444:	f7fe fb28 	bl	8001a98 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e204      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b76      	ldr	r3, [pc, #472]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0xc0>
 8003462:	e014      	b.n	800348e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe fb18 	bl	8001a98 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe fb14 	bl	8001a98 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1f0      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	4b6c      	ldr	r3, [pc, #432]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0xe8>
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d063      	beq.n	8003562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349a:	4b65      	ldr	r3, [pc, #404]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a6:	4b62      	ldr	r3, [pc, #392]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d11c      	bne.n	80034ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	4b5f      	ldr	r3, [pc, #380]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d116      	bne.n	80034ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	4b5c      	ldr	r3, [pc, #368]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_RCC_OscConfig+0x152>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e1c4      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b56      	ldr	r3, [pc, #344]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4952      	ldr	r1, [pc, #328]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	e03a      	b.n	8003562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f4:	4b4f      	ldr	r3, [pc, #316]	; (8003634 <HAL_RCC_OscConfig+0x2b0>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe facd 	bl	8001a98 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003502:	f7fe fac9 	bl	8001a98 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e1a5      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	4b46      	ldr	r3, [pc, #280]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b43      	ldr	r3, [pc, #268]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4940      	ldr	r1, [pc, #256]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]
 8003534:	e015      	b.n	8003562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003536:	4b3f      	ldr	r3, [pc, #252]	; (8003634 <HAL_RCC_OscConfig+0x2b0>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fe faac 	bl	8001a98 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003544:	f7fe faa8 	bl	8001a98 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e184      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	4b36      	ldr	r3, [pc, #216]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d030      	beq.n	80035d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003576:	4b30      	ldr	r3, [pc, #192]	; (8003638 <HAL_RCC_OscConfig+0x2b4>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe fa8c 	bl	8001a98 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003584:	f7fe fa88 	bl	8001a98 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e164      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	4b26      	ldr	r3, [pc, #152]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x200>
 80035a2:	e015      	b.n	80035d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a4:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCC_OscConfig+0x2b4>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fa75 	bl	8001a98 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b2:	f7fe fa71 	bl	8001a98 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e14d      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80a0 	beq.w	800371e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCC_OscConfig+0x2b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d121      	bne.n	800365e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <HAL_RCC_OscConfig+0x2b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a07      	ldr	r2, [pc, #28]	; (800363c <HAL_RCC_OscConfig+0x2b8>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe fa37 	bl	8001a98 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e011      	b.n	8003652 <HAL_RCC_OscConfig+0x2ce>
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	42470000 	.word	0x42470000
 8003638:	42470e80 	.word	0x42470e80
 800363c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fe fa2a 	bl	8001a98 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e106      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4b85      	ldr	r3, [pc, #532]	; (8003868 <HAL_RCC_OscConfig+0x4e4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d106      	bne.n	8003674 <HAL_RCC_OscConfig+0x2f0>
 8003666:	4b81      	ldr	r3, [pc, #516]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a80      	ldr	r2, [pc, #512]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	e01c      	b.n	80036ae <HAL_RCC_OscConfig+0x32a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_OscConfig+0x312>
 800367c:	4b7b      	ldr	r3, [pc, #492]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	4b78      	ldr	r3, [pc, #480]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a77      	ldr	r2, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
 8003694:	e00b      	b.n	80036ae <HAL_RCC_OscConfig+0x32a>
 8003696:	4b75      	ldr	r3, [pc, #468]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a74      	ldr	r2, [pc, #464]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	4b72      	ldr	r3, [pc, #456]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a71      	ldr	r2, [pc, #452]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d015      	beq.n	80036e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fe f9ef 	bl	8001a98 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe f9eb 	bl	8001a98 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0c5      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ee      	beq.n	80036be <HAL_RCC_OscConfig+0x33a>
 80036e0:	e014      	b.n	800370c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fe f9d9 	bl	8001a98 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fe f9d5 	bl	8001a98 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0af      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	4b5a      	ldr	r3, [pc, #360]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ee      	bne.n	80036ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d105      	bne.n	800371e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003712:	4b56      	ldr	r3, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a55      	ldr	r2, [pc, #340]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 809b 	beq.w	800385e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003728:	4b50      	ldr	r3, [pc, #320]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	d05c      	beq.n	80037ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d141      	bne.n	80037c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCC_OscConfig+0x4ec>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fe f9a9 	bl	8001a98 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374a:	f7fe f9a5 	bl	8001a98 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e081      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375c:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	019b      	lsls	r3, r3, #6
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	4937      	ldr	r1, [pc, #220]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_RCC_OscConfig+0x4ec>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe f97e 	bl	8001a98 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe f97a 	bl	8001a98 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e056      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b2:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x41c>
 80037be:	e04e      	b.n	800385e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x4ec>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fe f967 	bl	8001a98 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe f963 	bl	8001a98 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e03f      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e0:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x44a>
 80037ec:	e037      	b.n	800385e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e032      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d028      	beq.n	800385a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d121      	bne.n	800385a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d11a      	bne.n	800385a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800382a:	4013      	ands	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003830:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d107      	bne.n	800385a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40007000 	.word	0x40007000
 800386c:	40023800 	.word	0x40023800
 8003870:	42470060 	.word	0x42470060

08003874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0cc      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d90c      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b8      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c8:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	494d      	ldr	r1, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d044      	beq.n	8003994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d119      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d003      	beq.n	8003932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392e:	2b03      	cmp	r3, #3
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e06f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e067      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4934      	ldr	r1, [pc, #208]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003964:	f7fe f898 	bl	8001a98 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fe f894 	bl	8001a98 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e04f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d20c      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e032      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4916      	ldr	r1, [pc, #88]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	490e      	ldr	r1, [pc, #56]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039fa:	f000 f821 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	490a      	ldr	r1, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd ff18 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08007c30 	.word	0x08007c30
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000004 	.word	0x20000004

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	2300      	movs	r3, #0
 8003a52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a58:	4b67      	ldr	r3, [pc, #412]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d00d      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x40>
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	f200 80bd 	bhi.w	8003be4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a72:	e0b7      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a76:	60bb      	str	r3, [r7, #8]
       break;
 8003a78:	e0b7      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7a:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a7c:	60bb      	str	r3, [r7, #8]
      break;
 8003a7e:	e0b4      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a80:	4b5d      	ldr	r3, [pc, #372]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d04d      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b58      	ldr	r3, [pc, #352]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	ea02 0800 	and.w	r8, r2, r0
 8003aae:	ea03 0901 	and.w	r9, r3, r1
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	014b      	lsls	r3, r1, #5
 8003ac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac4:	0142      	lsls	r2, r0, #5
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	ebb0 0008 	subs.w	r0, r0, r8
 8003ace:	eb61 0109 	sbc.w	r1, r1, r9
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	018b      	lsls	r3, r1, #6
 8003adc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ae0:	0182      	lsls	r2, r0, #6
 8003ae2:	1a12      	subs	r2, r2, r0
 8003ae4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	00d9      	lsls	r1, r3, #3
 8003af2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af6:	00d0      	lsls	r0, r2, #3
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	eb12 0208 	adds.w	r2, r2, r8
 8003b00:	eb43 0309 	adc.w	r3, r3, r9
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	0259      	lsls	r1, r3, #9
 8003b0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b12:	0250      	lsls	r0, r2, #9
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	f7fc fb54 	bl	80001d0 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e04a      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b32:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	099b      	lsrs	r3, r3, #6
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	ea02 0400 	and.w	r4, r2, r0
 8003b4a:	ea03 0501 	and.w	r5, r3, r1
 8003b4e:	4620      	mov	r0, r4
 8003b50:	4629      	mov	r1, r5
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	014b      	lsls	r3, r1, #5
 8003b5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b60:	0142      	lsls	r2, r0, #5
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	1b00      	subs	r0, r0, r4
 8003b68:	eb61 0105 	sbc.w	r1, r1, r5
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	018b      	lsls	r3, r1, #6
 8003b76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b7a:	0182      	lsls	r2, r0, #6
 8003b7c:	1a12      	subs	r2, r2, r0
 8003b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	00d9      	lsls	r1, r3, #3
 8003b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b90:	00d0      	lsls	r0, r2, #3
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	1912      	adds	r2, r2, r4
 8003b98:	eb45 0303 	adc.w	r3, r5, r3
 8003b9c:	f04f 0000 	mov.w	r0, #0
 8003ba0:	f04f 0100 	mov.w	r1, #0
 8003ba4:	0299      	lsls	r1, r3, #10
 8003ba6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003baa:	0290      	lsls	r0, r2, #10
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	f7fc fb08 	bl	80001d0 <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	60bb      	str	r3, [r7, #8]
      break;
 8003be2:	e002      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003be6:	60bb      	str	r3, [r7, #8]
      break;
 8003be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bea:	68bb      	ldr	r3, [r7, #8]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	007a1200 	.word	0x007a1200

08003c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000000 	.word	0x20000000

08003c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c20:	f7ff fff0 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0a9b      	lsrs	r3, r3, #10
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4903      	ldr	r1, [pc, #12]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	08007c40 	.word	0x08007c40

08003c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c48:	f7ff ffdc 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0b5b      	lsrs	r3, r3, #13
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4903      	ldr	r1, [pc, #12]	; (8003c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	08007c40 	.word	0x08007c40

08003c6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	220f      	movs	r2, #15
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0203 	and.w	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	08db      	lsrs	r3, r3, #3
 8003ca6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_RCC_GetClockConfig+0x60>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0207 	and.w	r2, r3, #7
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	601a      	str	r2, [r3, #0]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e041      	b.n	8003d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fbde 	bl	80014b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f000 fbaa 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d001      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e04e      	b.n	8003e26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_TIM_Base_Start_IT+0xc4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d022      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d01d      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d018      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_TIM_Base_Start_IT+0xcc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d111      	bne.n	8003e14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d010      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e12:	e007      	b.n	8003e24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40001800 	.word	0x40001800

08003e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e041      	b.n	8003ee6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f839 	bl	8003eee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 faea 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d122      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d11b      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f06f 0202 	mvn.w	r2, #2
 8003f2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fa71 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8003f4a:	e005      	b.n	8003f58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fa63 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa74 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d122      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d11b      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0204 	mvn.w	r2, #4
 8003f82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fa47 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8003f9e:	e005      	b.n	8003fac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa39 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa4a 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d122      	bne.n	8004006 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d11b      	bne.n	8004006 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0208 	mvn.w	r2, #8
 8003fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2204      	movs	r2, #4
 8003fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fa1d 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8003ff2:	e005      	b.n	8004000 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fa0f 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa20 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b10      	cmp	r3, #16
 8004012:	d122      	bne.n	800405a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b10      	cmp	r3, #16
 8004020:	d11b      	bne.n	800405a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0210 	mvn.w	r2, #16
 800402a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2208      	movs	r2, #8
 8004030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f9f3 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8004046:	e005      	b.n	8004054 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f9e5 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9f6 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10e      	bne.n	8004086 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d107      	bne.n	8004086 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f06f 0201 	mvn.w	r2, #1
 800407e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fd f8e5 	bl	8001250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d10e      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409e:	2b80      	cmp	r3, #128	; 0x80
 80040a0:	d107      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fd9d 	bl	8004bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d10e      	bne.n	80040de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	d107      	bne.n	80040de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f9bb 	bl	8004454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d10e      	bne.n	800410a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d107      	bne.n	800410a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f06f 0220 	mvn.w	r2, #32
 8004102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fd67 	bl	8004bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800412a:	2302      	movs	r3, #2
 800412c:	e0ac      	b.n	8004288 <HAL_TIM_PWM_ConfigChannel+0x174>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b0c      	cmp	r3, #12
 800413a:	f200 809f 	bhi.w	800427c <HAL_TIM_PWM_ConfigChannel+0x168>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004179 	.word	0x08004179
 8004148:	0800427d 	.word	0x0800427d
 800414c:	0800427d 	.word	0x0800427d
 8004150:	0800427d 	.word	0x0800427d
 8004154:	080041b9 	.word	0x080041b9
 8004158:	0800427d 	.word	0x0800427d
 800415c:	0800427d 	.word	0x0800427d
 8004160:	0800427d 	.word	0x0800427d
 8004164:	080041fb 	.word	0x080041fb
 8004168:	0800427d 	.word	0x0800427d
 800416c:	0800427d 	.word	0x0800427d
 8004170:	0800427d 	.word	0x0800427d
 8004174:	0800423b 	.word	0x0800423b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fa12 	bl	80045a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	619a      	str	r2, [r3, #24]
      break;
 80041b6:	e062      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fa62 	bl	8004688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	619a      	str	r2, [r3, #24]
      break;
 80041f8:	e041      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fab7 	bl	8004774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0208 	orr.w	r2, r2, #8
 8004214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0204 	bic.w	r2, r2, #4
 8004224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69d9      	ldr	r1, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
      break;
 8004238:	e021      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fb0b 	bl	800485c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	021a      	lsls	r2, r3, #8
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	61da      	str	r2, [r3, #28]
      break;
 800427a:	e000      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800427c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_ConfigClockSource+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0b3      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x180>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e0:	d03e      	beq.n	8004360 <HAL_TIM_ConfigClockSource+0xd0>
 80042e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e6:	f200 8087 	bhi.w	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ee:	f000 8085 	beq.w	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f6:	d87f      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 80042f8:	2b70      	cmp	r3, #112	; 0x70
 80042fa:	d01a      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0xa2>
 80042fc:	2b70      	cmp	r3, #112	; 0x70
 80042fe:	d87b      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004300:	2b60      	cmp	r3, #96	; 0x60
 8004302:	d050      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x116>
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	d877      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004308:	2b50      	cmp	r3, #80	; 0x50
 800430a:	d03c      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0xf6>
 800430c:	2b50      	cmp	r3, #80	; 0x50
 800430e:	d873      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d058      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x136>
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d86f      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004318:	2b30      	cmp	r3, #48	; 0x30
 800431a:	d064      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x156>
 800431c:	2b30      	cmp	r3, #48	; 0x30
 800431e:	d86b      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004320:	2b20      	cmp	r3, #32
 8004322:	d060      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x156>
 8004324:	2b20      	cmp	r3, #32
 8004326:	d867      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05c      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x156>
 800432c:	2b10      	cmp	r3, #16
 800432e:	d05a      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004330:	e062      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f000 fb5b 	bl	80049fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004354:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	609a      	str	r2, [r3, #8]
      break;
 800435e:	e04e      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f000 fb44 	bl	80049fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004382:	609a      	str	r2, [r3, #8]
      break;
 8004384:	e03b      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	461a      	mov	r2, r3
 8004394:	f000 fab8 	bl	8004908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2150      	movs	r1, #80	; 0x50
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fb11 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 80043a4:	e02b      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 fad7 	bl	8004966 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2160      	movs	r1, #96	; 0x60
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fb01 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 80043c4:	e01b      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f000 fa98 	bl	8004908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2140      	movs	r1, #64	; 0x40
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 faf1 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e00b      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f000 fae8 	bl	80049c6 <TIM_ITRx_SetConfig>
        break;
 80043f6:	e002      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a40      	ldr	r2, [pc, #256]	; (800457c <TIM_Base_SetConfig+0x114>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d00f      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3d      	ldr	r2, [pc, #244]	; (8004580 <TIM_Base_SetConfig+0x118>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00b      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <TIM_Base_SetConfig+0x120>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3a      	ldr	r2, [pc, #232]	; (800458c <TIM_Base_SetConfig+0x124>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2f      	ldr	r2, [pc, #188]	; (800457c <TIM_Base_SetConfig+0x114>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d027      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <TIM_Base_SetConfig+0x118>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d023      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01f      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <TIM_Base_SetConfig+0x120>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a29      	ldr	r2, [pc, #164]	; (800458c <TIM_Base_SetConfig+0x124>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d017      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a28      	ldr	r2, [pc, #160]	; (8004590 <TIM_Base_SetConfig+0x128>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a27      	ldr	r2, [pc, #156]	; (8004594 <TIM_Base_SetConfig+0x12c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a26      	ldr	r2, [pc, #152]	; (8004598 <TIM_Base_SetConfig+0x130>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a25      	ldr	r2, [pc, #148]	; (800459c <TIM_Base_SetConfig+0x134>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a24      	ldr	r2, [pc, #144]	; (80045a0 <TIM_Base_SetConfig+0x138>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <TIM_Base_SetConfig+0x13c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0a      	ldr	r2, [pc, #40]	; (800457c <TIM_Base_SetConfig+0x114>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_Base_SetConfig+0xf8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a0c      	ldr	r2, [pc, #48]	; (800458c <TIM_Base_SetConfig+0x124>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d103      	bne.n	8004568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	615a      	str	r2, [r3, #20]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40010400 	.word	0x40010400
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800
 800459c:	40001800 	.word	0x40001800
 80045a0:	40001c00 	.word	0x40001c00
 80045a4:	40002000 	.word	0x40002000

080045a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f023 0201 	bic.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 0302 	bic.w	r3, r3, #2
 80045f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a20      	ldr	r2, [pc, #128]	; (8004680 <TIM_OC1_SetConfig+0xd8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC1_SetConfig+0x64>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <TIM_OC1_SetConfig+0xdc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10c      	bne.n	8004626 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0308 	bic.w	r3, r3, #8
 8004612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <TIM_OC1_SetConfig+0xd8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_OC1_SetConfig+0x8e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <TIM_OC1_SetConfig+0xdc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d111      	bne.n	800465a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400

08004688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0210 	bic.w	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0320 	bic.w	r3, r3, #32
 80046d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a22      	ldr	r2, [pc, #136]	; (800476c <TIM_OC2_SetConfig+0xe4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_OC2_SetConfig+0x68>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a21      	ldr	r2, [pc, #132]	; (8004770 <TIM_OC2_SetConfig+0xe8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d10d      	bne.n	800470c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <TIM_OC2_SetConfig+0xe4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_OC2_SetConfig+0x94>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a16      	ldr	r2, [pc, #88]	; (8004770 <TIM_OC2_SetConfig+0xe8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d113      	bne.n	8004744 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800472a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400

08004774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a21      	ldr	r2, [pc, #132]	; (8004854 <TIM_OC3_SetConfig+0xe0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_OC3_SetConfig+0x66>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a20      	ldr	r2, [pc, #128]	; (8004858 <TIM_OC3_SetConfig+0xe4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10d      	bne.n	80047f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a16      	ldr	r2, [pc, #88]	; (8004854 <TIM_OC3_SetConfig+0xe0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC3_SetConfig+0x92>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <TIM_OC3_SetConfig+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d113      	bne.n	800482e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	621a      	str	r2, [r3, #32]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	40010000 	.word	0x40010000
 8004858:	40010400 	.word	0x40010400

0800485c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	031b      	lsls	r3, r3, #12
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a12      	ldr	r2, [pc, #72]	; (8004900 <TIM_OC4_SetConfig+0xa4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_OC4_SetConfig+0x68>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a11      	ldr	r2, [pc, #68]	; (8004904 <TIM_OC4_SetConfig+0xa8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d109      	bne.n	80048d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40010400 	.word	0x40010400

08004908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f023 030a 	bic.w	r3, r3, #10
 8004944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004966:	b480      	push	{r7}
 8004968:	b087      	sub	sp, #28
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0210 	bic.w	r2, r3, #16
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f043 0307 	orr.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	609a      	str	r2, [r3, #8]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e05a      	b.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a21      	ldr	r2, [pc, #132]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa0:	d01d      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10c      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40010400 	.word	0x40010400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40001800 	.word	0x40001800

08004b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e03d      	b.n	8004bcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e03f      	b.n	8004c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc fdca 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	; 0x24
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f829 	bl	8004c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	b09f      	sub	sp, #124	; 0x7c
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb2:	68d9      	ldr	r1, [r3, #12]
 8004cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	ea40 0301 	orr.w	r3, r0, r1
 8004cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ce0:	f021 010c 	bic.w	r1, r1, #12
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cea:	430b      	orrs	r3, r1
 8004cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	6999      	ldr	r1, [r3, #24]
 8004cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	ea40 0301 	orr.w	r3, r0, r1
 8004d04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4bc5      	ldr	r3, [pc, #788]	; (8005020 <UART_SetConfig+0x384>)
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d004      	beq.n	8004d1a <UART_SetConfig+0x7e>
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4bc3      	ldr	r3, [pc, #780]	; (8005024 <UART_SetConfig+0x388>)
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d103      	bne.n	8004d22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d1a:	f7fe ff93 	bl	8003c44 <HAL_RCC_GetPCLK2Freq>
 8004d1e:	6778      	str	r0, [r7, #116]	; 0x74
 8004d20:	e002      	b.n	8004d28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d22:	f7fe ff7b 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 8004d26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	f040 80b6 	bne.w	8004ea0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d36:	461c      	mov	r4, r3
 8004d38:	f04f 0500 	mov.w	r5, #0
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	462b      	mov	r3, r5
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	6439      	str	r1, [r7, #64]	; 0x40
 8004d44:	415b      	adcs	r3, r3
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
 8004d48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d4c:	1912      	adds	r2, r2, r4
 8004d4e:	eb45 0303 	adc.w	r3, r5, r3
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f04f 0100 	mov.w	r1, #0
 8004d5a:	00d9      	lsls	r1, r3, #3
 8004d5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d60:	00d0      	lsls	r0, r2, #3
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	1911      	adds	r1, r2, r4
 8004d68:	6639      	str	r1, [r7, #96]	; 0x60
 8004d6a:	416b      	adcs	r3, r5
 8004d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d88:	f7fb fa22 	bl	80001d0 <__aeabi_uldivmod>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4ba5      	ldr	r3, [pc, #660]	; (8005028 <UART_SetConfig+0x38c>)
 8004d92:	fba3 2302 	umull	r2, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	011e      	lsls	r6, r3, #4
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9c:	461c      	mov	r4, r3
 8004d9e:	f04f 0500 	mov.w	r5, #0
 8004da2:	4622      	mov	r2, r4
 8004da4:	462b      	mov	r3, r5
 8004da6:	1891      	adds	r1, r2, r2
 8004da8:	6339      	str	r1, [r7, #48]	; 0x30
 8004daa:	415b      	adcs	r3, r3
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
 8004dae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004db2:	1912      	adds	r2, r2, r4
 8004db4:	eb45 0303 	adc.w	r3, r5, r3
 8004db8:	f04f 0000 	mov.w	r0, #0
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	00d9      	lsls	r1, r3, #3
 8004dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dc6:	00d0      	lsls	r0, r2, #3
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	1911      	adds	r1, r2, r4
 8004dce:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dd0:	416b      	adcs	r3, r5
 8004dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	1891      	adds	r1, r2, r2
 8004de0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004de2:	415b      	adcs	r3, r3
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004dee:	f7fb f9ef 	bl	80001d0 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4b8c      	ldr	r3, [pc, #560]	; (8005028 <UART_SetConfig+0x38c>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	; 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	3332      	adds	r3, #50	; 0x32
 8004e0a:	4a87      	ldr	r2, [pc, #540]	; (8005028 <UART_SetConfig+0x38c>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e18:	441e      	add	r6, r3
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	1894      	adds	r4, r2, r2
 8004e28:	623c      	str	r4, [r7, #32]
 8004e2a:	415b      	adcs	r3, r3
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e32:	1812      	adds	r2, r2, r0
 8004e34:	eb41 0303 	adc.w	r3, r1, r3
 8004e38:	f04f 0400 	mov.w	r4, #0
 8004e3c:	f04f 0500 	mov.w	r5, #0
 8004e40:	00dd      	lsls	r5, r3, #3
 8004e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e46:	00d4      	lsls	r4, r2, #3
 8004e48:	4622      	mov	r2, r4
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	1814      	adds	r4, r2, r0
 8004e4e:	653c      	str	r4, [r7, #80]	; 0x50
 8004e50:	414b      	adcs	r3, r1
 8004e52:	657b      	str	r3, [r7, #84]	; 0x54
 8004e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	61b9      	str	r1, [r7, #24]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e6e:	f7fb f9af 	bl	80001d0 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4b6c      	ldr	r3, [pc, #432]	; (8005028 <UART_SetConfig+0x38c>)
 8004e78:	fba3 1302 	umull	r1, r3, r3, r2
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	2164      	movs	r1, #100	; 0x64
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	3332      	adds	r3, #50	; 0x32
 8004e8a:	4a67      	ldr	r2, [pc, #412]	; (8005028 <UART_SetConfig+0x38c>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	f003 0207 	and.w	r2, r3, #7
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4432      	add	r2, r6
 8004e9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e9e:	e0b9      	b.n	8005014 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea2:	461c      	mov	r4, r3
 8004ea4:	f04f 0500 	mov.w	r5, #0
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	462b      	mov	r3, r5
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	6139      	str	r1, [r7, #16]
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eb8:	1912      	adds	r2, r2, r4
 8004eba:	eb45 0303 	adc.w	r3, r5, r3
 8004ebe:	f04f 0000 	mov.w	r0, #0
 8004ec2:	f04f 0100 	mov.w	r1, #0
 8004ec6:	00d9      	lsls	r1, r3, #3
 8004ec8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ecc:	00d0      	lsls	r0, r2, #3
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	eb12 0804 	adds.w	r8, r2, r4
 8004ed6:	eb43 0905 	adc.w	r9, r3, r5
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	008b      	lsls	r3, r1, #2
 8004eee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ef2:	0082      	lsls	r2, r0, #2
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	f7fb f96a 	bl	80001d0 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b49      	ldr	r3, [pc, #292]	; (8005028 <UART_SetConfig+0x38c>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	011e      	lsls	r6, r3, #4
 8004f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f04f 0100 	mov.w	r1, #0
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	1894      	adds	r4, r2, r2
 8004f18:	60bc      	str	r4, [r7, #8]
 8004f1a:	415b      	adcs	r3, r3
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f22:	1812      	adds	r2, r2, r0
 8004f24:	eb41 0303 	adc.w	r3, r1, r3
 8004f28:	f04f 0400 	mov.w	r4, #0
 8004f2c:	f04f 0500 	mov.w	r5, #0
 8004f30:	00dd      	lsls	r5, r3, #3
 8004f32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f36:	00d4      	lsls	r4, r2, #3
 8004f38:	4622      	mov	r2, r4
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	1814      	adds	r4, r2, r0
 8004f3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f40:	414b      	adcs	r3, r1
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f04f 0100 	mov.w	r1, #0
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	008b      	lsls	r3, r1, #2
 8004f58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f5c:	0082      	lsls	r2, r0, #2
 8004f5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f62:	f7fb f935 	bl	80001d0 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <UART_SetConfig+0x38c>)
 8004f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2164      	movs	r1, #100	; 0x64
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <UART_SetConfig+0x38c>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f8a:	441e      	add	r6, r3
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	1894      	adds	r4, r2, r2
 8004f9a:	603c      	str	r4, [r7, #0]
 8004f9c:	415b      	adcs	r3, r3
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa4:	1812      	adds	r2, r2, r0
 8004fa6:	eb41 0303 	adc.w	r3, r1, r3
 8004faa:	f04f 0400 	mov.w	r4, #0
 8004fae:	f04f 0500 	mov.w	r5, #0
 8004fb2:	00dd      	lsls	r5, r3, #3
 8004fb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fb8:	00d4      	lsls	r4, r2, #3
 8004fba:	4622      	mov	r2, r4
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	eb12 0a00 	adds.w	sl, r2, r0
 8004fc2:	eb43 0b01 	adc.w	fp, r3, r1
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	008b      	lsls	r3, r1, #2
 8004fda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fde:	0082      	lsls	r2, r0, #2
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	4659      	mov	r1, fp
 8004fe4:	f7fb f8f4 	bl	80001d0 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <UART_SetConfig+0x38c>)
 8004fee:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	2164      	movs	r1, #100	; 0x64
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	3332      	adds	r3, #50	; 0x32
 8005000:	4a09      	ldr	r2, [pc, #36]	; (8005028 <UART_SetConfig+0x38c>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4432      	add	r2, r6
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	bf00      	nop
 8005016:	377c      	adds	r7, #124	; 0x7c
 8005018:	46bd      	mov	sp, r7
 800501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501e:	bf00      	nop
 8005020:	40011000 	.word	0x40011000
 8005024:	40011400 	.word	0x40011400
 8005028:	51eb851f 	.word	0x51eb851f

0800502c <__NVIC_SetPriority>:
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	6039      	str	r1, [r7, #0]
 8005036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503c:	2b00      	cmp	r3, #0
 800503e:	db0a      	blt.n	8005056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	490c      	ldr	r1, [pc, #48]	; (8005078 <__NVIC_SetPriority+0x4c>)
 8005046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504a:	0112      	lsls	r2, r2, #4
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	440b      	add	r3, r1
 8005050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005054:	e00a      	b.n	800506c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	4908      	ldr	r1, [pc, #32]	; (800507c <__NVIC_SetPriority+0x50>)
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	3b04      	subs	r3, #4
 8005064:	0112      	lsls	r2, r2, #4
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	440b      	add	r3, r1
 800506a:	761a      	strb	r2, [r3, #24]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000e100 	.word	0xe000e100
 800507c:	e000ed00 	.word	0xe000ed00

08005080 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <SysTick_Handler+0x1c>)
 8005086:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005088:	f001 fcfe 	bl	8006a88 <xTaskGetSchedulerState>
 800508c:	4603      	mov	r3, r0
 800508e:	2b01      	cmp	r3, #1
 8005090:	d001      	beq.n	8005096 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005092:	f002 fae9 	bl	8007668 <xPortSysTickHandler>
  }
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	e000e010 	.word	0xe000e010

080050a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050a4:	2100      	movs	r1, #0
 80050a6:	f06f 0004 	mvn.w	r0, #4
 80050aa:	f7ff ffbf 	bl	800502c <__NVIC_SetPriority>
#endif
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ba:	f3ef 8305 	mrs	r3, IPSR
 80050be:	603b      	str	r3, [r7, #0]
  return(result);
 80050c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050c6:	f06f 0305 	mvn.w	r3, #5
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	e00c      	b.n	80050e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <osKernelInitialize+0x44>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <osKernelInitialize+0x44>)
 80050d8:	2201      	movs	r2, #1
 80050da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050dc:	2300      	movs	r3, #0
 80050de:	607b      	str	r3, [r7, #4]
 80050e0:	e002      	b.n	80050e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050e2:	f04f 33ff 	mov.w	r3, #4294967295
 80050e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050e8:	687b      	ldr	r3, [r7, #4]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	2000002c 	.word	0x2000002c

080050fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005102:	f3ef 8305 	mrs	r3, IPSR
 8005106:	603b      	str	r3, [r7, #0]
  return(result);
 8005108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osKernelStart+0x1a>
    stat = osErrorISR;
 800510e:	f06f 0305 	mvn.w	r3, #5
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	e010      	b.n	8005138 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <osKernelStart+0x48>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d109      	bne.n	8005132 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800511e:	f7ff ffbf 	bl	80050a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <osKernelStart+0x48>)
 8005124:	2202      	movs	r2, #2
 8005126:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005128:	f001 f866 	bl	80061f8 <vTaskStartScheduler>
      stat = osOK;
 800512c:	2300      	movs	r3, #0
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	e002      	b.n	8005138 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005132:	f04f 33ff 	mov.w	r3, #4294967295
 8005136:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005138:	687b      	ldr	r3, [r7, #4]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000002c 	.word	0x2000002c

08005148 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b08e      	sub	sp, #56	; 0x38
 800514c:	af04      	add	r7, sp, #16
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005158:	f3ef 8305 	mrs	r3, IPSR
 800515c:	617b      	str	r3, [r7, #20]
  return(result);
 800515e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005160:	2b00      	cmp	r3, #0
 8005162:	d17e      	bne.n	8005262 <osThreadNew+0x11a>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d07b      	beq.n	8005262 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800516e:	2318      	movs	r3, #24
 8005170:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d045      	beq.n	800520e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <osThreadNew+0x48>
        name = attr->name;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <osThreadNew+0x6e>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b38      	cmp	r3, #56	; 0x38
 80051a8:	d805      	bhi.n	80051b6 <osThreadNew+0x6e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <osThreadNew+0x72>
        return (NULL);
 80051b6:	2300      	movs	r3, #0
 80051b8:	e054      	b.n	8005264 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	089b      	lsrs	r3, r3, #2
 80051c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00e      	beq.n	80051f0 <osThreadNew+0xa8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b5b      	cmp	r3, #91	; 0x5b
 80051d8:	d90a      	bls.n	80051f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <osThreadNew+0xa8>
        mem = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	e010      	b.n	8005212 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10c      	bne.n	8005212 <osThreadNew+0xca>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <osThreadNew+0xca>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <osThreadNew+0xca>
          mem = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	e001      	b.n	8005212 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d110      	bne.n	800523a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005220:	9202      	str	r2, [sp, #8]
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6a3a      	ldr	r2, [r7, #32]
 800522c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fe0c 	bl	8005e4c <xTaskCreateStatic>
 8005234:	4603      	mov	r3, r0
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	e013      	b.n	8005262 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d110      	bne.n	8005262 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	b29a      	uxth	r2, r3
 8005244:	f107 0310 	add.w	r3, r7, #16
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fe57 	bl	8005f06 <xTaskCreate>
 8005258:	4603      	mov	r3, r0
 800525a:	2b01      	cmp	r3, #1
 800525c:	d001      	beq.n	8005262 <osThreadNew+0x11a>
            hTask = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005262:	693b      	ldr	r3, [r7, #16]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005274:	f3ef 8305 	mrs	r3, IPSR
 8005278:	60bb      	str	r3, [r7, #8]
  return(result);
 800527a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <osDelay+0x1c>
    stat = osErrorISR;
 8005280:	f06f 0305 	mvn.w	r3, #5
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e007      	b.n	8005298 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 ff7c 	bl	8006190 <vTaskDelay>
    }
  }

  return (stat);
 8005298:	68fb      	ldr	r3, [r7, #12]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a07      	ldr	r2, [pc, #28]	; (80052d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80052b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4a06      	ldr	r2, [pc, #24]	; (80052d4 <vApplicationGetIdleTaskMemory+0x30>)
 80052ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000030 	.word	0x20000030
 80052d4:	2000008c 	.word	0x2000008c

080052d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a07      	ldr	r2, [pc, #28]	; (8005304 <vApplicationGetTimerTaskMemory+0x2c>)
 80052e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4a06      	ldr	r2, [pc, #24]	; (8005308 <vApplicationGetTimerTaskMemory+0x30>)
 80052ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	2000028c 	.word	0x2000028c
 8005308:	200002e8 	.word	0x200002e8

0800530c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f103 0208 	add.w	r2, r3, #8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f04f 32ff 	mov.w	r2, #4294967295
 8005324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f103 0208 	add.w	r2, r3, #8
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f103 0208 	add.w	r2, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d103      	bne.n	80053ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e00c      	b.n	80053e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3308      	adds	r3, #8
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e002      	b.n	80053dc <vListInsert+0x2e>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d2f6      	bcs.n	80053d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6892      	ldr	r2, [r2, #8]
 8005436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6852      	ldr	r2, [r2, #4]
 8005440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d103      	bne.n	8005454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800549e:	f002 f851 	bl	8007544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	441a      	add	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	3b01      	subs	r3, #1
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	441a      	add	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	22ff      	movs	r2, #255	; 0xff
 80054e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	22ff      	movs	r2, #255	; 0xff
 80054ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d114      	bne.n	800551e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01a      	beq.n	8005532 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3310      	adds	r3, #16
 8005500:	4618      	mov	r0, r3
 8005502:	f001 f903 	bl	800670c <xTaskRemoveFromEventList>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d012      	beq.n	8005532 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <xQueueGenericReset+0xcc>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	e009      	b.n	8005532 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3310      	adds	r3, #16
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fef2 	bl	800530c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3324      	adds	r3, #36	; 0x24
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff feed 	bl	800530c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005532:	f002 f837 	bl	80075a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005536:	2301      	movs	r3, #1
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08e      	sub	sp, #56	; 0x38
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <xQueueGenericCreateStatic+0x52>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <xQueueGenericCreateStatic+0x56>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <xQueueGenericCreateStatic+0x58>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	623b      	str	r3, [r7, #32]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <xQueueGenericCreateStatic+0x7e>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <xQueueGenericCreateStatic+0x82>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericCreateStatic+0x84>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	61fb      	str	r3, [r7, #28]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055e2:	2350      	movs	r3, #80	; 0x50
 80055e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b50      	cmp	r3, #80	; 0x50
 80055ea:	d00a      	beq.n	8005602 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	61bb      	str	r3, [r7, #24]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005602:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005616:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f805 	bl	8005634 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800562c:	4618      	mov	r0, r3
 800562e:	3730      	adds	r7, #48	; 0x30
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d103      	bne.n	8005650 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e002      	b.n	8005656 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005662:	2101      	movs	r1, #1
 8005664:	69b8      	ldr	r0, [r7, #24]
 8005666:	f7ff ff05 	bl	8005474 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08e      	sub	sp, #56	; 0x38
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xQueueGenericSend+0x32>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <xQueueGenericSend+0x40>
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueGenericSend+0x44>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <xQueueGenericSend+0x46>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <xQueueGenericSend+0x60>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d103      	bne.n	80056ea <xQueueGenericSend+0x6e>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <xQueueGenericSend+0x72>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <xQueueGenericSend+0x74>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xQueueGenericSend+0x8e>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	623b      	str	r3, [r7, #32]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800570a:	f001 f9bd 	bl	8006a88 <xTaskGetSchedulerState>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <xQueueGenericSend+0x9e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <xQueueGenericSend+0xa2>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <xQueueGenericSend+0xa4>
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <xQueueGenericSend+0xbe>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	61fb      	str	r3, [r7, #28]
}
 8005736:	bf00      	nop
 8005738:	e7fe      	b.n	8005738 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800573a:	f001 ff03 	bl	8007544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <xQueueGenericSend+0xd4>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d129      	bne.n	80057a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005756:	f000 fa0b 	bl	8005b70 <prvCopyDataToQueue>
 800575a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d010      	beq.n	8005786 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	3324      	adds	r3, #36	; 0x24
 8005768:	4618      	mov	r0, r3
 800576a:	f000 ffcf 	bl	800670c <xTaskRemoveFromEventList>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d013      	beq.n	800579c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005774:	4b3f      	ldr	r3, [pc, #252]	; (8005874 <xQueueGenericSend+0x1f8>)
 8005776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	e00a      	b.n	800579c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800578c:	4b39      	ldr	r3, [pc, #228]	; (8005874 <xQueueGenericSend+0x1f8>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800579c:	f001 ff02 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e063      	b.n	800586c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057aa:	f001 fefb 	bl	80075a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e05c      	b.n	800586c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 f809 	bl	80067d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057c6:	f001 feed 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ca:	f000 fd7b 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ce:	f001 feb9 	bl	8007544 <vPortEnterCritical>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d103      	bne.n	80057e8 <xQueueGenericSend+0x16c>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d103      	bne.n	80057fe <xQueueGenericSend+0x182>
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057fe:	f001 fed1 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005802:	1d3a      	adds	r2, r7, #4
 8005804:	f107 0314 	add.w	r3, r7, #20
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fff8 	bl	8006800 <xTaskCheckForTimeOut>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d124      	bne.n	8005860 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005818:	f000 faa2 	bl	8005d60 <prvIsQueueFull>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d018      	beq.n	8005854 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	3310      	adds	r3, #16
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4611      	mov	r1, r2
 800582a:	4618      	mov	r0, r3
 800582c:	f000 ff1e 	bl	800666c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005832:	f000 fa2d 	bl	8005c90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005836:	f000 fd53 	bl	80062e0 <xTaskResumeAll>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	f47f af7c 	bne.w	800573a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <xQueueGenericSend+0x1f8>)
 8005844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	e772      	b.n	800573a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005856:	f000 fa1b 	bl	8005c90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800585a:	f000 fd41 	bl	80062e0 <xTaskResumeAll>
 800585e:	e76c      	b.n	800573a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005862:	f000 fa15 	bl	8005c90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005866:	f000 fd3b 	bl	80062e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800586a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800586c:	4618      	mov	r0, r3
 800586e:	3738      	adds	r7, #56	; 0x38
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b090      	sub	sp, #64	; 0x40
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <xQueueGenericSendFromISR+0x3c>
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <xQueueGenericSendFromISR+0x40>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <xQueueGenericSendFromISR+0x42>
 80058b8:	2300      	movs	r3, #0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d103      	bne.n	80058e2 <xQueueGenericSendFromISR+0x6a>
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <xQueueGenericSendFromISR+0x6e>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <xQueueGenericSendFromISR+0x70>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	623b      	str	r3, [r7, #32]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005902:	f001 ff01 	bl	8007708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005906:	f3ef 8211 	mrs	r2, BASEPRI
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	61fa      	str	r2, [r7, #28]
 800591c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800591e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <xQueueGenericSendFromISR+0xbc>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d12f      	bne.n	8005994 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800594a:	f000 f911 	bl	8005b70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800594e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	d112      	bne.n	800597e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d016      	beq.n	800598e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	3324      	adds	r3, #36	; 0x24
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fed1 	bl	800670c <xTaskRemoveFromEventList>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00e      	beq.n	800598e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e007      	b.n	800598e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800597e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005982:	3301      	adds	r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	b25a      	sxtb	r2, r3
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800598e:	2301      	movs	r3, #1
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005992:	e001      	b.n	8005998 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3740      	adds	r7, #64	; 0x40
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08c      	sub	sp, #48	; 0x30
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059bc:	2300      	movs	r3, #0
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <xQueueReceive+0x30>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	623b      	str	r3, [r7, #32]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d103      	bne.n	80059ee <xQueueReceive+0x3e>
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <xQueueReceive+0x42>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <xQueueReceive+0x44>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueReceive+0x5e>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	61fb      	str	r3, [r7, #28]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a0e:	f001 f83b 	bl	8006a88 <xTaskGetSchedulerState>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <xQueueReceive+0x6e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <xQueueReceive+0x72>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <xQueueReceive+0x74>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <xQueueReceive+0x8e>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	61bb      	str	r3, [r7, #24]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a3e:	f001 fd81 	bl	8007544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01f      	beq.n	8005a8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a52:	f000 f8f7 	bl	8005c44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00f      	beq.n	8005a86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	3310      	adds	r3, #16
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fe4e 	bl	800670c <xTaskRemoveFromEventList>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a76:	4b3d      	ldr	r3, [pc, #244]	; (8005b6c <xQueueReceive+0x1bc>)
 8005a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a86:	f001 fd8d 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e069      	b.n	8005b62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a94:	f001 fd86 	bl	80075a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e062      	b.n	8005b62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa2:	f107 0310 	add.w	r3, r7, #16
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fe94 	bl	80067d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ab0:	f001 fd78 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ab4:	f000 fc06 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ab8:	f001 fd44 	bl	8007544 <vPortEnterCritical>
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ac2:	b25b      	sxtb	r3, r3
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d103      	bne.n	8005ad2 <xQueueReceive+0x122>
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad8:	b25b      	sxtb	r3, r3
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d103      	bne.n	8005ae8 <xQueueReceive+0x138>
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ae8:	f001 fd5c 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aec:	1d3a      	adds	r2, r7, #4
 8005aee:	f107 0310 	add.w	r3, r7, #16
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fe83 	bl	8006800 <xTaskCheckForTimeOut>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d123      	bne.n	8005b48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b02:	f000 f917 	bl	8005d34 <prvIsQueueEmpty>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d017      	beq.n	8005b3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	3324      	adds	r3, #36	; 0x24
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fda9 	bl	800666c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1c:	f000 f8b8 	bl	8005c90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b20:	f000 fbde 	bl	80062e0 <xTaskResumeAll>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d189      	bne.n	8005a3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b2a:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <xQueueReceive+0x1bc>)
 8005b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	e780      	b.n	8005a3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3e:	f000 f8a7 	bl	8005c90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b42:	f000 fbcd 	bl	80062e0 <xTaskResumeAll>
 8005b46:	e77a      	b.n	8005a3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4a:	f000 f8a1 	bl	8005c90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b4e:	f000 fbc7 	bl	80062e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b54:	f000 f8ee 	bl	8005d34 <prvIsQueueEmpty>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f43f af6f 	beq.w	8005a3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3730      	adds	r7, #48	; 0x30
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10d      	bne.n	8005baa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d14d      	bne.n	8005c32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 ff92 	bl	8006ac4 <xTaskPriorityDisinherit>
 8005ba0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	e043      	b.n	8005c32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d119      	bne.n	8005be4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6858      	ldr	r0, [r3, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	461a      	mov	r2, r3
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	f001 fff2 	bl	8007ba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	441a      	add	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d32b      	bcc.n	8005c32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	e026      	b.n	8005c32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68d8      	ldr	r0, [r3, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	461a      	mov	r2, r3
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	f001 ffd8 	bl	8007ba4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	441a      	add	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d207      	bcs.n	8005c20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	425b      	negs	r3, r3
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d105      	bne.n	8005c32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c3a:	697b      	ldr	r3, [r7, #20]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	441a      	add	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d303      	bcc.n	8005c78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68d9      	ldr	r1, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	461a      	mov	r2, r3
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f001 ff8e 	bl	8007ba4 <memcpy>
	}
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c98:	f001 fc54 	bl	8007544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca4:	e011      	b.n	8005cca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d012      	beq.n	8005cd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3324      	adds	r3, #36	; 0x24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fd2a 	bl	800670c <xTaskRemoveFromEventList>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cbe:	f000 fe01 	bl	80068c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dce9      	bgt.n	8005ca6 <prvUnlockQueue+0x16>
 8005cd2:	e000      	b.n	8005cd6 <prvUnlockQueue+0x46>
					break;
 8005cd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cde:	f001 fc61 	bl	80075a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ce2:	f001 fc2f 	bl	8007544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cee:	e011      	b.n	8005d14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d012      	beq.n	8005d1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3310      	adds	r3, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fd05 	bl	800670c <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d08:	f000 fddc 	bl	80068c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dce9      	bgt.n	8005cf0 <prvUnlockQueue+0x60>
 8005d1c:	e000      	b.n	8005d20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	22ff      	movs	r2, #255	; 0xff
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d28:	f001 fc3c 	bl	80075a4 <vPortExitCritical>
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d3c:	f001 fc02 	bl	8007544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e001      	b.n	8005d52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d52:	f001 fc27 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d68:	f001 fbec 	bl	8007544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d102      	bne.n	8005d7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e001      	b.n	8005d82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d82:	f001 fc0f 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e014      	b.n	8005dca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005da0:	4a0f      	ldr	r2, [pc, #60]	; (8005de0 <vQueueAddToRegistry+0x50>)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dac:	490c      	ldr	r1, [pc, #48]	; (8005de0 <vQueueAddToRegistry+0x50>)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <vQueueAddToRegistry+0x50>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dc2:	e006      	b.n	8005dd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b07      	cmp	r3, #7
 8005dce:	d9e7      	bls.n	8005da0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20004c48 	.word	0x20004c48

08005de4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005df4:	f001 fba6 	bl	8007544 <vPortEnterCritical>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d103      	bne.n	8005e0e <vQueueWaitForMessageRestricted+0x2a>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e14:	b25b      	sxtb	r3, r3
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d103      	bne.n	8005e24 <vQueueWaitForMessageRestricted+0x40>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e24:	f001 fbbe 	bl	80075a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	3324      	adds	r3, #36	; 0x24
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fc3b 	bl	80066b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e3e:	6978      	ldr	r0, [r7, #20]
 8005e40:	f7ff ff26 	bl	8005c90 <prvUnlockQueue>
	}
 8005e44:	bf00      	nop
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	; 0x38
 8005e50:	af04      	add	r7, sp, #16
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	623b      	str	r3, [r7, #32]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	61fb      	str	r3, [r7, #28]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e92:	235c      	movs	r3, #92	; 0x5c
 8005e94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b5c      	cmp	r3, #92	; 0x5c
 8005e9a:	d00a      	beq.n	8005eb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61bb      	str	r3, [r7, #24]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01e      	beq.n	8005ef8 <xTaskCreateStatic+0xac>
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	2202      	movs	r2, #2
 8005ece:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9303      	str	r3, [sp, #12]
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	9302      	str	r3, [sp, #8]
 8005eda:	f107 0314 	add.w	r3, r7, #20
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f850 	bl	8005f90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ef2:	f000 f8dd 	bl	80060b0 <prvAddNewTaskToReadyList>
 8005ef6:	e001      	b.n	8005efc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005efc:	697b      	ldr	r3, [r7, #20]
	}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3728      	adds	r7, #40	; 0x28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b08c      	sub	sp, #48	; 0x30
 8005f0a:	af04      	add	r7, sp, #16
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fc34 	bl	8007788 <pvPortMalloc>
 8005f20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f28:	205c      	movs	r0, #92	; 0x5c
 8005f2a:	f001 fc2d 	bl	8007788 <pvPortMalloc>
 8005f2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f3c:	e005      	b.n	8005f4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f3e:	6978      	ldr	r0, [r7, #20]
 8005f40:	f001 fcee 	bl	8007920 <vPortFree>
 8005f44:	e001      	b.n	8005f4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d017      	beq.n	8005f80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9303      	str	r3, [sp, #12]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f80e 	bl	8005f90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f74:	69f8      	ldr	r0, [r7, #28]
 8005f76:	f000 f89b 	bl	80060b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e002      	b.n	8005f86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f86:	69bb      	ldr	r3, [r7, #24]
	}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	21a5      	movs	r1, #165	; 0xa5
 8005faa:	f001 fe09 	bl	8007bc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f023 0307 	bic.w	r3, r3, #7
 8005fc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	617b      	str	r3, [r7, #20]
}
 8005fe4:	bf00      	nop
 8005fe6:	e7fe      	b.n	8005fe6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01f      	beq.n	800602e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	e012      	b.n	800601a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	7819      	ldrb	r1, [r3, #0]
 8005ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	3334      	adds	r3, #52	; 0x34
 8006004:	460a      	mov	r2, r1
 8006006:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	2b0f      	cmp	r3, #15
 800601e:	d9e9      	bls.n	8005ff4 <prvInitialiseNewTask+0x64>
 8006020:	e000      	b.n	8006024 <prvInitialiseNewTask+0x94>
			{
				break;
 8006022:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800602c:	e003      	b.n	8006036 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	2b37      	cmp	r3, #55	; 0x37
 800603a:	d901      	bls.n	8006040 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800603c:	2337      	movs	r3, #55	; 0x37
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	2200      	movs	r2, #0
 8006050:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	3304      	adds	r3, #4
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff f978 	bl	800534c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	3318      	adds	r3, #24
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff f973 	bl	800534c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2200      	movs	r2, #0
 8006080:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	68f9      	ldr	r1, [r7, #12]
 800608e:	69b8      	ldr	r0, [r7, #24]
 8006090:	f001 f928 	bl	80072e4 <pxPortInitialiseStack>
 8006094:	4602      	mov	r2, r0
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a6:	bf00      	nop
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060b8:	f001 fa44 	bl	8007544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060bc:	4b2d      	ldr	r3, [pc, #180]	; (8006174 <prvAddNewTaskToReadyList+0xc4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3301      	adds	r3, #1
 80060c2:	4a2c      	ldr	r2, [pc, #176]	; (8006174 <prvAddNewTaskToReadyList+0xc4>)
 80060c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060c6:	4b2c      	ldr	r3, [pc, #176]	; (8006178 <prvAddNewTaskToReadyList+0xc8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060ce:	4a2a      	ldr	r2, [pc, #168]	; (8006178 <prvAddNewTaskToReadyList+0xc8>)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <prvAddNewTaskToReadyList+0xc4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d110      	bne.n	80060fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060dc:	f000 fc16 	bl	800690c <prvInitialiseTaskLists>
 80060e0:	e00d      	b.n	80060fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060e2:	4b26      	ldr	r3, [pc, #152]	; (800617c <prvAddNewTaskToReadyList+0xcc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ea:	4b23      	ldr	r3, [pc, #140]	; (8006178 <prvAddNewTaskToReadyList+0xc8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d802      	bhi.n	80060fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060f8:	4a1f      	ldr	r2, [pc, #124]	; (8006178 <prvAddNewTaskToReadyList+0xc8>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060fe:	4b20      	ldr	r3, [pc, #128]	; (8006180 <prvAddNewTaskToReadyList+0xd0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <prvAddNewTaskToReadyList+0xd0>)
 8006106:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <prvAddNewTaskToReadyList+0xd0>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <prvAddNewTaskToReadyList+0xd4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d903      	bls.n	8006124 <prvAddNewTaskToReadyList+0x74>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	4a18      	ldr	r2, [pc, #96]	; (8006184 <prvAddNewTaskToReadyList+0xd4>)
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <prvAddNewTaskToReadyList+0xd8>)
 8006132:	441a      	add	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f7ff f913 	bl	8005366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006140:	f001 fa30 	bl	80075a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006144:	4b0d      	ldr	r3, [pc, #52]	; (800617c <prvAddNewTaskToReadyList+0xcc>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800614c:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <prvAddNewTaskToReadyList+0xc8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	429a      	cmp	r2, r3
 8006158:	d207      	bcs.n	800616a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <prvAddNewTaskToReadyList+0xdc>)
 800615c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000bbc 	.word	0x20000bbc
 8006178:	200006e8 	.word	0x200006e8
 800617c:	20000bc8 	.word	0x20000bc8
 8006180:	20000bd8 	.word	0x20000bd8
 8006184:	20000bc4 	.word	0x20000bc4
 8006188:	200006ec 	.word	0x200006ec
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061a2:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <vTaskDelay+0x60>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <vTaskDelay+0x30>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60bb      	str	r3, [r7, #8]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061c0:	f000 f880 	bl	80062c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061c4:	2100      	movs	r1, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fcea 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061cc:	f000 f888 	bl	80062e0 <xTaskResumeAll>
 80061d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d107      	bne.n	80061e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <vTaskDelay+0x64>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20000be4 	.word	0x20000be4
 80061f4:	e000ed04 	.word	0xe000ed04

080061f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006206:	463a      	mov	r2, r7
 8006208:	1d39      	adds	r1, r7, #4
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff f848 	bl	80052a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	2300      	movs	r3, #0
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	460a      	mov	r2, r1
 8006226:	4921      	ldr	r1, [pc, #132]	; (80062ac <vTaskStartScheduler+0xb4>)
 8006228:	4821      	ldr	r0, [pc, #132]	; (80062b0 <vTaskStartScheduler+0xb8>)
 800622a:	f7ff fe0f 	bl	8005e4c <xTaskCreateStatic>
 800622e:	4603      	mov	r3, r0
 8006230:	4a20      	ldr	r2, [pc, #128]	; (80062b4 <vTaskStartScheduler+0xbc>)
 8006232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006234:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <vTaskStartScheduler+0xbc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e001      	b.n	8006246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d102      	bne.n	8006252 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800624c:	f000 fcfc 	bl	8006c48 <xTimerCreateTimerTask>
 8006250:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d116      	bne.n	8006286 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	613b      	str	r3, [r7, #16]
}
 800626a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800626c:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <vTaskStartScheduler+0xc0>)
 800626e:	f04f 32ff 	mov.w	r2, #4294967295
 8006272:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006274:	4b11      	ldr	r3, [pc, #68]	; (80062bc <vTaskStartScheduler+0xc4>)
 8006276:	2201      	movs	r2, #1
 8006278:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800627a:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <vTaskStartScheduler+0xc8>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006280:	f001 f8be 	bl	8007400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006284:	e00e      	b.n	80062a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d10a      	bne.n	80062a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60fb      	str	r3, [r7, #12]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <vTaskStartScheduler+0xaa>
}
 80062a4:	bf00      	nop
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	08007bf4 	.word	0x08007bf4
 80062b0:	080068dd 	.word	0x080068dd
 80062b4:	20000be0 	.word	0x20000be0
 80062b8:	20000bdc 	.word	0x20000bdc
 80062bc:	20000bc8 	.word	0x20000bc8
 80062c0:	20000bc0 	.word	0x20000bc0

080062c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062c8:	4b04      	ldr	r3, [pc, #16]	; (80062dc <vTaskSuspendAll+0x18>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	4a03      	ldr	r2, [pc, #12]	; (80062dc <vTaskSuspendAll+0x18>)
 80062d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062d2:	bf00      	nop
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000be4 	.word	0x20000be4

080062e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ee:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <xTaskResumeAll+0x118>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <xTaskResumeAll+0x2c>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
}
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800630c:	f001 f91a 	bl	8007544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006310:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <xTaskResumeAll+0x118>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3b01      	subs	r3, #1
 8006316:	4a38      	ldr	r2, [pc, #224]	; (80063f8 <xTaskResumeAll+0x118>)
 8006318:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631a:	4b37      	ldr	r3, [pc, #220]	; (80063f8 <xTaskResumeAll+0x118>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d162      	bne.n	80063e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006322:	4b36      	ldr	r3, [pc, #216]	; (80063fc <xTaskResumeAll+0x11c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d05e      	beq.n	80063e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800632a:	e02f      	b.n	800638c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632c:	4b34      	ldr	r3, [pc, #208]	; (8006400 <xTaskResumeAll+0x120>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3318      	adds	r3, #24
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff f871 	bl	8005420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3304      	adds	r3, #4
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff f86c 	bl	8005420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <xTaskResumeAll+0x124>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d903      	bls.n	800635c <xTaskResumeAll+0x7c>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4a2a      	ldr	r2, [pc, #168]	; (8006404 <xTaskResumeAll+0x124>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a27      	ldr	r2, [pc, #156]	; (8006408 <xTaskResumeAll+0x128>)
 800636a:	441a      	add	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fe fff7 	bl	8005366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637c:	4b23      	ldr	r3, [pc, #140]	; (800640c <xTaskResumeAll+0x12c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	429a      	cmp	r2, r3
 8006384:	d302      	bcc.n	800638c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006386:	4b22      	ldr	r3, [pc, #136]	; (8006410 <xTaskResumeAll+0x130>)
 8006388:	2201      	movs	r2, #1
 800638a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800638c:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <xTaskResumeAll+0x120>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1cb      	bne.n	800632c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800639a:	f000 fb55 	bl	8006a48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800639e:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <xTaskResumeAll+0x134>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d010      	beq.n	80063cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063aa:	f000 f847 	bl	800643c <xTaskIncrementTick>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063b4:	4b16      	ldr	r3, [pc, #88]	; (8006410 <xTaskResumeAll+0x130>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3b01      	subs	r3, #1
 80063be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f1      	bne.n	80063aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063c6:	4b13      	ldr	r3, [pc, #76]	; (8006414 <xTaskResumeAll+0x134>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063cc:	4b10      	ldr	r3, [pc, #64]	; (8006410 <xTaskResumeAll+0x130>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063d8:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <xTaskResumeAll+0x138>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063e8:	f001 f8dc 	bl	80075a4 <vPortExitCritical>

	return xAlreadyYielded;
 80063ec:	68bb      	ldr	r3, [r7, #8]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000be4 	.word	0x20000be4
 80063fc:	20000bbc 	.word	0x20000bbc
 8006400:	20000b7c 	.word	0x20000b7c
 8006404:	20000bc4 	.word	0x20000bc4
 8006408:	200006ec 	.word	0x200006ec
 800640c:	200006e8 	.word	0x200006e8
 8006410:	20000bd0 	.word	0x20000bd0
 8006414:	20000bcc 	.word	0x20000bcc
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <xTaskGetTickCount+0x1c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006428:	687b      	ldr	r3, [r7, #4]
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000bc0 	.word	0x20000bc0

0800643c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006446:	4b4f      	ldr	r3, [pc, #316]	; (8006584 <xTaskIncrementTick+0x148>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 808f 	bne.w	800656e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006450:	4b4d      	ldr	r3, [pc, #308]	; (8006588 <xTaskIncrementTick+0x14c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006458:	4a4b      	ldr	r2, [pc, #300]	; (8006588 <xTaskIncrementTick+0x14c>)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d120      	bne.n	80064a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006464:	4b49      	ldr	r3, [pc, #292]	; (800658c <xTaskIncrementTick+0x150>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <xTaskIncrementTick+0x48>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	603b      	str	r3, [r7, #0]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <xTaskIncrementTick+0x46>
 8006484:	4b41      	ldr	r3, [pc, #260]	; (800658c <xTaskIncrementTick+0x150>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	4b41      	ldr	r3, [pc, #260]	; (8006590 <xTaskIncrementTick+0x154>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a3f      	ldr	r2, [pc, #252]	; (800658c <xTaskIncrementTick+0x150>)
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4a3f      	ldr	r2, [pc, #252]	; (8006590 <xTaskIncrementTick+0x154>)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	4b3e      	ldr	r3, [pc, #248]	; (8006594 <xTaskIncrementTick+0x158>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	4a3d      	ldr	r2, [pc, #244]	; (8006594 <xTaskIncrementTick+0x158>)
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	f000 fad1 	bl	8006a48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064a6:	4b3c      	ldr	r3, [pc, #240]	; (8006598 <xTaskIncrementTick+0x15c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d349      	bcc.n	8006544 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b0:	4b36      	ldr	r3, [pc, #216]	; (800658c <xTaskIncrementTick+0x150>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ba:	4b37      	ldr	r3, [pc, #220]	; (8006598 <xTaskIncrementTick+0x15c>)
 80064bc:	f04f 32ff 	mov.w	r2, #4294967295
 80064c0:	601a      	str	r2, [r3, #0]
					break;
 80064c2:	e03f      	b.n	8006544 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c4:	4b31      	ldr	r3, [pc, #196]	; (800658c <xTaskIncrementTick+0x150>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d203      	bcs.n	80064e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064dc:	4a2e      	ldr	r2, [pc, #184]	; (8006598 <xTaskIncrementTick+0x15c>)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064e2:	e02f      	b.n	8006544 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe ff99 	bl	8005420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	3318      	adds	r3, #24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe ff90 	bl	8005420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4b25      	ldr	r3, [pc, #148]	; (800659c <xTaskIncrementTick+0x160>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d903      	bls.n	8006514 <xTaskIncrementTick+0xd8>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <xTaskIncrementTick+0x160>)
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <xTaskIncrementTick+0x164>)
 8006522:	441a      	add	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7fe ff1b 	bl	8005366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <xTaskIncrementTick+0x168>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	429a      	cmp	r2, r3
 800653c:	d3b8      	bcc.n	80064b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006542:	e7b5      	b.n	80064b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006544:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <xTaskIncrementTick+0x168>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654a:	4915      	ldr	r1, [pc, #84]	; (80065a0 <xTaskIncrementTick+0x164>)
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d901      	bls.n	8006560 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800655c:	2301      	movs	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006560:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <xTaskIncrementTick+0x16c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e004      	b.n	8006578 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <xTaskIncrementTick+0x170>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <xTaskIncrementTick+0x170>)
 8006576:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006578:	697b      	ldr	r3, [r7, #20]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000be4 	.word	0x20000be4
 8006588:	20000bc0 	.word	0x20000bc0
 800658c:	20000b74 	.word	0x20000b74
 8006590:	20000b78 	.word	0x20000b78
 8006594:	20000bd4 	.word	0x20000bd4
 8006598:	20000bdc 	.word	0x20000bdc
 800659c:	20000bc4 	.word	0x20000bc4
 80065a0:	200006ec 	.word	0x200006ec
 80065a4:	200006e8 	.word	0x200006e8
 80065a8:	20000bd0 	.word	0x20000bd0
 80065ac:	20000bcc 	.word	0x20000bcc

080065b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065b6:	4b28      	ldr	r3, [pc, #160]	; (8006658 <vTaskSwitchContext+0xa8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065be:	4b27      	ldr	r3, [pc, #156]	; (800665c <vTaskSwitchContext+0xac>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065c4:	e041      	b.n	800664a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80065c6:	4b25      	ldr	r3, [pc, #148]	; (800665c <vTaskSwitchContext+0xac>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065cc:	4b24      	ldr	r3, [pc, #144]	; (8006660 <vTaskSwitchContext+0xb0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e010      	b.n	80065f6 <vTaskSwitchContext+0x46>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	607b      	str	r3, [r7, #4]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <vTaskSwitchContext+0x3e>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	491b      	ldr	r1, [pc, #108]	; (8006664 <vTaskSwitchContext+0xb4>)
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0e4      	beq.n	80065d4 <vTaskSwitchContext+0x24>
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4a13      	ldr	r2, [pc, #76]	; (8006664 <vTaskSwitchContext+0xb4>)
 8006616:	4413      	add	r3, r2
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	605a      	str	r2, [r3, #4]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	3308      	adds	r3, #8
 800662c:	429a      	cmp	r2, r3
 800662e:	d104      	bne.n	800663a <vTaskSwitchContext+0x8a>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	605a      	str	r2, [r3, #4]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4a09      	ldr	r2, [pc, #36]	; (8006668 <vTaskSwitchContext+0xb8>)
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4a06      	ldr	r2, [pc, #24]	; (8006660 <vTaskSwitchContext+0xb0>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6013      	str	r3, [r2, #0]
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000be4 	.word	0x20000be4
 800665c:	20000bd0 	.word	0x20000bd0
 8006660:	20000bc4 	.word	0x20000bc4
 8006664:	200006ec 	.word	0x200006ec
 8006668:	200006e8 	.word	0x200006e8

0800666c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	60fb      	str	r3, [r7, #12]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <vTaskPlaceOnEventList+0x44>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3318      	adds	r3, #24
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fe fe87 	bl	80053ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066a0:	2101      	movs	r1, #1
 80066a2:	6838      	ldr	r0, [r7, #0]
 80066a4:	f000 fa7c 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	200006e8 	.word	0x200006e8

080066b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	617b      	str	r3, [r7, #20]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <vTaskPlaceOnEventListRestricted+0x54>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3318      	adds	r3, #24
 80066e2:	4619      	mov	r1, r3
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7fe fe3e 	bl	8005366 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066f0:	f04f 33ff 	mov.w	r3, #4294967295
 80066f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	68b8      	ldr	r0, [r7, #8]
 80066fa:	f000 fa51 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
	}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200006e8 	.word	0x200006e8

0800670c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	60fb      	str	r3, [r7, #12]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	3318      	adds	r3, #24
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe fe6f 	bl	8005420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006742:	4b1e      	ldr	r3, [pc, #120]	; (80067bc <xTaskRemoveFromEventList+0xb0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d11d      	bne.n	8006786 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3304      	adds	r3, #4
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fe66 	bl	8005420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	4b19      	ldr	r3, [pc, #100]	; (80067c0 <xTaskRemoveFromEventList+0xb4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d903      	bls.n	8006768 <xTaskRemoveFromEventList+0x5c>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4a16      	ldr	r2, [pc, #88]	; (80067c0 <xTaskRemoveFromEventList+0xb4>)
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <xTaskRemoveFromEventList+0xb8>)
 8006776:	441a      	add	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	3304      	adds	r3, #4
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f7fe fdf1 	bl	8005366 <vListInsertEnd>
 8006784:	e005      	b.n	8006792 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3318      	adds	r3, #24
 800678a:	4619      	mov	r1, r3
 800678c:	480e      	ldr	r0, [pc, #56]	; (80067c8 <xTaskRemoveFromEventList+0xbc>)
 800678e:	f7fe fdea 	bl	8005366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006796:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <xTaskRemoveFromEventList+0xc0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	429a      	cmp	r2, r3
 800679e:	d905      	bls.n	80067ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067a0:	2301      	movs	r3, #1
 80067a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067a4:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <xTaskRemoveFromEventList+0xc4>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e001      	b.n	80067b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067b0:	697b      	ldr	r3, [r7, #20]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000be4 	.word	0x20000be4
 80067c0:	20000bc4 	.word	0x20000bc4
 80067c4:	200006ec 	.word	0x200006ec
 80067c8:	20000b7c 	.word	0x20000b7c
 80067cc:	200006e8 	.word	0x200006e8
 80067d0:	20000bd0 	.word	0x20000bd0

080067d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <vTaskInternalSetTimeOutState+0x24>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <vTaskInternalSetTimeOutState+0x28>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	605a      	str	r2, [r3, #4]
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	20000bd4 	.word	0x20000bd4
 80067fc:	20000bc0 	.word	0x20000bc0

08006800 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	613b      	str	r3, [r7, #16]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006842:	f000 fe7f 	bl	8007544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006846:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <xTaskCheckForTimeOut+0xbc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d102      	bne.n	8006866 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006860:	2300      	movs	r3, #0
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	e023      	b.n	80068ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <xTaskCheckForTimeOut+0xc0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d007      	beq.n	8006882 <xTaskCheckForTimeOut+0x82>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	429a      	cmp	r2, r3
 800687a:	d302      	bcc.n	8006882 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	e015      	b.n	80068ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	429a      	cmp	r2, r3
 800688a:	d20b      	bcs.n	80068a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	1ad2      	subs	r2, r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff ff9b 	bl	80067d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	e004      	b.n	80068ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068aa:	2301      	movs	r3, #1
 80068ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068ae:	f000 fe79 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 80068b2:	69fb      	ldr	r3, [r7, #28]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3720      	adds	r7, #32
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000bc0 	.word	0x20000bc0
 80068c0:	20000bd4 	.word	0x20000bd4

080068c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068c8:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <vTaskMissedYield+0x14>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
}
 80068ce:	bf00      	nop
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	20000bd0 	.word	0x20000bd0

080068dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068e4:	f000 f852 	bl	800698c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <prvIdleTask+0x28>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d9f9      	bls.n	80068e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <prvIdleTask+0x2c>)
 80068f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006900:	e7f0      	b.n	80068e4 <prvIdleTask+0x8>
 8006902:	bf00      	nop
 8006904:	200006ec 	.word	0x200006ec
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	e00c      	b.n	8006932 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <prvInitialiseTaskLists+0x60>)
 8006924:	4413      	add	r3, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe fcf0 	bl	800530c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3301      	adds	r3, #1
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b37      	cmp	r3, #55	; 0x37
 8006936:	d9ef      	bls.n	8006918 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006938:	480d      	ldr	r0, [pc, #52]	; (8006970 <prvInitialiseTaskLists+0x64>)
 800693a:	f7fe fce7 	bl	800530c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800693e:	480d      	ldr	r0, [pc, #52]	; (8006974 <prvInitialiseTaskLists+0x68>)
 8006940:	f7fe fce4 	bl	800530c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006944:	480c      	ldr	r0, [pc, #48]	; (8006978 <prvInitialiseTaskLists+0x6c>)
 8006946:	f7fe fce1 	bl	800530c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800694a:	480c      	ldr	r0, [pc, #48]	; (800697c <prvInitialiseTaskLists+0x70>)
 800694c:	f7fe fcde 	bl	800530c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006950:	480b      	ldr	r0, [pc, #44]	; (8006980 <prvInitialiseTaskLists+0x74>)
 8006952:	f7fe fcdb 	bl	800530c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <prvInitialiseTaskLists+0x78>)
 8006958:	4a05      	ldr	r2, [pc, #20]	; (8006970 <prvInitialiseTaskLists+0x64>)
 800695a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <prvInitialiseTaskLists+0x7c>)
 800695e:	4a05      	ldr	r2, [pc, #20]	; (8006974 <prvInitialiseTaskLists+0x68>)
 8006960:	601a      	str	r2, [r3, #0]
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	200006ec 	.word	0x200006ec
 8006970:	20000b4c 	.word	0x20000b4c
 8006974:	20000b60 	.word	0x20000b60
 8006978:	20000b7c 	.word	0x20000b7c
 800697c:	20000b90 	.word	0x20000b90
 8006980:	20000ba8 	.word	0x20000ba8
 8006984:	20000b74 	.word	0x20000b74
 8006988:	20000b78 	.word	0x20000b78

0800698c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006992:	e019      	b.n	80069c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006994:	f000 fdd6 	bl	8007544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006998:	4b10      	ldr	r3, [pc, #64]	; (80069dc <prvCheckTasksWaitingTermination+0x50>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fd3b 	bl	8005420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069aa:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <prvCheckTasksWaitingTermination+0x54>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	4a0b      	ldr	r2, [pc, #44]	; (80069e0 <prvCheckTasksWaitingTermination+0x54>)
 80069b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069b4:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <prvCheckTasksWaitingTermination+0x58>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <prvCheckTasksWaitingTermination+0x58>)
 80069bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069be:	f000 fdf1 	bl	80075a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f810 	bl	80069e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <prvCheckTasksWaitingTermination+0x58>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e1      	bne.n	8006994 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000b90 	.word	0x20000b90
 80069e0:	20000bbc 	.word	0x20000bbc
 80069e4:	20000ba4 	.word	0x20000ba4

080069e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d108      	bne.n	8006a0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 ff8e 	bl	8007920 <vPortFree>
				vPortFree( pxTCB );
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 ff8b 	bl	8007920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a0a:	e018      	b.n	8006a3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d103      	bne.n	8006a1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 ff82 	bl	8007920 <vPortFree>
	}
 8006a1c:	e00f      	b.n	8006a3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d00a      	beq.n	8006a3e <prvDeleteTCB+0x56>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	60fb      	str	r3, [r7, #12]
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <prvDeleteTCB+0x54>
	}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <prvResetNextTaskUnblockTime+0x38>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <prvResetNextTaskUnblockTime+0x3c>)
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a60:	e008      	b.n	8006a74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <prvResetNextTaskUnblockTime+0x38>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <prvResetNextTaskUnblockTime+0x3c>)
 8006a72:	6013      	str	r3, [r2, #0]
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	20000b74 	.word	0x20000b74
 8006a84:	20000bdc 	.word	0x20000bdc

08006a88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <xTaskGetSchedulerState+0x34>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a96:	2301      	movs	r3, #1
 8006a98:	607b      	str	r3, [r7, #4]
 8006a9a:	e008      	b.n	8006aae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9c:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <xTaskGetSchedulerState+0x38>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	e001      	b.n	8006aae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aae:	687b      	ldr	r3, [r7, #4]
	}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000bc8 	.word	0x20000bc8
 8006ac0:	20000be4 	.word	0x20000be4

08006ac4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d056      	beq.n	8006b88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ada:	4b2e      	ldr	r3, [pc, #184]	; (8006b94 <xTaskPriorityDisinherit+0xd0>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d00a      	beq.n	8006afa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	60fb      	str	r3, [r7, #12]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	60bb      	str	r3, [r7, #8]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1c:	1e5a      	subs	r2, r3, #1
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d02c      	beq.n	8006b88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d128      	bne.n	8006b88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fc70 	bl	8005420 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <xTaskPriorityDisinherit+0xd4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d903      	bls.n	8006b68 <xTaskPriorityDisinherit+0xa4>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	4a0c      	ldr	r2, [pc, #48]	; (8006b98 <xTaskPriorityDisinherit+0xd4>)
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4a09      	ldr	r2, [pc, #36]	; (8006b9c <xTaskPriorityDisinherit+0xd8>)
 8006b76:	441a      	add	r2, r3
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f7fe fbf1 	bl	8005366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b84:	2301      	movs	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b88:	697b      	ldr	r3, [r7, #20]
	}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200006e8 	.word	0x200006e8
 8006b98:	20000bc4 	.word	0x20000bc4
 8006b9c:	200006ec 	.word	0x200006ec

08006ba0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006baa:	4b21      	ldr	r3, [pc, #132]	; (8006c30 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb0:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fc32 	bl	8005420 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d10a      	bne.n	8006bda <prvAddCurrentTaskToDelayedList+0x3a>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bca:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4819      	ldr	r0, [pc, #100]	; (8006c38 <prvAddCurrentTaskToDelayedList+0x98>)
 8006bd4:	f7fe fbc7 	bl	8005366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bd8:	e026      	b.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006be2:	4b14      	ldr	r3, [pc, #80]	; (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d209      	bcs.n	8006c06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf2:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7fe fbd5 	bl	80053ae <vListInsert>
}
 8006c04:	e010      	b.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c06:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe fbcb 	bl	80053ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c18:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d202      	bcs.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c22:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6013      	str	r3, [r2, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000bc0 	.word	0x20000bc0
 8006c34:	200006e8 	.word	0x200006e8
 8006c38:	20000ba8 	.word	0x20000ba8
 8006c3c:	20000b78 	.word	0x20000b78
 8006c40:	20000b74 	.word	0x20000b74
 8006c44:	20000bdc 	.word	0x20000bdc

08006c48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c52:	f000 fb07 	bl	8007264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c56:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <xTimerCreateTimerTask+0x80>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d021      	beq.n	8006ca2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c66:	1d3a      	adds	r2, r7, #4
 8006c68:	f107 0108 	add.w	r1, r7, #8
 8006c6c:	f107 030c 	add.w	r3, r7, #12
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fb31 	bl	80052d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	9202      	str	r2, [sp, #8]
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	2302      	movs	r3, #2
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	460a      	mov	r2, r1
 8006c88:	4910      	ldr	r1, [pc, #64]	; (8006ccc <xTimerCreateTimerTask+0x84>)
 8006c8a:	4811      	ldr	r0, [pc, #68]	; (8006cd0 <xTimerCreateTimerTask+0x88>)
 8006c8c:	f7ff f8de 	bl	8005e4c <xTaskCreateStatic>
 8006c90:	4603      	mov	r3, r0
 8006c92:	4a10      	ldr	r2, [pc, #64]	; (8006cd4 <xTimerCreateTimerTask+0x8c>)
 8006c94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c96:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <xTimerCreateTimerTask+0x8c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	613b      	str	r3, [r7, #16]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cbe:	697b      	ldr	r3, [r7, #20]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000c18 	.word	0x20000c18
 8006ccc:	08007bfc 	.word	0x08007bfc
 8006cd0:	08006e0d 	.word	0x08006e0d
 8006cd4:	20000c1c 	.word	0x20000c1c

08006cd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	623b      	str	r3, [r7, #32]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d06:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <xTimerGenericCommand+0x98>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d02a      	beq.n	8006d64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	dc18      	bgt.n	8006d52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d20:	f7ff feb2 	bl	8006a88 <xTaskGetSchedulerState>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d109      	bne.n	8006d3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d2a:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <xTimerGenericCommand+0x98>)
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	f107 0110 	add.w	r1, r7, #16
 8006d32:	2300      	movs	r3, #0
 8006d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d36:	f7fe fca1 	bl	800567c <xQueueGenericSend>
 8006d3a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d3c:	e012      	b.n	8006d64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <xTimerGenericCommand+0x98>)
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	f107 0110 	add.w	r1, r7, #16
 8006d46:	2300      	movs	r3, #0
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f7fe fc97 	bl	800567c <xQueueGenericSend>
 8006d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d50:	e008      	b.n	8006d64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <xTimerGenericCommand+0x98>)
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	f107 0110 	add.w	r1, r7, #16
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	f7fe fd8b 	bl	8005878 <xQueueGenericSendFromISR>
 8006d62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3728      	adds	r7, #40	; 0x28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000c18 	.word	0x20000c18

08006d74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7e:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <prvProcessExpiredTimer+0x94>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fb47 	bl	8005420 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d022      	beq.n	8006de6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	699a      	ldr	r2, [r3, #24]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	18d1      	adds	r1, r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	6978      	ldr	r0, [r7, #20]
 8006dae:	f000 f8d1 	bl	8006f54 <prvInsertTimerInActiveList>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01f      	beq.n	8006df8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006db8:	2300      	movs	r3, #0
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6978      	ldr	r0, [r7, #20]
 8006dc4:	f7ff ff88 	bl	8006cd8 <xTimerGenericCommand>
 8006dc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d113      	bne.n	8006df8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	6978      	ldr	r0, [r7, #20]
 8006dfe:	4798      	blx	r3
}
 8006e00:	bf00      	nop
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000c10 	.word	0x20000c10

08006e0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e14:	f107 0308 	add.w	r3, r7, #8
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 f857 	bl	8006ecc <prvGetNextExpireTime>
 8006e1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4619      	mov	r1, r3
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f803 	bl	8006e30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e2a:	f000 f8d5 	bl	8006fd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e2e:	e7f1      	b.n	8006e14 <prvTimerTask+0x8>

08006e30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e3a:	f7ff fa43 	bl	80062c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e3e:	f107 0308 	add.w	r3, r7, #8
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f866 	bl	8006f14 <prvSampleTimeNow>
 8006e48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d130      	bne.n	8006eb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <prvProcessTimerOrBlockTask+0x3c>
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d806      	bhi.n	8006e6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e5e:	f7ff fa3f 	bl	80062e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff85 	bl	8006d74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e6a:	e024      	b.n	8006eb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e72:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <prvProcessTimerOrBlockTask+0x90>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <prvProcessTimerOrBlockTask+0x50>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <prvProcessTimerOrBlockTask+0x52>
 8006e80:	2300      	movs	r3, #0
 8006e82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <prvProcessTimerOrBlockTask+0x94>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	4619      	mov	r1, r3
 8006e92:	f7fe ffa7 	bl	8005de4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e96:	f7ff fa23 	bl	80062e0 <xTaskResumeAll>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ea0:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <prvProcessTimerOrBlockTask+0x98>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
}
 8006eb0:	e001      	b.n	8006eb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eb2:	f7ff fa15 	bl	80062e0 <xTaskResumeAll>
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000c14 	.word	0x20000c14
 8006ec4:	20000c18 	.word	0x20000c18
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <prvGetNextExpireTime+0x44>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <prvGetNextExpireTime+0x16>
 8006ede:	2201      	movs	r2, #1
 8006ee0:	e000      	b.n	8006ee4 <prvGetNextExpireTime+0x18>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <prvGetNextExpireTime+0x44>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e001      	b.n	8006f00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000c10 	.word	0x20000c10

08006f14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f1c:	f7ff fa7e 	bl	800641c <xTaskGetTickCount>
 8006f20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvSampleTimeNow+0x3c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d205      	bcs.n	8006f38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f2c:	f000 f936 	bl	800719c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e002      	b.n	8006f3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f3e:	4a04      	ldr	r2, [pc, #16]	; (8006f50 <prvSampleTimeNow+0x3c>)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f44:	68fb      	ldr	r3, [r7, #12]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000c20 	.word	0x20000c20

08006f54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d812      	bhi.n	8006fa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d302      	bcc.n	8006f8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e01b      	b.n	8006fc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f8e:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <prvInsertTimerInActiveList+0x7c>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7fe fa08 	bl	80053ae <vListInsert>
 8006f9e:	e012      	b.n	8006fc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d206      	bcs.n	8006fb6 <prvInsertTimerInActiveList+0x62>
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d302      	bcc.n	8006fb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e007      	b.n	8006fc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fb6:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <prvInsertTimerInActiveList+0x80>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f7fe f9f4 	bl	80053ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fc6:	697b      	ldr	r3, [r7, #20]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000c14 	.word	0x20000c14
 8006fd4:	20000c10 	.word	0x20000c10

08006fd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08e      	sub	sp, #56	; 0x38
 8006fdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fde:	e0ca      	b.n	8007176 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	da18      	bge.n	8007018 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	3304      	adds	r3, #4
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	61fb      	str	r3, [r7, #28]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700e:	6850      	ldr	r0, [r2, #4]
 8007010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007012:	6892      	ldr	r2, [r2, #8]
 8007014:	4611      	mov	r1, r2
 8007016:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f2c0 80aa 	blt.w	8007174 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe f9f5 	bl	8005420 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007036:	463b      	mov	r3, r7
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff ff6b 	bl	8006f14 <prvSampleTimeNow>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b09      	cmp	r3, #9
 8007044:	f200 8097 	bhi.w	8007176 <prvProcessReceivedCommands+0x19e>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <prvProcessReceivedCommands+0x78>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007079 	.word	0x08007079
 8007054:	08007079 	.word	0x08007079
 8007058:	08007079 	.word	0x08007079
 800705c:	080070ed 	.word	0x080070ed
 8007060:	08007101 	.word	0x08007101
 8007064:	0800714b 	.word	0x0800714b
 8007068:	08007079 	.word	0x08007079
 800706c:	08007079 	.word	0x08007079
 8007070:	080070ed 	.word	0x080070ed
 8007074:	08007101 	.word	0x08007101
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800707e:	f043 0301 	orr.w	r3, r3, #1
 8007082:	b2da      	uxtb	r2, r3
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	18d1      	adds	r1, r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007098:	f7ff ff5c 	bl	8006f54 <prvInsertTimerInActiveList>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d069      	beq.n	8007176 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d05e      	beq.n	8007176 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	441a      	add	r2, r3
 80070c0:	2300      	movs	r3, #0
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	2300      	movs	r3, #0
 80070c6:	2100      	movs	r1, #0
 80070c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ca:	f7ff fe05 	bl	8006cd8 <xTimerGenericCommand>
 80070ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d14f      	bne.n	8007176 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	61bb      	str	r3, [r7, #24]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80070fe:	e03a      	b.n	8007176 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	617b      	str	r3, [r7, #20]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	18d1      	adds	r1, r2, r3
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007144:	f7ff ff06 	bl	8006f54 <prvInsertTimerInActiveList>
					break;
 8007148:	e015      	b.n	8007176 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715a:	f000 fbe1 	bl	8007920 <vPortFree>
 800715e:	e00a      	b.n	8007176 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	b2da      	uxtb	r2, r3
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007172:	e000      	b.n	8007176 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007174:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007176:	4b08      	ldr	r3, [pc, #32]	; (8007198 <prvProcessReceivedCommands+0x1c0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	1d39      	adds	r1, r7, #4
 800717c:	2200      	movs	r2, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fc16 	bl	80059b0 <xQueueReceive>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	f47f af2a 	bne.w	8006fe0 <prvProcessReceivedCommands+0x8>
	}
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	3730      	adds	r7, #48	; 0x30
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000c18 	.word	0x20000c18

0800719c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071a2:	e048      	b.n	8007236 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071a4:	4b2d      	ldr	r3, [pc, #180]	; (800725c <prvSwitchTimerLists+0xc0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ae:	4b2b      	ldr	r3, [pc, #172]	; (800725c <prvSwitchTimerLists+0xc0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe f92f 	bl	8005420 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02e      	beq.n	8007236 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4413      	add	r3, r2
 80071e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d90e      	bls.n	8007208 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071f6:	4b19      	ldr	r3, [pc, #100]	; (800725c <prvSwitchTimerLists+0xc0>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f7fe f8d4 	bl	80053ae <vListInsert>
 8007206:	e016      	b.n	8007236 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007208:	2300      	movs	r3, #0
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	2300      	movs	r3, #0
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	2100      	movs	r1, #0
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7ff fd60 	bl	8006cd8 <xTimerGenericCommand>
 8007218:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	603b      	str	r3, [r7, #0]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <prvSwitchTimerLists+0xc0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1b1      	bne.n	80071a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <prvSwitchTimerLists+0xc0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007246:	4b06      	ldr	r3, [pc, #24]	; (8007260 <prvSwitchTimerLists+0xc4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a04      	ldr	r2, [pc, #16]	; (800725c <prvSwitchTimerLists+0xc0>)
 800724c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800724e:	4a04      	ldr	r2, [pc, #16]	; (8007260 <prvSwitchTimerLists+0xc4>)
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	6013      	str	r3, [r2, #0]
}
 8007254:	bf00      	nop
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20000c10 	.word	0x20000c10
 8007260:	20000c14 	.word	0x20000c14

08007264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800726a:	f000 f96b 	bl	8007544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800726e:	4b15      	ldr	r3, [pc, #84]	; (80072c4 <prvCheckForValidListAndQueue+0x60>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d120      	bne.n	80072b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007276:	4814      	ldr	r0, [pc, #80]	; (80072c8 <prvCheckForValidListAndQueue+0x64>)
 8007278:	f7fe f848 	bl	800530c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800727c:	4813      	ldr	r0, [pc, #76]	; (80072cc <prvCheckForValidListAndQueue+0x68>)
 800727e:	f7fe f845 	bl	800530c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007282:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <prvCheckForValidListAndQueue+0x6c>)
 8007284:	4a10      	ldr	r2, [pc, #64]	; (80072c8 <prvCheckForValidListAndQueue+0x64>)
 8007286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007288:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <prvCheckForValidListAndQueue+0x70>)
 800728a:	4a10      	ldr	r2, [pc, #64]	; (80072cc <prvCheckForValidListAndQueue+0x68>)
 800728c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800728e:	2300      	movs	r3, #0
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <prvCheckForValidListAndQueue+0x74>)
 8007294:	4a11      	ldr	r2, [pc, #68]	; (80072dc <prvCheckForValidListAndQueue+0x78>)
 8007296:	2110      	movs	r1, #16
 8007298:	200a      	movs	r0, #10
 800729a:	f7fe f953 	bl	8005544 <xQueueGenericCreateStatic>
 800729e:	4603      	mov	r3, r0
 80072a0:	4a08      	ldr	r2, [pc, #32]	; (80072c4 <prvCheckForValidListAndQueue+0x60>)
 80072a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <prvCheckForValidListAndQueue+0x60>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <prvCheckForValidListAndQueue+0x60>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	490b      	ldr	r1, [pc, #44]	; (80072e0 <prvCheckForValidListAndQueue+0x7c>)
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fd6c 	bl	8005d90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072b8:	f000 f974 	bl	80075a4 <vPortExitCritical>
}
 80072bc:	bf00      	nop
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000c18 	.word	0x20000c18
 80072c8:	20000be8 	.word	0x20000be8
 80072cc:	20000bfc 	.word	0x20000bfc
 80072d0:	20000c10 	.word	0x20000c10
 80072d4:	20000c14 	.word	0x20000c14
 80072d8:	20000cc4 	.word	0x20000cc4
 80072dc:	20000c24 	.word	0x20000c24
 80072e0:	08007c04 	.word	0x08007c04

080072e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3b04      	subs	r3, #4
 80072f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3b04      	subs	r3, #4
 8007302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f023 0201 	bic.w	r2, r3, #1
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3b04      	subs	r3, #4
 8007312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007314:	4a0c      	ldr	r2, [pc, #48]	; (8007348 <pxPortInitialiseStack+0x64>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3b14      	subs	r3, #20
 800731e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3b04      	subs	r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f06f 0202 	mvn.w	r2, #2
 8007332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3b20      	subs	r3, #32
 8007338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800733a:	68fb      	ldr	r3, [r7, #12]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	0800734d 	.word	0x0800734d

0800734c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007356:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <prvTaskExitError+0x54>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d00a      	beq.n	8007376 <prvTaskExitError+0x2a>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	60fb      	str	r3, [r7, #12]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <prvTaskExitError+0x28>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	60bb      	str	r3, [r7, #8]
}
 8007388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800738a:	bf00      	nop
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0fc      	beq.n	800738c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007392:	bf00      	nop
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	2000000c 	.word	0x2000000c
	...

080073b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <pxCurrentTCBConst2>)
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	6808      	ldr	r0, [r1, #0]
 80073b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ba:	f380 8809 	msr	PSP, r0
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8811 	msr	BASEPRI, r0
 80073ca:	4770      	bx	lr
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst2>:
 80073d0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073d8:	4808      	ldr	r0, [pc, #32]	; (80073fc <prvPortStartFirstTask+0x24>)
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f380 8808 	msr	MSP, r0
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8814 	msr	CONTROL, r0
 80073ea:	b662      	cpsie	i
 80073ec:	b661      	cpsie	f
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	df00      	svc	0
 80073f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073fa:	bf00      	nop
 80073fc:	e000ed08 	.word	0xe000ed08

08007400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007406:	4b46      	ldr	r3, [pc, #280]	; (8007520 <xPortStartScheduler+0x120>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a46      	ldr	r2, [pc, #280]	; (8007524 <xPortStartScheduler+0x124>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d10a      	bne.n	8007426 <xPortStartScheduler+0x26>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007426:	4b3e      	ldr	r3, [pc, #248]	; (8007520 <xPortStartScheduler+0x120>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a3f      	ldr	r2, [pc, #252]	; (8007528 <xPortStartScheduler+0x128>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10a      	bne.n	8007446 <xPortStartScheduler+0x46>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007446:	4b39      	ldr	r3, [pc, #228]	; (800752c <xPortStartScheduler+0x12c>)
 8007448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	22ff      	movs	r2, #255	; 0xff
 8007456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007468:	b2da      	uxtb	r2, r3
 800746a:	4b31      	ldr	r3, [pc, #196]	; (8007530 <xPortStartScheduler+0x130>)
 800746c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800746e:	4b31      	ldr	r3, [pc, #196]	; (8007534 <xPortStartScheduler+0x134>)
 8007470:	2207      	movs	r2, #7
 8007472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007474:	e009      	b.n	800748a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007476:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <xPortStartScheduler+0x134>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3b01      	subs	r3, #1
 800747c:	4a2d      	ldr	r2, [pc, #180]	; (8007534 <xPortStartScheduler+0x134>)
 800747e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d0ef      	beq.n	8007476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007496:	4b27      	ldr	r3, [pc, #156]	; (8007534 <xPortStartScheduler+0x134>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1c3 0307 	rsb	r3, r3, #7
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d00a      	beq.n	80074b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074b8:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <xPortStartScheduler+0x134>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <xPortStartScheduler+0x134>)
 80074c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074c2:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <xPortStartScheduler+0x134>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074ca:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <xPortStartScheduler+0x134>)
 80074cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074d6:	4b18      	ldr	r3, [pc, #96]	; (8007538 <xPortStartScheduler+0x138>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <xPortStartScheduler+0x138>)
 80074dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <xPortStartScheduler+0x138>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a14      	ldr	r2, [pc, #80]	; (8007538 <xPortStartScheduler+0x138>)
 80074e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074ee:	f000 f8dd 	bl	80076ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <xPortStartScheduler+0x13c>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074f8:	f000 f8fc 	bl	80076f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <xPortStartScheduler+0x140>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0f      	ldr	r2, [pc, #60]	; (8007540 <xPortStartScheduler+0x140>)
 8007502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007508:	f7ff ff66 	bl	80073d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800750c:	f7ff f850 	bl	80065b0 <vTaskSwitchContext>
	prvTaskExitError();
 8007510:	f7ff ff1c 	bl	800734c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	e000ed00 	.word	0xe000ed00
 8007524:	410fc271 	.word	0x410fc271
 8007528:	410fc270 	.word	0x410fc270
 800752c:	e000e400 	.word	0xe000e400
 8007530:	20000d14 	.word	0x20000d14
 8007534:	20000d18 	.word	0x20000d18
 8007538:	e000ed20 	.word	0xe000ed20
 800753c:	2000000c 	.word	0x2000000c
 8007540:	e000ef34 	.word	0xe000ef34

08007544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	607b      	str	r3, [r7, #4]
}
 800755c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <vPortEnterCritical+0x58>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	4a0d      	ldr	r2, [pc, #52]	; (800759c <vPortEnterCritical+0x58>)
 8007566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <vPortEnterCritical+0x58>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d10f      	bne.n	8007590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007570:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <vPortEnterCritical+0x5c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <vPortEnterCritical+0x4c>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	603b      	str	r3, [r7, #0]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vPortEnterCritical+0x4a>
	}
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	2000000c 	.word	0x2000000c
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <vPortExitCritical+0x50>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <vPortExitCritical+0x24>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	607b      	str	r3, [r7, #4]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075c8:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <vPortExitCritical+0x50>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <vPortExitCritical+0x50>)
 80075d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <vPortExitCritical+0x50>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <vPortExitCritical+0x42>
 80075da:	2300      	movs	r3, #0
 80075dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f383 8811 	msr	BASEPRI, r3
}
 80075e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	2000000c 	.word	0x2000000c
	...

08007600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007600:	f3ef 8009 	mrs	r0, PSP
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4b15      	ldr	r3, [pc, #84]	; (8007660 <pxCurrentTCBConst>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	f01e 0f10 	tst.w	lr, #16
 8007610:	bf08      	it	eq
 8007612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	6010      	str	r0, [r2, #0]
 800761c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007624:	f380 8811 	msr	BASEPRI, r0
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f7fe ffbe 	bl	80065b0 <vTaskSwitchContext>
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f380 8811 	msr	BASEPRI, r0
 800763c:	bc09      	pop	{r0, r3}
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	6808      	ldr	r0, [r1, #0]
 8007642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007646:	f01e 0f10 	tst.w	lr, #16
 800764a:	bf08      	it	eq
 800764c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007650:	f380 8809 	msr	PSP, r0
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w

08007660 <pxCurrentTCBConst>:
 8007660:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop

08007668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007682:	f7fe fedb 	bl	800643c <xTaskIncrementTick>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <xPortSysTickHandler+0x40>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	f383 8811 	msr	BASEPRI, r3
}
 800769e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076b0:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <vPortSetupTimerInterrupt+0x34>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <vPortSetupTimerInterrupt+0x38>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <vPortSetupTimerInterrupt+0x3c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <vPortSetupTimerInterrupt+0x40>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <vPortSetupTimerInterrupt+0x44>)
 80076ca:	3b01      	subs	r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ce:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <vPortSetupTimerInterrupt+0x34>)
 80076d0:	2207      	movs	r2, #7
 80076d2:	601a      	str	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	e000e010 	.word	0xe000e010
 80076e4:	e000e018 	.word	0xe000e018
 80076e8:	20000000 	.word	0x20000000
 80076ec:	10624dd3 	.word	0x10624dd3
 80076f0:	e000e014 	.word	0xe000e014

080076f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007704 <vPortEnableVFP+0x10>
 80076f8:	6801      	ldr	r1, [r0, #0]
 80076fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076fe:	6001      	str	r1, [r0, #0]
 8007700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007702:	bf00      	nop
 8007704:	e000ed88 	.word	0xe000ed88

08007708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800770e:	f3ef 8305 	mrs	r3, IPSR
 8007712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b0f      	cmp	r3, #15
 8007718:	d914      	bls.n	8007744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800771a:	4a17      	ldr	r2, [pc, #92]	; (8007778 <vPortValidateInterruptPriority+0x70>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007724:	4b15      	ldr	r3, [pc, #84]	; (800777c <vPortValidateInterruptPriority+0x74>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	7afa      	ldrb	r2, [r7, #11]
 800772a:	429a      	cmp	r2, r3
 800772c:	d20a      	bcs.n	8007744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007744:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <vPortValidateInterruptPriority+0x78>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800774c:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <vPortValidateInterruptPriority+0x7c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d90a      	bls.n	800776a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	603b      	str	r3, [r7, #0]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <vPortValidateInterruptPriority+0x60>
	}
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	e000e3f0 	.word	0xe000e3f0
 800777c:	20000d14 	.word	0x20000d14
 8007780:	e000ed0c 	.word	0xe000ed0c
 8007784:	20000d18 	.word	0x20000d18

08007788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	; 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007794:	f7fe fd96 	bl	80062c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007798:	4b5b      	ldr	r3, [pc, #364]	; (8007908 <pvPortMalloc+0x180>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077a0:	f000 f920 	bl	80079e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077a4:	4b59      	ldr	r3, [pc, #356]	; (800790c <pvPortMalloc+0x184>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 8093 	bne.w	80078d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01d      	beq.n	80077f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077b8:	2208      	movs	r2, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d014      	beq.n	80077f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	3308      	adds	r3, #8
 80077d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <pvPortMalloc+0x6c>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	617b      	str	r3, [r7, #20]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d06e      	beq.n	80078d8 <pvPortMalloc+0x150>
 80077fa:	4b45      	ldr	r3, [pc, #276]	; (8007910 <pvPortMalloc+0x188>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d869      	bhi.n	80078d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007804:	4b43      	ldr	r3, [pc, #268]	; (8007914 <pvPortMalloc+0x18c>)
 8007806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007808:	4b42      	ldr	r3, [pc, #264]	; (8007914 <pvPortMalloc+0x18c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800780e:	e004      	b.n	800781a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d903      	bls.n	800782c <pvPortMalloc+0xa4>
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f1      	bne.n	8007810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800782c:	4b36      	ldr	r3, [pc, #216]	; (8007908 <pvPortMalloc+0x180>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007832:	429a      	cmp	r2, r3
 8007834:	d050      	beq.n	80078d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2208      	movs	r2, #8
 800783c:	4413      	add	r3, r2
 800783e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	2308      	movs	r3, #8
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	429a      	cmp	r2, r3
 8007856:	d91f      	bls.n	8007898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <pvPortMalloc+0xf8>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	613b      	str	r3, [r7, #16]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007892:	69b8      	ldr	r0, [r7, #24]
 8007894:	f000 f908 	bl	8007aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007898:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <pvPortMalloc+0x188>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <pvPortMalloc+0x188>)
 80078a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <pvPortMalloc+0x188>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <pvPortMalloc+0x190>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d203      	bcs.n	80078ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078b2:	4b17      	ldr	r3, [pc, #92]	; (8007910 <pvPortMalloc+0x188>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a18      	ldr	r2, [pc, #96]	; (8007918 <pvPortMalloc+0x190>)
 80078b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <pvPortMalloc+0x184>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <pvPortMalloc+0x194>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a11      	ldr	r2, [pc, #68]	; (800791c <pvPortMalloc+0x194>)
 80078d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078d8:	f7fe fd02 	bl	80062e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <pvPortMalloc+0x174>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60fb      	str	r3, [r7, #12]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <pvPortMalloc+0x172>
	return pvReturn;
 80078fc:	69fb      	ldr	r3, [r7, #28]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3728      	adds	r7, #40	; 0x28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20004924 	.word	0x20004924
 800790c:	20004938 	.word	0x20004938
 8007910:	20004928 	.word	0x20004928
 8007914:	2000491c 	.word	0x2000491c
 8007918:	2000492c 	.word	0x2000492c
 800791c:	20004930 	.word	0x20004930

08007920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04d      	beq.n	80079ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007932:	2308      	movs	r3, #8
 8007934:	425b      	negs	r3, r3
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <vPortFree+0xb8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4013      	ands	r3, r2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <vPortFree+0x44>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60fb      	str	r3, [r7, #12]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <vPortFree+0x62>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	60bb      	str	r3, [r7, #8]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <vPortFree+0xb8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4013      	ands	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01e      	beq.n	80079ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11a      	bne.n	80079ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <vPortFree+0xb8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	401a      	ands	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079a8:	f7fe fc8c 	bl	80062c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <vPortFree+0xbc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4413      	add	r3, r2
 80079b6:	4a09      	ldr	r2, [pc, #36]	; (80079dc <vPortFree+0xbc>)
 80079b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079ba:	6938      	ldr	r0, [r7, #16]
 80079bc:	f000 f874 	bl	8007aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <vPortFree+0xc0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	4a06      	ldr	r2, [pc, #24]	; (80079e0 <vPortFree+0xc0>)
 80079c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079ca:	f7fe fc89 	bl	80062e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079ce:	bf00      	nop
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20004938 	.word	0x20004938
 80079dc:	20004928 	.word	0x20004928
 80079e0:	20004934 	.word	0x20004934

080079e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80079ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079f0:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <prvHeapInit+0xac>)
 80079f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00c      	beq.n	8007a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3307      	adds	r3, #7
 8007a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <prvHeapInit+0xac>)
 8007a14:	4413      	add	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <prvHeapInit+0xb0>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a22:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <prvHeapInit+0xb0>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a30:	2208      	movs	r2, #8
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0307 	bic.w	r3, r3, #7
 8007a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <prvHeapInit+0xb4>)
 8007a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <prvHeapInit+0xb4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <prvHeapInit+0xb4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a64:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <prvHeapInit+0xb4>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	; (8007a9c <prvHeapInit+0xb8>)
 8007a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <prvHeapInit+0xbc>)
 8007a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <prvHeapInit+0xc0>)
 8007a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	20000d1c 	.word	0x20000d1c
 8007a94:	2000491c 	.word	0x2000491c
 8007a98:	20004924 	.word	0x20004924
 8007a9c:	2000492c 	.word	0x2000492c
 8007aa0:	20004928 	.word	0x20004928
 8007aa4:	20004938 	.word	0x20004938

08007aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ab0:	4b28      	ldr	r3, [pc, #160]	; (8007b54 <prvInsertBlockIntoFreeList+0xac>)
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e002      	b.n	8007abc <prvInsertBlockIntoFreeList+0x14>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d8f7      	bhi.n	8007ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d108      	bne.n	8007aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	441a      	add	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d118      	bne.n	8007b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <prvInsertBlockIntoFreeList+0xb0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d00d      	beq.n	8007b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	441a      	add	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e008      	b.n	8007b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvInsertBlockIntoFreeList+0xb0>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e003      	b.n	8007b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d002      	beq.n	8007b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000491c 	.word	0x2000491c
 8007b58:	20004924 	.word	0x20004924

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	; (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	; (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2600      	movs	r6, #0
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	; (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f000 f82e 	bl	8007bd0 <_init>
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2600      	movs	r6, #0
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08007c58 	.word	0x08007c58
 8007b98:	08007c58 	.word	0x08007c58
 8007b9c:	08007c58 	.word	0x08007c58
 8007ba0:	08007c5c 	.word	0x08007c5c

08007ba4 <memcpy>:
 8007ba4:	440a      	add	r2, r1
 8007ba6:	4291      	cmp	r1, r2
 8007ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bac:	d100      	bne.n	8007bb0 <memcpy+0xc>
 8007bae:	4770      	bx	lr
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	d1f9      	bne.n	8007bb2 <memcpy+0xe>
 8007bbe:	bd10      	pop	{r4, pc}

08007bc0 <memset>:
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d100      	bne.n	8007bca <memset+0xa>
 8007bc8:	4770      	bx	lr
 8007bca:	f803 1b01 	strb.w	r1, [r3], #1
 8007bce:	e7f9      	b.n	8007bc4 <memset+0x4>

08007bd0 <_init>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	bf00      	nop
 8007bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd6:	bc08      	pop	{r3}
 8007bd8:	469e      	mov	lr, r3
 8007bda:	4770      	bx	lr

08007bdc <_fini>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr
